
// Copyright (c) 2010-2015 niXman (i dot nixman dog gmail dot com). All
// rights reserved.
//
// This file is part of YAS(https://github.com/niXman/yas) project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef _yas__detail__io__text_streams_hpp
#define _yas__detail__io__text_streams_hpp

#include <yas/detail/config/config.hpp>

#include <yas/detail/io/io_exceptions.hpp>
#include <yas/detail/type_traits/type_traits.hpp>

#include <limits>

namespace yas {
namespace detail {

/***************************************************************************/

#define YAS_READ_BY_CHAR(buf, cnt) \
	for ( char *cur = &buf[0], *end = &buf[sizeof(buf)-1]; cur != end; ++cur ) { \
		*cur = getch(); \
		if ( *cur == space_sep || *cur == EOF) { \
			if ( *cur == space_sep ) \
				ungetch(*cur); \
			*cur = 0; \
			break; \
		} else { \
			++cnt; \
		} \
	}

/***************************************************************************/

template<typename IS, typename Trait>
struct text_istream {
	text_istream(IS &is)
		:is(is)
		,unch(EOF)
	{}

	char getch() {
		char res = EOF;
		if ( unch != EOF ) {
			res = unch;
			unch = EOF;
			return res;
		}
		is.read(&res, sizeof(res));
		return res;
	}
	void ungetch(char c) { unch = c; }

	// for arrays
	void read(void *ptr, std::size_t size) {
		char *sptr = ((char*)ptr);
		if ( unch != EOF ) {
			*sptr++ = unch;
			unch = EOF;
			--size;
		}
		if ( size == 0 ) return;
		YAS_THROW_ON_READ_ERROR(size, !=, is.read(sptr, size));
	}

	// for chars only
	template<typename T>
	void read(T &v, YAS_ENABLE_IF_IS_ANY_OF(T, char, signed char, unsigned char)) {
		YAS_THROW_ON_READ_ERROR(sizeof(v), !=, is.read(&v, sizeof(v)));
	}

	// for bools only
	template<typename T>
	void read(T &v, YAS_ENABLE_IF_IS_ANY_OF(T, bool)) {
		const char ch = getch();
		if ( ch == EOF ) return;
		v = (ch == '1' ? true : false);
	}

	// for signed 16/32/64 bits
	template<typename T>
	void read(T &v, YAS_ENABLE_IF_IS_ANY_OF(T, std::int16_t, std::int32_t, std::int64_t)) {
		char buf[sizeof(T)*4] = "\0";
		std::size_t cnt = 0;
		YAS_READ_BY_CHAR(buf, cnt)
		Trait::atoi(v, buf, cnt);
	}

	// for unsigned 16/32/64 bits
	template<typename T>
	void read(T &v, YAS_ENABLE_IF_IS_ANY_OF(T, std::uint16_t, std::uint32_t, std::uint64_t)) {
		char buf[sizeof(T)*4] = "\0";
		std::size_t cnt = 0;
		YAS_READ_BY_CHAR(buf, cnt)
		Trait::atou(v, buf, cnt);
	}

	// for floats
	template<typename T>
	void read(T &v, YAS_ENABLE_IF_IS_ANY_OF(T, float)) {
		char buf[std::numeric_limits<T>::max_exponent10+20] = "\0";
		std::size_t cnt = 0;
		YAS_READ_BY_CHAR(buf, cnt)
		Trait::atof(v, buf, cnt);
	}

	// for doubles
	template<typename T>
	void read(T &v, YAS_ENABLE_IF_IS_ANY_OF(T, double)) {
		char buf[std::numeric_limits<T>::max_exponent10+20] = "\0";
		std::size_t cnt = 0;
		YAS_READ_BY_CHAR(buf, cnt)
		Trait::atod(v, buf, cnt);
	}

private:
	IS &is;
	char unch;
};

#undef YAS_READ_BY_CHAR

template<typename OS, typename Trait>
struct text_ostream {
	text_ostream(OS &os)
		:os(os)
	{}

	// for arrays
	void write(const void *ptr, std::size_t size) {
		YAS_THROW_ON_WRITE_ERROR(size, !=, os.write(ptr, size));
	}

	// for chars only
	template<typename T>
	void write(const T &v, YAS_ENABLE_IF_IS_ANY_OF(T, char, signed char, unsigned char)) {
		YAS_THROW_ON_WRITE_ERROR(sizeof(v), !=, os.write(&v, sizeof(v)));
	}

	// for bools only
	template<typename T>
	void write(const T &v, YAS_ENABLE_IF_IS_ANY_OF(T, bool)) {
		const char c = v ? '1' : '0';
		YAS_THROW_ON_WRITE_ERROR(sizeof(c), !=, os.write(&c, sizeof(v)));
	}

	// for signed 16/32/64 bits
	template<typename T>
	void write(const T &v, YAS_ENABLE_IF_IS_ANY_OF(T, std::int16_t, std::int32_t, std::int64_t)) {
		char buf[sizeof(T)*4] = "\0";
		std::size_t len = 0;
		Trait::itoa(buf, sizeof(buf), len, v);
		YAS_THROW_ON_WRITE_ERROR(len, !=, os.write(buf, len));
	}

	// for unsigned 16/32/64 bits
	template<typename T>
	void write(const T &v, YAS_ENABLE_IF_IS_ANY_OF(T, std::uint16_t, std::uint32_t, std::uint64_t)) {
		char buf[sizeof(T)*4] = "\0";
		std::size_t len = 0;
		Trait::utoa(buf, sizeof(buf), len, v);
		YAS_THROW_ON_WRITE_ERROR(len, !=, os.write(buf, len));
	}

	// for floats
	template<typename T>
	void write(const T &v, YAS_ENABLE_IF_IS_ANY_OF(T, float)) {
		char buf[std::numeric_limits<T>::max_exponent10 + 20] = "\0";
		std::size_t len = 0;
		Trait::ftoa(buf, sizeof(buf), len, v);
		YAS_THROW_ON_WRITE_ERROR(len, !=, os.write(buf, len));
	}

	// for doubles
	template<typename T>
	void write(const T &v, YAS_ENABLE_IF_IS_ANY_OF(T, double)) {
		char buf[std::numeric_limits<T>::max_exponent10 + 20] = "\0";
		std::size_t len = 0;
		Trait::dtoa(buf, sizeof(buf), len, v);
		YAS_THROW_ON_WRITE_ERROR(len, !=, os.write(buf, len));
	}

private:
	OS &os;
};

/***************************************************************************/

} // ns detail
} // ns yas

#endif // _yas__detail__io__text_streams_hpp
