include "Annotation/Collection.k3"

/*
 * General mapreduce worker
 */

declare wordsList :            mut collection{ word : string } @ { Collection } = { |word : string| "first", "first", "first", "first" |} @ { Collection }
//declare wordsList :            mut collection{ word: string } @ { Collection }  
declare reducer :              immut address = 127.0.0.1:40000
declare wordsMap :             mut collection{ existingWord : string, count : int } @ { Collection }
declare existing :             mut bool = false
declare resultMap :            mut collection { finalWord : string, count : int } @ { Collection }
declare existingReduce :       mut bool = false
// fields for debugging
declare checkResult :          mut int = 0
declare checkResult_reducer :  mut int = 0
declare checkWord_reducer :    mut string = "test"

trigger reduce : (collection{ existingWord : string, count : int } @ { Collection }) = \receivedWordMap -> (

  receivedWordMap.iterate (\wordTuple -> (

      checkResult_reducer = wordTuple.count;  
      resultMap.iterate (\resultTuple ->         
        if wordTuple.existingWord == resultTuple.finalWord
  	    then ( resultMap.insert{ finalWord : wordTuple.existingWord, count : resultTuple.count + wordTuple.count };
		       resultMap.delete{ finalWord : wordTuple.existingWord, count : resultTuple.count };
  		       existingReduce = true )
  	    else ()	  	   
  	  );	
  	  if existingReduce == false
  	  then resultMap.insert{ finalWord : wordTuple.existingWord, count : wordTuple.count }            
	  else ()
	  
    )
	
  );
  	
  resultMap.iterate (\resultTuple -> (
      checkWord_reducer = resultTuple.finalWord     
    )
  )
)

trigger count : () = \_ -> (

  wordsList.iterate (\wordRecord -> (
      
      wordsMap.iterate (\wordTuple -> (
          
          if wordRecord.word == wordTuple.existingWord
  	      then (wordsMap.insert{ existingWord : wordRecord.word, count : wordTuple.count + 1 };
		        wordsMap.delete{ existingWord : wordRecord.word, count : wordTuple.count };
		        existing = true)
  	      else ()
	    )		  
	  );
	  	
  	  if existing == false
  	  then wordsMap.insert{ existingWord : wordRecord.word, count : 1 }
  	  else ()
	)
  );
	
  /*
  wordsMap.iterate (\testTuple -> (
      checkResult = testTuple.count
    )
  )
  */
  
  (reduce, reducer) <- wordsMap 
  
)

source mapper : () = value ()

feed mapper |> count

