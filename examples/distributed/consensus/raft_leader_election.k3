// Implementation of Raft Consensus Algorithm
//
// NOTE: This version ONLY implements leader election and data replication
// 
// To use, define me for each peer, define peer list and set role to 'init'
//  then launch with logging. Time is set for a long delay to slow down
//  the consensus and force multiple elections. Eventually, all peers will
//  converge and replicate data (denoted by the 'data' global)

include "Annotation/Collection.k3"
include "Annotation/Map.k3"
include "Core/Builtins.k3"

declare nullAddr    : immut address = 127.0.0.1:10000
declare waittime    : immut int = 3000
declare timeout     : mut int = 0
declare numServers  : mut int = 3

// Persistent State
declare state 		  : mut int = 0 
declare currentTerm : mut int = 0
declare votedFor    : mut address = nullAddr
declare leader      : mut address = nullAddr

declare votes       : mut int = 0

// Log
declare txlog       : collection {index : int, term : int, entry : int} @ {Collection}
declare data        : mut int = 0     // THE CURRENT DATA 

  
trigger requestVote : (address, int) = \vote -> (
  print "REQUEST VOTE"; print "\\n";
  bind vote as (candidateId, term) in
    if (term > currentTerm) or (term == currentTerm and votedFor == nullAddr)
      // Accept the request to vote
      then  (
        votedFor = candidateId;
        currentTerm = term;
        state = 0;
        print "Granting my vote"; print "\\n";
        (voteGranted, candidateId) <- (me, term)
      )
    else ()
)
  
trigger voteGranted : (address, int) = \vote -> (
  print "RECEIVED A VOTE\\n";
  if state != 1 then ()
  else
    bind vote as (voterId, term) in (
      (if term == currentTerm
        then votes = votes + 1
        else ());
      print "GOT A VOTE --> #"; print (itos votes); print " votes\\n";
      if (votes > ((floor (numServers / 2.0)) + 1))
        then (
          state = 2;
          print "I AM THE LEADER \\n";
          peers.iterate (\p -> (appendEntry, p.addr) <- (me, currentTerm, {index: -1, term: -1, entry: -1}));
          timeout = ((now_int ())+ waittime + (random waittime))
        )
        else ()
    )
)


trigger appendEntry : (address, int, {index: int, term: int, entry: int}) = \entry -> (
  print "NEW ENTRY"; print "\\n";
  bind entry as (leaderId, term, newentry) in (
    if term >= currentTerm and leaderId != me
      then (
        state = 0;
        currentTerm = term;
        votedFor = nullAddr;
        leader = leaderId;
        (if newentry.index > 0 then  (
          txlog.insert(newentry);
          data = newentry.entry
        ) else ());
        timeout = ((now_int ()) + waittime + (random waittime))
      )
      else ()
  )
)

trigger clientRequest : int = \entry ->  (
  print "NEW CLIENT REQUEST\\n";
  let nextIndex = (txlog.size ()) in 
  let newentry = {index: nextIndex, term: currentTerm, entry: entry} in (
    txlog.insert (newentry);
    data = entry;
    peers.iterate (\p -> (appendEntry, p.addr) <- (me, currentTerm, newentry))
  )
)
  
trigger startUp : int = \t ->  (
  timeout = ((now_int ())+ t + waittime + (random waittime));
  (raft, me) <- ()
)
  
trigger raft : () = \_ -> (
  let ts = now_int () in
  (if ts > timeout then (
    print "TIMEOUT TRIGGERED \\n";
    
    // Initiate Election
    if state == 0 or state == 1then (
      state = 1;
      currentTerm = currentTerm + 1;
      votedFor = me;
      votes = 1;
      peers.iterate (\p -> (requestVote, p.addr) <- (me, currentTerm));
      timeout = (ts + waittime + (random waittime))
    )
    
    // LEADER STATE
    else  (
      // Simulate a client request
      (clientRequest, me) <-  (data + (random 10));
      timeout = (ts + (waittime/2) + (random (waittime/2)))
    )
  )
  else ());
  sleep (1000);
  (raft, me) <- () 
)


		

source init : int = value 2000
feed init |> startUp