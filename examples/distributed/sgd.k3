include "Annotation/Collection.k3"
include "Core/CppBuiltins.k3"
include "Core/SeqVector.k3"

declare master: address = 127.0.0.1:40000
declare num_peers: mut int = 1
declare peers_ready: mut int = 0
declare iterations_remaining: mut int = 10
declare dimensionality: int = 2


declare start_ms: mut int
declare end_ms: mut int
declare elapsed_ms: mut int

// Hyperparameters
declare step_size: mut real = 0.1
declare lambda: mut real = 0.1

// Mast1
declare aggregates: mut {count: int, sum: collection {elem: real} @ { Collection }}

// All Nodes:
declare parameters: mut collection {elem: real} @ { Collection }
declare data: collection { elem: collection {elem: real} @ { Collection }, label: real } @ { Collection }


// Loader
declare LoaderVectorLabel : string -> collection { elem: collection {elem: real} @ { Collection }, label: real } @ { Collection } -> ()

// SVM Loss at 1 point.
declare svm_loss : collection {elem: real} @ { Collection } -> real -> real = \x -> \y -> (
  let q = 1 - (y * (dot parameters x))
  in (lambda * (dot parameters parameters) + (if q < 0 then 0 else q))
)

// SVM Loss averaged over data
declare svm_loss_avg : () -> real = \_ -> (
let stats =
  data.fold (\acc -> \d -> {count: acc.count +1, sum: acc.sum + (svm_loss d.elem d.label)}) {count:0, sum:0.0}
in stats.sum / stats.count
)

// SVM gradient at 1 point.
declare svm_gradient : collection {elem: real} @ { Collection } -> real -> collection {elem: real} @ { Collection } = \x -> \y -> (
  let flag = y * (dot parameters x)
  in
    if flag > 1
    then scalar_mult lambda parameters
    else vector_sub (scalar_mult lambda parameters) (scalar_mult y x)

)

// Compute the gradient at a single point.
// The gradient is a function of the current parameters, a global variable.
declare point_gradient: collection {elem: real} @ { Collection } -> real -> collection {elem: real} @ { Collection } = \point -> \label -> (
    svm_gradient point label
)

// Update parameters based on a single point
declare update_parameters: collection {elem: real} @ { Collection } -> real -> () = \point -> \label -> (
  let update = scalar_mult step_size (point_gradient point label) in
  parameters = vector_sub parameters update
)

// Print results
declare print_results : () -> () = \_ -> (
  end_ms = now ();
  elapsed_ms = end_ms - start_ms;
  printLine (itos elapsed_ms)
)

// Run SGD on local dataset.
// 0) Receive updated parameters from master
// 1) Update local parameters once per data point (randomly ordered/drawn)
// 2) Send local parameters to master for aggregation
trigger local_sgd : collection {elem: real} @ { Collection } = \new_params -> (
  (parameters = new_params);
  (data.iterate (\d -> update_parameters d.elem d.label));
  (aggregate, master) <- parameters
)

// Barrier: Stash local aggregates until all peers are finished. Then maximize.
trigger aggregate : collection {elem: real} @ { Collection } = \local_params -> (
  let new_sum = vector_add local_params (aggregates.sum) in
  let new_count = 1 + aggregates.count
  in (
    aggregates = {count: new_count, sum: new_sum};
    if new_count == num_peers
    then (maximize,master) <- ()
    else ()
  )
)

// Average local parameters from each peer, then start a new iteration.
trigger maximize : () = \_ -> (
  parameters = (scalar_mult (1.0 / aggregates.count) aggregates.sum);
  printLine "Loss:";
  printLine (rtos (svm_loss_avg ()));
  step_size = 0.95 * step_size;
  aggregates = {count:0, sum: (zero_vector dimensionality)};
  iterations_remaining = iterations_remaining - 1;
  if iterations_remaining == 0
  then (print_results (); peers.iterate (\p -> (shutdown, p.addr) <- ()))
  else peers.iterate (\p -> (local_sgd, p.addr) <- parameters)
)

// Randomly initialize parameters, and send them to each peer.
trigger start : () = \_ -> (
  aggregates = {count:0, sum: zero_vector dimensionality};
  start_ms = now ();
  parameters = zero_vector dimensionality;
  peers.iterate (\p -> (local_sgd, p.addr) <- parameters)
)

trigger ready : () = \_ -> (
  (peers_ready = peers_ready + 1);
  (if peers_ready == num_peers
   then (start, master) <- ()
   else ()
  )
)

trigger shutdown : () = \_ -> haltEngine ()

trigger load_all : () = \_ -> (
  LoaderVectorLabel "/Users/joshwheeler/foo.lvector" data;
  (ready, master) <- ()
)

source points : () = value ()
feed points |> load_all
