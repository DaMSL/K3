include "Annotation/Collection.k3"
include "Annotation/Map.k3"
include "Core/Builtins.k3"

@:CArgs 2
declare stringLoader: string -> collection {elem:string} @ { Seq } -> ()

declare dataFiles : collection {path: string} @ {Collection}

// Constants
declare master: address = 127.0.0.1:40000
declare x: mut int = 3

// Globals
declare peers_ready: mut int = 0
declare peers_finished: mut int = 0

// Time
declare start_ms : mut int = 0
declare end_ms : mut int = 0
declare elapsed_ms : mut int = 0


declare inputData : collection {elem:string} @ {Seq}

declare url_count : mut collection {key:string, value:int} @ {Map}

declare url_regex : mut collection {elem:string} @ {Collection}

declare cur_page : mut string = "NONE"

declare url_counts_partial :
  collection {sourcePage:string, destPage:string, count:int} @ {Collection} 

declare matcher : (string -> collection {elem: string} @ Collection) = (\s -> (regex_matcher "(?P<url>https?://[^\\\\s]+)") s)

declare get_line : string -> () = \line -> (
  let sp = splitString line " " in  
  ((if slice_string line 0 4 == "http" and sp.size () == 5 then
     cur_page = (sp.at 0).elem;
     url_count.iterate(\v ->
       url_counts_partial.insert
         {sourcePage:cur_page, destPage:v.key, count:v.value});
     // Empty url_count
     url_count = empty {key: string, value: int} @Map
   else ());
   ((url_regex = matcher line);
   url_regex.iterate (\r ->
     // lookup ignores value
     case url_count.lookup {key: r.elem, value: 0}  of
       {Some x -> url_count.insert {key:r.elem, value:x.value + 1} }
       {None   -> url_count.insert {key:r.elem, value:1}}
   )))
)

trigger local : () = \_ -> (
  inputData.iterate (\s -> get_line s.elem);
  url_count.iterate (\v ->
    url_counts_partial.insert {sourcePage:cur_page, destPage:v.key, count:v.value});
  let url_counts_total = url_counts_partial.groupBy
    (\v -> v.destPage)
    (\acc -> \v -> acc + v.count)
    0
  in
  (aggregate, master) <- url_counts_total
)

declare url_counts_agg : collection {key: string, value: int} @ {Map}
declare received : mut int = 0

trigger aggregate : collection {key: string, value: int} @ {Collection} = \newVals -> (
  newVals.iterate (\v ->
    // lookup ignores value
    case url_counts_agg.lookup {key: v.key, value: 0} of
      { Some x -> url_counts_agg.insert {key:v.key, value:v.value + x.value} }
      { None   -> url_counts_agg.insert v }
    );
  peers_finished = peers_finished + 1;
  if peers_finished == (peers.size ())
  then end_ms = now_int ();
       elapsed_ms = end_ms - start_ms;
       print (concat "Elapsed: " (itos elapsed_ms));
       print (concat "Num results: " (itos (url_counts_agg.size ())));
       peers.iterate (\p -> (shutdown, p.addr) <- ())
  else ()
)

trigger shutdown : () = \_ -> (
  haltEngine ()
)

// Signal to the master that a peer is ready.
// Once all peers are ready, the master will start the query.
trigger ready : () = \_ -> (
  peers_ready = peers_ready + 1;
  if peers_ready == (peers.size ())
  then start_ms = now_int (); peers.iterate (\p -> (local, p.addr) <- ())
  else ()
)

trigger load_all : () = \_ -> (
   dataFiles.iterate (\e -> stringLoader e.path inputData);
  ((ready, master) <- ())
)

source rows : () = value ()
feed rows |> load_all
