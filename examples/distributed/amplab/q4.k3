include "compact/AmplabBDB.k3"

@:CArgs 2
declare dataLoader: string -> collection {elem:string} @ { Seq } -> ()

// Timing
declare regex_time : mut int = 0
declare agg_time: mut int = 0

// Globals
declare input_data : collection {elem:string} @ {Seq}

declare url_count : mut collection {key:string, value:int} @ {Map}
declare url_regex : mut collection {elem:string} @ {Collection}
declare cur_page  : mut string = "NONE"
declare url_counts_partial :
  collection {sourcePage:string, destPage:string, count:int} @ {Collection}

declare url_counts_agg : collection {key: string, value: int} @ {Map}

// FIXME: cant declare this global function
//declare matcher : (string -> collection {elem: string} @ Collection) = regex_matcher "(?P<url>https?://[^\\\\s]+)"

declare get_line : string -> () = \line -> (
  (if slice_string line 0 4 == "http" and (countChar line " ") == 5 then
     cur_page = (takeUntil line " ");
     url_count.iterate(\v ->
       url_counts_partial.insert
         {sourcePage:cur_page, destPage:v.key, count:v.value});
     // Empty url_count
     url_count = empty {key: string, value: int} @Map
   else ());

   (url_regex = regex_matcher_q4 line)
     @OnProfile(f=[$ (\t -> regex_time = regex_time + t)]);

   url_regex.iterate (\r ->
     // lookup ignores value
     case url_count.lookup {key: r.elem, value: 0}  of
       {Some x -> url_count.insert {key:r.elem, value:x.value + 1} }
       {None   -> url_count.insert {key:r.elem, value:1}}
   )
)

trigger q4_local : () = \_ -> (
  // Apply udf to each line, piping results into url_counts_partial
  ((input_data.iterate (\s -> get_line s.elem))
    @Profile(lbl=[# iterate_get_line], tag=[$ "Input iterate time"]) );

  url_count.iterate (\v ->
    url_counts_partial.insert {sourcePage:cur_page, destPage:v.key, count:v.value});

  // Local groupBy
  (ignore
     (( url_counts_partial.groupBy (\v -> v.destPage)
                                   (\acc -> \v -> acc + v.count)
                                   0
     ) @Profile(lbl=[# url_counts_groupBy], tag=[$ "Url group-by time"])
     ) @SendPartitionByKey( dest_trg      = [$ aggregate]
                          , barrier_trg   = [$ peer_barrier]
                          , nodes         = [$ peers]
                          , send_extra_fn = [$ (\x -> x)]))
)

trigger aggregate : collection {key: string, value: int} @ {Collection} = \newVals -> (
  ( newVals.iterate (\v ->
      // lookup ignores value
      case url_counts_agg.lookup {key: v.key, value: 0} of
        { Some x -> url_counts_agg.insert {key:v.key, value:v.value + x.value} }
        { None   -> url_counts_agg.insert v }
      ) ) @OnProfile(f=[$ (\t -> agg_time = agg_time + t)])
 )

trigger peer_barrier : () = \_ -> (
  ( (() @:Result) @AmplabBenchmark
  ) @OnCounter(id=[# aggs_received], eq=[$ peers.size()], reset=[$ false], profile=[$ false])
)

trigger start : () = \_ -> (() @:Start) @AmplabBenchmark(
  queryTrigger       = [$ q4_local],
  loadExpr           = [$ dataFiles.iterate (\e -> dataLoader e.path input_data)],
  preLoadExpr        = [$ peers.iterate (\i -> peers_seq.insert i)],
  preReadyExpr       = [$ ()],
  finishArgT         = [: ()],
  preTestFinishExpr  = [$ (\_ -> ())],
  preFinishExpr      = [$ ( print ("Num results: " ++    (itos (url_counts_agg.size ())));
                            print ("Regex time: " ++     (itos regex_time));
                            print ("Final agg time: " ++ (itos agg_time)) )
                       ],
  preShutdownExpr    = [$ ()]
)

source rows : () = value ()
feed rows |> start
