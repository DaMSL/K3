include "Annotation/Collection.k3"
include "Annotation/Seq.k3"
include "Annotation/Map.k3"
include "Core/Builtins.k3"

declare master: address = 127.0.0.1:30001
declare peer_seq : collection {addr: address} @ {Seq}
declare peer_by_hash: string -> address = \s -> (
  let i = (hash s) % (peer_seq.size ()) in
  (peer_seq.at i).addr
)

declare peer_count: int = 0

declare start_ms : mut int
declare end_ms : mut int
declare elapsed_ms : mut int

typedef uv_record = {
    sourceIP: string,
    destURL: string,
    visitDate: string,
    adRevenue: real,
    userAgent: string,
    countryCode: string,
    languageCode: string,
    searchWord: string,
    duration: int
}

declare user_visits: collection uv_record @ { Collection }

typedef rankings_record = {
    pageURL: string,
    pageRank: int,
    avgDuration: int
}

typedef rk_map_record = {key: string, value: int}
//key: pageURL, value: pageRank
@:Pinned
declare rankingsMap : collection rk_map_record @ Map

declare empty_source_ip_to_aggs_C : collection  {key: string, value: {prSum: int, prCount: int, arSum: real}} @ Map
declare empty_aggs : {prSum: int, prCount: int, arSum: real}

typedef Source_ip_to_aggs = {key: string, value: {prSum: int, prCount: int, arSum: real}}

typedef Source_ip_to_aggs_C = collection  {key: string, value: {prSum: int, prCount: int, arSum: real}} @ Map

declare partial_aggs : collection {key: address, value: Source_ip_to_aggs_C} @ Map


declare merged_partials : Source_ip_to_aggs_C

declare date_lb : string = "1980-01-01"
declare date_ub : string = "1990-01-01"
declare valid_date : string -> bool = \i -> (i <= date_ub and i >= date_lb)

trigger q3_local : () = \_ -> (
  user_visits.iterate (\uv ->
    if (valid_date uv.visitDate)
    then (
      let ip = uv.sourceIP in
      let a = peer_by_hash ip in
      case partial_aggs.lookup {key: a, value: empty_source_ip_to_aggs_C} of
      { Some aggs ->
        case rankingsMap.lookup {key: ip, value: 0} of
        {Some r ->
          case (aggs.value.lookup {key: ip, value: empty_aggs}) of
          {Some pa_v ->
             aggs.value.insert
             {key: ip,
              value: {prSum: pa_v.value.prSum + r.value,
                      prCount: pa_v.value.prCount + 1,
                      arSum: pa_v.value.arSum + uv.adRevenue
                      }
              }

          }
          { None ->
              aggs.value.insert {key: ip, value: {prSum: r.value, prCount: 1, arSum: uv.adRevenue} }
          };

          partial_aggs.insert {key: a, value: aggs.value}

        }
        { None -> () }
      }
      { None ->
        case rankingsMap.lookup {key: ip, value: 0} of
        {Some r ->
          partial_aggs.insert
          {key: a, value:
            {|key: string, value: {prSum: int, prCount: int, arSum: real}|
              {key: ip, value: {prSum: r.value, prCount: 1, arSum: uv.adRevenue} }
            |} @ Map
          }

        }
        { None -> () }
      }


    )
    else ()
  );
  partial_aggs.iterate (\kv -> (merge, kv.key) <- kv.value);
  peers.iterate (\p -> (count_merges, p.addr) <- ())
)

trigger merge : Source_ip_to_aggs_C = \aggs_map -> (
  aggs_map.iterate (\kv ->
    case merged_partials.lookup {key: kv.key, value: kv.value} of
    {Some agg ->
      merged_partials.insert
        {key: kv.key,
         value:
          {prSum: agg.value.prSum + kv.value.prSum,
           prCount: agg.value.prCount + kv.value.prCount,
           arSum: agg.value.arSum + kv.value.arSum
          }
        }
    }
    {None -> merged_partials.insert kv}


  )
)

declare merged_peers : mut int = 0

trigger count_merges : () = \_ -> (
  merged_peers = merged_peers + 1;
  if merged_peers == (peers.size ())
  then ((find_local_max, me) <- ())
  else ()

)

declare local_max : mut Source_ip_to_aggs

trigger find_local_max : () = \_ -> (
  merged_partials.iterate (\kv ->
    if (kv.value.arSum > local_max.value.arSum)
    then (local_max = kv)
    else ()
  );
  (find_global_max, master) <- local_max
)

declare peers_done : mut int = 0
declare global_max : mut Source_ip_to_aggs

trigger find_global_max :  Source_ip_to_aggs = \kv -> (
  if (kv.value.arSum > global_max.value.arSum)
  then (global_max = kv)
  else ();
  peers_done = peers_done + 1;
  if (peers_done == peers.size ())
  then ((finished, master) <- ())
  else ()
)

trigger finished : () = \_ -> (
  end_ms = now_int ();
  elapsed_ms = end_ms - start_ms;
  print (concat "Elapsed: " (itos elapsed_ms))

)

declare peers_ready : mut int = 0
trigger ready: () = \_ -> (
  peers_ready = peers_ready + 1;
  if peers_ready == peers.size ()
  then (start_ms = now_int (); peers.iterate (\p -> (q3_local, p.addr) <- ()) )
  else ()
)

declare uvFiles : collection {path: string} @Collection
@:{CArgs 2}
declare uvLoader: string -> collection uv_record @Collection -> ()

@:CArgs 2
declare rkLoaderMap : string -> collection rk_map_record @Map  -> ()
declare rkFiles : collection {path: string} @Collection

trigger loadAll : () = \_ -> (
  peers.iterate (\p -> peer_seq.insert p);
  uvFiles.iterate (\e -> uvLoader e.path user_visits);
  rkFiles.iterate (\e -> rkLoaderMap e.path rankingsMap);
  ((ready, master) <- ())
)

source rows : () = value ()
feed rows |> loadAll
