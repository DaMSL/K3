include "Annotation/Collection.k3"
include "Annotation/Map.k3"
include "Annotation/Seq.k3"
include "Core/Builtins.k3"
include "Core/Barrier.k3"
include "Core/Profile.k3"
include "Core/Messaging.k3"
include "Core/Loaders.k3"
include "Distributed/Transformers.k3"

typedef uv_record = {
    sourceIP     : string,
    destURL      : string,
    visitDate    : string,
    adRevenue    : real,
    userAgent    : string,
    countryCode  : string,
    languageCode : string,
    searchWord   : string,
    duration     : int
}

typedef rk_record = {
    pageURL     : string,
    pageRank    : int,
    avgDuration : int
}

typedef uv_bag = collection uv_record @Collection
typedef rk_bag = collection rk_record @Collection

declare master    : address = 127.0.0.1:40000
declare peers_seq : collection {addr: address} @Seq

declare index_by_hash : string -> int = (\s -> (
  let n = peers_seq.size () in
  let h = (hash s) in
  ((h % n) + n) % n
))

control AmplabBenchmark[queryTrigger       : expr,
                        loadExpr           : expr,
                        preLoadExpr        : expr,
                        preReadyExpr       : expr,
                        finishArgT         : type,
                        preTestFinishExpr  : expr,
                        preFinishExpr      : expr,
                        preShutdownExpr    : expr]
{
  ?e @:Result => (finished, master) <- $.[e]
  ?e @:Start  => (load_all, me)     <- $.[e]
    +> {
      declare rankingsFiles : collection {path: string} @Collection
      declare uservisitsFiles : collection {path: string} @Collection

      // Dummy trigger to warm up connections
      trigger hello : () = \_ -> (
        ((ready, master) <- ()) @OnCounter(id=[# hello_done], eq=[$ peers.size()], reset=[$ false], profile=[$ false])
      )

      trigger shutdown : () = \_ -> (
        $[preShutdownExpr]; ((tcmallocStop ()); (jemallocStop ()); (pcmStop ())) @IfMachineMaster;
        haltEngine ()
      )

      // Signal to the master that a peer has finished the query locally.
      trigger finished : $[finishArgT] = \finishArg -> (

        ($[preTestFinishExpr] finishArg);
        (
        ((() @:StopTimer) @TimeSink(lbl=[# Query], tag=[$ "Time "], sink_expr=[$ query_time_sink]));
        $[preFinishExpr]
        ) @OnCounter(id=[# query_done], eq=[$ peers.size()], reset=[$ false], profile=[$ false])
      )

      // Signal to the master that a peer is ready.
      // Once all peers are ready, the master will start the query.
      trigger ready : () = \_ -> (
        ( $[preReadyExpr];
          (peers.iterate (\p -> (start_profiler, p.addr) <- () ));
          ((peers.iterate (\p -> ($[queryTrigger], p.addr) <- ()))
              @:StartTimer) @TimeSink(lbl=[# Query], tag=[$ "Time "], sink_expr=[$ query_time_sink])
        ) @OnCounter(id=[# peers_ready], eq=[$ peers.size()], reset=[$ false], profile=[$ false])
      )

      trigger start_profiler : () = \_ -> (
        ((tcmallocStart ()); (jemallocStart ()); (pcmStart ())) @IfMachineMaster
      )

      trigger load_all : () = \_ -> (
        $[preLoadExpr];
        ($[loadExpr]) @Profile(lbl=[# loader], tag=[$ "Load time:"]);
        ( peers.iterate (\p -> (hello, p.addr) <- ()) )
      )
    }
}
