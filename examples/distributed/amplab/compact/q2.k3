include "compact/AmplabBDB.k3"
include "Annotation/Set.k3"
include "Core/IO.k3"
include "Distributed/Transformers.k3"

typedef adRevByIp = collection {key:string, value:real} @Collection

// Globals
declare slice_length : mut int = 8
declare num_results : mut int = 0

// Data
declare local_uservisits: collection {adRevenue: real, sourceIP: string} @Collection
typedef q2_result = collection {key: string, value: real} @Collection
declare results : mut q2_result

// Perform the query on the local dataset (local group by on ad revenue).
// Then, group by destination peer address and send.
trigger q2_local : () = \_ -> (
  if master != me
  then ()
  else
    (ignore
      ( local_uservisits.groupBy
           (\r -> slice_string r.sourceIP 0 slice_length) //TODO index by 0 or 1?
           (\acc -> \r -> acc + r.adRevenue)
           0.0
      )
    ) @DistributedGroupBy(
        lbl         = [# groupby],
        clear_expr  = [$ () ],
        peer_next   = [$ (\x -> (( ignore ((x.size ()) @:Result) @AmplabBenchmark))) ],
        next        = [$ ()],
        merge       = [$ (\x -> \y -> x + y)],
        coordinator = [$ master],
        nodes       = [$ peers],
        masters     = [$ masters ],
        masters_map = [$ peer_masters ],
        profile     = [$ true] )
)

declare finalize : collection {key: address, value: q2_result} @Map -> () = \x -> (
  (x.iterate (\t ->
    t.value.iterate (\v ->
      (results_sink, me) <- (v.key, v.value)
    )
  ))
)

trigger start : () = \_ -> (() @:Start) @AmplabBenchmark(
  queryTrigger       = [$ q2_local],
  loadExpr           = [$ loadQ2 uservisitsFiles local_uservisits],
  preLoadExpr        = [$ peers.iterate (\i -> peers_seq.insert i)],
  preReadyExpr       = [$ ()],
  finishArgT         = [: int],
  preTestFinishExpr  = [$ (\n -> num_results = num_results + n)],
  preFinishExpr      = [$ (ignore results) @GatherCollection(
                                                 lbl   = [# result],
                                                 nodes = [$ peers],
                                                 next  = [$ (\x -> (finalize x; peers.iterate (\p -> (shutdown, p.addr) <- () )))])
                       ],
  preShutdownExpr    = [$ ()]
)

sink query_time_sink : string = file "time.csv" text csv
sink results_sink : (string, real) = file "results.csv" text psv

source rows : () = value ()
feed rows |> start
