include "compact/AmplabBDB.k3"
include "Distributed/Transformers.k3"

typedef adRevByIp = collection {key:string, value:real} @Collection

// Globals
declare slice_length : mut int = 8
declare num_results : mut int = 0

// Data
declare local_uservisits: collection {adRevenue: real, sourceIP: string} @Collection
declare results : mut collection {key: string, value: real} @Collection

// Perform the query on the local dataset (local group by on ad revenue).
// Then, group by destination peer address and send.
trigger q2_local : () = \_ -> (
  if master != me 
  then ()
  else
    (ignore
      ( local_uservisits.groupBy
           (\r -> slice_string r.sourceIP 0 slice_length) //TODO index by 0 or 1?
           (\acc -> \r -> acc + r.adRevenue)
           0.0
      )
    ) @DistributedGroupBy(
        lbl         = [# groupby],
        clear_expr  = [$ () ],
        peer_next   = [$ (\x -> (( ignore ((x.size ()) @:Result) @AmplabBenchmark))) ],
        next        = [$ ()],
        merge       = [$ (\x -> \y -> x + y)],
        coordinator = [$ master],
        nodes       = [$ peers],
        masters     = [$ masters ],
        masters_map = [$ peer_masters ],
        profile     = [$ true] )
)

trigger start : () = \_ -> (() @:Start) @AmplabBenchmark(
  queryTrigger       = [$ q2_local],
  loadExpr           = [$ loadQ2 uservisitsFiles local_uservisits],
  preLoadExpr        = [$ peers.iterate (\i -> peers_seq.insert i)],
  preReadyExpr       = [$ ()],
  finishArgT         = [: int],
  preTestFinishExpr  = [$ (\n -> num_results = num_results + n)],
  preFinishExpr      = [$ print ("# Results: " ++ (itos num_results))],
  preShutdownExpr    = [$ ()]
)

source rows : () = value ()
feed rows |> start
