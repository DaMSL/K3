include "Annotation/Collection.k3"

/*
 * Simple wordCount implementation by using K3 
 */

declare wordsList :          mut collection {word : string} @ { Collection }
declare numOfWords :         mut int = 300 
declare wordsInWordsLst :    mut int = 0
declare currNumWords :       mut int = 0
declare numOfShufflers :     mut int = 3
declare currNumShufflers :   mut int = 0

/* fields for splitting wordsList */
declare count :              mut int = 0
declare master :             immut address = 127.0.0.1:40000
declare shufflersTable :     mut collection {shuffler : address, word : string} @ { Collection } = { |shuffler : address, word : string| {shuffler : 127.0.0.1:61000, word : "foo" }, {shuffler : 127.0.0.1:62000, word : "bar" }, {shuffler : 127.0.0.1:63000, word : "baz"} | } @ { Collection }
declare reducer :            immut address = 127.0.0.1:70000

/* mapper's local word list */
declare lstLength :          mut int = 0
declare localLst :           mut collection {word : string} @ { Collection }

/* shuffer's local word map */
declare wordsMap :           mut collection { word : string, count : int } @ { Collection } 
declare countWord :          mut int = 0

/* result word map */
declare finalWordsMap :      mut collection { word : string, count : int } @ { Collection }

/* bootstrap */
declare totalNodes :        immut int = 8
declare currentNodes :      mut int = 0

/* fields for debug */
declare test :              mut int = 0
declare done :              mut bool = false
declare wordTest :          mut string = "init"
declare countTest :         mut int = 0
declare testInt1 :          mut int = 0
declare testInt2 :          mut int = 0
declare testInt3 :          mut int = 0

trigger initWordsLst : string = \str -> (
  wordsList.insert {word : str};
  wordsList.iterate (\wordRecord -> (
      wordsInWordsLst = wordsInWordsLst + 1
    )
  );
  if wordsInWordsLst == numOfWords
  then (register, me) <- ()
  else wordsInWordsLst = 0
)
  
trigger join : () = \_ -> (register, master) <- ()

trigger register : () = \_ -> (
  currentNodes = currentNodes + 1;
  if currentNodes == totalNodes
  then (splitWordLst, me) <- ()
  else ()
)

trigger splitWordLst : ()= \_ -> (
  wordsList.iterate (\wordRecord -> (
      count = count + 1;      
      if count < numOfWords/3
	  then (testInt1 = numOfWords/3 - 1;
	        (genWordLst, 127.0.0.1:51000) <- (testInt1, wordRecord.word))	       
	  else if count < (numOfWords/3)*2
	       then (testInt2 = (numOfWords/3)*2 - 1 - testInt1;
	             (genWordLst, 127.0.0.1:52000) <- (testInt2, wordRecord.word)) 
		   else (testInt3 = numOfWords - testInt1 - testInt2;
				 (genWordLst, 127.0.0.1:53000) <- (testInt3, wordRecord.word))
    )  
  )
)

trigger genWordLst : (immut int, immut string) = \x -> 
  bind x as (length, recWord) in (
    localLst.insert {word : recWord};
    lstLength = lstLength + 1;
	(if lstLength == length
	 then (wordMap, me) <- ()
	 else ())
  )


trigger wordMap : () = \_ -> (
  localLst.iterate (\wordRecord -> 
    shufflersTable.iterate (\shufflerRerd ->
      if wordRecord.word == shufflerRerd.word
	  then (shuffle, shufflerRerd.shuffler) <- wordRecord.word
	  else (shuffle, shufflerRerd.shuffler) <- "none"
    )
  )
) 

/* general reducer  */
trigger shuffle : string = \msg -> (
  (if msg == "none"
   then currNumWords = currNumWords + 1
   else ( currNumWords = currNumWords + 1;
          (if countWord == 0
           then ( countWord = countWord + 1;
		          wordsMap.insert {word : msg, count : countWord})
		   else ( wordsMap.delete {word : msg, count : countWord};
		          countWord = countWord + 1;		  
		          wordsMap.insert {word : msg, count : countWord} )
		  ) 
        )
  );		  
  if currNumWords == numOfWords
  then (reduce, reducer) <- wordsMap
  else()
)

trigger reduce : (collection { word : string, count : int } @ { Collection }) = \wordMap -> (

  finalWordsMap = finalWordsMap.combine wordMap;

  currNumShufflers = currNumShufflers + 1;
  (if currNumShufflers == numOfShufflers
   then done = true
   else ());
   
  /* test the final wordsMap  */ 
  finalWordsMap.iterate (\wordRecord -> (
      if wordRecord.word == "baz"   
      then (wordTest = wordRecord.word;   
            countTest = wordRecord.count)
	  else ()
    ) 
  )	
)

source go : () = value ()
source master : string = file "/home/chao/work/K3/K3-Core/examples/distributed/MapReduce/WordCount/words.txt" k3

feed go |> join
feed master |> initWordsLst
