include "Annotation/Collection.k3"
include "Annotation/Map.k3"
include "Core/Loaders.k3"
include "Annotation/Set.k3"
include "Core/Barrier.k3"
include "Core/Builtins.k3"
include "Core/Profile.k3"
include "Core/MachineMessaging.k3"
typedef vertex = int
typedef page_rank = real

declare times: collection {ms: int} @ {Seq}
declare start_ms: mut int = 0
declare end_ms: mut int = 0

declare vertex_count: mut int = 0

declare start_timer: () -> () = \_ -> (
  start_ms = 0;
  end_ms = 0;
  start_ms = now_int()
)

declare reset_timer: () -> () = \_ -> (
  end_ms = now_int ();
  let elapsed = end_ms - start_ms in (times.insert {ms: elapsed}; print ("Elapsed: " ++ (itos elapsed)))
)

declare printStats: () -> () = \_ -> (
  let s = times.fold (\a -> \t -> a + t.ms) 0 in
  let avg = (1.0 / times.size()) * s in
  print ("Avg time per iteration: " ++ (rtos avg));
  print ("Total vertex count: " ++ (itos vertex_count))
)

declare iterations: mut int = 5
declare damping_factor: real = 0.85
declare master: address

declare graph: mut collection { key: vertex, value: collection { elem: vertex } @ { Collection }} @ IntMap
declare state: mut collection { key: vertex, value: page_rank } @IntMap
declare empty_state: collection {key: int, value: real} @IntMap

declare consolidated_outgoing: mut collection { key: int
                                              , value: collection { key: vertex
                                                                  , value: page_rank
                                                                  } @ IntMap
                                              } @ IntMap

declare dataFiles: collection {path: string} @Collection

declare peer_by_vertex: vertex -> int = \v -> ((v % peers.size ()))

// Ensure that vertices are partitioned properly:
// Vertex id v should be located at peer v % peers.size()
declare validate_vertex_partition: () -> () = \_ -> (
  let myIndex = (range (peers.size ())).fold
    (\a -> \i ->
      case peers.at i.elem of
        { Some p -> if p.addr == me then i.elem else a }
        { None -> error () }
    )
    (-1)
  in graph.iterate (\kv -> if peer_by_vertex kv.key != myIndex
                           then print ("INVALID VERTEX." ++ (itos kv.key) ++ " at peer: " ++ (itos myIndex) ++ "." ++ (atos me))
                           else ()
                   )
)

// Use consolidated_outgoing to send each peer the new contributions for its vertices
declare send_by_peer: () -> () = \_ -> (
    (range (peers.size ())).iterate (\i -> (
      (consolidated_outgoing.lookup_with2
         { key: i.elem, value: empty { key: vertex, value: page_rank} @IntMap }
         (\_ -> peers.at_with i.elem (\p -> (gather, p.addr) <- empty { key: vertex, value: page_rank} @IntMap ) )
         (\b -> peers.at_with i.elem (\p -> (gather, p.addr) <- b.value ) )
      );
      (peers.at_with i.elem (\p -> (gatherSinks, p.addr) <- outgoingSinkContribs))
      )
    )
)

declare outgoingSinkContribs: mut real = 0.0
declare defaultContrib: mut real = 0.0
declare scatter: () -> () = \_ -> (
  start_timer ();

  outgoingSinkContribs = 0.0;
  consolidated_outgoing = empty { key: int, value: collection { key: vertex, value: page_rank } @IntMap } @IntMap ;

  state.iterate (\s ->
    graph.key_lookup_with s.key
         (\ns -> let out_degree = ns.value.size () in
                 let damp_value = defaultContrib  + (damping_factor * s.value) in
                 let out_contrib = if out_degree == 0 then damp_value / vertex_count else damp_value / out_degree
                 in if out_degree == 0
                    then outgoingSinkContribs = outgoingSinkContribs + out_contrib
                    else (
                       ns.value.iterate (\n ->
                          let key = (peer_by_vertex n.elem) in
                          consolidated_outgoing.key_update key (\_ -> 
                            { key: key,
                              value: let e = empty { key: vertex, value: page_rank } @IntMap in
                                     e.insert { key: n.elem, value: out_contrib }; e
                            }
                          )
                          (\a -> (
                                (a.value.key_update n.elem
                                  (\_ -> { key: n.elem, value: out_contrib } )
                                  (\x -> { key: x.key, value: x.value + out_contrib })); a)
                          )
                       )
                    )
         )
  );

  send_by_peer ();
  state = empty_state
)

trigger gather: collection { key: vertex, value: page_rank } @IntMap  = \message_map -> (
  message_map.iterate (\r ->
    state.key_update r.key (\_ -> r) (\a -> { key: a.key, value: a.value + r.value})
  )
)

// Evenly distribute contributions from sinks to all vertices
declare fromSinks: mut real = 0.0
trigger gatherSinks: real = \v -> (
  fromSinks = fromSinks + v;
  ( graph.iterate (\g -> state.insert_with {key: g.key, value: fromSinks} (\a -> \b -> {key: a.key, value: a.value + b.value}));
    fromSinks = 0.0;
    (global_barrier, master) <- ()
  ) @ { OnCounter(id=[# gather], eq=[$ peers.size ()], reset=[$ true], profile=[$ false]) }
)

trigger global_barrier: () = \_ -> (
  (
   reset_timer ();
   print ("Iteration " ++ (itos iterations) ++ " finished.");
   iterations = iterations - 1;
   if iterations > 0
   then peers.iterate (\p -> (go, p.addr) <- vertex_count )
   else peers.iterate (\p -> (sendPageRanks, p.addr) <- ())
  ) @ { OnCounter(id=[# global_barrier], eq=[$ peers.size ()], reset=[$ true], profile=[$ false]) }
)


trigger load_all: () = \_ -> (
  loadGraph dataFiles graph;
  graph.iterate (\g -> empty_state.insert {key: g.key, value: 0.0});
  validate_vertex_partition ();
  (peers.iterate (\p -> (hello, p.addr) <- () ))
)

declare initialized: mut bool = false
trigger go: int = \c -> (
  (if not initialized
  then (
    (((tcmallocStart ()); (jemallocStart ()); (pcmStart ())) @IfMachineMaster);
    (vertex_count = c);
    (defaultContrib = ((1 - damping_factor) / vertex_count));
    graph.iterate (\r -> (state.insert { key: r.key, value: (1.0 /vertex_count) }));
    initialized = true
  )
  else ());
  scatter ()
)

trigger hello: () = \_ -> (
  ( (ready, master) <- graph.size () ) @{ OnCounter(id=[# hello], eq=[$ peers.size ()], reset=[$ false], profile=[$ false]) }
)

trigger start_profiler : () = \_ -> (
  ((tcmallocStart ()); (jemallocStart ()); (pcmStart ())) @IfMachineMaster
)

trigger ready: int = \i -> (
  vertex_count = vertex_count + i;
  if master == me
  then ((peers.iterate (\p -> (go, p.addr) <- vertex_count)) @ { OnCounter(id=[# ready], eq=[$ peers.size ()], reset=[$ false], profile=[$ false]) }) else ()

)

trigger sendPageRanks: () = \_ -> (
  let v = state.fold (\acc -> \kv -> acc + kv.value) 0.0
  in (collectPageRanks, master) <- v
)

declare total_pagerank : mut real = 0.0
trigger collectPageRanks: real = \v -> (
  total_pagerank = total_pagerank + v;
  ( peers.iterate (\p -> (stop, p.addr) <- () );
    print ("Total pagerank: " ++ (rtos total_pagerank));
    printStats ()
  ) @{ OnCounter(id=[# collect], eq=[$ peers.size ()], reset=[$ true], profile=[$ false]) }

)

trigger stop: () = \_ -> (
  ((tcmallocStop ()); (jemallocStop ()); (pcmStop ())) @IfMachineMaster;
  haltEngine ()
)

source s1: () = value ()
feed s1 |> load_all
