include "Core/Builtins.k3"
include "Core/GPUBuiltins.k3"
include "Annotation/Collection.k3"
include "Annotation/Vector.k3"

// A Simple synthetic query for testing
typedef simple = {
    s_id     : int,
    s_age    : int,
    s_wage   : real
}

typedef result = {
    s_id     : int,
    s_wage   : real
}

typedef s_table = collection simple @Vector
typedef r_table = collection result @Vector

declare master: address = 127.0.0.1:40001

// For simple query
@:CArgs 5
declare transformer_gpu :  s_table -> r_table  -> string -> string -> int
                           -> ()
  with effects \x -> \y -> \d -> \p -> [R[x]; RW[y]; R[d]; R[p]; R[d]] 

declare input  : s_table
declare output : s_table

declare ptx    : mut string = ""
@:pinned
declare index  : mut int = 0

// Timing
declare time_start : mut int = 0
declare time_end   : mut int = 0

trigger result : r_table = \res ->
   res.iterate (\r -> if r.s_wage <> 0 then (print (rtos (r.s_wage))) else ())

trigger q1 : int = \i -> (
   // building synthetic data
   (range 160000000).iterate (\r -> input.insert {s_id   : r.elem + i, 
                                                 s_age  : 30 + i,
                                                 s_wage : r.elem / 1000 * 0.5
                                                });
    
   print "Synthetic data loaded"; 
   (ptx = (load_ptx_from_file "examples/gpu/cuda_kernels/select_proj.ptx"));
   time_start =  now_int(); 
   (transformer_gpu input output "select_proj" ptx i);
   time_end =  now_int();
   print ("time: " ++ (itos (time_end - time_start)));  
   (result, master) <- output
)  

trigger setup : () = \_ -> (
  peers.iterate \p -> (((q1, p.addr) <- index) ; (index = index + 1)) 
)

source start : () = value ()
feed start |> setup                                                      
