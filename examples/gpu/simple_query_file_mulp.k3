include "Core/Builtins.k3"
include "Core/GPUBuiltins.k3"
include "Annotation/Collection.k3"
include "Annotation/Vector.k3"

// A Simple synthetic query for testing
typedef simple = {
    s_id     : int,
    s_age    : int,
    s_wage   : real
}

typedef result = {
    s_wage   : real
}

typedef s_table = collection simple @Vector
typedef r_table = collection result @Vector

declare master: address = 127.0.0.1:40000

// For simple query
@:CArgs 5
declare transformer_gpu :  s_table -> r_table  -> string -> string -> int
                           -> ()
  with effects \x -> \y -> \d -> \p -> [R[x]; RW[y]; R[d]; R[p]; R[d]] 

declare input  : s_table
declare output : mut s_table

declare ptx    : mut string = ""
declare i      : mut int = 0

trigger result : r_table = \res ->
   res.iterate (\r -> if r.s_wage <> 0 then (print (rtos (r.s_wage))) else ())

trigger q1 : int = \i -> (
   // building synthetic data
   (range 1000000).iterate (\r -> input.insert {s_id   : r.elem + i, 
                                              s_age  : 30 + i,
                                              s_wage : r.elem / 1000 * 0.5
                                             });
   (range 1000000).iterate (\r -> input.insert {s_id   : (r.elem + 10000 + i * 1000),
                                              s_age  : 40 + i,
                                              s_wage : r.elem /1000 * 0.5 + 2000
                                             });
   
   print "Synthetic data loaded"; 
   (transformer_gpu input output "queryplan" ptx i);
   print ("query done " ++ (itos i));  
   (result, master) <- output
)  

trigger setup : () = \_ -> (
  // master load ptx kernel
  (ptx = (load_ptx_from_file "/home-4/yliu120@jhu.edu/K3/K3/cuda_kernels/sel_proj_groupby.ptx"));   
  // Load Data and Launch kernel
  peers.iterate \p -> (((q1, p.addr) <- i) ; (i = i + 1)) 
)

source s1 : () = value ()
feed s1 |> setup                                                      

