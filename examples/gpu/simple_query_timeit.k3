include "Core/Builtins.k3"
include "Core/GPUBuiltins.k3"
include "Annotation/Collection.k3"
include "Annotation/Vector.k3"

declare time_start: mut int =0
declare time_end: mut int = 0

// A Simple synthetic query for testing
typedef simple = {
    s_id     : int,
    s_age    : int,
    s_wage   : real
}

typedef result = {
    s_id     : int,
    s_wage   : real
}

typedef s_table = collection simple @Vector
typedef r_table = collection result @Vector

// For simple query
@:CArgs 5
declare transformer_gpu :  s_table -> r_table -> string -> string -> string -> int
                           -> ()
  with effects \x -> \y -> \z -> \d -> \p -> [R[x]; R[y]; R[z]; R[d]; R[p]; R[d]] 

declare input  : s_table
declare output : mut s_table

declare ptx         : mut string = ""


declare select : mut string =""

trigger q1 : () = \_ -> (
   // building synthetic data
   (range 10).iterate (\r -> input.insert {s_id   : r.elem, 
                                              s_age  : 30,
                                              s_wage : r.elem * 1.1
                                             });
   (range 10).iterate (\r -> input.insert {s_id   : (r.elem + 10000),
                                              s_age  : 40,
                                              s_wage : r.elem * 1.0
                                              });
   (input.iterate (\r -> print (rtos (r.s_wage))));
  
   print "Synthetic data loaded";
  
   (select = (load_ptx_from_file "/home-4/yliu120@jhu.edu/K3/K3/cuda_kernels/select_simple.cu"));
 
   (ptx = (compile_to_ptx_str select "simple"));
   
   print ptx;
   
   time_start =  now_int();

   transformer_gpu input output "simple" "select" ptx 0;
  
   time_end = now_int();

   print "query done";  
   
   (output.iterate (\r -> print (rtos (r.s_wage)) ) );
   
   print ("time: " ++ (itos (time_end - time_start)))
)  

source s1 : () = value ()
feed s1 |> q1                                                       

