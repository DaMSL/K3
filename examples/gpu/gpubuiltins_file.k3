include "Core/Builtins.k3"
include "Core/GPUBuiltins.k3"

include "Annotation/Collection.k3"
include "Annotation/Vector.k3"

declare devicecount : mut int = 0

declare  ptx : mut string = ""
declare  fn  : string = "transformer"

declare input  : mut collection {elem:int} @Vector
declare output : mut collection {elem:int} @Vector

declare ptx_file : string = "examples/gpu/cuda_kernels/transformer.ptx"
declare cu_file  : string = "examples/gpu/cuda_kernels/transformer.cu" 
declare compiled : mut int = -1

declare transformer : string =
              " __global__ void " ++
              "transformer(const int *A, int *C, size_t numElements) "     ++
              "{                                                      "    ++
              "  size_t i = blockDim.x * blockIdx.x + threadIdx.x;       " ++
              "  if (i < numElements)                                 "    ++
              "    C[i] = A[i] + 5;                                 "      ++
              "}                                                      "


// Declared here!
@:CArgs 5
declare transformer_gpu :  collection {elem: int}@Vector -> collection {elem: int}@Vector  -> string -> string -> int
                           -> ()
  with effects \x -> \y -> \d -> \p -> [R[x]; RW[y]; R[d]; R[p]; R[d]]


trigger t : () = \_ -> (
   devicecount = get_device_count ();
   print ("GPU device count: " ++ (itos devicecount));
   device_info ();
   
   (compiled = (compile_to_ptx_file transformer ptx_file));
   print ("write ptx to file: " ++ ptx_file);    
   ptx = load_ptx_from_file ptx_file;
   print ptx;
 
   // build a vector
   ((range 10000).iterate (\r -> input.insert {elem: 2}));
   transformer_gpu input output fn ptx 0;

   // print output
   (output.iterate (\r -> print (itos (r.elem))))  
)

source s1 : () = value ()
feed s1 |> t
