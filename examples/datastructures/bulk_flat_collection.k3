include "Annotation/Collection.k3"
include "Annotation/BulkFlatCollection.k3"
include "Core/Builtins.k3"

typedef R = {a: int, b: int, c: string}

declare c    : collection {elem : R} @Collection
declare bfc  : collection R @BulkFlatCollection

declare bfc2 : collection R @BulkFlatCollection
declare bfc3 : mut collection R @BulkFlatCollection

typedef R2 = {a: string, b: string}
declare c2: collection {elem: R2} @Collection
declare bfc4: collection R2 @BulkFlatCollection
declare bfc5: collection R2 @BulkFlatCollection

trigger t : () = \_ -> (
  // Create regular collection, append to a BFC
  ((range 10).iterate (\r -> c.insert {elem: {a:r.elem, b:r.elem*2, c: "foo" ++ (itos r.elem)}}));
  (bfc.append c);

  // Play with BCF
  (print ("BCF size" ++ (itos (bfc.size()))));
  (bfc.iterate (\x ->
    print ((itos x.a) ++ "," ++ (itos x.b) ++ "," ++ x.c)
  ));
  print "---------------------------";
  (bfc.iterate (\x ->
    print ((itos x.a) ++ "," ++ (itos x.b) ++ "," ++ x.c)
  ));
  print "---------------------------";


  // Save/Load bfc into bfc2
  (bfc2.load (bfc.save ()));
  (print ("BCF2 size" ++ (itos (bfc2.size()))));
  (bfc2.iterate (\x ->
    print ((itos x.a) ++ "," ++ (itos x.b) ++ "," ++ x.c)
  ));
  print "-----------------------------";

  // Copy Construct from BFC
  print "Making copy now!";
  bfc3 = bfc;
  //(print ("BCF3 size" ++ (itos (bfc3.size()))));
  //(bfc3.iterate (\x ->
  //  print ((itos x.a) ++ "," ++ (itos x.b) ++ "," ++ x.c)
  //));
  print "-----------------------------";

  // Send over the wire
  //(s, me) <- bfc;
  (r, me) <- bfc2
)

trigger t2: () = \_ -> (
  // Create regular collection, append to a BFC
  ((range 10).iterate (\r -> c2.insert {elem: {a: "a" ++ (itos r.elem), b: "b" ++ (itos r.elem)}}));
  (bfc4.append c2);

  // Play with BCF
  (print ("BCF4 size" ++ (itos (bfc4.size()))));
  (bfc4.iterate (\x ->
    print (x.a ++ "," ++ x.b)
  ));
  print "---------------------------";

  bfc5.load ( bfc4.save() );
  (print ("BCF5 size" ++ (itos (bfc5.size()))));
  (bfc5.iterate (\x ->
    print (x.a ++ "," ++ x.b)
  ));
  print "---------------------------";
  haltEngine()
)

trigger s: collection R @BulkFlatCollection = \c -> (
  print "Trigger s:";
  (c.iterate (\x ->
    print ((itos x.a) ++ "," ++ (itos x.b) ++ "," ++ x.c)
  ));
  print "---------------------"
)

trigger r: collection R @BulkFlatCollection = \c -> (
  print "Trigger R:";
  (c.iterate (\x ->
    print ((itos x.a) ++ "," ++ (itos x.b) ++ "," ++ x.c)
  ));
  print "---------------------";


  haltEngine()
)

trigger q: () = \_ -> (
  bfc.insert {a: 1, b: 1, c: "one"};
  bfc.insert {a: 2, b: 2, c: "two"};
  bfc.insert {a: 3, b: 3, c: "three"};
  (bfc.iterate (\x ->
    print ((itos x.a) ++ "," ++ (itos x.b) ++ "," ++ x.c)
  ));
  haltEngine()
)

source s1 : () = value ()
feed s1 |> t

source s2: () = value ()
feed s2 |> t2

source s3: () = value ()
feed s3 |> q
