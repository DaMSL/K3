include "Annotation/Collection.k3"
include "Annotation/FlatPolyBuffer.k3"
include "Core/Builtins.k3"

declare c : collection {ignored:()} @FlatPolyBuffer(
  variants=[:#>
    foo => {a:int, b:int} : 0,
    bar => {c:int, d:int} : 1,
    baz => {e:int, f:int} : 2
  ])

declare d : mut int = 0
declare e : mut int = 0

trigger t : () = \_ -> (
  (c.append_foo {a:1, b:2});
  (c.append_foo {a:2, b:3});
  (c.append_foo {a:3, b:4});
  (c.append_baz {e:10, f:20});
  (c.append_baz {e:11, f:21});
  (c.append_baz {e:12, f:22});
  (c.append_bar {c:100, d:200});
  (c.append_bar {c:101, d:201});
  (c.append_bar {c:102, d:202});

  (print ("Size " ++ (itos (c.size()))));
  (c.iterate (\tag -> \idx -> \offset ->
    if tag == 0 then
      c.foo_safe_at idx offset
        (\_ -> print "No foo found")
        (\x -> print ("Foo a: " ++ (itos x.a) ++ " b: " ++ (itos x.b)))

    else if tag == 1 then
      c.bar_safe_at idx offset
        (\_ -> print "No bar found")
        (\x -> print ("Bar c: " ++ (itos x.c) ++ " d: " ++ (itos x.d)))

    else if tag == 2 then
      c.baz_safe_at idx offset
        (\_ -> print "No baz found")
        (\x -> print ("Baz e: " ++ (itos x.e) ++ " f: " ++ (itos x.f)))

    else print "Invalid element tag"));

  (d = (c.foldl
         (\acc -> \tag -> \idx -> \offset ->
           if      tag == 0 then c.foo_safe_at idx offset (\_ -> acc) (\x -> acc + x.a)
           else if tag == 1 then c.bar_safe_at idx offset (\_ -> acc) (\x -> acc + x.c)
           else if tag == 2 then c.baz_safe_at idx offset (\_ -> acc) (\x -> acc + x.c)
           else acc)
         0));
  print ("Fold result, d: " ++ (itos d));

  (e = (c.foldl_foo 0 0 (\acc -> \idx -> \offset -> \foo -> acc + foo.a) 0));
  print ("Fold result, e: " ++ (itos e))
)

source s1 : () = value ()
feed s1 |> t
