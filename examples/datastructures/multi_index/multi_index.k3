include "Annotation/MultiIndex/MultiIndexBag.k3"
include "Annotation/MultiIndex/MultiIndexMap.k3"

typedef EmployeeC =
    collection {key: int, name: string, age: int}
      @{MultiIndexBag, OrderedBagIndex(key=[name]), BagIndex(key=[age]), BagIndex(key=[age, key])}

typedef EmployeeM =
    collection {key: int, name: string, age: int}
      @{MultiIndexMap, OrderedMapIndex(key=[name]), MapIndex(key=[age]), MapIndex(key=[age, key])}

declare employeesC : mut EmployeeC
declare employeesM : mut EmployeeM

declare result1  : mut option {key: int, name: string, age: int}
declare result2  : mut option {key: int, name: string, age: int}
declare result2w : mut        {key: int, name: string, age: int}

trigger t : () = \_ -> (
    employeesC.insert {key: 1, name: "John",    age: 30};
    employeesC.insert {key: 2, name: "alice",   age: 40};
    employeesC.insert {key: 3, name: "bob",     age: 40};
    employeesC.insert {key: 4, name: "charles", age: 45};

    result1    = employeesC.lookup_by_name   {name: "John"};
    result2    = employeesC.lookup_by_agekey {age: 40, key: 2};
    (employeesC.lookup_with_by_agekey        {age: 40, key: 2} (\_ -> ()) (\r -> result2w = r));
    employeesC = employeesC.range_by_name    {name: "a"} {name: "d"};
    employeesC = employeesC.slice_by_age     {age: 40}
)

trigger t2 : () = \_ -> (
    employeesM.insert {key: 1, name: "John",    age: 30};
    employeesM.insert {key: 2, name: "alice",   age: 40};
    employeesM.insert {key: 3, name: "bob",     age: 40};
    employeesM.insert {key: 4, name: "charles", age: 45};

    result1    = employeesM.lookup_by_name   {name: "John"};
    result2    = employeesM.lookup_by_agekey {age: 40, key: 2};
    (employeesM.lookup_with_by_agekey        {age: 40, key: 2} (\_ -> ()) (\r -> result2w = r));
    employeesM = employeesM.range_by_name    {name: "a"} {name: "d"};
    employeesM = employeesM.slice_by_age     {age: 40}
)

source s1 : () = value ()
feed s1 |> t

source s2 : () = value ()
feed s2 |> t2
