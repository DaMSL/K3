include "Annotation/Collection.k3"
include "Core/Builtins.k3"

// Configuration
declare k : int = 4
declare loaded_points : mut int = 0
declare num_points : int = 210
declare dbg_prev_counts : mut int = 0
declare dbg_curr_counts : mut int = 0

// Globals
// A point's key represents its cluster id
// Its value represents an n-dimensional vector encoded as a collection of (dimension, value) pairs
declare points :  mut collection { key: int, value : collection { key: int, value : float } @ { Collection } } @ { Collection }

declare final_clusters : mut collection { key: int, value : collection { key: int, value : float } @ { Collection } } @ { Collection }

declare iter_count : mut int = 0

// Utils
// Negate a vector component-wise
declare vector_negate : Function = \v1 -> (v1.map (\x-> {key: x.key, value: -1.0 * x.value}))

// Add two vectors component-wise
declare vector_add : Function = \v1 -> (\v2 -> (
  let combined = v1.combine v2 in
  combined.group_by (\x -> x.key) (\acc -> \x -> acc + x.value) 0.0
))

// Subtract v2 from v1 component-wise
declare vector_sub : Function = \v1 -> (\v2 -> ( vector_add v1 (vector_negate v2) ))

// Sompute the squared distance between two vectors
declare vector_sqdist : Function = \v1 -> (\v2 -> (
  let diffs = vector_sub v1 v2 in
  diffs.fold (\acc -> \x -> acc + (x.value*x.value)) 0.0
))

// Compute the number of points in each cluster, as a vector
declare cluster_counts : Function = \points -> (
  points.group_by (\x -> x.key) (\acc -> \x -> acc + 1) 0
)

// Given a collection of labelled points, compute the centroid for each label
declare compute_clusters_helper : Function = \c -> \init -> (
  // Compute the total sum and count for each label
  let runs = c.group_by (\p -> p.key) (\acc -> \p ->
    bind acc as (sum_v, count) in
      (vector_add p.value sum_v, count + 1)
  ) (init, 0.0) in

  // Compute the average as sum / count for each label
  runs.map (\p ->
    bind p.value as (sum_v, count) in
    {key: p.key, value: sum_v.map (\c -> {key: c.key, value: c.value / count})}
  )
)

// Wrapper / (Hack for zero-vector)
declare compute_clusters : Function = \x -> (
  case x.peek () of
    { Some j -> compute_clusters_helper x (vector_sub j.value j.value) }
    { None   -> () }
)

// Given a collection of cluster prototypes, assign a point to the closest one
declare assign_point : Function = \clusters -> \point -> (
  let dists = clusters.map (\clus -> (clus.key, vector_sqdist clus.value point.value)) in
  let min = dists.fold (\acc -> \p ->
    bind acc as (min_l, min_d) in (
      bind p as (l, d) in (
        if d < min_d
        then (l, d)
        else acc
      )
    )
  ) (-1, real_of_int (get_max_int ())) in
  bind min as (label, d) in
  {key: label, value: point.value}
)

// Assign all points to the closest cluster prototype
declare assign_points : Function = \clusters -> \points -> (
  points.map (assign_point clusters)
)

// Top-Level loop and helper for k-means clustering
declare loop_help : Function = \prev_clusters -> \ps -> (
  iter_count = iter_count + 1;
  let new_points = assign_points prev_clusters ps in
  let new_clusters = compute_clusters new_points in
  // Check if the number of points in each cluster has changed:
  let old_counts = cluster_counts ps in

  let new_counts = cluster_counts new_points in
  let dist = vector_sqdist old_counts new_counts in
  dbg_prev_counts  = old_counts;
  dbg_curr_counts = new_counts;
  if dist == 0.0
  then new_clusters
  else loop_help new_clusters new_points
)

declare loop : Function = \ps -> (
  let clusters = compute_clusters ps in
  final_clusters = loop_help clusters ps
)

// Load each point into the points collection, then start kmeans
trigger loadData : (collection { key:int, value : float } @ {Collection}) = \point -> (
  // Assign the data point to a random cluster
  let rand_key = random (k-1) in
  points.insert {key: rand_key, value: point};
  loaded_points = loaded_points + 1;
  // If all data has been loaded, start kmeans clustering
  if loaded_points == num_points
  then (kmeans, me) <- ()
  else ()
)

// Start k-means clustering
trigger kmeans : () = \_ -> (
  loop points
)

source seeds : (collection { key:int, value : float } @ {Collection}) = file "core/examples/kmeans/seed_points.text" k3
source dumb : (collection { key:int, value : float } @ {Collection}) = file "core/examples/kmeans/points.text" k3

feed seeds |> loadData
feed dumb |> loadData

