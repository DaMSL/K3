include "Annotation/Collection.k3"
include "Annotation/Vector.k3"
include "Annotation/FlatPolyBuffer.k3"
include "Core/Builtins.k3"

typedef FPB = collection {ignored: ()} @FlatPolyBuffer(
  variants=[:#>
    foo => {a:int, b:int} : 0,
    bar => {c:int, d:int} : 1,
    baz => {e:int, f:int} : 2
  ])

declare fpaths : collection {path:string} @Collection

declare orderpath : mut string = "muxorder.csv"

trigger t : FPB = \buf -> (
	print ("Invoking polyfile dispatch on buffer of size: " ++ (itos (buf.size())))
)

// Rebuffering support.
declare rebuffer : mut int = 0

declare transfer : FPB -> FPB -> int -> int -> int -> FPB
  = \orig -> \new -> \tg -> \idx -> \offset -> (
           if tg == 0 then ((new.append_foo (orig.foo_at idx offset)); new)
      else if tg == 1 then ((new.append_bar (orig.bar_at idx offset)); new)
      else if tg == 2 then ((new.append_baz (orig.baz_at idx offset)); new)
      else new
  	)

source s1 : FPB = polyfile fpaths text raw orderpath rebuffer transfer