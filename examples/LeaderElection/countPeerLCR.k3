/*
 * Based on Nick's idea, Implement LCR Leader Election algorithm under network mode by combining countPeer and old version of LCR 
 */
 
include "Annotation/Collection.k3"

declare numOfPeers :        mut int = 0
declare nodes :             mut collection {node : address} @ { Collection }
declare nodeCounter :       mut int = 0
declare rendezvous :        immut address = 192.168.0.138:40000
declare leader :            mut address = 127.0.0.1:10000
declare successor :         mut address = 127.0.0.1:10000
declare uid :               mut int = 0
declare maxUis :            mut int = 0
declare isLeader :          mut bool = false

trigger join : () = \_ -> (
 maxUid = uid;
 (register, rendezvous) <- 1
)
 
trigger register : int = \x -> (
  nodeCounter = nodeCounter + x;
  if nodeCounter == numOfPeers
  then (bcast, me) <- () 
)

trigger bcast : () = \x -> (
  nodes.fold (\acc -> (\nodeAddr -> (send, nodeAddr) <- ()) 0) 
)

trigger send : () = \_ -> (elect, successor) <- maxUid

trigger elect : int = \i -> 
  if i == uid
  then (isLeader = true;
       (announce, successor) <- me)
  else 
    if i > maxUid
    then (maxUid = i;
	      (send, me) <- ())
    else (maxUid = uid;
          (send, me) <- ())   

trigger announce : address = \add ->
  if isLeader == true
  then leader = me
  else (leader = add; 
        (announce, successor) <- add)

source go : () = value ()
		
feed go |> join
