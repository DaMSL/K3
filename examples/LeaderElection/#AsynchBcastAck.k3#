/*
 * Leader Election Algorithm based on AsynchBcastAck Algorithm
 * 127.0.0.1:10000, 127.0.0.1:20000 and 127.0.0.1:30000 are reserved
 */
  
declare leader :     mut address = 127.0.0.1:10000   
declare uid :        mut int = 0
declare maxUid :     mut int = 0
declare root :       immut address = 127.0.0.1:40000
declare parent :     mut address = 127.0.0.1:20000
declare all_nrbs :   mut collection { nrb : address } @ { Collection }
declare nrbs :       mut collection { nrb : address } @ { Collection }
declare kids :       mut collection { kid : address } @ { Collection }
declare acked_nrbs : mut collection { acked_nrb : address } @ { Collection }
declare reported :   mut bool = false

trigger init : () = \_ -> (  
  if me == root
  then (nrbs = all_nrbs;
        nrbs.fold (\acc -> (\nrb_addr -> (send_search, me) <- nrb_addr)) 0 )
  else () 
)

/*
 * broadcast search message to all null parent nrbs
 */

trigger bcast_search : () = \_ ->  nrbs.fold(\acc -> (\nrb_addr -> (send_search, me) <- nrb_addr)) 0
  
trigger send_search : address = \nrb_addr -> (receive_search, nrb_addr) <- me

trigger send_ack : address = \nrb_addr -> (receive_ack, nrb_addr) <- me

trigger send_isKid : () = \_ -> (receive_isKid, parent) <- me

trigger receive_search : address = \nrb_addr -> 
  if parent == 127.0.0.1:20000
  then (parent = nrb_addr;
        if acked_nrbs == all_nrbs.delete{nrb : parent}
        then (send_isKid, me) <- parent
		else (nrbs = all_nrbs.delete{nrb : parent};        
              (bcast_search, me) <- value ()))
  else (send_ack, me) <- nrb_addr 

trigger receive_ack : address = \acked_nrb_addr -> 
  acked_nrbs.insert {acked_nrb : acked_nrb_addr};
  if acked_nrbs == nrbs
  then if me == root
       then report = true
       else (send_isKid, me) <- value ()          
  else ()
	   
/*
 * trigger receive_ack : address = \acked_nrb_addr -> 
 *   acked_nrbs.insert {acked_nrb : acked_nrb_addr};
 *   if acked_nrbs == nrbs
 *   then (send_isKid, me) <- value ()          
 *   else ()  
 */
 
trigger receive_isKid : address = \kid_addr ->
  kids.insert {kid : kid_addr};
  acked_nrbs.insert {acked_nrb : address};
  if acked_nrbs == nrbs 
  then if me == root
       then report = true
       else (send_isKid, me) <- value ();          
  else ()         
  
source go : () = value()

feed go |> init_bcast
