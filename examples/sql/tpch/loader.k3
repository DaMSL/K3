include "tpch/schema.k3"

@:CArgs 2
declare lineitemLoaderP : collection {path: string} @Collection -> lineitem_bag -> ()
  with effects \_ -> \_ -> io

@:CArgs 2
declare customerLoaderP : collection {path: string} @Collection -> customer_bag -> ()
  with effects \_ -> \_ -> io

@:CArgs 2
declare ordersLoaderP : collection {path: string} @Collection -> orders_bag -> ()
  with effects \_ -> \_ -> io

@:CArgs 2
declare supplierLoaderP : collection {path: string} @Collection -> supplier_bag -> ()
  with effects \_ -> \_ -> io

@:CArgs 2
declare partsuppLoaderP : collection {path: string} @Collection -> partsupp_bag -> ()
  with effects \_ -> \_ -> io

@:CArgs 2
declare partLoaderP : collection {path: string} @Collection -> part_bag -> ()
  with effects \_ -> \_ -> io

@:CArgs 2
declare nationLoaderP : collection {path: string} @Collection -> nation_bag -> ()
  with effects \_ -> \_ -> io

@:CArgs 2
declare regionLoaderP : collection {path: string} @Collection -> region_bag -> ()
  with effects \_ -> \_ -> io

@:CArgs 2
declare tpchAgendaLoaderP : collection {path: string} @Collection -> tpch_agenda_bag -> ()
  with effects \_ -> \_ -> io

/////////////////////////////
//
// 'elem' wrapped loaders
//
//

@:CArgs 2
declare lineitemLoaderPE : collection {path: string} @Collection -> lineitem_elem_bag -> ()
  with effects \_ -> \_ -> io

@:CArgs 2
declare customerLoaderPE : collection {path: string} @Collection -> customer_elem_bag -> ()
  with effects \_ -> \_ -> io

@:CArgs 2
declare ordersLoaderPE : collection {path: string} @Collection -> orders_elem_bag -> ()
  with effects \_ -> \_ -> io

@:CArgs 2
declare supplierLoaderPE : collection {path: string} @Collection -> supplier_elem_bag -> ()
  with effects \_ -> \_ -> io

@:CArgs 2
declare partsuppLoaderPE : collection {path: string} @Collection -> partsupp_elem_bag -> ()
  with effects \_ -> \_ -> io

@:CArgs 2
declare partLoaderPE : collection {path: string} @Collection -> part_elem_bag -> ()
  with effects \_ -> \_ -> io

@:CArgs 2
declare nationLoaderPE : collection {path: string} @Collection -> nation_elem_bag -> ()
  with effects \_ -> \_ -> io

@:CArgs 2
declare regionLoaderPE : collection {path: string} @Collection -> region_elem_bag -> ()
  with effects \_ -> \_ -> io

/////////////////////////////
//
// Query-specific loaders
//
//

// Q1

@:CArgs 3
declare q1_lineitemLoaderPC : collection {path: string} @Collection -> q1_lineitem_bag -> lineitem_r -> ()
  with effects \_ -> \_ -> \_ -> io

declare q1_lineitemLoaderMPC : collection {path: string} @Collection -> q1_lineitem_meta_bag -> lineitem_r -> (() -> record_meta) -> ()
  with effects \_ -> \_ -> \_ -> \_ -> io
// Q3

@:CArgs 3
declare q3_lineitemLoaderPC : collection {path: string} @Collection -> q3_lineitem_bag -> lineitem_r -> ()
  with effects \_ -> \_ -> \_ -> io

@:CArgs 3
declare q3_customerLoaderPC : collection {path: string} @Collection -> q3_customer_bag -> customer_r -> ()
  with effects \_ -> \_ -> \_ -> io

@:CArgs 3
declare q3_ordersLoaderPC : collection {path: string} @Collection -> q3_orders_bag -> orders_r -> ()
  with effects \_ -> \_ -> \_ -> io

// Q5

@:CArgs 3
declare q5_lineitemLoaderPC : collection {path: string} @Collection -> q5_lineitem_bag -> lineitem_r -> ()
  with effects \_ -> \_ -> \_ -> io

declare q5_lineitemLoaderMPC : collection {path: string} @Collection -> q5_lineitem_meta_bag -> lineitem_r -> (() -> record_meta) -> ()
  with effects \_ -> \_ -> \_ -> \_ -> io

@:CArgs 3
declare q5_customerLoaderPC : collection {path: string} @Collection -> q5_customer_bag -> customer_r -> ()
  with effects \_ -> \_ -> \_ -> io

@:CArgs 3
declare q5_ordersLoaderPC : collection {path: string} @Collection -> q5_orders_bag -> orders_r -> ()
  with effects \_ -> \_ -> \_ -> io

@:CArgs 3
declare q5_supplierLoaderPC : collection {path: string} @Collection -> q5_supplier_bag -> supplier_r -> ()
  with effects \_ -> \_ -> \_ -> io

// Fixed size not needed for nation or region
@:CArgs 3
declare q5_nationLoaderPC : collection {path: string} @Collection -> q5_nation_bag -> nation_r -> ()
  with effects \_ -> \_ -> \_ -> io

@:CArgs 3
declare q5_regionLoaderPC : collection {path: string} @Collection -> q5_region_bag -> region_r -> ()
  with effects \_ -> \_ -> \_ -> io


// Q6

@:CArgs 3
declare q6_lineitemLoaderPC : collection {path: string} @Collection -> q6_lineitem_bag -> lineitem_r -> ()
  with effects \_ -> \_ -> \_ -> io


// Q18

@:CArgs 3
declare q18_lineitemLoaderPC : collection {path: string} @Collection -> q18_lineitem_bag -> lineitem_r -> ()
  with effects \_ -> \_ -> \_ -> io

@:CArgs 3
declare q18_customerLoaderPC : collection {path: string} @Collection -> q18_customer_bag -> customer_r -> ()
  with effects \_ -> \_ -> \_ -> io

@:CArgs 3
declare q18_ordersLoaderPC : collection {path: string} @Collection -> q18_orders_bag -> orders_r -> ()
  with effects \_ -> \_ -> \_ -> io


// Q22

@:CArgs 3
declare q22_customerLoaderPC : collection {path: string} @Collection -> q22_customer_bag -> customer_r -> ()
  with effects \_ -> \_ -> \_ -> io

@:CArgs 3
declare q22_ordersLoaderPC : collection {path: string} @Collection -> q22_orders_bag -> orders_r -> ()
  with effects \_ -> \_ -> \_ -> io


///////////////////////////
//
// Converter annotations.

control ConvertPSVToBFC [lbl: label, batch_size: expr, sink_trig: expr, next_trig: expr] {
 ?loader ?files (?col : collection {elem: ?t})
 => print "Loading a file";
    $.[loader] $.[files] $.[col];
    print ("Loaded: " ++ (itos ($.[col].size())));
    print "Converting to bfc";
    let last_batch =
      $.[col].fold
        (\acc -> \e -> (
          if acc.size() < $[batch_size]
          then acc.insert {elem: e}; acc
          else (
            let bfc = empty {elem: $::[t]} @BulkFlatCollection
            in (
              bfc.append acc;
              local_count = local_count + (acc.size());
              ($[sink_trig], me) <- bfc.save();
              let emp = empty {elem: {elem: $::[t]}} @Collection in
              (emp.insert {elem: e}; emp)
            )
          )
        )) empty {elem: {elem: $::[t]}} @Collection
    in (
      let bfc = empty {elem: $::[t]} @BulkFlatCollection
      in (
        local_count = local_count + (last_batch.size());
        print ("Saved: " ++ (itos local_count));
        bfc.append last_batch;
        ($[sink_trig], me) <- bfc.save();
        ($[next_trig], me) <- ()
      )
    )
 +> {
    declare local_count: mut int = 0
 }
}


control ConvertPSVToFPB [on_batch_fn: expr, batch_size: expr, batch_buffer: expr, sink_trig: expr]
{
 ?loader ?files (?col : collection ?t)
 => print "Loading files:";
    ($.[files].iterate (\f -> print ("  " ++ f.path)));
    $.[loader] $.[files] $.[col];
    print ("Loaded: " ++ (itos ($.[col].size())) ++ " tuples.");
    let last_batch =
      $.[col].fold
        (\acc -> \e -> (
          if acc.size() < $[batch_size]
          then ((acc.insert e); acc)
          else ( (tuple_count = tuple_count + (acc.size()));
                 (batch_count = batch_count + 1);
                 ($[on_batch_fn] acc);
                 (($[sink_trig], me) <- $[batch_buffer].save());
                 ($[batch_buffer].clear());
                 let emp = empty $::[t] @Collection in
                 ((emp.insert e); emp)
               )
        )) empty $::[t] @Collection
    in
    ( (tuple_count = tuple_count + (last_batch.size()));
      (batch_count = batch_count + 1);
      ($[on_batch_fn] last_batch);
      (($[sink_trig], me) <- $[batch_buffer].save());
      ($[batch_buffer].clear());
      (print ("Saved: " ++ (itos tuple_count) ++ " tuples."));
       print ("Saved: " ++ (itos batch_count) ++ " batches.") )
 +> {
    declare tuple_count: mut int = 0
    declare batch_count: mut int = 0
 }
}
