include "tpch/benchmark.k3"

/**********************
* SQL query
***********************
select top 100
        c_name,
        c_custkey,
        o_orderkey,
        o_orderdate,
        o_totalprice,
        sum(l_quantity)
from
        customer,
        orders,
        lineitem
where
        o_orderkey in (
                select
                        l_orderkey
                from
                        lineitem
                group by
                        l_orderkey having
                                sum(l_quantity) > 300
        )
        and c_custkey = o_custkey
        and o_orderkey = l_orderkey
group by
        c_name,
        c_custkey,
        o_orderkey,
        o_orderdate,
        o_totalprice
order by
        o_totalprice desc,
        o_orderdate
****************************
* Plan:
* group by
*   join customer
*     join orders
*          (filter . group lineitem)
****************************/

declare master : address

declare lineitem : mut lineitem_bag
declare customer : mut customer_bag
declare orders   : mut orders_bag

// Final result.
typedef loc_q_by_ncodt_r   = { key: {nm:string, ck:int, ok:int, od:string, tp:real}, value: real}
typedef loc_q_by_ncodt_map = collection loc_q_by_ncodt_r @Map

typedef lo_q_by_odt_r     = {key : {ok: int, od: string, tp: real}, value : real}
typedef lo_odtq_by_ck_r   = {key :int, value : collection lo_q_by_odt_r @Map}
typedef lo_odtq_by_ck_map = collection lo_odtq_by_ck_r @Map

declare q18_peer_result : loc_q_by_ncodt_map
declare results : collection {name: string, custkey: int, orderkey: int, orderdate:string, totalprice: real, sum: real} @Collection

// Q18 intermediates.
declare li_having_result : mut collection {key: int, value: real} @Map

declare merge_q_by_odt_r : lo_q_by_odt_r -> lo_q_by_odt_r -> lo_q_by_odt_r
  = \a -> \b -> {key: a.key, value: a.value + b.value}

declare merge_odtq_by_ck_r : lo_odtq_by_ck_r -> lo_odtq_by_ck_r -> lo_odtq_by_ck_r
  = \a -> \b -> {key: a.key, value: a.value.fold (\acc -> \r -> ((acc.insert_with r merge_q_by_odt_r); acc)) b.value}

declare merge_q_by_ncodt_r : loc_q_by_ncodt_r -> loc_q_by_ncodt_r -> loc_q_by_ncodt_r
  = \a -> \b -> {key: a.key, value: a.value + b.value}

trigger q18_local : () = \_ -> (
  ( li_having_result = ((lineitem.groupBy (\li -> li.l_orderkey)
                                          (\acc -> \li -> acc + li.l_quantity)
                                          0.0)
                                 .filter  (\okq -> okq.value > 300.0))
                                 .fold    (\acc -> \li -> ((acc.insert li); acc))
                                          (empty {key: int, value: real} @Map));

  ( ignore (
    ( orders.groupBy (\o -> o.o_orderkey)
                     (\_ -> \o -> { o_custkey    : o.o_custkey
                                  , o_orderdate  : o.o_orderdate
                                  , o_totalprice : o.o_totalprice })
                     {o_custkey:0, o_orderdate:"", o_totalprice:0.0} )
            .fold    (\acc -> \o ->
                        case li_having_result.lookup {key: o.key, value: 0.0} of
                        { Some li -> ((acc.insert_with
                                        {key: o.value.o_custkey
                                        , value: {| key: {ok:int, od:string, tp:real}, value: real
                                                  | { key: { ok: o.key
                                                           , od: o.value.o_orderdate
                                                           , tp: o.value.o_totalprice }
                                                    , value: li.value}
                                                  |} @Map
                                        }
                                        merge_odtq_by_ck_r);
                                      acc)
                        }
                        { None -> acc }
                     )
                     (empty lo_odtq_by_ck_r @Map)
    ) @PSendPartitionByKey( dest_trg      = [$ loc_process_redistribute]
                          , barrier_trg   = [$ loc_lhs_peer_barrier]
                          , nodes         = [$ peers ]
                          , send_extra_fn = [$ (\x -> (Some x, None immut, true))])
  );

  ( ignore (
    (customer.groupBy (\c -> c.c_custkey)
                      (\_ -> \c -> c.c_name)
                      "")
             .fold    (\acc -> \c -> ((acc.insert c); acc))
                      (empty {key: int, value: string} @Map)
    ) @PSendPartitionByKey( dest_trg      = [$ loc_process_redistribute]
                          , barrier_trg   = [$ loc_rhs_peer_barrier]
                          , nodes         = [$ peers ]
                          , send_extra_fn = [$ (\x -> (None immut, Some x, false))])
  );

  () @StreamingHashJoin(
        lbl                  = [# loc ]
      , lhs_ht_ty            = [: {key: int, value: collection {key : {ok: int, od: string, tp: real}, value : real} @Map} ]
      , rhs_ht_ty            = [: {key: int, value: string} ]

      , lhs_probe            = [$ (\lht -> \out -> \r ->
                                    case lht.lookup {key: r.key, value: empty {key : {ok: int, od: string, tp: real}, value : real} @Map} of
                                    { Some l ->
                                      l.value.fold (\acc -> \kv ->
                                          (( acc.insert_with
                                               { key: { nm: r.value, ck: r.key, ok: kv.key.ok, od: kv.key.od, tp: kv.key.tp }
                                               , value: kv.value }
                                               merge_q_by_ncodt_r );
                                             acc ))
                                        out
                                    }
                                    { None   -> out }
                                  )
                               ]

      , rhs_probe            = [$ (\rht -> \out -> \l ->
                                    case rht.lookup {key: l.key, value: ""} of
                                    { Some r ->
                                      l.value.fold (\acc -> \kv ->
                                          (( acc.insert_with
                                               { key: { nm: r.value, ck: r.key, ok: kv.key.ok, od: kv.key.od, tp: kv.key.tp }
                                               , value: kv.value }
                                               merge_q_by_ncodt_r );
                                             acc ))
                                        out
                                    }
                                    { None   -> out }
                                  )
                               ]

      , lhs_insert_with      = [$ (\old -> \new -> {key: old.key, value:
                                    (new.value.fold
                                      (\acc -> \kv ->
                                        ((acc.insert_with
                                              {key:kv.key, value:kv.value}
                                              (\old2 -> \new2 -> {key:old2.key, value: old2.value + new2.value}));
                                          acc))
                                      old.value)}) ]

      , rhs_insert_with      = [$ (\_ -> \new -> new) ]

      , has_outputs          = [$ (\out -> out.size() > 0) ]
      , empty_out_buffer     = [$ empty { key: {nm:string, ck:int, ok:int, od:string, tp:real}, value: real} @Map ]


      , lhs_pipeline_next    = [$ (\out -> ignore ( ( out ) @SendPartitionByKey( dest_trg      = [$ loc_aggregate ]
                                                                               , nodes         = [$ peers ]
                                                                               , send_extra_fn = [$ (\x -> x) ]) )) ]

      , rhs_pipeline_next    = [$ (\out -> ignore ( ( out ) @SendPartitionByKey( dest_trg      = [$ loc_aggregate ]
                                                                               , nodes         = [$ peers ]
                                                                               , send_extra_fn = [$ (\x -> x) ]) )) ]

      , peer_next            = [$ ( print "LI-OR-CS join finished customer probe." );
                                  () @SendPunctuation(trg = [$ loc_aggregate_peer_barrier ], nodes = [$ peers ])
                               ]
      , next                 = [$ print "LI-OR-CS join all nodes finished." ]
      , coordinator          = [$ master]
      , nodes                = [$ peers]
    )
)

trigger loc_aggregate : loc_q_by_ncodt_map = \vals -> (
  vals.iterate (\kv -> q18_peer_result.insert_with kv merge_q_by_ncodt_r)
)

trigger loc_aggregate_peer_barrier : () = \_ -> (
  ( ( print "Query 18 done." ) ;
    ( (() @:Result) @TPCHBenchmarkWithoutMaster )
  ) @OnCounter(id=[# loc_aggregate_done], eq=[$ peers.size()], reset=[$ false], profile=[$ false])
)

trigger start : () = \_ -> (() @:Start) @TPCHBenchmarkWithoutMaster(
  nodes                = [$ peers ],
  loadExpr             = [$ ( lineitemFiles.iterate (\e -> lineitemLoaderP e.path lineitem);
                              ordersFiles.iterate   (\e -> ordersLoaderP   e.path orders);
                              customerFiles.iterate (\e -> customerLoaderP e.path customer)
                            ) ],
  preLoadExpr          = [$ ()],
  preReadyExpr         = [$ ()],
  onReadyExpr          = [$ peers.iterate (\p -> (q18_local, p.addr) <- ()) ],
  finishArgT           = [: ()],
  preTestFinishExpr    = [$ (\_ -> ())],
  preFinishExpr        = [$ ()],
  preShutdownExpr      = [$ (q18_peer_result.iterate(\r ->
                              results.insert { name: r.key.nm, custkey: r.key.ck, orderkey: r.key.ok
                                             , orderdate: r.key.od, totalprice: r.key.tp, sum: r.value} ))
                         ],
  finishAsShutdownExpr = [$ true]
)

source rows : () = value ()
feed rows |> start
