include "tpch/benchmark.k3"
include "Annotation/Set.k3"

/**********************
* SQL query
***********************
select top 10
        l_orderkey,
        sum(l_extendedprice * (1 - l_discount)) as revenue,
        o_orderdate,
        o_shippriority
from
        customer,
        orders,
        lineitem
where
        c_mktsegment = 'BUILDING'
        and c_custkey = o_custkey
        and l_orderkey = o_orderkey
        and o_orderdate < date '1995-03-15'
        and l_shipdate > date '1995-03-15'
group by
        l_orderkey,
        o_orderdate,
        o_shippriority
order by
        revenue desc,
        o_orderdate
****************************/

declare master : address

declare lineitem_r : lineitem_r
declare customer_r : customer_r
declare orders_r   : orders_r

declare lineitem : mut q3_lineitem_bag
declare customer : mut q3_customer_bag
declare orders   : mut q3_orders_bag

// Final result.
typedef lior_epd_by_ods_r     = {key : {ok: int, od: int, sp: int}, value: real}
typedef lior_epd_by_ods_map   = collection lior_epd_by_ods_r @Map

declare q3_peer_result : lior_epd_by_ods_map

// Intermediates for Q3 plans.
typedef li_epd_by_ok_r        = {key: int , value: real }  // l_orderkey => l_extendedprice * (1 - l_discount)
typedef lior_epdods_by_ck_r   = {key: int, value : lior_epd_by_ods_map }
typedef lior_epdods_by_ck_map = collection lior_epdods_by_ck_r @IntMap

typedef cs_ck_bag = collection {elem: {c_custkey : int}} @Collection

// Plan intermediates.
declare lior_epdods_map  : lior_epdods_by_ck_map

declare merge_li_epd_by_ok : li_epd_by_ok_r -> li_epd_by_ok_r -> li_epd_by_ok_r =
  \a -> \b -> {key : a.key, value : a.value + b.value}

declare merge_lior_epd_by_ods : lior_epd_by_ods_r -> lior_epd_by_ods_r -> lior_epd_by_ods_r =
  \a -> \b -> {key : a.key, value : a.value + b.value}

declare merge_lior_r : lior_epdods_by_ck_r -> lior_epdods_by_ck_r -> lior_epdods_by_ck_r =
  \a -> \b -> {key : a.key, value : a.value.fold (\acc -> \r -> ((acc.insert_with r merge_lior_epd_by_ods); acc)) b.value}

// Distributed plan: dist. hash-join on li-or, broadcast semi-join on lior-cs.
trigger lineitem_orders : () = \_ -> (
  ( () @:NoPipeline )
    @JoinSelector
      ( lbl                  = [# lo ]
      , lhs_ht_id            = [# lo_lhs_ht ]
      , rhs_ht_id            = [# lo_rhs_ht ]

      , lhs_sample_query     = [$ lineitem.sample (\acc -> \l ->
                                                    if l.l_shipdate > 19950315 then
                                                      ((acc.insert_with
                                                        {key: l.l_orderkey.b, value: 1}
                                                        (\old -> \new -> {key: old.key, value: old.value + new.value}));
                                                       acc)
                                                    else acc
                                                  )
                                                  (empty {key: int, value: int} @IntMap)
                                                  (lineitem.size() / j1_sample_factor)
                               ]

      , rhs_sample_query     = [$ orders.sample (\acc -> \o ->
                                                  if o.o_orderdate < 19950315 then
                                                    ((acc.insert_with
                                                      {key: o.o_orderkey, value: 1}
                                                      (\old -> \new -> {key: old.key, value: old.value + new.value}));
                                                     acc)
                                                  else acc
                                                )
                                                (empty {key: int, value: int} @IntMap)
                                                (orders.size() / j1_sample_factor)
                               ]

      , frequency_threshold  = [$ 1000.0 ]

      , lhs_query = [$  ((lineitem.filter  (\l -> l.l_shipdate > 19950315 ))
                                  .groupBy (\l -> l.l_orderkey)
                                           (\acc -> \l -> acc + (l.l_extendedprice * (1 - l.l_discount)))
                                           0.0)
                                  .fold    ((\acc -> \l -> ((acc.insert l); acc)) @:Accumulate)
                                           (empty {key:int, value:real} @IntMap)
                    ]
      , lhs_query_clear = [$ lineitem = empty q3_lineitem_r @Collection ]

      , rhs_query = [$ ((orders.filter  (\o -> o.o_orderdate < 19950315 ))
                               .groupBy (\o -> o.o_orderkey)
                                        (\_ -> \o -> { od : o.o_orderdate
                                                     , ck : o.o_custkey
                                                     , sp : o.o_shippriority})
                                        { od: 0, ck: 0, sp: 0 })
                               .fold    ((\acc -> \o -> ((acc.insert o); acc)) @:Accumulate)
                                        (empty {key : int, value : {od:int, ck:int, sp:int}} @IntMap)
                    ]
      , rhs_query_clear = [$ orders = empty q3_orders_r @Collection ]

      , join_key_ty          = [: int ]
      , lhs_ht_ty            = [: {key:int, value: real} ]
      , rhs_ht_ty            = [: {key:int, value: {od:int, ck:int, sp:int} } ]

      , lhs_probe            = [$ (\lht -> \_ -> \o ->
                                    case lht.lookup {key: o.key, value: 0.0}
                                    of
                                      { Some li -> lior_epdods_map.insert_with
                                                    { key: o.value.ck
                                                    , value: {|key : {ok: int, od: int, sp: int}, value: real
                                                              | { key   : {ok: o.key, od: o.value.od, sp: o.value.sp }
                                                                , value : li.value }
                                                              |} @Map }
                                                    merge_lior_r
                                      }
                                      { None   -> ()  }
                                  )
                               ]

      , rhs_probe            = [$ (\rht -> \_ -> \l ->
                                    case rht.lookup {key: l.key, value: {od:0, ck:0, sp:0}}
                                    of
                                      { Some ord -> lior_epdods_map.insert_with
                                                     { key: ord.value.ck
                                                     , value: {|key : {ok: int, od: int, sp: int}, value: real
                                                               | { key   : {ok: l.key, od: ord.value.od, sp: ord.value.sp }
                                                                 , value : l.value }
                                                               |} @Map }
                                                     merge_lior_r
                                      }
                                      { None   -> ()  }
                                  )
                               ]

      , lhs_insert_with      = [$ merge_li_epd_by_ok ]
      , rhs_insert_with      = [$ (\_ -> \new -> new) ]

      , has_outputs          = [$ (\_ -> false) ]
      , empty_out_buffer     = [$ () ]

      , lhs_pipeline_next    = [$ (\_ -> ()) ]
      , rhs_pipeline_next    = [$ (\_ -> ()) ]

      , lhs_clear_expr       = [$ (\_ -> lo_lhs_ht = empty {key:int, value: real} @IntMap) ]
      , rhs_clear_expr       = [$ (\_ -> lo_rhs_ht = empty {key:int, value: {od:int, ck:int, sp:int}} @IntMap) ]

      , peer_next            = [$ (lineitem_orders_customer, me) <- () ]
      , next                 = [$ () ]
      , coordinator          = [$ master]
      , nodes                = [$ peers]
      , masters              = [$ masters]
      , masters_map          = [$ peer_masters]
      , profile              = [$ false]
      )
)

trigger lineitem_orders_customer : () = \_ -> (
  (print "loc");
  ( (() @:StartTimer) @Time(lbl=[# loc_JOIN], tag=[$ "Time "]) );

  // Broadcast customers to all peers with li-or buckets for semi-join.
  ((ignore ((customer.filter  (\c -> c.c_mktsegment == "BUILDING" ))
                     .map     (\c -> { c_custkey : c.c_custkey }))
  ) @:Send
  ) @BroadcastByMachine(
                lbl           = [# loc_broadcast ]
              , dest_trg      = [$ loc_probe_rhs ]
              , masters       = [$ masters ]
              , masters_map   = [$ peer_masters ]
              , send_ty       = [: collection {elem: {c_custkey : int}} @Collection ]
              , send_extra_fn = [$ \x -> x ] )
)

// TODO: sort and limit on q3_peer_result
trigger loc_probe_rhs : cs_ck_bag = ((\vals -> (
  ( vals.iterate (\v ->
      case lior_epdods_map.lookup {key: v.elem.c_custkey, value: empty lior_epd_by_ods_r @Map}
      of
      { Some lo_r -> lo_r.value.iterate (\kv -> q3_peer_result.insert_with kv merge_lior_epd_by_ods) }
      { None -> () } )
  ) ;
  ( ( (() @:Result) @TPCHBenchmarkWithoutMaster );
    if master == me then ( ( () @:StopTimer); finalizeResult ()) @Time(lbl=[# loc_JOIN], tag=[$ "Time "]) else (finalizeResult ())
  ) @OnCounter(id=[# loc_done], eq=[$ peers.size()], reset=[$ false], profile=[$ false])
)
) @:Receive
) @BroadcastByMachine( lbl           = [# loc_broadcast ]
                     , dest_trg      = [$ loc_probe_rhs ]
                     , masters       = [$ masters ]
                     , masters_map   = [$ peer_masters ]
                     , send_ty       = [: collection {elem: {c_custkey : int}} @Collection ]
                     , send_extra_fn = [$ \x -> x ] )

declare finalizeResult: () -> () = \_ -> (
    q3_peer_result.iterate (\r ->
      results.insert { orderkey: r.key.ok
                     , revenue: r.value
                     , orderdate: tpch_date_to_string (r.key.od)
                     , shippriority: r.key.sp })
)

// For ktrace:
declare results: collection {orderkey: int, revenue: real, orderdate: string, shippriority: int} @Collection

trigger start : () = \_ -> (() @:Start) @TPCHBenchmarkWithoutMaster(
  nodes                = [$ peers ],
  loadExpr             = [$ q3_lineitemLoaderPC lineitemFiles lineitem lineitem_r;
                            q3_ordersLoaderPC   ordersFiles   orders   orders_r;
                            q3_customerLoaderPC customerFiles customer customer_r
                         ],
  preLoadExpr          = [$ ()],
  preReadyExpr         = [$ ()],
  onReadyExpr          = [$ (lineitem_orders, me) <- ()],
  finishArgT           = [: ()],
  preTestFinishExpr    = [$ (\_ -> ())],
  preFinishExpr        = [$ ( () @GatherResultsAsCSV(
                                    query_cl = [* [% ci: [# results], csink: [$ results_sink]] ]
                                  , nodes    = [$ peers]
                                  , next     = [$ peers.iterate (\p -> (shutdown, p.addr) <- ()) ]) )
                         ],
  preShutdownExpr      = [$ () ],
  finishAsShutdownExpr = [$ false]
)

sink results_sink : {orderkey: int, revenue: real, orderdate: string, shippriority: int} = file "results.csv" text csv
sink query_time_sink : string = file "time.csv" text csv

source rows : () = value ()
feed rows |> start
