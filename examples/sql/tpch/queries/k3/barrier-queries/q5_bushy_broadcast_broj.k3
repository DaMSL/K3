include "tpch/benchmark.k3"

/**********************
* SQL query
***********************
select
        n_name,
        sum(l_extendedprice * (1 - l_discount)) as revenue
from
        customer,
        orders,
        lineitem,
        supplier,
        nation,
        region
where
        c_custkey = o_custkey
        and l_orderkey = o_orderkey
        and l_suppkey = s_suppkey
        and c_nationkey = s_nationkey
        and s_nationkey = n_nationkey
        and n_regionkey = r_regionkey
        and r_name = 'ASIA'
        and o_orderdate >= date '1994-01-01'
        and o_orderdate < date '1995-01-01'
group by
        n_name
order by
        revenue desc
****************************
* Join graph:
*   l -- o -- c
*     \- s -/
*        |
*        n
*        |
*        r
*
****************************
* Join order:
*   (c-n-r)-o-\
*   (s-n-r)-l----result
****************************/

declare master : address
declare clear_enabled : bool = false
declare sample_factor : real = 10.0

declare lineitem_r : lineitem_r
declare customer_r : customer_r
declare orders_r   : orders_r
declare supplier_r : supplier_r
declare nation_r   : nation_r
declare region_r   : region_r

declare lineitem : mut q5_lineitem_bag
declare orders   : mut q5_orders_bag
declare customer : mut q5_customer_bag
declare supplier : mut q5_supplier_bag
declare nation   : mut q5_nation_bag
declare region   : mut q5_region_bag

// Final result.
typedef q5_r_by_n_r     = {key : string, value: real}
typedef q5_r_by_n_map   = collection q5_r_by_n_r @StrMap

declare q5_result : q5_r_by_n_map
declare results : collection {key: string, value: real} @Collection

declare merge_epd_by_n :    {key: string, value: real}
                         -> {key: string, value: real}
                         -> {key: string, value: real}
  = \old -> \new -> {key: old.key, value: old.value + new.value}

// Plan intermediates.
declare r_asia_by_rk : mut collection {key: int, value: () } @IntMap
declare n_asia_by_nk : mut collection {key: int, value: string } @IntMap

declare li_okepd_by_sk : mut collection {key: int, value: collection {key: int, value: real} @IntMap} @IntMap
declare or_ok_by_ck    : mut collection {key: int, value: collection {o_orderkey: int} @Collection} @IntMap

declare co_nm_by_no  : mut collection {nationkey: int, orderkey: int} @Collection
declare sl_epd_by_no : mut collection {key: {nationkey: int, orderkey: int}, value: real} @Map

trigger q5_prep : () = \_ -> (
  ( r_asia_by_rk =
     ((region.filter  (\r -> r.r_name == "ASIA"))
             .groupBy (\r -> r.r_regionkey)
                      (\_ -> \_ -> ())
                      ())
             .fold    ((\acc -> \r -> ((acc.insert r); acc)) @:Accumulate)
                      (empty {key: int, value: ()} @IntMap) );

  ( n_asia_by_nk =
      ((nation.filter  (\n -> r_asia_by_rk.member {key: n.n_regionkey, value: ()}))
              .groupBy (\n -> n.n_nationkey)
                       (\_ -> \n -> n.n_name)
                       "")
              .fold    ((\acc -> \n -> ((acc.insert n); acc)) @:Accumulate)
                       (empty {key: int, value: string} @IntMap) )
)

// TODO: in the partitioned version, S|s_suppkey should be broadcast into L|l_orderkey partitions.
trigger q5_sl_start : () = \_ -> (
  () @PipelinedBroadcastJoin(
        lbl       = [# sl ]

      , lhs_query = [$ li_okepd_by_sk =
                        (lineitem.groupBy (\li -> li.l_suppkey)
                                          (\acc -> \li ->
                                            ((acc.insert_with { key   : li.l_orderkey
                                                              , value : li.l_extendedprice * (1 - li.l_discount)}
                                                (\old -> \new -> {key: old.key, value: old.value + new.value}));
                                              acc))
                                          (empty {key : int, value : real} @IntMap))
                                 .fold    ((\acc -> \okepd -> ((acc.insert okepd); acc)) @:Accumulate)
                                          (empty {key: int, value: collection {key: int, value: real} @IntMap} @IntMap)
                    ]
      , lhs_query_clear = [$ if clear_enabled then (lineitem = empty q5_lineitem_r @Collection) else () ]

      , rhs_query = [$ ((supplier.filter  (\s -> n_asia_by_nk.member {key: s.s_nationkey, value:""}))
                                 .groupBy (\s -> s.s_suppkey)
                                          (\_ -> \s -> s.s_nationkey)
                                          0)
                                 .fold    ((\acc -> \s -> ((acc.insert s); acc)) @:Accumulate)
                                          (empty {key: int, value: int} @IntMap)

                    ]
      , rhs_query_clear = [$ if clear_enabled then (supplier = empty q5_supplier_r @Collection) else () ]

      , lhs_probe            = [$ (\_ -> \s ->
                                    li_okepd_by_sk.lookup_with
                                      {key: s.key, value: empty {key: int, value: real} @IntMap}
                                      (\l -> l.value.iterate (\loe ->
                                               sl_epd_by_no.insert_with
                                                     { key: {nationkey: s.value, orderkey: loe.key}
                                                     , value: loe.value}
                                                     (\old -> \new -> {key: old.key, value: old.value + new.value}))
                                      )
                                  )
                               ]

      , broadcast_ty         = [: collection {key: int, value: int} @IntMap ]
      , has_outputs          = [$ (\_ -> false) ]
      , empty_out_buffer     = [$ () ]
      , pipeline_next        = [$ (\_ -> ()) ]
      , peer_next            = [$ () ]
      , next                 = [$ () ]
      , coordinator          = [$ master]
      , nodes                = [$ peers]
      , masters              = [$ masters ]
      , masters_map          = [$ peer_masters ]
      , profile              = [$ false]
    )
)

// TODO: in the partitioned version, C|c_custkey should be broadcast into O|o_orderkey partitions.
trigger q5_co_start : () = \_ -> (
  () @PipelinedBroadcastJoin(
        lbl       = [# co ]
      , lhs_query = [$ or_ok_by_ck =
                         ((orders.filter  (\o ->     o.o_orderdate >= 19940101
                                                 and o.o_orderdate <  19950101 ))
                                 .groupBy (\o -> o.o_custkey)
                                          (\acc -> \o -> ((acc.insert {o_orderkey: o.o_orderkey}); acc))
                                          (empty {o_orderkey: int} @Collection))
                                 .fold    ((\acc -> \o -> ((acc.insert o); acc)) @:Accumulate)
                                          (empty {key: int, value: collection {o_orderkey: int} @Collection} @IntMap)
                    ]
      , lhs_query_clear = [$ if clear_enabled then (orders = empty q5_orders_r @Collection) else () ]

      , rhs_query = [$ (((customer.filter  (\c -> n_asia_by_nk.member { key: c.c_nationkey, value: "" }))
                                  .groupBy (\c -> c.c_custkey)
                                           (\acc -> \c -> c.c_nationkey)
                                           0)
                                  .fold    ((\acc -> \c -> ((acc.insert c); acc)) @:Accumulate)
                                           (empty {key: int, value: int} @IntMap))
                    ]
      , rhs_query_clear = [$ if clear_enabled then (customer = empty q5_customer_r @Collection) else () ]

      , lhs_probe            = [$ (\_ -> \c ->
                                    or_ok_by_ck.lookup_with {key: c.key, value: empty {o_orderkey:int} @Collection}
                                      (\o -> o.value.iterate (\ok ->
                                               co_nm_by_no.insert { nationkey: c.value
                                                                  , orderkey: ok.o_orderkey })
                                      )
                                  )
                               ]

      , broadcast_ty         = [: collection {key: int, value: int} @IntMap ]
      , has_outputs          = [$ (\_ -> false) ]
      , empty_out_buffer     = [$ () ]

      , pipeline_next        = [$ (\_ -> ()) ]

      , peer_next            = [$ ((( ignore co_nm_by_no
                                  ) @:Send
                                  ) @BroadcastByMachine( lbl           = [# cosl_rj_bcast ]
                                                       , dest_trg      = [$ cosl_probe ]
                                                       , masters       = masters
                                                       , masters_map   = masters_map
                                                       , send_ty       = [: collection {nationkey: int, orderkey: int} @Collection]
                                                       , send_extra_fn = [$ \x -> x ] )
                                  );
                                  co_nm_by_no = empty {nationkey: int, orderkey: int} @Collection
                               ]

      , next                 = [$ () ]
      , coordinator          = [$ master]
      , nodes                = [$ peers]
      , masters              = [$ masters ]
      , masters_map          = [$ peer_masters ]
      , profile              = [$ false]
    )
)

trigger q5_cosl_start : () = \_ -> (
  () @ReceiveBroadcastJoin(
        lbl              = [# cosl ]
      , lhs_probe        = [$ (\_ -> \co ->
                                sl_epd_by_no.lookup_with {key: co, value: 0.0}
                                  (\sl -> n_asia_by_nk.lookup_with {key: co.nationkey, value: ""}
                                            (\nkn -> q5_result.insert_with {key: nkn.value, value:sl.value} merge_epd_by_n)
                                  )
                              )
                           ]
      , broadcast_ty     = [: collection {nationkey: int, orderkey: int} @Collection ]
      , has_outputs      = [$ (\_ -> false) ]
      , empty_out_buffer = [$ () ]
      , pipeline_next    = [$ (\_ -> ()) ]

      , peer_next        = [$ ( sl_epd_by_no = empty {key: {nationkey: int, orderkey: int}, value: real} @Map );
                              ( if me == master then () else ( (q5_result_aggregate, master) <- q5_result ));
                              ((() @:Result) @TPCHBenchmarkWithoutMaster)
                           ]
      , next             = [$ () ]
      , coordinator      = [$ master]
      , nodes            = [$ peers]
      , masters          = [$ masters ]
      , masters_map      = [$ peer_masters ]
    )
)

trigger q5_result_aggregate : q5_r_by_n_map = \vals -> (
  vals.iterate (\r -> q5_result.insert_with r merge_epd_by_n)
)

trigger start : () = \_ -> (() @:Start) @TPCHBenchmarkWithoutMaster(
  nodes               = [$ peers],
  loadExpr            = [$ ( lineitemLineCountFiles.iterate (\e -> lineitemRows = lineitemRows + (lineCountFile e.path));
                             ordersLineCountFiles.iterate   (\e -> ordersRows = ordersRows + (lineCountFile e.path));
                             customerLineCountFiles.iterate (\e -> customerRows = customerRows + (lineCountFile e.path));
                             supplierLineCountFiles.iterate (\e -> supplierRows = supplierRows + (lineCountFile e.path));

                             q5_lineitemLoaderPFC lineitemFiles lineitem lineitem_r lineitemRows;
                             q5_ordersLoaderPFC   ordersFiles   orders   orders_r   ordersRows;
                             q5_customerLoaderPFC customerFiles customer customer_r customerRows;
                             q5_supplierLoaderPFC supplierFiles supplier supplier_r supplierRows;
                             q5_nationLoaderPC    nationFiles   nation   nation_r;
                             q5_regionLoaderPC    regionFiles   region   region_r;
                             ( (q5_prep, me) <- () )
                           ) ],
  preLoadExpr         = [$ ()],
  preReadyExpr        = [$ ()],
  onReadyExpr         = [$ (( (q5_sl_start, me) <- () );
                              (q5_co_start, me) <- () )
                        ],
  finishArgT          = [: ()],
  preTestFinishExpr   = [$ (\_ -> ())],
  preFinishExpr       = [$ (print ("Q5 num results:" ++ (itos (q5_result.size()))));
                           (q5_result.iterate (\r -> ((results.insert r); ((results_sink, me) <- r ))));
                           peers.iterate (\p -> (shutdown, p.addr) <- ())
                        ],
  preShutdownExpr     = [$ ()],
  finishAsShutdownExpr = [$ false]
)

sink results_sink : {key: string, value: real} = file "results.csv" csv
sink query_time_sink : string = stdout csv

source rows : () = value ()
feed rows |> start
