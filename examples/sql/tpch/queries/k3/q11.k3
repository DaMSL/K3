include "tpch/benchmark.k3"
include "Annotation/Set.k3"
include "Distributed/SQLTransformers.k3"

// Relations / Loaders
declare master: address
declare supplier: mut supplier_bag
declare partsupp: mut collection {elem: partsupp_r} @Collection
declare nation: mut collection {elem: nation_r} @Collection
@:CArgs 2
declare partsuppLoaderPE: collection {path: string} @Collection -> collection {elem: partsupp_r} @Collection -> ()
@:CArgs 2
declare nationLoaderPE: collection {path: string} @Collection -> collection {elem: nation_r} @Collection -> ()

// Helpers
declare valid_orderdate: {elem: orders_r} -> bool = \oe -> (
  (oe.elem.o_orderdate >= 19930701) and (oe.elem.o_orderdate < 19931001)
)

// Intermediates
declare s_n_ps: mut collection {elem: {key: int, value: real}} @Collection
declare local_aggs: mut collection {key: int, value: real} @Collection

trigger q11_stage1: () = \_ -> (
  s_n_ps =
    ((supplier.join
      (nation.filter (\ne -> ne.elem.n_name == "GERMANY"))
      (\s -> \ne -> s.s_nationkey == ne.elem.n_nationkey)
      (\s -> \ne -> s.s_suppkey)
    ).equijoin
      partsupp
      (\sne -> sne.elem)
      (\pse -> pse.elem.ps_suppkey)
      (\sne -> \pse -> {key: pse.elem.ps_partkey, value: (pse.elem.ps_supplycost) * (pse.elem.ps_availqty)})
    );
  (q11_stage2, me) <- ()
) @DistributedHashJoin2(lbl=[# s_n_ps])

trigger q11_stage2: () = \_ -> (
  local_aggs =
    (s_n_ps.groupBy
      (\x -> x.elem.key)
      (\a -> \e -> a + e.elem.value)
      0.0);
  (q11_stage3, me) <- ()
) @DistributedGroupBy2(lbl=[# s_n_ps_groupby], merge=[$ \a -> \b -> a + b])

trigger q11_stage3: () = \_ -> (
  let sum = local_aggs.fold (\a -> \e -> a + e.value) 0.0
  in (q11_stage4, master) <- sum
)

declare total: mut real = 0
trigger q11_stage4: real = \s -> (
  total = total + s;
  (
    let threshold = total * 0.0001 in
    peers.iterate (\p -> (q11_stage5, p.addr) <- threshold)
  ) @OnCounter(id=[# gather_total], eq=[$ peers.size()], profile=[$ false], reset=[$ false])
)

trigger q11_stage5: real = \threshold -> (
  local_aggs = local_aggs.filter (\kv -> kv.value > threshold);
  (() @:Result) @TPCHBenchmarkWithoutMaster
)

declare post_process: collection {key: address, value: collection {key: int, value: real} @Collection} @Map -> () = \x -> (
  x.iterate (\kv1 ->
    kv1.value.iterate (\kv2 ->
      (results_sink, me) <- (kv2.key, kv2.value)
    )
  )
)

// TODO loaders with pushdown
trigger start: () = \_ -> (
  (() @:Start) @TPCHBenchmarkWithoutMaster(
    nodes                = [$ peers],
    loadExpr             = [$ partsuppLoaderPE partsuppFiles partsupp;
                              supplierLoaderP supplierFiles supplier;
                              nationLoaderPE nationFiles nation
                           ],
    preLoadExpr          = [$ ()],
    preReadyExpr         = [$ ()],
    onReadyExpr          = [$ peers.iterate (\p -> (q11_stage1, p.addr) <- () )],
    finishArgT           = [: ()],
    preTestFinishExpr    = [$ (\_ -> () )],
    preFinishExpr        = [$ (ignore local_aggs) @GatherCollection(
                                                    lbl   = [# groupby],
                                                    nodes = [$ peers],
                                                    next  = [$ (\a -> (post_process a; peers.iterate (\p -> (shutdown, p.addr) <- ()) ))])
                           ],
    preShutdownExpr      = [$ ()],
    finishAsShutdownExpr = [$ false]
  )
)

sink results_sink: (int, real) = file "results.csv" text psv
sink query_time_sink: int = file "time.csv" text csv

source rows : () = value ()
feed rows |> start
