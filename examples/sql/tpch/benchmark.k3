include "Annotation/Collection.k3"
include "Core/Barrier.k3"
include "Core/Profile.k3"

declare ignore    : forall a. a -> () = \_ -> ()
control TPCHBenchmarkWithoutMaster
                     [nodes              : expr,
                      loadExpr           : expr,
                      preLoadExpr        : expr,
                      preReadyExpr       : expr,
                      onReadyExpr        : expr,
                      finishArgT         : type,
                      preTestFinishExpr  : expr,
                      preFinishExpr      : expr,
                      preShutdownExpr    : expr]
{
  ?e @:Result => (finished, master) <- $.[e]
  ?e @:Start  => (load_all, me)     <- $.[e]
    +> {
      // Generic, single relation dataset
      declare dataFiles : collection {path: string} @Collection

      // Relation-specific datasets
      declare lineitemFiles : collection {path : string} @Collection
      declare customerFiles : collection {path : string} @Collection
      declare ordersFiles   : collection {path : string} @Collection
      declare supplierFiles : collection {path : string} @Collection
      declare partFiles     : collection {path : string} @Collection
      declare partsuppFiles : collection {path : string} @Collection
      declare nationFiles   : collection {path : string} @Collection
      declare regionFiles   : collection {path : string} @Collection

      declare index_by_hash : forall a. a -> int = (\s -> (
        let n = $[nodes].size () in
        let h = (hash s) in
        ((h % n) + n) % n
      ))

      // Dummy trigger to warm up connections
      trigger hello : () = \_ -> ()

      trigger shutdown : () = \_ -> (
        $[preShutdownExpr];
        haltEngine ()
      )

      // Signal to the master that a peer has finished the query locally.
      trigger finished : $[finishArgT] = \finishArg -> (
        ($[preTestFinishExpr] finishArg);
        ((( $[preFinishExpr];
            $[nodes].iterate (\p -> (shutdown, p.addr) <- ()))
              @:StopTimer) @Time(lbl=[# query], tag=[$ "Query time"])
        ) @OnCounter(id=[# query_done], eq=[$ $[nodes].size()])
      )

      // Signal to the master that a peer is ready.
      // Once all nodes are ready, the master will start the query.
      trigger ready : () = \_ -> (
        ( $[preReadyExpr];
          (( $[onReadyExpr] @:StartTimer) @Time(lbl=[# query], tag=[$ "Query time:"])
          ) @OnCounter(id=[#  nodes_ready], eq=[$ $[nodes].size()]))
      )

      trigger load_all : () = \_ -> (
        $[preLoadExpr];
        ($[loadExpr]) @Profile(lbl=[# loader], tag=[$ "Load time"]);
        ((ready, master) <- ())
      )
    }
}

control TPCHBenchmark[nodes              : expr,
                      loadExpr           : expr,
                      preLoadExpr        : expr,
                      preReadyExpr       : expr,
                      onReadyExpr        : expr,
                      finishArgT         : type,
                      preTestFinishExpr  : expr,
                      preFinishExpr      : expr,
                      preShutdownExpr    : expr]
{
  ?e => ($.[e]) @TPCHBenchmarkWithoutMaster(
                      nodes             = nodes
                    , loadExpr          = loadExpr
                    , preLoadExpr       = preLoadExpr
                    , preReadyExpr      = preReadyExpr
                    , onReadyExpr       = onReadyExpr
                    , finishArgT        = finishArgT
                    , preTestFinishExpr = preTestFinishExpr
                    , preFinishExpr     = preFinishExpr
                    , preShutdownExpr   = preShutdownExpr )
     +> { declare master : address = 127.0.0.1:40000 }
}
