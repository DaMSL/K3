include "simple/schema.k3"

declare master : mut address = 127.0.0.1:40000

declare my_r_part_id : mut int = 1
declare my_s_part_id : mut int = 1

declare my_r_part : mut r_part_ty
declare my_s_part : mut s_part_ty

declare sample_factor : real = 10.0

trigger join : () = \_ -> (
  // Initialize peer partitions.
  (case r_parts.lookup {key: my_r_part_id, value: null_r_part}
   of
   { Some rp -> my_r_part = rp.value }
   { None -> error (print ("Invalid R part id at " ++ (atos me))) });
  (case s_parts.lookup {}
   of
   { Some sp -> my_s_part = sp.value }
   { None -> error (print ("Invalid S part id at " ++ (atos me))) });

  // Execute the join.
  () @PipelineSkewJoin(
          lbl               = [# rs_skewj ]
        , lhs_ht_id         = [# rs_skewj_lhs_ht ]
        , rhs_ht_id         = [# rs_skewj_rhs_ht ]

        , lhs_sample_query   = [$ my_r_part.sample (\acc -> \r ->
                                                     ((acc.insert_with
                                                       {key: r.b, value: 1}
                                                       (\old -> \new -> {key: old.key, value: old.value + new.value}));
                                                      acc)
                                                   )
                                                   (empty {key: int, value: int} @Map)
                                                   (my_r_part.size() / sample_factor)
                               ]
        , rhs_sample_query   = [$ my_s_part.sample (\acc -> \s ->
                                                     ((acc.insert_with
                                                       {key: s.b, value: 1}
                                                       (\old -> \new -> {key: old.key, value: old.value + new.value}));
                                                      acc)
                                                   )
                                                   (empty {key: int, value: int} @Map)
                                                   (my_s_part.size() / sample_factor)
                               ]

        , lhs_query          = [$ (my_r_part.groupBy (\r -> r.b)
                                                     (\acc -> \r -> ((acc.insert {a:r.a}); acc))
                                                     (empty {a:int} @Collection))
                                            .fold    (\acc -> \ras -> ((acc.insert ras); acc))
                                                     (empty {key: int,  value: collection {a:int} @Collection} @Map)
                               ]

        , rhs_query          = [$ (my_s_part.groupBy (\s -> s.b)
                                                     (\acc -> \s -> ((acc.insert {c: s.c}); acc))
                                                     (empty {c:int} @Collection))
                                            .fold    (\acc -> \scs -> ((acc.insert scs); acc))
                                                     (empty {key: int,  value: collection {c:int} @Collection} @Map)
                               ]

        , join_key_ty        = [: int ]
        , lhs_ht_ty          = [: {key: int, value: collection {a:int} @Collection} ]
        , rhs_ht_ty          = [: {key: int, value: collection {c:int} @Collection} ]

        , lhs_probe          = [$ (\rht -> \out -> \s -> (
                                   case rht.lookup {key: s.key, value: empty {a:int} @Collection}
                                   of
                                   { Some r_match -> let acs = r_match.value.fold
                                                                  (\acc -> \r ->
                                                                      s.value.fold (\acc -> \sc -> ((acc.insert {a:r.a, c:sc.c}); acc)) acc)
                                                                  (empty {a:int, c:int} @Collection)
                                                      in ((out.insert {key: r_match.key, value: acs}); out) }
                                   { None -> out }
                                  ))
                               ]

        , rhs_probe          = [$ (\sht -> \out -> \r -> (
                                    case sht.lookup {key: r.key, value: empty {c:int} @Collection}
                                    of
                                    { Some s_match -> let acs = s_match.value.fold
                                                                  (\acc -> \s ->
                                                                      r.value.fold (\acc -> \ra -> ((acc.insert {a:ra.a, c:s.c}); acc)) acc)
                                                                  (empty {a:int, c:int} @Collection)
                                                      in ((out.insert {key: s_match.key, value: acs}); out) }
                                    { None -> out }
                                  ))
                               ]

        , lhs_insert_with    = [$ (\old -> \new -> {key: old.key, value: old.value.combine new.value}) ]
        , rhs_insert_with    = [$ (\old -> \new -> {key: old.key, value: old.value.combine new.value}) ]

        , has_outputs        = [$ (\out -> out.size() > 0) ]
        , empty_out_buffer   = [$ empty {key: int, value: collection {a:int, c:int} @Collection} @Map ]

        , lhs_pipeline_next  = [$ (\out -> (merge_join_results, master) <- out) ]
        , rhs_pipeline_next  = [$ (\out -> (merge_join_results, master) <- out) ]

        , lhs_clear_expr    = [$ (\_ -> rs_skewj_lhs_ht = empty {key: int, value: collection {a:int} @Collection} @Map) ]
        , rhs_clear_expr    = [$ (\_ -> rs_skewj_rhs_ht = empty {key: int, value: collection {c:int} @Collection} @Map) ]

        , peer_next          = [$ () ]
        , next               = [$ print "RS SkewJoin done" ]
        , coordinator        = [$ master ]
        , nodes              = [$ peers ]
     )
)

declare join_results : collection {key: int, value : collection {a:int, c:int} @Collection} @Map

trigger merge_join_results : collection {key: int, value : collection {a:int, c:int} @Collection} @Map = \results -> (
  results.iterate (\jr_row -> join_results.insert_with jr_row (\old -> \new -> {key: old.key, value: old.value.combine new.value}))
)

source s1 : () = value ()
feed s1 |> join