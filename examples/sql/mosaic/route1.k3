include "Core/Builtins.k3"
include "Annotation/Set.k3"
include "Annotation/Seq.k3"

declare node_ring : collection {
  _r1_:address, _r2_:string, _r3_:string, _r4_:int } @ { Seq }

declare replicas : collection {i:int} @ { Set } = {|i:int| 8|} @ { Set }

declare my_peers : collection { _r1_ : address, _r2_ : string, _r3_ : string} @ {Set} 

 = {|_r1_:address,_r2_:string,_r3_:string| 
    {_r1_:127.0.0.1:40000, _r2_: "switch", _r3_:""},
    {_r1_:127.0.0.1:50000, _r2_: "node",   _r3_:""}
  |} @ {Set}


declare add_node : { _r1_:address, _r2_:string, _r3_:string } -> () = (\_b1_ ->
  
    bind _b1_ as {_r1_:addr, _r2_:_role_, _r3_:name} in 
    let rng =
      range
        (case ((replicas).peek ()) of { Some x -> x.i } { None -> error () }) in
    let new_elems =
      rng.map
        ((\_b1_ -> 
          bind _b1_ as {i:i} in 
          {_r1_:addr, _r2_:_role_, _r3_:name, _r4_:hash (i + hash addr)})) in (
      new_elems.iterate ((\x ->  node_ring.insert x));
      let temp_ring = node_ring.sort
        ((\_b2_ ->
        bind _b2_ as {_r1_:addr, _r2_:_role_, _r3_:name, _r4_:hash1} in (\_b7_ ->
        
          bind _b7_ as {_r1_:addr, _r2_:_role_, _r3_:name, _r4_:hash2} in 
          if hash1 > hash2 then -1 else 1))) in
      (
        node_ring.iterate ((\node ->  node_ring.delete node));
        temp_ring.iterate ((\node ->  node_ring.insert node))
        )
      ))

declare init : () = (
    my_peers.iterate
      ((\_b1_ -> 
        bind _b1_ as {_r1_:addr, _r2_:_role_, _r3_:name} in 
        if _role_ != "switch"
        then add_node {_r1_:addr, _r2_:_role_, _r3_:name}
        else ()))
    )

declare get_all_uniq_nodes : () -> collection {i:address} @ { Seq } = (\_ -> 
    (node_ring.groupBy
       ((\_b1_ -> 
         bind _b1_ as {_r1_:addr, _r2_:_role_, _r3_:name, _r4_:hash} in addr))
       ((\_ -> (\_ ->  ()))) empty {i:address} @ { Seq }).map
      ((\_b1_ ->  bind _b1_ as {key:__1, value:__2} in {i:__1})))

declare calc_dim_bounds : collection { key:int, value:int } @ { Seq } -> {
  key:collection { key:int, value:int } @ { Seq }, value:int } = (\pmap -> 
    pmap.fold
      ((\_b2_ -> bind _b2_ as {key:xs, value:acc_size} in (\_b5_ -> 
        bind _b5_ as {key:pos, value:bin_size} in 
        {key:xs.combine
         ({| key:int, value:int | {key:pos, value:acc_size}|} @ { Seq }),
         value:bin_size * acc_size})))
      {key:empty { key:int, value:int } @ { Seq }, value:1})


declare pmap_input : collection {
  key:string, value:collection { key:int, value:int } @ { Seq } } @ { Seq } =
  {| key:string, value:collection { key:int, value:int } @ { Seq } |
  {key:"__SQL_SUM_AGGREGATE_1_mS1", value:{| key:int, value:int |
   {key:0, value:32}|} @ { Seq }},
  {key:"__SQL_SUM_AGGREGATE_1_mR1", value:{| key:int, value:int |
   {key:0, value:32}|} @ { Seq }},
  {key:"__SQL_SUM_AGGREGATE_2_mS3", value:{| key:int, value:int |
   {key:0, value:32}|} @ { Seq }},
  {key:"__SQL_SUM_AGGREGATE_2_mR1", value:{| key:int, value:int |
   {key:0, value:32}|} @ { Seq }}|} @ { Seq }

declare __map_ids__ : collection { _r1_:int, _r2_:string, _r3_:int
  } @ { Set } = {| _r1_:int, _r2_:string, _r3_:int |
  {_r1_:1, _r2_:"__SQL_SUM_AGGREGATE_1", _r3_:1},
  {_r1_:2, _r2_:"__SQL_SUM_AGGREGATE_1_mS1", _r3_:2},
  {_r1_:3, _r2_:"__SQL_SUM_AGGREGATE_1_mR1", _r3_:2},
  {_r1_:4, _r2_:"__SQL_SUM_AGGREGATE_2", _r3_:1},
  {_r1_:5, _r2_:"__SQL_SUM_AGGREGATE_2_mS3", _r3_:2},
  {_r1_:6, _r2_:"__SQL_SUM_AGGREGATE_2_mR1", _r3_:2}|} @ { Set }

declare pmap_data : collection {
  key:int, value:collection { key:int, value:int } @ { Seq } } @ { Seq } =
  pmap_input.map
    ((\_b1_ -> 
      bind _b1_ as {key:map_name, value:map_types} in 
      {key:bind case ((__map_ids__.filter
       ((\_b1_ -> 
         bind _b1_ as {_r1_:_r1_, _r2_:_r2_, _r3_:_r3_} in _r2_ == map_name))).peek
       ()) of { Some x -> x }
       { None -> error () } as {_r1_:__1, _r2_:__2, _r3_:__3} in __1,
       value:map_types}))

declare get_ring_node : { key:int, value:int } -> address = (\_b1_ -> 
    bind _b1_ as {key:data, value:max_val} in 
    let scaled =
      int_of_real
        (real_of_int (get_max_int ()) * (real_of_int data /
        real_of_int max_val)) in
    let results =
      (node_ring.filter
        ((\_b1_ -> 
          bind _b1_ as {_r1_:addr, _r2_:_role_, _r3_:name, _r4_:hash} in hash
          >= scaled))).map
        ((\_b1_ -> 
          bind _b1_ as {_r1_:__id_0, _r2_:__id_1, _r3_:__id_2, _r4_:__id_3} in 
          {_r1_:__id_0, _r2_:__id_1, _r3_:__id_2, _r4_:__id_3})) in
    bind if results == empty { _r1_:address, _r2_:string, _r3_:string, _r4_:int
           } @ { Seq }
         then case (node_ring.peek ()) of { Some x -> x } { None -> error () }
         else case (results.peek ()) of { Some x -> x } { None -> error () } as {
    _r1_:addr, _r2_:_, _r3_:_, _r4_:_} in addr)


declare route_to___SQL_SUM_AGGREGATE_1_mS1 :
  option int -> collection {i:address} @ { Collection } = (\key -> 
    let pmap = bind case ((pmap_data.filter
      ((\_b1_ ->  bind _b1_ as {key:key, value:value} in key == 2))).peek
      ()) of { Some x -> x } { None -> error () } as {key:__1, value:__2} in 
      __2 in
    if pmap == empty { key:int, value:int } @ { Seq }
    then get_all_uniq_nodes ()
    else bind calc_dim_bounds pmap as {key:dim_bounds, value:max_val} in 
      let key_id_0 = key in
      let bound_bucket =
        (if key_id_0 == None immut
         then 0
         else
           let pmap_slice = pmap.filter
             ((\_b1_ ->  bind _b1_ as {key:key, value:value} in key == 0)) in
           if pmap_slice == empty { key:int, value:int } @ { Seq }
           then 0
           else let key_id_0_unwrap = case key_id_0 of { Some x -> x }
             { None -> error () } in
             let value = hash key_id_0_unwrap % bind case (pmap_slice.peek
               ()) of { Some x -> x }
               { None -> error () } as {key:__1, value:__2} in __2 in value *
             bind case ((dim_bounds.filter
             ((\_b1_ ->  bind _b1_ as {key:key, value:value} in key == 0))).peek
             ()) of { Some x -> x }
             { None -> error () } as {key:__1, value:__2} in __2) + 0 in
      let free_dims =
        (if key_id_0 != None immut
         then empty { key:int, value:int } @ { Seq }
         else pmap.filter
           ((\_b1_ ->  bind _b1_ as {key:key, value:value} in key == 0))).combine
        empty { key:int, value:int } @ { Seq } in
      let free_domains =
        free_dims.map
          ((\_b1_ -> 
            bind _b1_ as {key:i, value:b_i} in {key:i, value:range b_i})) in
      let free_cart_prod =
        free_domains.fold
          ((\prev_cart_prod -> (\_b3_ -> 
            bind _b3_ as {key:i, value:domain} in 
            domain.ext
              ((\_b1_ -> 
                bind _b1_ as {i:domain_element} in 
                if prev_cart_prod == empty {i:collection { key:int, value:int
                  } @ { Seq }} @ { Seq }
                then {|i:collection { key:int, value:int } @ { Seq }| {|
                  key:int, value:int |
                  {key:i, value:domain_element}|} @ { Seq }|} @ { Seq }
                else
                  prev_cart_prod.map
                    ((\_b1_ -> 
                      bind _b1_ as {i:rest_tup} in rest_tup.combine
                      ({| key:int, value:int |
                      {key:i, value:domain_element}|} @ { Seq })))))
              empty {i:collection { key:int, value:int
              } @ { Seq }} @ { Collection }))) empty {i:collection {
          key:int, value:int } @ { Seq }} @ { Seq } in
      let sorted_ip_list =
        (free_cart_prod.map
           ((\_b1_ -> 
             bind _b1_ as {i:free_bucket} in 
             {i:get_ring_node
                  {key:free_bucket.fold
                         ((\acc -> (\_b3_ -> 
                           bind _b3_ as {key:i, value:val} in acc + (val *
                           bind case ((dim_bounds.filter
                           ((\_b1_ -> 
                             bind _b1_ as {key:key, value:value} in key == i))).peek
                           ()) of { Some x -> x }
                           { None -> error () } as {key:__1, value:__2} in __2))))
                         bound_bucket, value:max_val}}))).groupBy
          ((\_b1_ ->  bind _b1_ as {i:ip} in ip)) ((\_ -> (\_ ->  ())))
          empty {i:address} @ { Collection } in
      if sorted_ip_list == empty { key:address, value:() } @ { Collection }
      then {|i:address|
        get_ring_node {key:bound_bucket, value:max_val}|} @ { Collection }
      else
        sorted_ip_list.map
          ((\_b1_ ->  bind _b1_ as {key:__1, value:__2} in {i:__1})))

declare result : mut collection {i:address} @ { Set }

trigger dummy : {i:()} = (\_ -> result = route_to___SQL_SUM_AGGREGATE_1_mS1 (None immut))
