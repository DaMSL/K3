include "Core/Builtins.k3"
include "Annotation/Set.k3"
include "Annotation/Seq.k3"
include "Core/Time.k3"

declare node_ring : collection {
  _r1_:address, _r2_:string, _r3_:string, _r4_:int } @ { Seq }

declare get_ring_node : { key:int, value:int } -> address = (\_b1_ -> 
    bind _b1_ as {key:data, value:max_val} in 
    let scaled =
      truncate
        (real_of_int (get_max_int ()) * (real_of_int data /
        real_of_int max_val)) in
    let results =
      (node_ring.filter
        ((\_b1_ -> 
          bind _b1_ as {_r1_:addr, _r2_:_role_, _r3_:name, _r4_:hash} in hash
          >= scaled))) in
    bind if results == empty { _r1_:address, _r2_:string, _r3_:string, _r4_:int
           } @ { Seq }
         then case (node_ring.peek ()) of { Some x -> x } { None -> error () }
         else case (results.peek ()) of { Some x -> x } { None -> error () } as {
    _r1_:addr, _r2_:_, _r3_:_, _r4_:_} in addr)


declare route_to_ : { key:int, value:()
  } -> collection {i:address} @ { Collection } = (\_b1_ -> 
    bind _b1_ as {key:_, value:_} in {|i:address|
    get_ring_node {key:1, value:1}|} @ { Collection })

declare shuffle___SQL_SUM_AGGREGATE_2_mS3_to___SQL_SUM_AGGREGATE_2 : {
  _r1_:(), _r2_:collection {
  _r1_:{ _r1_:int, _r2_:int, _r3_:int }, _r2_:int, _r3_:int } @ { Collection },
  _r3_:bool } -> collection {
  key:address, value:collection {
  _r1_:{ _r1_:int, _r2_:int, _r3_:int }, _r2_:int, _r3_:int } @ { Collection }
  } @ { Collection } = (\_b1_ -> 
    bind _b1_ as {_r1_:_, _r2_:tuples, _r3_:shuffle_on_empty} in 
    let all_targets =
      if shuffle_on_empty == true
      then
        (route_to_ {key:4, value:()}).fold
          ((\__acc_map -> (\_b3_ -> 
            bind _b3_ as {i:ip} in __acc_map.combine
            ({|
            key:address, value:collection {
            _r1_:{ _r1_:int, _r2_:int, _r3_:int }, _r2_:int, _r3_:int
            } @ { Collection } |
            {key:ip, value:empty {
             _r1_:{ _r1_:int, _r2_:int, _r3_:int }, _r2_:int, _r3_:int
             } @ { Collection }}|} @ { Collection })))) empty {
          key:address, value:collection {
          _r1_:{ _r1_:int, _r2_:int, _r3_:int }, _r2_:int, _r3_:int
          } @ { Collection } } @ { Collection }
      else empty {
        key:address, value:collection {
        _r1_:{ _r1_:int, _r2_:int, _r3_:int }, _r2_:int, _r3_:int
        } @ { Collection } } @ { Collection } in
    (all_targets.combine
      (tuples.fold
         ((\__acc_ext -> (\r_tuple -> 
           __acc_ext.combine
           (bind r_tuple as {_r1_:rkey_0, _r2_:rkey_1, _r3_:rkey_2} in 
           (route_to_ {key:4, value:()}).fold
             ((\__acc_map -> (\_b3_ -> 
               bind _b3_ as {i:ip} in __acc_map.combine
               ({|
               key:address, value:collection {
               _r1_:{ _r1_:int, _r2_:int, _r3_:int }, _r2_:int, _r3_:int
               } @ { Collection } |
               {key:ip, value:{|
                _r1_:{ _r1_:int, _r2_:int, _r3_:int }, _r2_:int, _r3_:int |
                r_tuple|} @ { Collection }}|} @ { Collection })))) empty {
             key:address, value:collection {
             _r1_:{ _r1_:int, _r2_:int, _r3_:int }, _r2_:int, _r3_:int
             } @ { Collection } } @ { Collection })))) empty {
         key:address, value:collection {
         _r1_:{ _r1_:int, _r2_:int, _r3_:int }, _r2_:int, _r3_:int
         } @ { Collection } } @ { Collection })).groupBy
      ((\_b1_ ->  bind _b1_ as {key:ip, value:tuple} in ip)) ((\acc ->
      (\_b3_ ->  bind _b3_ as {key:ip, value:tuple} in tuple.combine acc)))
      empty { _r1_:{ _r1_:int, _r2_:int, _r3_:int }, _r2_:int, _r3_:int
      } @ { Collection })

declare log_insert_S : collection {
  _r1_:{ _r1_:int, _r2_:int, _r3_:int }, _r2_:int, _r3_:int } @ { Collection }

declare log_delete_S : collection {
  _r1_:{ _r1_:int, _r2_:int, _r3_:int }, _r2_:int, _r3_:int } @ { Collection }

declare log_get_bound_insert_S : { _r1_:int, _r2_:int, _r3_:int } -> {
  _r1_:{ _r1_:int, _r2_:int, _r3_:int }, _r2_:int, _r3_:int } = (\vid -> 
    case ((log_insert_S.filter
    ((\_b1_ ->  bind _b1_ as {_r1_:_r1_, _r2_:_r2_, _r3_:_r3_} in _r1_ == vid))).peek
    ()) of { Some x -> x } { None -> error () })

declare log_get_bound_delete_S : { _r1_:int, _r2_:int, _r3_:int } -> {
  _r1_:{ _r1_:int, _r2_:int, _r3_:int }, _r2_:int, _r3_:int } = (\vid -> 
    case ((log_delete_S.filter
    ((\_b1_ ->  bind _b1_ as {_r1_:_r1_, _r2_:_r2_, _r3_:_r3_} in _r1_ == vid))).peek
    ()) of { Some x -> x } { None -> error () })

declare vid_lt : {
  key:{ _r1_:int, _r2_:int, _r3_:int }, value:{ _r1_:int, _r2_:int, _r3_:int }
  } -> bool = (\_b1_ -> 
    bind _b1_ as {key:_b2_, value:_b6_} in 
    bind _b2_ as {_r1_:l0, _r2_:l1, _r3_:l2} in 
    bind _b6_ as {_r1_:r0, _r2_:r1, _r3_:r2} in l0 < r0 or (l0 == r0 and (l1 <
    r1 or (l1 == r1 and l2 < r2))))


declare vid_geq : {
  key:{ _r1_:int, _r2_:int, _r3_:int }, value:{ _r1_:int, _r2_:int, _r3_:int }
  } -> bool = (\_b1_ -> 
    bind _b1_ as {key:_b2_, value:_b6_} in 
    bind _b2_ as {_r1_:l0, _r2_:l1, _r3_:l2} in 
    bind _b6_ as {_r1_:r0, _r2_:r1, _r3_:r2} in not (l0 < r0 or (l0 == r0 and
    (l1 < r1 or (l1 == r1 and l2 < r2)))))


declare log__master : collection {
  _r1_:{ _r1_:int, _r2_:int, _r3_:int }, _r2_:int, _r3_:int } @ { Collection }

declare log_read_geq : { _r1_:int, _r2_:int, _r3_:int } -> collection {
  _r1_:{ _r1_:int, _r2_:int, _r3_:int }, _r2_:int, _r3_:int
  } @ { Collection } = (\vid -> 
    (log__master.filter
      ((\_b1_ -> 
        bind _b1_ as {_r1_:vid2, _r2_:trig, _r3_:stmt} in 
        vid_geq {key:vid2, value:vid}))))

declare filter_corrective_list : {
  key:{ _r1_:int, _r2_:int, _r3_:int }, value:collection { key:int, value:int
  } @ { Collection } } -> collection {
  key:int, value:collection { _r1_:int, _r2_:int, _r3_:int } @ { Seq }
  } @ { Collection } = (\_b1_ -> 
    bind _b1_ as {key:request_vid, value:trig_stmt_list} in 
    let log_entries = log_read_geq request_vid in
    ((log_entries.fold
        ((\acc -> (\_b3_ -> 
          bind _b3_ as {_r1_:vid, _r2_:trig_id, _r3_:stmt_id} in acc.combine
          ({| key:{ _r1_:int, _r2_:int, _r3_:int }, value:int |
          {key:vid, value:stmt_id}|} @ { Seq })))) empty {
        key:{ _r1_:int, _r2_:int, _r3_:int }, value:int } @ { Seq }).sort
      ((\_b2_ -> bind _b2_ as {key:vid1, value:stmt1} in (\_b5_ -> 
        bind _b5_ as {key:vid2, value:stmt2} in 
        if vid_lt {key:vid1, value:vid2} then -1 else 1)))).groupBy
      ((\_b1_ ->  bind _b1_ as {key:_, value:stmt_id} in stmt_id))
      ((\vid_list -> (\_b3_ -> 
        bind _b3_ as {key:vid, value:_} in vid_list.combine
        ({| _r1_:int, _r2_:int, _r3_:int | vid|} @ { Seq })))) empty {
      _r1_:int, _r2_:int, _r3_:int } @ { Seq })


trigger __SQL_SUM_AGGREGATE_2_mS3_send_correctives : {
key:{ _r1_:int, _r2_:int, _r3_:int }, value:collection {
_r1_:{ _r1_:int, _r2_:int, _r3_:int }, _r2_:int, _r3_:int } @ { Collection }
}
=
  (\_b1_ -> 
    bind _b1_ as {key:corrective_vid, value:delta_tuples} in 
    let corrective_list =
      filter_corrective_list
        {key:corrective_vid, value:{| key:int, value:int | {key:1, value:6},
         {key:0, value:2}|} @ { Collection }} in
    corrective_list.iterate
      ((\_b1_ -> 
        bind _b1_ as {key:stmt_id, value:vid_list} in 
        if stmt_id == 6
        then
          ((vid_list.fold
              ((\__acc_ext -> (\vid -> 
                __acc_ext.combine
                (bind log_get_bound_delete_S vid as {_r1_:vid, _r2_:S_B,
                                                     _r3_:S_C} in 
                (shuffle___SQL_SUM_AGGREGATE_2_mS3_to___SQL_SUM_AGGREGATE_2
                   {_r1_:(), _r2_:delta_tuples, _r3_:false}).fold
                  ((\__acc_map -> (\_b3_ -> 
                    bind _b3_ as {key:ip, value:tuples} in __acc_map.combine
                    ({|
                    _r1_:address, _r2_:{ _r1_:int, _r2_:int, _r3_:int },
                    _r3_:collection {
                    _r1_:{ _r1_:int, _r2_:int, _r3_:int }, _r2_:int, _r3_:int
                    } @ { Collection } |
                    {_r1_:ip, _r2_:vid, _r3_:tuples}|} @ { Collection }))))
                  empty {
                  _r1_:address, _r2_:{ _r1_:int, _r2_:int, _r3_:int },
                  _r3_:collection {
                  _r1_:{ _r1_:int, _r2_:int, _r3_:int }, _r2_:int, _r3_:int
                  } @ { Collection } } @ { Collection })))) empty {
              _r1_:address, _r2_:{ _r1_:int, _r2_:int, _r3_:int },
              _r3_:collection {
              _r1_:{ _r1_:int, _r2_:int, _r3_:int }, _r2_:int, _r3_:int
              } @ { Collection } } @ { Collection }).groupBy
             ((\_b1_ ->  bind _b1_ as {_r1_:ip, _r2_:vid, _r3_:tuples} in ip))
             ((\_b2_ ->
             bind _b2_ as {key:acc_vid, value:acc_tuples} in (\_b5_ -> 
               bind _b5_ as {_r1_:ip, _r2_:vid, _r3_:tuples} in 
               {key:acc_vid.combine
                ({| _r1_:int, _r2_:int, _r3_:int | vid|} @ { Seq }),
                value:((acc_tuples.combine
                         tuples).groupBy
                         ((\tuple ->  tuple)) ((\_ -> (\_ ->  ()))) ()).fold
                        ((\__acc_map -> (\_b3_ -> 
                          bind _b3_ as {key:__1, value:__2} in 
                          __acc_map.combine
                          ({|
                          _r1_:{ _r1_:int, _r2_:int, _r3_:int }, _r2_:int,
                          _r3_:int | __1|} @ { Collection })))) empty {
                        _r1_:{ _r1_:int, _r2_:int, _r3_:int }, _r2_:int,
                        _r3_:int } @ { Collection }})))
             {key:empty { _r1_:int, _r2_:int, _r3_:int } @ { Seq },
              value:empty {
              _r1_:{ _r1_:int, _r2_:int, _r3_:int }, _r2_:int, _r3_:int
              } @ { Collection }}).iterate
            ((\_b1_ -> ()))
        else
          if stmt_id == 2
          then
            ((vid_list.fold
                ((\__acc_ext -> (\vid -> 
                  __acc_ext.combine
                  (bind log_get_bound_insert_S vid as {_r1_:vid, _r2_:S_B,
                                                       _r3_:S_C} in 
                  (shuffle___SQL_SUM_AGGREGATE_2_mS3_to___SQL_SUM_AGGREGATE_2
                     {_r1_:(), _r2_:delta_tuples, _r3_:false}).fold
                    ((\__acc_map -> (\_b3_ -> 
                      bind _b3_ as {key:ip, value:tuples} in __acc_map.combine
                      ({|
                      _r1_:address, _r2_:{ _r1_:int, _r2_:int, _r3_:int },
                      _r3_:collection {
                      _r1_:{ _r1_:int, _r2_:int, _r3_:int }, _r2_:int, _r3_:int
                      } @ { Collection } |
                      {_r1_:ip, _r2_:vid, _r3_:tuples}|} @ { Collection }))))
                    empty {
                    _r1_:address, _r2_:{ _r1_:int, _r2_:int, _r3_:int },
                    _r3_:collection {
                    _r1_:{ _r1_:int, _r2_:int, _r3_:int }, _r2_:int, _r3_:int
                    } @ { Collection } } @ { Collection })))) empty {
                _r1_:address, _r2_:{ _r1_:int, _r2_:int, _r3_:int },
                _r3_:collection {
                _r1_:{ _r1_:int, _r2_:int, _r3_:int }, _r2_:int, _r3_:int
                } @ { Collection } } @ { Collection }).groupBy
               ((\_b1_ -> 
                 bind _b1_ as {_r1_:ip, _r2_:vid, _r3_:tuples} in ip))
               ((\_b2_ ->
               bind _b2_ as {key:acc_vid, value:acc_tuples} in (\_b5_ -> 
                 bind _b5_ as {_r1_:ip, _r2_:vid, _r3_:tuples} in 
                 {key:acc_vid.combine
                  ({| _r1_:int, _r2_:int, _r3_:int | vid|} @ { Seq }),
                  value:((acc_tuples.combine
                           tuples).groupBy
                           ((\tuple ->  tuple)) ((\_ -> (\_ ->  ()))) ()).fold
                          ((\__acc_map -> (\_b3_ -> 
                            bind _b3_ as {key:__1, value:__2} in 
                            __acc_map.combine
                            ({|
                            _r1_:{ _r1_:int, _r2_:int, _r3_:int }, _r2_:int,
                            _r3_:int | __1|} @ { Collection })))) empty {
                          _r1_:{ _r1_:int, _r2_:int, _r3_:int }, _r2_:int,
                          _r3_:int } @ { Collection }})))
               {key:empty { _r1_:int, _r2_:int, _r3_:int } @ { Seq },
                value:empty {
                _r1_:{ _r1_:int, _r2_:int, _r3_:int }, _r2_:int, _r3_:int
                } @ { Collection }}).iterate
              ((\_b1_ -> 
                bind _b1_ as {key:ip, value:_b3_} in 
                bind _b3_ as {key:vid_send_list, value:tuple} in 
                (insert_S_rcv_corrective_s2_m___SQL_SUM_AGGREGATE_2_mS3, ip)<- {
                  _r1_:corrective_vid, _r2_:vid_send_list, _r3_:tuple}))
          else ())))

trigger delete_S_rcv_corrective_s6_m___SQL_SUM_AGGREGATE_2_mS3 : {
_r1_:{ _r1_:int, _r2_:int, _r3_:int }, _r2_:collection {
_r1_:int, _r2_:int, _r3_:int } @ { Seq }, _r3_:collection {
_r1_:{ _r1_:int, _r2_:int, _r3_:int }, _r2_:int, _r3_:int } @ { Collection }
}
= (\_b1_ ->

  bind _b1_ as {_r1_:vid, _r2_:compute_vids, _r3_:delta_tuples} in (
    add_delta_to_int_int
      {_r1_:map___SQL_SUM_AGGREGATE_2_mS3_s6_buf, _r2_:false, _r3_:vid,
       _r4_:delta_tuples};
    compute_vids.iterate
      ((\compute_vid -> 
        if case ((__stmt_cntrs__.filter
          ((\_b1_ -> 
            bind _b1_ as {_r1_:_r1_, _r2_:_r2_, _r3_:_r3_} in _r1_ ==
            compute_vid and _r2_ == 6))).peek ()) of { Some x -> x }
          { None -> error () } == {_r1_:compute_vid, _r2_:6, _r3_:0}
        then
          bind log_get_bound_delete_S compute_vid as {_r1_:vid, _r2_:S_B,
                                                      _r3_:S_C} in 
          (delete_S_do_corrective_s6_m___SQL_SUM_AGGREGATE_2_mS3, me)<- {
            _r1_:compute_vid, _r2_:S_B, _r3_:S_C, _r4_:delta_tuples}
        else ()))
    ))

