include "Core/Builtins.k3"
include "Annotation/Map.k3"
include "Annotation/Set.k3"
include "Annotation/Seq.k3"
declare my_peers : collection { i:address } @ {Collection} =
  peers.fold (\acc -> (\x -> (acc.insert {i:x.addr}; acc))) empty { i:address} @ Collection
declare switch_path : string = "agenda.csv"


declare nd_sent_done : mut bool = false


declare sw_sent_done : mut bool = false


declare ms_rcv_sw_init_ack_cnt : mut int = 0


declare ms_rcv_jobs_ack_cnt : mut int = 0


declare ms_rcv_job_cnt : mut int = 0


declare ms_rcv_node_done_cnt : mut int = 0


declare ms_rcv_switch_done_cnt : mut int = 0


declare g_init_vid : { key:int, value:int } = {key:0, value:0}


declare g_min_vid : { key:int, value:int } = {key:0, value:0}


declare g_max_vid : { key:int, value:int } = {key:get_max_int (),
  value:get_max_int ()}


declare g_start_vid : { key:int, value:int } = {key:0, value:1}


declare job_master : int = 0


declare job_switch : int = 1


declare job_node : int = 2


declare job_timer : int = 3


declare job : mut int = if role == "master" then job_master
  else if role == "switch" then job_switch
    else if role == "node" then job_node
      else if role == "timer" then job_timer
        else error (print "failed to find proper role")


declare jobs : mut collection { key:address, value:int } @ { Map }


declare master_addr : mut address


declare timer_addr : mut address


declare nodes : mut collection {i:address} @ { Collection }


declare switches : mut collection {i:address} @ { Collection }


declare num_peers : mut int = my_peers.size ()


declare num_switches : mut int = 0


declare num_nodes : mut int = 0


declare map_ids : collection { ra:int, rb:string, rc:int } @ { Collection } =
  {| ra:int, rb:string, rc:int | {ra:1, rb:"QUERY22", rc:2}, {ra:2,
  rb:"QUERY22_mCUSTOMER1", rc:4}, {ra:3, rb:"QUERY22_mCUSTOMER1_L2_1", rc:1},
  {ra:4, rb:"QUERY22_mCUSTOMER1_L3_1", rc:2}|} @ { Collection }


declare nd_stmt_cntrs : collection { key:{ key:{ key:int, value:int },
  value:int }, value:{ key:int, value:collection { key:int, value:int
  } @ { Map } } } @ { Map }


declare nd_log_master : collection { key:{ key:int, value:int }, value:int
  } @ { Set }


declare nd_rcvd_sys_done : mut bool = false


declare sw_init : mut bool = false


declare sw_seen_sentry : mut bool = false


declare sw_trig_buf_idx : collection {i:int} @ { Seq }


declare ms_start_time : mut int = 0


declare ms_end_time : mut int = 0


declare sw_buf_insert_CUSTOMER : collection { ra:int, rb:string, rc:string,
  rd:int, re:string, rf:real, rg:string, rh:string } @ { Seq }


declare sw_buf_delete_CUSTOMER : collection { ra:int, rb:string, rc:string,
  rd:int, re:string, rf:real, rg:string, rh:string } @ { Seq }


declare sw_buf_insert_ORDERS : collection { ra:int, rb:int, rc:string, rd:real,
  re:int, rf:string, rg:string, rh:int, ri:string } @ { Seq }


declare sw_buf_delete_ORDERS : collection { ra:int, rb:int, rc:string, rd:real,
  re:int, rf:string, rg:string, rh:int, ri:string } @ { Seq }


declare nd_log_insert_CUSTOMER : collection { key:{ key:int, value:int },
  value:{ ra:int, rb:string, rc:string, rd:int, re:string, rf:real, rg:string,
  rh:string } } @ { Map }


declare nd_log_delete_CUSTOMER : collection { key:{ key:int, value:int },
  value:{ ra:int, rb:string, rc:string, rd:int, re:string, rf:real, rg:string,
  rh:string } } @ { Map }


declare nd_log_insert_ORDERS : collection { key:{ key:int, value:int }, value:{
  ra:int, rb:int, rc:string, rd:real, re:int, rf:string, rg:string, rh:int,
  ri:string } } @ { Map }


declare nd_log_delete_ORDERS : collection { key:{ key:int, value:int }, value:{
  ra:int, rb:int, rc:string, rd:real, re:int, rf:string, rg:string, rh:int,
  ri:string } } @ { Map }


declare QUERY22 : ind collection { ra:{ key:int, value:int }, rb:int, rc:real
  } @ { Set } = ind empty { ra:{ key:int, value:int }, rb:int, rc:real
  } @ { Set }


declare QUERY22_mCUSTOMER1 : ind collection { ra:{ key:int, value:int },
  rb:int, rc:int, rd:real, re:real } @ { Set } = ind empty { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:real, re:real } @ { Set }


declare QUERY22_mCUSTOMER1_L2_1 : ind collection { key:{ key:int, value:int },
  value:real } @ { Set } = ind {| key:{ key:int, value:int }, value:real |
  {key:g_init_vid, value:0}|} @ { Set }


declare QUERY22_mCUSTOMER1_L3_1 : ind collection { ra:{ key:int, value:int },
  rb:int, rc:int } @ { Set } = ind empty { ra:{ key:int, value:int }, rb:int,
  rc:int } @ { Set }


declare map_QUERY22_mCUSTOMER1_L2_1_s2_buf : ind collection { key:{ key:int,
  value:int }, value:real } @ { Set } = ind {| key:{ key:int, value:int },
  value:real | {key:g_init_vid, value:0}|} @ { Set }


declare map_QUERY22_mCUSTOMER1_s2_buf : ind collection { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:real, re:real } @ { Set } = ind empty { ra:{
  key:int, value:int }, rb:int, rc:int, rd:real, re:real } @ { Set }


declare map_QUERY22_mCUSTOMER1_L3_1_s2_buf : ind collection { ra:{ key:int,
  value:int }, rb:int, rc:int } @ { Set } = ind empty { ra:{ key:int, value:int
  }, rb:int, rc:int } @ { Set }


declare map_QUERY22_mCUSTOMER1_L2_1_s5_buf : ind collection { key:{ key:int,
  value:int }, value:real } @ { Set } = ind {| key:{ key:int, value:int },
  value:real | {key:g_init_vid, value:0}|} @ { Set }


declare map_QUERY22_mCUSTOMER1_s5_buf : ind collection { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:real, re:real } @ { Set } = ind empty { ra:{
  key:int, value:int }, rb:int, rc:int, rd:real, re:real } @ { Set }


declare map_QUERY22_mCUSTOMER1_L3_1_s5_buf : ind collection { ra:{ key:int,
  value:int }, rb:int, rc:int } @ { Set } = ind empty { ra:{ key:int, value:int
  }, rb:int, rc:int } @ { Set }


declare map_QUERY22_mCUSTOMER1_L2_1_s6_buf : ind collection { key:{ key:int,
  value:int }, value:real } @ { Set } = ind {| key:{ key:int, value:int },
  value:real | {key:g_init_vid, value:0}|} @ { Set }


declare map_QUERY22_mCUSTOMER1_s6_buf : ind collection { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:real, re:real } @ { Set } = ind empty { ra:{
  key:int, value:int }, rb:int, rc:int, rd:real, re:real } @ { Set }


declare map_QUERY22_mCUSTOMER1_L3_1_s6_buf : ind collection { ra:{ key:int,
  value:int }, rb:int, rc:int } @ { Set } = ind empty { ra:{ key:int, value:int
  }, rb:int, rc:int } @ { Set }


declare map_QUERY22_mCUSTOMER1_L2_1_s8_buf : ind collection { key:{ key:int,
  value:int }, value:real } @ { Set } = ind {| key:{ key:int, value:int },
  value:real | {key:g_init_vid, value:0}|} @ { Set }


declare map_QUERY22_mCUSTOMER1_s8_buf : ind collection { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:real, re:real } @ { Set } = ind empty { ra:{
  key:int, value:int }, rb:int, rc:int, rd:real, re:real } @ { Set }


declare map_QUERY22_mCUSTOMER1_L3_1_s8_buf : ind collection { ra:{ key:int,
  value:int }, rb:int, rc:int } @ { Set } = ind empty { ra:{ key:int, value:int
  }, rb:int, rc:int } @ { Set }


declare map_QUERY22_mCUSTOMER1_L2_1_s11_buf : ind collection { key:{ key:int,
  value:int }, value:real } @ { Set } = ind {| key:{ key:int, value:int },
  value:real | {key:g_init_vid, value:0}|} @ { Set }


declare map_QUERY22_mCUSTOMER1_s11_buf : ind collection { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:real, re:real } @ { Set } = ind empty { ra:{
  key:int, value:int }, rb:int, rc:int, rd:real, re:real } @ { Set }


declare map_QUERY22_mCUSTOMER1_L3_1_s11_buf : ind collection { ra:{ key:int,
  value:int }, rb:int, rc:int } @ { Set } = ind empty { ra:{ key:int, value:int
  }, rb:int, rc:int } @ { Set }


declare map_QUERY22_mCUSTOMER1_L2_1_s12_buf : ind collection { key:{ key:int,
  value:int }, value:real } @ { Set } = ind {| key:{ key:int, value:int },
  value:real | {key:g_init_vid, value:0}|} @ { Set }


declare map_QUERY22_mCUSTOMER1_L3_1_s12_buf : ind collection { ra:{ key:int,
  value:int }, rb:int, rc:int } @ { Set } = ind empty { ra:{ key:int, value:int
  }, rb:int, rc:int } @ { Set }


declare map_QUERY22_mCUSTOMER1_L2_1_s13_buf : ind collection { key:{ key:int,
  value:int }, value:real } @ { Set } = ind {| key:{ key:int, value:int },
  value:real | {key:g_init_vid, value:0}|} @ { Set }


declare map_QUERY22_mCUSTOMER1_s13_buf : ind collection { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:real, re:real } @ { Set } = ind empty { ra:{
  key:int, value:int }, rb:int, rc:int, rd:real, re:real } @ { Set }


declare map_QUERY22_mCUSTOMER1_L3_1_s13_buf : ind collection { ra:{ key:int,
  value:int }, rb:int, rc:int } @ { Set } = ind empty { ra:{ key:int, value:int
  }, rb:int, rc:int } @ { Set }


declare map_QUERY22_mCUSTOMER1_L2_1_s14_buf : ind collection { key:{ key:int,
  value:int }, value:real } @ { Set } = ind {| key:{ key:int, value:int },
  value:real | {key:g_init_vid, value:0}|} @ { Set }


declare map_QUERY22_mCUSTOMER1_s14_buf : ind collection { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:real, re:real } @ { Set } = ind empty { ra:{
  key:int, value:int }, rb:int, rc:int, rd:real, re:real } @ { Set }


declare map_QUERY22_mCUSTOMER1_L3_1_s14_buf : ind collection { ra:{ key:int,
  value:int }, rb:int, rc:int } @ { Set } = ind empty { ra:{ key:int, value:int
  }, rb:int, rc:int } @ { Set }


declare map_QUERY22_mCUSTOMER1_L3_1_s15_buf : ind collection { ra:{ key:int,
  value:int }, rb:int, rc:int } @ { Set } = ind empty { ra:{ key:int, value:int
  }, rb:int, rc:int } @ { Set }


declare map_QUERY22_mCUSTOMER1_L2_1_s15_buf : ind collection { key:{ key:int,
  value:int }, value:real } @ { Set } = ind {| key:{ key:int, value:int },
  value:real | {key:g_init_vid, value:0}|} @ { Set }


declare map_QUERY22_mCUSTOMER1_L2_1_s16_buf : ind collection { key:{ key:int,
  value:int }, value:real } @ { Set } = ind {| key:{ key:int, value:int },
  value:real | {key:g_init_vid, value:0}|} @ { Set }


declare map_QUERY22_mCUSTOMER1_s16_buf : ind collection { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:real, re:real } @ { Set } = ind empty { ra:{
  key:int, value:int }, rb:int, rc:int, rd:real, re:real } @ { Set }


declare map_QUERY22_mCUSTOMER1_L3_1_s16_buf : ind collection { ra:{ key:int,
  value:int }, rb:int, rc:int } @ { Set } = ind empty { ra:{ key:int, value:int
  }, rb:int, rc:int } @ { Set }


declare map_QUERY22_mCUSTOMER1_L2_1_s17_buf : ind collection { key:{ key:int,
  value:int }, value:real } @ { Set } = ind {| key:{ key:int, value:int },
  value:real | {key:g_init_vid, value:0}|} @ { Set }


declare map_QUERY22_mCUSTOMER1_s17_buf : ind collection { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:real, re:real } @ { Set } = ind empty { ra:{
  key:int, value:int }, rb:int, rc:int, rd:real, re:real } @ { Set }


declare map_QUERY22_mCUSTOMER1_L3_1_s17_buf : ind collection { ra:{ key:int,
  value:int }, rb:int, rc:int } @ { Set } = ind empty { ra:{ key:int, value:int
  }, rb:int, rc:int } @ { Set }


declare map_QUERY22_mCUSTOMER1_L2_1_s18_buf : ind collection { key:{ key:int,
  value:int }, value:real } @ { Set } = ind {| key:{ key:int, value:int },
  value:real | {key:g_init_vid, value:0}|} @ { Set }


declare map_QUERY22_mCUSTOMER1_L3_1_s18_buf : ind collection { ra:{ key:int,
  value:int }, rb:int, rc:int } @ { Set } = ind empty { ra:{ key:int, value:int
  }, rb:int, rc:int } @ { Set }


declare map_QUERY22_mCUSTOMER1_L2_1_s19_buf : ind collection { key:{ key:int,
  value:int }, value:real } @ { Set } = ind {| key:{ key:int, value:int },
  value:real | {key:g_init_vid, value:0}|} @ { Set }


declare map_QUERY22_mCUSTOMER1_s19_buf : ind collection { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:real, re:real } @ { Set } = ind empty { ra:{
  key:int, value:int }, rb:int, rc:int, rd:real, re:real } @ { Set }


declare map_QUERY22_mCUSTOMER1_L3_1_s19_buf : ind collection { ra:{ key:int,
  value:int }, rb:int, rc:int } @ { Set } = ind empty { ra:{ key:int, value:int
  }, rb:int, rc:int } @ { Set }


declare map_QUERY22_mCUSTOMER1_L2_1_s20_buf : ind collection { key:{ key:int,
  value:int }, value:real } @ { Set } = ind {| key:{ key:int, value:int },
  value:real | {key:g_init_vid, value:0}|} @ { Set }


declare map_QUERY22_mCUSTOMER1_s20_buf : ind collection { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:real, re:real } @ { Set } = ind empty { ra:{
  key:int, value:int }, rb:int, rc:int, rd:real, re:real } @ { Set }


declare map_QUERY22_mCUSTOMER1_L3_1_s20_buf : ind collection { ra:{ key:int,
  value:int }, rb:int, rc:int } @ { Set } = ind empty { ra:{ key:int, value:int
  }, rb:int, rc:int } @ { Set }


declare map_QUERY22_mCUSTOMER1_L2_1_s21_buf : ind collection { key:{ key:int,
  value:int }, value:real } @ { Set } = ind {| key:{ key:int, value:int },
  value:real | {key:g_init_vid, value:0}|} @ { Set }


declare map_QUERY22_mCUSTOMER1_L3_1_s21_buf : ind collection { ra:{ key:int,
  value:int }, rb:int, rc:int } @ { Set } = ind empty { ra:{ key:int, value:int
  }, rb:int, rc:int } @ { Set }


declare map_QUERY22_mCUSTOMER1_L2_1_s22_buf : ind collection { key:{ key:int,
  value:int }, value:real } @ { Set } = ind {| key:{ key:int, value:int },
  value:real | {key:g_init_vid, value:0}|} @ { Set }


declare map_QUERY22_mCUSTOMER1_s22_buf : ind collection { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:real, re:real } @ { Set } = ind empty { ra:{
  key:int, value:int }, rb:int, rc:int, rd:real, re:real } @ { Set }


declare map_QUERY22_mCUSTOMER1_L3_1_s22_buf : ind collection { ra:{ key:int,
  value:int }, rb:int, rc:int } @ { Set } = ind empty { ra:{ key:int, value:int
  }, rb:int, rc:int } @ { Set }


declare tm_timer_list : mut collection { ra:int, rb:int, rc:address } @ { Seq }


declare sw_next_switch_addr : mut address


declare sw_need_vid_cntr : mut int = 0


declare sw_token_vid_list : collection { key:{ key:int, value:int }, value:int
  } @ { Seq }


declare sw_highest_vid : mut { key:int, value:int }


declare node_ring : mut collection { key:address, value:int } @ { Seq }


declare replicas : mut int = 8


declare pmap_input : collection { key:string, value:collection { key:int,
  value:int } @ { Seq } } @ { Seq } = {| key:string, value:collection {
  key:int, value:int } @ { Seq } | {key:"QUERY22", value:{| key:int, value:int
  | {key:0, value:16}|} @ { Seq }}, {key:"QUERY22_mCUSTOMER1", value:{|
  key:int, value:int | {key:0, value:4}, {key:1, value:2}, {key:2,
  value:2}|} @ { Seq }}, {key:"QUERY22_mCUSTOMER1_L3_1", value:{| key:int,
  value:int | {key:0, value:16}|} @ { Seq }}|} @ { Seq }


declare pmap_data : collection { key:int, value:collection { key:int, value:int
  } @ { Seq } } @ { Seq } = pmap_input.fold ((\_accmap -> (\b3 ->
  bind b3 as {key:map_name, value:map_types} in 
  (_accmap.insert {key:(case ((map_ids.filter ((\b1 -> bind b1 as {ra:ra,
   rb:rb, rc:rc} in rb == map_name))).peek ()) of
   {Some x -> x}{None -> error (print "can't find map in map_ids")}).ra,
   value:map_types};
   _accmap)))) empty { key:int, value:collection { key:int, value:int
  } @ { Seq } } @ { Seq }


declare sw_num_ack : mut int = 0


declare sw_num_sent : mut int = 0


declare sw_ack_log : collection { key:{ key:int, value:int }, value:int
  } @ { Map }


declare ms_gc_interval : mut int = 20000


declare ms_gc_vid_map : mut collection { key:address, value:{ key:int,
  value:int } } @ { Map }


declare ms_gc_vid_ctr : mut int = 0


declare ms_num_gc_expected : mut int = my_peers.size ()


declare nd_log_master_write : { key:{ key:int, value:int }, value:int } -> () =
  (\b1 -> bind b1 as {key:vid, value:stmt_id} in nd_log_master.insert {key:vid,
  value:stmt_id})


declare nd_log_write_insert_CUSTOMER : { ra:{ key:int, value:int }, rb:int,
  rc:string, rd:string, re:int, rf:string, rg:real, rh:string, ri:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:CUSTOMER_CUSTKEY, rc:CUSTOMER_NAME,
  rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY, rf:CUSTOMER_PHONE,
  rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT, ri:CUSTOMER_COMMENT} in 
  nd_log_insert_CUSTOMER.insert {key:vid, value:{ra:CUSTOMER_CUSTKEY,
  rb:CUSTOMER_NAME, rc:CUSTOMER_ADDRESS, rd:CUSTOMER_NATIONKEY,
  re:CUSTOMER_PHONE, rf:CUSTOMER_ACCTBAL, rg:CUSTOMER_MKTSEGMENT,
  rh:CUSTOMER_COMMENT}})


declare nd_log_write_delete_CUSTOMER : { ra:{ key:int, value:int }, rb:int,
  rc:string, rd:string, re:int, rf:string, rg:real, rh:string, ri:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:CUSTOMER_CUSTKEY, rc:CUSTOMER_NAME,
  rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY, rf:CUSTOMER_PHONE,
  rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT, ri:CUSTOMER_COMMENT} in 
  nd_log_delete_CUSTOMER.insert {key:vid, value:{ra:CUSTOMER_CUSTKEY,
  rb:CUSTOMER_NAME, rc:CUSTOMER_ADDRESS, rd:CUSTOMER_NATIONKEY,
  re:CUSTOMER_PHONE, rf:CUSTOMER_ACCTBAL, rg:CUSTOMER_MKTSEGMENT,
  rh:CUSTOMER_COMMENT}})


declare nd_log_write_insert_ORDERS : { ra:{ key:int, value:int }, rb:int,
  rc:int, rd:string, re:real, rf:int, rg:string, rh:string, ri:int, rj:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
  rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
  rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
  rj:ORDERS_COMMENT} in nd_log_insert_ORDERS.insert {key:vid,
  value:{ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS,
  rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY,
  rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}})


declare nd_log_write_delete_ORDERS : { ra:{ key:int, value:int }, rb:int,
  rc:int, rd:string, re:real, rf:int, rg:string, rh:string, ri:int, rj:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
  rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
  rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
  rj:ORDERS_COMMENT} in nd_log_delete_ORDERS.insert {key:vid,
  value:{ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS,
  rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY,
  rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}})


declare nd_log_get_bound_insert_CUSTOMER : { key:int, value:int } -> { ra:int,
  rb:string, rc:string, rd:int, re:string, rf:real, rg:string, rh:string } =
  (\vid -> (case ((nd_log_insert_CUSTOMER.filter ((\b1 -> bind b1 as {key:key,
  value:value} in key == vid))).peek ()) of
  {Some x -> x}{None -> error (print "failed to find log")}).value)


declare nd_log_get_bound_delete_CUSTOMER : { key:int, value:int } -> { ra:int,
  rb:string, rc:string, rd:int, re:string, rf:real, rg:string, rh:string } =
  (\vid -> (case ((nd_log_delete_CUSTOMER.filter ((\b1 -> bind b1 as {key:key,
  value:value} in key == vid))).peek ()) of
  {Some x -> x}{None -> error (print "failed to find log")}).value)


declare nd_log_get_bound_insert_ORDERS : { key:int, value:int } -> { ra:int,
  rb:int, rc:string, rd:real, re:int, rf:string, rg:string, rh:int, ri:string
  } = (\vid -> (case ((nd_log_insert_ORDERS.filter ((\b1 ->
  bind b1 as {key:key, value:value} in key == vid))).peek ()) of
  {Some x -> x}{None -> error (print "failed to find log")}).value)


declare nd_log_get_bound_delete_ORDERS : { key:int, value:int } -> { ra:int,
  rb:int, rc:string, rd:real, re:int, rf:string, rg:string, rh:int, ri:string
  } = (\vid -> (case ((nd_log_delete_ORDERS.filter ((\b1 ->
  bind b1 as {key:key, value:value} in key == vid))).peek ()) of
  {Some x -> x}{None -> error (print "failed to find log")}).value)


declare nd_log_read_geq : { key:int, value:int } -> collection { key:{ key:int,
  value:int }, value:int } @ { Set } = (\vid2 -> nd_log_master.filter ((\b1 ->
  bind b1 as {key:vid, value:stmt_id} in vid >= vid2)))


declare nd_check_stmt_cntr_index : { ra:{ key:int, value:int }, rb:int, rc:int
  } -> bool = (\b1 -> bind b1 as {ra:vid, rb:stmt_id, rc:add_to_count} in case
  ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in key ==
  {key:vid, value:stmt_id}))).peek ()) of
  {Some lookup_value -> let new_count = add_to_count + (lookup_value.value).key
    in
    (nd_stmt_cntrs.update lookup_value {key:{key:vid, value:stmt_id},
     value:{key:new_count, value:(lookup_value.value).value}};
     0 == new_count)}{None ->
                       (nd_stmt_cntrs.insert {key:{key:vid, value:stmt_id},
                        value:{key:add_to_count, value:empty { key:int,
                        value:int } @ { Map }}};
                        false)})


declare nd_complete_stmt_cntr_check : { key:{ key:int, value:int }, value:int
  } -> () = (\b1 -> bind b1 as {key:vid, value:stmt_id} in 
  ((case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
   key == {key:vid, value:stmt_id}))).peek ()) of
   {Some lookup_data -> nd_stmt_cntrs.erase lookup_data}{None -> ()});
   (if nd_rcvd_sys_done
   then if not nd_sent_done and nd_stmt_cntrs.size () == 0
     then ((ms_rcv_node_done, master_addr)<- true;nd_sent_done = true) 
     else () else ())))


declare nd_update_stmt_cntr_corr_map : { ra:{ key:int, value:int }, rb:int,
  rc:int, rd:int, re:bool, rf:bool } -> () = (\b1 -> bind b1 as {ra:vid,
  rb:stmt_id, rc:hop, rd:count, re:root, rf:create} in 
  ((if create
   then nd_stmt_cntrs.insert {key:{key:vid, value:stmt_id}, value:{key:0,
     value:empty { key:int, value:int } @ { Map }}} else ());
   (case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
   key == {key:vid, value:stmt_id}))).peek ()) of
   {Some lkup -> nd_stmt_cntrs.update lkup {key:{key:vid, value:stmt_id},
     value:let sc_corr_map = (lkup.value).value in
     ((case ((sc_corr_map.filter ((\b1 -> bind b1 as {key:key, value:value} in 
      key == hop))).peek ()) of
      {Some lkup2 -> sc_corr_map.update lkup2 {key:hop, value:lkup2.value +
        count}}{None -> sc_corr_map.insert {key:hop, value:count}});
      (if root then ()
      else case ((sc_corr_map.filter ((\b1 -> bind b1 as {key:key,
        value:value} in key == hop))).peek ()) of
        {Some lkup2 -> let new_corr_cnt = lkup2.value - 1 in
          if new_corr_cnt == 0 then sc_corr_map.erase lkup2
            else sc_corr_map.update lkup2 {key:hop, value:new_corr_cnt}}
        {None -> sc_corr_map.insert {key:hop, value:-1}});
      {key:(lkup.value).key, value:sc_corr_map})}}{None ->
                                                    error
                                                      (print
                                                         "nd_update_stmt_cntr_corr_map: missing stmt_cntrs value")})))


declare nd_filter_corrective_list : { key:{ key:int, value:int },
  value:collection { key:int, value:int } @ { Collection } } -> collection {
  key:int, value:collection { key:int, value:int } @ { Seq }
  } @ { Collection } = (\b1 -> bind b1 as {key:request_vid,
  value:trig_stmt_list} in ((((nd_log_read_geq request_vid).fold ((\acc_conv ->
  (\x -> (acc_conv.insert x;acc_conv)))) empty { key:{ key:int, value:int },
  value:int } @ { Seq }).sort ((\b2 -> (\b5 -> bind b2 as {key:vid1,
  value:stmt1} in bind b5 as {key:vid2, value:stmt2} in if vid1 < vid2 
  then -1 else 1)))).groupBy ((\b1 -> bind b1 as {value:stmt_id} in stmt_id))
  ((\vid_list -> (\b3 -> bind b3 as {key:vid} in 
  (vid_list.insert vid;vid_list)))) empty { key:int, value:int
  } @ { Seq }).fold ((\acc_conv -> (\x -> (acc_conv.insert x;acc_conv))))
  empty { key:int, value:collection { key:int, value:int } @ { Seq }
  } @ { Collection })


declare add_node : address -> () = (\addr -> let rng = range replicas in
  let new_elems =
    rng.fold ((\_accmap -> (\b3 -> bind b3 as {i:i} in 
      (_accmap.insert {key:addr, value:abs (hash ((i * 2683) + hash addr))};
       _accmap)))) empty { key:address, value:int } @ { Seq } in
    (node_ring = node_ring.combine new_elems;
     node_ring = node_ring.sort ((\b2 -> (\b5 -> bind b2 as {key:addr,
     value:hash1} in bind b5 as {key:addr, value:hash2} in if hash1 < hash2
     then -1 else 1)))))


declare get_ring_node : { key:int, value:int } -> address = (\b1 ->
  bind b1 as {key:data, value:max_val} in let scaled =
  truncate (real_of_int (get_max_int ()) * (real_of_int data /
    real_of_int max_val)) in
  let results =
    node_ring.filter ((\b1 -> bind b1 as {key:addr, value:hash} in hash >=
      scaled)) in
    bind
      case (results.peek ()) of
        {Some x -> x}{None -> case (node_ring.peek ()) of
                       {Some x -> x}{None -> error (print "empty node ring")}}
      as {key:addr, value:_} in addr)


declare frontier_float : { key:{ key:int, value:int }, value:collection { key:{
  key:int, value:int }, value:real } @ { Set } } -> collection { key:{ key:int,
  value:int }, value:real } @ { Collection } = (\b1 -> bind b1 as {key:vid,
  value:input_map} in (input_map.fold ((\b2 -> (\b5 -> bind b2 as {key:acc,
  value:max_vid} in bind b5 as {key:map_vid, value:map_val} in if map_vid < vid
  then if map_vid == max_vid
    then (acc.insert {key:map_vid, value:map_val};{key:acc, value:max_vid})
    else if map_vid > max_vid
      then {key:{| key:{ key:int, value:int }, value:real | {key:map_vid,
        value:map_val}|} @ { Collection }, value:map_vid}
      else {key:acc, value:max_vid} else {key:acc, value:max_vid})))
  {key:empty { key:{ key:int, value:int }, value:real } @ { Collection },
  value:g_min_vid}).key)


declare frontier_int_int : { key:{ key:int, value:int }, value:collection {
  ra:{ key:int, value:int }, rb:int, rc:int } @ { Set } } -> collection { ra:{
  key:int, value:int }, rb:int, rc:int } @ { Collection } = (\b1 ->
  bind b1 as {key:vid, value:input_map} in (input_map.groupBy ((\b1 ->
  bind b1 as {ra:map_vid, rb:map_0, rc:map_val} in map_0)) ((\b2 -> (\b5 ->
  bind b2 as {key:acc, value:max_vid} in bind b5 as {ra:map_vid, rb:map_0,
  rc:map_val} in if map_vid < vid
  then if map_vid == max_vid
    then
      (acc.insert {ra:map_vid, rb:map_0, rc:map_val};{key:acc, value:max_vid})
    else if map_vid > max_vid
      then {key:{| ra:{ key:int, value:int }, rb:int, rc:int | {ra:map_vid,
        rb:map_0, rc:map_val}|} @ { Collection }, value:map_vid}
      else {key:acc, value:max_vid} else {key:acc, value:max_vid})))
  {key:empty { ra:{ key:int, value:int }, rb:int, rc:int } @ { Collection },
  value:g_min_vid}).fold ((\_accext -> (\b3 -> bind b3 as {value:b4} in 
  bind b4 as {key:project} in _accext.combine project))) empty { ra:{ key:int,
  value:int }, rb:int, rc:int } @ { Collection })


declare frontier_int_int_float_float : { key:{ key:int, value:int },
  value:collection { ra:{ key:int, value:int }, rb:int, rc:int, rd:real,
  re:real } @ { Set } } -> collection { ra:{ key:int, value:int }, rb:int,
  rc:int, rd:real, re:real } @ { Collection } = (\b1 -> bind b1 as {key:vid,
  value:input_map} in (input_map.groupBy ((\b1 -> bind b1 as {ra:map_vid,
  rb:map_0, rc:map_1, rd:map_2, re:map_val} in {ra:map_0, rb:map_1, rc:map_2}))
  ((\b2 -> (\b5 -> bind b2 as {key:acc, value:max_vid} in 
  bind b5 as {ra:map_vid, rb:map_0, rc:map_1, rd:map_2, re:map_val} in 
  if map_vid < vid
  then if map_vid == max_vid
    then
      (acc.insert {ra:map_vid, rb:map_0, rc:map_1, rd:map_2, re:map_val};
       {key:acc, value:max_vid})
    else if map_vid > max_vid
      then {key:{| ra:{ key:int, value:int }, rb:int, rc:int, rd:real, re:real
        | {ra:map_vid, rb:map_0, rc:map_1, rd:map_2,
        re:map_val}|} @ { Collection }, value:map_vid}
      else {key:acc, value:max_vid} else {key:acc, value:max_vid})))
  {key:empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:real, re:real
  } @ { Collection }, value:g_min_vid}).fold ((\_accext -> (\b3 ->
  bind b3 as {value:b4} in bind b4 as {key:project} in _accext.combine
  project))) empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:real,
  re:real } @ { Collection })


declare frontier_int_float : { key:{ key:int, value:int }, value:collection {
  ra:{ key:int, value:int }, rb:int, rc:real } @ { Set } } -> collection { ra:{
  key:int, value:int }, rb:int, rc:real } @ { Collection } = (\b1 ->
  bind b1 as {key:vid, value:input_map} in (input_map.groupBy ((\b1 ->
  bind b1 as {ra:map_vid, rb:map_0, rc:map_val} in map_0)) ((\b2 -> (\b5 ->
  bind b2 as {key:acc, value:max_vid} in bind b5 as {ra:map_vid, rb:map_0,
  rc:map_val} in if map_vid < vid
  then if map_vid == max_vid
    then
      (acc.insert {ra:map_vid, rb:map_0, rc:map_val};{key:acc, value:max_vid})
    else if map_vid > max_vid
      then {key:{| ra:{ key:int, value:int }, rb:int, rc:real | {ra:map_vid,
        rb:map_0, rc:map_val}|} @ { Collection }, value:map_vid}
      else {key:acc, value:max_vid} else {key:acc, value:max_vid})))
  {key:empty { ra:{ key:int, value:int }, rb:int, rc:real } @ { Collection },
  value:g_min_vid}).fold ((\_accext -> (\b3 -> bind b3 as {value:b4} in 
  bind b4 as {key:project} in _accext.combine project))) empty { ra:{ key:int,
  value:int }, rb:int, rc:real } @ { Collection })


declare nd_add_delta_to_float : { ra:ind collection { key:{ key:int, value:int
  }, value:real } @ { Set }, rb:bool, rc:{ key:int, value:int },
  rd:collection {i:real} @ { Collection } } -> () = (\b1 ->
  bind b1 as {ra:target_map, rb:corrective, rc:min_vid, rd:delta_tuples} in 
  (delta_tuples.iterate ((\b1 -> bind b1 as {i:map_val} in bind target_map as
   ind target_map_d in
   let lookup_value =
     if corrective
       then target_map_d.filter ((\b1 -> bind b1 as {key:key, value:value} in 
         key == min_vid))
       else empty { key:{ key:int, value:int }, value:real } @ { Set } in
     case (lookup_value.peek ()) of
       {Some val -> let update_value = map_val + val.value in
         target_map_d.update val {key:min_vid, value:update_value}}{None -> let
                                                                    lookup_value
                                                                    =
                                                                    frontier_float
                                                                    {key:min_vid,
                                                                    value:target_map_d}
                                                                    in
                                                                    let
                                                                    update_value
                                                                    =
                                                                    map_val +
                                                                    case
                                                                    (lookup_value.peek
                                                                    ()) of
                                                                    {Some val ->
                                                                    val.value}
                                                                    {None -> 0}
                                                                    in
                                                                    target_map_d.insert
                                                                    {key:min_vid,
                                                                    value:update_value}}));
   delta_tuples.iterate ((\b1 -> bind b1 as {i:map_val_delta} in let filtered =
   bind target_map as ind target_map_d in
     target_map_d.filter ((\b1 -> bind b1 as {key:vid, value:map_val} in vid >
       min_vid)) in
   filtered.iterate ((\b1 -> bind b1 as {key:vid, value:map_val} in bind
     target_map as ind target_map_d in
     target_map_d.update {key:vid, value:map_val} {key:vid, value:map_val +
       map_val_delta}))))))


declare nd_add_delta_to_int_int : { ra:ind collection { ra:{ key:int, value:int
  }, rb:int, rc:int } @ { Set }, rb:bool, rc:{ key:int, value:int },
  rd:collection { key:int, value:int } @ { Collection } } -> () = (\b1 ->
  bind b1 as {ra:target_map, rb:corrective, rc:min_vid, rd:delta_tuples} in 
  (delta_tuples.iterate ((\b1 -> bind b1 as {key:map_0, value:map_val} in bind
   target_map as ind target_map_d in
   let lookup_value =
     if corrective
       then target_map_d.filter ((\b1 -> bind b1 as {ra:ra, rb:rb, rc:rc} in ra
         == min_vid and rb == map_0))
       else empty { ra:{ key:int, value:int }, rb:int, rc:int } @ { Set } in
     case (lookup_value.peek ()) of
       {Some val -> let update_value = map_val + val.rc in
         target_map_d.update val {ra:min_vid, rb:map_0, rc:update_value}}
       {None -> let lookup_value =
         frontier_int_int {key:min_vid, value:target_map_d.filter ((\b1 ->
           bind b1 as {ra:ra, rb:rb, rc:rc} in rb == map_0))} in
         let update_value =
           map_val + case (lookup_value.peek ()) of
             {Some val -> val.rc}{None -> 0} in
           target_map_d.insert {ra:min_vid, rb:map_0, rc:update_value}}));
   delta_tuples.iterate ((\b1 -> bind b1 as {key:map_0_delta,
   value:map_val_delta} in let filtered =
   bind target_map as ind target_map_d in
     (target_map_d.filter ((\b1 -> bind b1 as {ra:ra, rb:rb, rc:rc} in rb ==
       map_0_delta))).filter ((\b1 -> bind b1 as {ra:vid, rb:map_0,
       rc:map_val} in vid > min_vid)) in
   filtered.iterate ((\b1 -> bind b1 as {ra:vid, rb:map_0, rc:map_val} in bind
     target_map as ind target_map_d in
     target_map_d.update {ra:vid, rb:map_0, rc:map_val} {ra:vid, rb:map_0,
       rc:map_val + map_val_delta}))))))


declare nd_add_delta_to_int_int_float_float : { ra:ind collection { ra:{
  key:int, value:int }, rb:int, rc:int, rd:real, re:real } @ { Set }, rb:bool,
  rc:{ key:int, value:int }, rd:collection { ra:int, rb:int, rc:real, rd:real
  } @ { Collection } } -> () = (\b1 -> bind b1 as {ra:target_map,
  rb:corrective, rc:min_vid, rd:delta_tuples} in 
  (delta_tuples.iterate ((\b1 -> bind b1 as {ra:map_0, rb:map_1, rc:map_2,
   rd:map_val} in bind target_map as ind target_map_d in
   let lookup_value =
     if corrective
       then target_map_d.filter ((\b1 -> bind b1 as {ra:ra, rb:rb, rc:rc,
         rd:rd, re:re} in ((ra == min_vid and rd == map_2) and rc == map_1) and
         rb == map_0))
       else empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:real, re:real
         } @ { Set } in
     case (lookup_value.peek ()) of
       {Some val -> let update_value = map_val + val.re in
         target_map_d.update val {ra:min_vid, rb:map_0, rc:map_1, rd:map_2,
           re:update_value}}{None -> let lookup_value =
                              frontier_int_int_float_float {key:min_vid,
                                value:target_map_d.filter ((\b1 ->
                                bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd,
                                re:re} in (rb == map_0 and rd == map_2) and rc
                                == map_1))} in
                              let update_value =
                                map_val + case (lookup_value.peek ()) of
                                  {Some val -> val.re}{None -> 0} in
                                target_map_d.insert {ra:min_vid, rb:map_0,
                                  rc:map_1, rd:map_2, re:update_value}}));
   delta_tuples.iterate ((\b1 -> bind b1 as {ra:map_0_delta, rb:map_1_delta,
   rc:map_2_delta, rd:map_val_delta} in let filtered =
   bind target_map as ind target_map_d in
     (target_map_d.filter ((\b1 -> bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd,
       re:re} in (rb == map_0_delta and rd == map_2_delta) and rc ==
       map_1_delta))).filter ((\b1 -> bind b1 as {ra:vid, rb:map_0, rc:map_1,
       rd:map_2, re:map_val} in vid > min_vid)) in
   filtered.iterate ((\b1 -> bind b1 as {ra:vid, rb:map_0, rc:map_1, rd:map_2,
     re:map_val} in bind target_map as ind target_map_d in
     target_map_d.update {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val}
       {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val + map_val_delta}))))))


declare nd_add_delta_to_int_float : { ra:ind collection { ra:{ key:int,
  value:int }, rb:int, rc:real } @ { Set }, rb:bool, rc:{ key:int, value:int },
  rd:collection { key:int, value:real } @ { Collection } } -> () = (\b1 ->
  bind b1 as {ra:target_map, rb:corrective, rc:min_vid, rd:delta_tuples} in 
  (delta_tuples.iterate ((\b1 -> bind b1 as {key:map_0, value:map_val} in bind
   target_map as ind target_map_d in
   let lookup_value =
     if corrective
       then target_map_d.filter ((\b1 -> bind b1 as {ra:ra, rb:rb, rc:rc} in ra
         == min_vid and rb == map_0))
       else empty { ra:{ key:int, value:int }, rb:int, rc:real } @ { Set } in
     case (lookup_value.peek ()) of
       {Some val -> let update_value = map_val + val.rc in
         target_map_d.update val {ra:min_vid, rb:map_0, rc:update_value}}
       {None -> let lookup_value =
         frontier_int_float {key:min_vid, value:target_map_d.filter ((\b1 ->
           bind b1 as {ra:ra, rb:rb, rc:rc} in rb == map_0))} in
         let update_value =
           map_val + case (lookup_value.peek ()) of
             {Some val -> val.rc}{None -> 0} in
           target_map_d.insert {ra:min_vid, rb:map_0, rc:update_value}}));
   delta_tuples.iterate ((\b1 -> bind b1 as {key:map_0_delta,
   value:map_val_delta} in let filtered =
   bind target_map as ind target_map_d in
     (target_map_d.filter ((\b1 -> bind b1 as {ra:ra, rb:rb, rc:rc} in rb ==
       map_0_delta))).filter ((\b1 -> bind b1 as {ra:vid, rb:map_0,
       rc:map_val} in vid > min_vid)) in
   filtered.iterate ((\b1 -> bind b1 as {ra:vid, rb:map_0, rc:map_val} in bind
     target_map as ind target_map_d in
     target_map_d.update {ra:vid, rb:map_0, rc:map_val} {ra:vid, rb:map_0,
       rc:map_val + map_val_delta}))))))


declare sw_gen_vid : () -> option { key:int, value:int } = (\_ -> case
  (sw_token_vid_list.peek ()) of
  {Some vid_num -> let num_new = vid_num.value - 1 in
    let vid_new = {key:(vid_num.key).key, value:(vid_num.key).value + 1} in
      ((if num_new <= 0 then sw_token_vid_list.erase vid_num
       else sw_token_vid_list.update vid_num {key:vid_new, value:num_new});
       Some (vid_num.key))}{None -> None immut})


declare calc_dim_bounds : collection { key:int, value:int } @ { Seq } -> {
  key:collection { key:int, value:int } @ { Seq }, value:int } = (\pmap ->
  pmap.fold ((\b2 -> (\b5 -> bind b2 as {key:xs, value:acc_size} in 
  bind b5 as {key:pos, value:bin_size} in {key:xs.combine ({| key:int,
  value:int | {key:pos, value:acc_size}|} @ { Seq }), value:bin_size *
  acc_size}))) {key:empty { key:int, value:int } @ { Seq }, value:1})


declare route_to_int_int_float : { ra:int, rb:option int, rc:option int,
  rd:option real } -> collection {i:address} @ { Collection } = (\b1 ->
  bind b1 as {ra:map_id, rb:key_0, rc:key_1, rd:key_2} in let pmap =
  (case ((pmap_data.filter ((\b1 -> bind b1 as {key:key, value:value} in key ==
    map_id))).peek ()) of
    {Some x -> x}{None -> error (print "can't find map_id in pmap_data")}).value
  in
  case (pmap.peek ()) of
    {Some _ -> bind calc_dim_bounds pmap as {key:dim_bounds, value:max_val} in
      let bound_bucket =
        case key_2 of
          {Some key_2_unwrap -> let pmap_slice =
            pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key ==
              2)) in
            case (pmap_slice.peek ()) of
              {Some peek_slice -> let value =
                abs (hash key_2_unwrap) % peek_slice.value in
                value * (case ((dim_bounds.filter ((\b1 -> bind b1 as {key:key,
                  value:value} in key == 2))).peek ()) of
                  {Some x -> x}{None ->
                                 error (print "can't find 2 in dim_bounds")}).value}
              {None -> 0}}{None -> 0} + (case key_1 of
          {Some key_1_unwrap -> let pmap_slice =
            pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key ==
              1)) in
            case (pmap_slice.peek ()) of
              {Some peek_slice -> let value =
                abs (hash key_1_unwrap) % peek_slice.value in
                value * (case ((dim_bounds.filter ((\b1 -> bind b1 as {key:key,
                  value:value} in key == 1))).peek ()) of
                  {Some x -> x}{None ->
                                 error (print "can't find 1 in dim_bounds")}).value}
              {None -> 0}}{None -> 0} + (case key_0 of
          {Some key_0_unwrap -> let pmap_slice =
            pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key ==
              0)) in
            case (pmap_slice.peek ()) of
              {Some peek_slice -> let value =
                abs (hash key_0_unwrap) % peek_slice.value in
                value * (case ((dim_bounds.filter ((\b1 -> bind b1 as {key:key,
                  value:value} in key == 0))).peek ()) of
                  {Some x -> x}{None ->
                                 error (print "can't find 0 in dim_bounds")}).value}
              {None -> 0}}{None -> 0} + 0)) in
        let free_dims =
          (if key_2 != None immut then empty { key:int, value:int } @ { Seq }
            else pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key
              == 2))).combine ((if key_1 != None immut
            then empty { key:int, value:int } @ { Seq }
            else pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key
              == 1))).combine ((if key_0 != None immut
            then empty { key:int, value:int } @ { Seq }
            else pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key
              == 0))).combine empty { key:int, value:int } @ { Seq })) in
          let free_domains =
            free_dims.fold ((\_accmap -> (\b3 -> bind b3 as {key:i,
              value:b_i} in 
              (_accmap.insert {key:i, value:range b_i};_accmap)))) empty {
              key:int, value:collection {i:int} @ { Seq } } @ { Seq } in
            let free_cart_prod =
              free_domains.fold ((\prev_cart_prod -> (\b3 -> bind b3 as {key:i,
                value:domain} in domain.fold ((\_accext -> (\b3 ->
                bind b3 as {i:domain_element} in _accext.combine
                (if 0 == prev_cart_prod.size ()
                then {|i:collection { key:int, value:int } @ { Seq }| {|
                  key:int, value:int | {key:i,
                  value:domain_element}|} @ { Seq }|} @ { Seq }
                else prev_cart_prod.fold ((\_accmap -> (\b3 ->
                  bind b3 as {i:rest_tup} in 
                  (_accmap.insert ({i:rest_tup.combine ({| key:int, value:int |
                   {key:i, value:domain_element}|} @ { Seq })});
                   _accmap)))) empty {i:collection { key:int, value:int
                  } @ { Seq }} @ { Seq })))) empty {i:collection { key:int,
                value:int } @ { Seq }} @ { Seq }))) empty {i:collection {
                key:int, value:int } @ { Seq }} @ { Seq } in
              let sorted_ip_list =
                (free_cart_prod.fold ((\acc_ips -> (\b3 ->
                  bind b3 as {i:free_bucket} in acc_ips.combine ({|i:address|
                  get_ring_node {key:free_bucket.fold ((\acc -> (\b3 ->
                    bind b3 as {key:i, value:val} in acc + (val * (case
                    ((dim_bounds.filter ((\b1 -> bind b1 as {key:key,
                    value:value} in key == i))).peek ()) of
                    {Some x -> x}{None ->
                                   error (print "can't find i in dim_bounds")}).value))))
                    bound_bucket, value:max_val}|} @ { Collection }))))
                  empty {i:address} @ { Collection }).groupBy ((\b1 ->
                  bind b1 as {i:ip} in ip)) ((\_ -> (\_ -> ()))) () in
                if 0 == sorted_ip_list.size ()
                  then {|i:address|
                    get_ring_node {key:bound_bucket, value:max_val}|} @ { Collection }
                  else sorted_ip_list.fold ((\_accmap -> (\x ->
                    (_accmap.insert ({i:x.key});_accmap))))
                    empty {i:address} @ { Collection }}{None -> nodes})


declare route_to_ : { key:int, value:()
  } -> collection {i:address} @ { Collection } = (\b1 -> {|i:address|
  get_ring_node {key:1, value:1}|} @ { Collection })


declare route_to_int : { key:int, value:option int
  } -> collection {i:address} @ { Collection } = (\b1 ->
  bind b1 as {key:map_id, value:key_0} in let pmap =
  (case ((pmap_data.filter ((\b1 -> bind b1 as {key:key, value:value} in key ==
    map_id))).peek ()) of
    {Some x -> x}{None -> error (print "can't find map_id in pmap_data")}).value
  in
  case (pmap.peek ()) of
    {Some _ -> bind calc_dim_bounds pmap as {key:dim_bounds, value:max_val} in
      let bound_bucket =
        case key_0 of
          {Some key_0_unwrap -> let pmap_slice =
            pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key ==
              0)) in
            case (pmap_slice.peek ()) of
              {Some peek_slice -> let value =
                abs (hash key_0_unwrap) % peek_slice.value in
                value * (case ((dim_bounds.filter ((\b1 -> bind b1 as {key:key,
                  value:value} in key == 0))).peek ()) of
                  {Some x -> x}{None ->
                                 error (print "can't find 0 in dim_bounds")}).value}
              {None -> 0}}{None -> 0} + 0 in
        let free_dims =
          (if key_0 != None immut then empty { key:int, value:int } @ { Seq }
            else pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key
              == 0))).combine empty { key:int, value:int } @ { Seq } in
          let free_domains =
            free_dims.fold ((\_accmap -> (\b3 -> bind b3 as {key:i,
              value:b_i} in 
              (_accmap.insert {key:i, value:range b_i};_accmap)))) empty {
              key:int, value:collection {i:int} @ { Seq } } @ { Seq } in
            let free_cart_prod =
              free_domains.fold ((\prev_cart_prod -> (\b3 -> bind b3 as {key:i,
                value:domain} in domain.fold ((\_accext -> (\b3 ->
                bind b3 as {i:domain_element} in _accext.combine
                (if 0 == prev_cart_prod.size ()
                then {|i:collection { key:int, value:int } @ { Seq }| {|
                  key:int, value:int | {key:i,
                  value:domain_element}|} @ { Seq }|} @ { Seq }
                else prev_cart_prod.fold ((\_accmap -> (\b3 ->
                  bind b3 as {i:rest_tup} in 
                  (_accmap.insert ({i:rest_tup.combine ({| key:int, value:int |
                   {key:i, value:domain_element}|} @ { Seq })});
                   _accmap)))) empty {i:collection { key:int, value:int
                  } @ { Seq }} @ { Seq })))) empty {i:collection { key:int,
                value:int } @ { Seq }} @ { Seq }))) empty {i:collection {
                key:int, value:int } @ { Seq }} @ { Seq } in
              let sorted_ip_list =
                (free_cart_prod.fold ((\acc_ips -> (\b3 ->
                  bind b3 as {i:free_bucket} in acc_ips.combine ({|i:address|
                  get_ring_node {key:free_bucket.fold ((\acc -> (\b3 ->
                    bind b3 as {key:i, value:val} in acc + (val * (case
                    ((dim_bounds.filter ((\b1 -> bind b1 as {key:key,
                    value:value} in key == i))).peek ()) of
                    {Some x -> x}{None ->
                                   error (print "can't find i in dim_bounds")}).value))))
                    bound_bucket, value:max_val}|} @ { Collection }))))
                  empty {i:address} @ { Collection }).groupBy ((\b1 ->
                  bind b1 as {i:ip} in ip)) ((\_ -> (\_ -> ()))) () in
                if 0 == sorted_ip_list.size ()
                  then {|i:address|
                    get_ring_node {key:bound_bucket, value:max_val}|} @ { Collection }
                  else sorted_ip_list.fold ((\_accmap -> (\x ->
                    (_accmap.insert ({i:x.key});_accmap))))
                    empty {i:address} @ { Collection }}{None -> nodes})


declare shuffle_QUERY22_mCUSTOMER1_L3_1_to_QUERY22 : { ra:option int,
  rb:collection { ra:{ key:int, value:int }, rb:int, rc:int } @ { Collection },
  rc:bool } -> collection { key:address, value:collection { ra:{ key:int,
  value:int }, rb:int, rc:int } @ { Collection } } @ { Collection } = (\b1 ->
  bind b1 as {ra:lkey_0, rb:tuples, rc:shuffle_on_empty} in let all_targets =
  if shuffle_on_empty == true
    then (route_to_int {key:1, value:lkey_0}).fold ((\_accmap -> (\b3 ->
      bind b3 as {i:ip} in 
      (_accmap.insert {key:ip, value:empty { ra:{ key:int, value:int }, rb:int,
       rc:int } @ { Collection }};
       _accmap)))) empty { key:address, value:collection { ra:{ key:int,
      value:int }, rb:int, rc:int } @ { Collection } } @ { Collection }
    else empty { key:address, value:collection { ra:{ key:int, value:int },
      rb:int, rc:int } @ { Collection } } @ { Collection } in
  (all_targets.combine (tuples.fold ((\_accext -> (\r_tuple -> _accext.combine
    (bind r_tuple as {ra:rkey_0, rb:rkey_1, rc:rkey_2} in
    (route_to_int {key:1, value:lkey_0}).fold ((\_accmap -> (\b3 ->
      bind b3 as {i:ip} in 
      (_accmap.insert {key:ip, value:{| ra:{ key:int, value:int }, rb:int,
       rc:int | r_tuple|} @ { Collection }};
       _accmap)))) empty { key:address, value:collection { ra:{ key:int,
      value:int }, rb:int, rc:int } @ { Collection } } @ { Collection }))))
    empty { key:address, value:collection { ra:{ key:int, value:int }, rb:int,
    rc:int } @ { Collection } } @ { Collection })).groupBy ((\b1 ->
    bind b1 as {key:ip, value:tuple} in ip)) ((\acc -> (\b3 ->
    bind b3 as {key:ip, value:tuple} in tuple.combine acc))) empty { ra:{
    key:int, value:int }, rb:int, rc:int } @ { Collection })


declare shuffle_QUERY22_mCUSTOMER1_to_QUERY22_bind_0t0 : { ra:option int,
  rb:collection { ra:{ key:int, value:int }, rb:int, rc:int, rd:real, re:real
  } @ { Collection }, rc:bool } -> collection { key:address, value:collection {
  ra:{ key:int, value:int }, rb:int, rc:int, rd:real, re:real
  } @ { Collection } } @ { Collection } = (\b1 -> bind b1 as {ra:lkey_0,
  rb:tuples, rc:shuffle_on_empty} in let all_targets =
  if shuffle_on_empty == true
    then (route_to_int {key:1, value:lkey_0}).fold ((\_accmap -> (\b3 ->
      bind b3 as {i:ip} in 
      (_accmap.insert {key:ip, value:empty { ra:{ key:int, value:int }, rb:int,
       rc:int, rd:real, re:real } @ { Collection }};
       _accmap)))) empty { key:address, value:collection { ra:{ key:int,
      value:int }, rb:int, rc:int, rd:real, re:real } @ { Collection }
      } @ { Collection }
    else empty { key:address, value:collection { ra:{ key:int, value:int },
      rb:int, rc:int, rd:real, re:real } @ { Collection } } @ { Collection } in
  (all_targets.combine (tuples.fold ((\_accext -> (\r_tuple -> _accext.combine
    (bind r_tuple as {ra:rkey_0, rb:rkey_1, rc:rkey_2, rd:rkey_3, re:rkey_4} in
    (route_to_int {key:1, value:Some rkey_1}).fold ((\_accmap -> (\b3 ->
      bind b3 as {i:ip} in 
      (_accmap.insert {key:ip, value:{| ra:{ key:int, value:int }, rb:int,
       rc:int, rd:real, re:real | r_tuple|} @ { Collection }};
       _accmap)))) empty { key:address, value:collection { ra:{ key:int,
      value:int }, rb:int, rc:int, rd:real, re:real } @ { Collection }
      } @ { Collection })))) empty { key:address, value:collection { ra:{
    key:int, value:int }, rb:int, rc:int, rd:real, re:real } @ { Collection }
    } @ { Collection })).groupBy ((\b1 -> bind b1 as {key:ip, value:tuple} in 
    ip)) ((\acc -> (\b3 -> bind b3 as {key:ip, value:tuple} in tuple.combine
    acc))) empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:real, re:real
    } @ { Collection })


declare shuffle_QUERY22_mCUSTOMER1_L2_1_to_QUERY22 : { ra:option int,
  rb:collection { key:{ key:int, value:int }, value:real } @ { Collection },
  rc:bool } -> collection { key:address, value:collection { key:{ key:int,
  value:int }, value:real } @ { Collection } } @ { Collection } = (\b1 ->
  bind b1 as {ra:lkey_0, rb:tuples, rc:shuffle_on_empty} in let all_targets =
  if shuffle_on_empty == true
    then (route_to_int {key:1, value:lkey_0}).fold ((\_accmap -> (\b3 ->
      bind b3 as {i:ip} in 
      (_accmap.insert {key:ip, value:empty { key:{ key:int, value:int },
       value:real } @ { Collection }};
       _accmap)))) empty { key:address, value:collection { key:{ key:int,
      value:int }, value:real } @ { Collection } } @ { Collection }
    else empty { key:address, value:collection { key:{ key:int, value:int },
      value:real } @ { Collection } } @ { Collection } in
  (all_targets.combine (tuples.fold ((\_accext -> (\r_tuple -> _accext.combine
    (bind r_tuple as {key:rkey_0, value:rkey_1} in
    (route_to_int {key:1, value:lkey_0}).fold ((\_accmap -> (\b3 ->
      bind b3 as {i:ip} in 
      (_accmap.insert {key:ip, value:{| key:{ key:int, value:int }, value:real
       | r_tuple|} @ { Collection }};
       _accmap)))) empty { key:address, value:collection { key:{ key:int,
      value:int }, value:real } @ { Collection } } @ { Collection })))) empty {
    key:address, value:collection { key:{ key:int, value:int }, value:real
    } @ { Collection } } @ { Collection })).groupBy ((\b1 ->
    bind b1 as {key:ip, value:tuple} in ip)) ((\acc -> (\b3 ->
    bind b3 as {key:ip, value:tuple} in tuple.combine acc))) empty { key:{
    key:int, value:int }, value:real } @ { Collection })


declare nd_QUERY22_mCUSTOMER1_L3_1_send_correctives : { ra:address, rb:int,
  rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:collection {
  key:int, value:int } @ { Collection } } -> int = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
  re:corrective_vid, rf:delta_tuples} in let corrective_list =
  nd_filter_corrective_list {key:corrective_vid, value:{| key:int, value:int |
    {key:0, value:2}, {key:1, value:5}, {key:2, value:6}, {key:3,
    value:8}|} @ { Collection }} in
  if 0 == corrective_list.size () then 0
    else let delta_tuples2 =
      delta_tuples.fold ((\_accmap -> (\b3 -> bind b3 as {key:map_0,
        value:map_val} in 
        (_accmap.insert {ra:g_min_vid, rb:map_0, rc:map_val};_accmap))))
        empty { ra:{ key:int, value:int }, rb:int, rc:int } @ { Collection } in
      corrective_list.fold ((\acc_count -> (\b3 -> bind b3 as {key:stmt_id,
        value:vid_list} in if stmt_id == 8
        then let ips_vids =
          (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
            nd_log_get_bound_delete_ORDERS vid as
            {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
            in
            (shuffle_QUERY22_mCUSTOMER1_L3_1_to_QUERY22 {ra:None immut,
               rb:delta_tuples2, rc:false}).fold ((\_accmap -> (\b3 ->
              bind b3 as {key:ip, value:tuples} in 
              (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold ((\_accmap ->
               (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
               (_accmap.insert {key:map_0, value:map_val};_accmap)))) empty {
               key:int, value:int } @ { Collection }};
               _accmap)))) empty { ra:address, rb:{ key:int, value:int },
              rc:collection { key:int, value:int } @ { Collection }
              } @ { Collection })))) empty { ra:address, rb:{ key:int,
            value:int }, rc:collection { key:int, value:int } @ { Collection }
            } @ { Collection }).groupBy ((\b1 -> bind b1 as {ra:ip, rb:vid,
            rc:tuples} in ip)) ((\b2 -> (\b5 -> bind b2 as {key:acc_vid,
            value:acc_tuples} in bind b5 as {ra:ip, rb:vid, rc:tuples} in 
            (acc_vid.insert vid;
             {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
             ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold ((\_accmap ->
             (\x -> (_accmap.insert (x.key);_accmap)))) empty { key:int,
             value:int } @ { Collection }})))) {key:empty { key:int, value:int
            } @ { Seq }, value:empty { key:int, value:int } @ { Collection }}
          in
          ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
            value:vid_send_list_tup} in 
            ((delete_ORDERS_rcv_corrective_s8_m_QUERY22_mCUSTOMER1_L3_1, ip)<- {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:corrective_vid,
             rf:vid_send_list_tup.key, rg:vid_send_list_tup.value};
             acc_count + 1)))) acc_count
        else if stmt_id == 6
          then let ips_vids =
            (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
              nd_log_get_bound_insert_ORDERS vid as
              {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
              in
              (shuffle_QUERY22_mCUSTOMER1_L3_1_to_QUERY22 {ra:None immut,
                 rb:delta_tuples2, rc:false}).fold ((\_accmap -> (\b3 ->
                bind b3 as {key:ip, value:tuples} in 
                (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold ((\_accmap ->
                 (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
                 (_accmap.insert {key:map_0, value:map_val};_accmap)))) empty {
                 key:int, value:int } @ { Collection }};
                 _accmap)))) empty { ra:address, rb:{ key:int, value:int },
                rc:collection { key:int, value:int } @ { Collection }
                } @ { Collection })))) empty { ra:address, rb:{ key:int,
              value:int }, rc:collection { key:int, value:int
              } @ { Collection } } @ { Collection }).groupBy ((\b1 ->
              bind b1 as {ra:ip, rb:vid, rc:tuples} in ip)) ((\b2 -> (\b5 ->
              bind b2 as {key:acc_vid, value:acc_tuples} in bind b5 as {ra:ip,
              rb:vid, rc:tuples} in 
              (acc_vid.insert vid;
               {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
               ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold ((\_accmap ->
               (\x -> (_accmap.insert (x.key);_accmap)))) empty { key:int,
               value:int } @ { Collection }})))) {key:empty { key:int,
              value:int } @ { Seq }, value:empty { key:int, value:int
              } @ { Collection }} in
            ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
              value:vid_send_list_tup} in 
              ((insert_ORDERS_rcv_corrective_s6_m_QUERY22_mCUSTOMER1_L3_1, ip)<- {ra:orig_addr,
               rb:orig_stmt_id, rc:orig_vid, rd:hop, re:corrective_vid,
               rf:vid_send_list_tup.key, rg:vid_send_list_tup.value};
               acc_count + 1)))) acc_count
          else if stmt_id == 5
            then let ips_vids =
              (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
                nd_log_get_bound_delete_CUSTOMER vid as
                {ra:CUSTOMER_CUSTKEY, rb:CUSTOMER_NAME, rc:CUSTOMER_ADDRESS, rd:CUSTOMER_NATIONKEY, re:CUSTOMER_PHONE, rf:CUSTOMER_ACCTBAL, rg:CUSTOMER_MKTSEGMENT, rh:CUSTOMER_COMMENT}
                in
                (shuffle_QUERY22_mCUSTOMER1_L3_1_to_QUERY22 {ra:None immut,
                   rb:delta_tuples2, rc:false}).fold ((\_accmap -> (\b3 ->
                  bind b3 as {key:ip, value:tuples} in 
                  (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold ((\_accmap ->
                   (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
                   (_accmap.insert {key:map_0, value:map_val};_accmap))))
                   empty { key:int, value:int } @ { Collection }};
                   _accmap)))) empty { ra:address, rb:{ key:int, value:int },
                  rc:collection { key:int, value:int } @ { Collection }
                  } @ { Collection })))) empty { ra:address, rb:{ key:int,
                value:int }, rc:collection { key:int, value:int
                } @ { Collection } } @ { Collection }).groupBy ((\b1 ->
                bind b1 as {ra:ip, rb:vid, rc:tuples} in ip)) ((\b2 -> (\b5 ->
                bind b2 as {key:acc_vid, value:acc_tuples} in 
                bind b5 as {ra:ip, rb:vid, rc:tuples} in 
                (acc_vid.insert vid;
                 {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
                 ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold
                 ((\_accmap -> (\x -> (_accmap.insert (x.key);_accmap))))
                 empty { key:int, value:int } @ { Collection }}))))
                {key:empty { key:int, value:int } @ { Seq }, value:empty {
                key:int, value:int } @ { Collection }} in
              ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
                value:vid_send_list_tup} in 
                ((delete_CUSTOMER_rcv_corrective_s5_m_QUERY22_mCUSTOMER1_L3_1,
                   ip)<- {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
                 re:corrective_vid, rf:vid_send_list_tup.key,
                 rg:vid_send_list_tup.value};
                 acc_count + 1)))) acc_count
            else if stmt_id == 2
              then let ips_vids =
                (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
                  nd_log_get_bound_insert_CUSTOMER vid as
                  {ra:CUSTOMER_CUSTKEY, rb:CUSTOMER_NAME, rc:CUSTOMER_ADDRESS, rd:CUSTOMER_NATIONKEY, re:CUSTOMER_PHONE, rf:CUSTOMER_ACCTBAL, rg:CUSTOMER_MKTSEGMENT, rh:CUSTOMER_COMMENT}
                  in
                  (shuffle_QUERY22_mCUSTOMER1_L3_1_to_QUERY22 {ra:None immut,
                     rb:delta_tuples2, rc:false}).fold ((\_accmap -> (\b3 ->
                    bind b3 as {key:ip, value:tuples} in 
                    (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold
                     ((\_accmap -> (\b3 -> bind b3 as {ra:vid, rb:map_0,
                     rc:map_val} in 
                     (_accmap.insert {key:map_0, value:map_val};_accmap))))
                     empty { key:int, value:int } @ { Collection }};
                     _accmap)))) empty { ra:address, rb:{ key:int, value:int },
                    rc:collection { key:int, value:int } @ { Collection }
                    } @ { Collection })))) empty { ra:address, rb:{ key:int,
                  value:int }, rc:collection { key:int, value:int
                  } @ { Collection } } @ { Collection }).groupBy ((\b1 ->
                  bind b1 as {ra:ip, rb:vid, rc:tuples} in ip)) ((\b2 ->
                  (\b5 -> bind b2 as {key:acc_vid, value:acc_tuples} in 
                  bind b5 as {ra:ip, rb:vid, rc:tuples} in 
                  (acc_vid.insert vid;
                   {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
                   ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold
                   ((\_accmap -> (\x -> (_accmap.insert (x.key);_accmap))))
                   empty { key:int, value:int } @ { Collection }}))))
                  {key:empty { key:int, value:int } @ { Seq }, value:empty {
                  key:int, value:int } @ { Collection }} in
                ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
                  value:vid_send_list_tup} in 
                  ((insert_CUSTOMER_rcv_corrective_s2_m_QUERY22_mCUSTOMER1_L3_1,
                     ip)<- {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
                   re:corrective_vid, rf:vid_send_list_tup.key,
                   rg:vid_send_list_tup.value};
                   acc_count + 1)))) acc_count else acc_count))) 0)


declare nd_QUERY22_mCUSTOMER1_L2_1_send_correctives : { ra:address, rb:int,
  rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int },
  rf:collection {i:real} @ { Collection } } -> int = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
  re:corrective_vid, rf:delta_tuples} in let corrective_list =
  nd_filter_corrective_list {key:corrective_vid, value:{| key:int, value:int |
    {key:0, value:2}, {key:1, value:5}, {key:2, value:6}, {key:3,
    value:8}|} @ { Collection }} in
  if 0 == corrective_list.size () then 0
    else let delta_tuples2 =
      delta_tuples.fold ((\_accmap -> (\b3 -> bind b3 as {i:map_val} in 
        (_accmap.insert {key:g_min_vid, value:map_val};_accmap)))) empty {
        key:{ key:int, value:int }, value:real } @ { Collection } in
      corrective_list.fold ((\acc_count -> (\b3 -> bind b3 as {key:stmt_id,
        value:vid_list} in if stmt_id == 8
        then let ips_vids =
          (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
            nd_log_get_bound_delete_ORDERS vid as
            {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
            in
            (shuffle_QUERY22_mCUSTOMER1_L2_1_to_QUERY22 {ra:None immut,
               rb:delta_tuples2, rc:false}).fold ((\_accmap -> (\b3 ->
              bind b3 as {key:ip, value:tuples} in 
              (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold ((\_accmap ->
               (\b3 -> bind b3 as {key:vid, value:map_val} in 
               (_accmap.insert {i:map_val};_accmap))))
               empty {i:real} @ { Collection }};
               _accmap)))) empty { ra:address, rb:{ key:int, value:int },
              rc:collection {i:real} @ { Collection } } @ { Collection }))))
            empty { ra:address, rb:{ key:int, value:int },
            rc:collection {i:real} @ { Collection } } @ { Collection }).groupBy
            ((\b1 -> bind b1 as {ra:ip, rb:vid, rc:tuples} in ip)) ((\b2 ->
            (\b5 -> bind b2 as {key:acc_vid, value:acc_tuples} in 
            bind b5 as {ra:ip, rb:vid, rc:tuples} in 
            (acc_vid.insert vid;
             {key:acc_vid, value:((acc_tuples.combine tuples).groupBy ((\b1 ->
             bind b1 as {i:tuple} in tuple)) ((\_ -> (\_ -> ()))) ()).fold
             ((\_accmap -> (\x -> (_accmap.insert ({i:x.key});_accmap))))
             empty {i:real} @ { Collection }})))) {key:empty { key:int,
            value:int } @ { Seq }, value:empty {i:real} @ { Collection }} in
          ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
            value:vid_send_list_tup} in 
            ((delete_ORDERS_rcv_corrective_s8_m_QUERY22_mCUSTOMER1_L2_1, ip)<- {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:corrective_vid,
             rf:vid_send_list_tup.key, rg:vid_send_list_tup.value};
             acc_count + 1)))) acc_count
        else if stmt_id == 6
          then let ips_vids =
            (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
              nd_log_get_bound_insert_ORDERS vid as
              {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
              in
              (shuffle_QUERY22_mCUSTOMER1_L2_1_to_QUERY22 {ra:None immut,
                 rb:delta_tuples2, rc:false}).fold ((\_accmap -> (\b3 ->
                bind b3 as {key:ip, value:tuples} in 
                (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold ((\_accmap ->
                 (\b3 -> bind b3 as {key:vid, value:map_val} in 
                 (_accmap.insert {i:map_val};_accmap))))
                 empty {i:real} @ { Collection }};
                 _accmap)))) empty { ra:address, rb:{ key:int, value:int },
                rc:collection {i:real} @ { Collection } } @ { Collection }))))
              empty { ra:address, rb:{ key:int, value:int },
              rc:collection {i:real} @ { Collection }
              } @ { Collection }).groupBy ((\b1 -> bind b1 as {ra:ip, rb:vid,
              rc:tuples} in ip)) ((\b2 -> (\b5 -> bind b2 as {key:acc_vid,
              value:acc_tuples} in bind b5 as {ra:ip, rb:vid, rc:tuples} in 
              (acc_vid.insert vid;
               {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
               ((\b1 -> bind b1 as {i:tuple} in tuple)) ((\_ -> (\_ -> ())))
               ()).fold ((\_accmap -> (\x ->
               (_accmap.insert ({i:x.key});_accmap))))
               empty {i:real} @ { Collection }})))) {key:empty { key:int,
              value:int } @ { Seq }, value:empty {i:real} @ { Collection }} in
            ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
              value:vid_send_list_tup} in 
              ((insert_ORDERS_rcv_corrective_s6_m_QUERY22_mCUSTOMER1_L2_1, ip)<- {ra:orig_addr,
               rb:orig_stmt_id, rc:orig_vid, rd:hop, re:corrective_vid,
               rf:vid_send_list_tup.key, rg:vid_send_list_tup.value};
               acc_count + 1)))) acc_count
          else if stmt_id == 5
            then let ips_vids =
              (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
                nd_log_get_bound_delete_CUSTOMER vid as
                {ra:CUSTOMER_CUSTKEY, rb:CUSTOMER_NAME, rc:CUSTOMER_ADDRESS, rd:CUSTOMER_NATIONKEY, re:CUSTOMER_PHONE, rf:CUSTOMER_ACCTBAL, rg:CUSTOMER_MKTSEGMENT, rh:CUSTOMER_COMMENT}
                in
                (shuffle_QUERY22_mCUSTOMER1_L2_1_to_QUERY22 {ra:None immut,
                   rb:delta_tuples2, rc:false}).fold ((\_accmap -> (\b3 ->
                  bind b3 as {key:ip, value:tuples} in 
                  (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold ((\_accmap ->
                   (\b3 -> bind b3 as {key:vid, value:map_val} in 
                   (_accmap.insert {i:map_val};_accmap))))
                   empty {i:real} @ { Collection }};
                   _accmap)))) empty { ra:address, rb:{ key:int, value:int },
                  rc:collection {i:real} @ { Collection } } @ { Collection }))))
                empty { ra:address, rb:{ key:int, value:int },
                rc:collection {i:real} @ { Collection }
                } @ { Collection }).groupBy ((\b1 -> bind b1 as {ra:ip, rb:vid,
                rc:tuples} in ip)) ((\b2 -> (\b5 -> bind b2 as {key:acc_vid,
                value:acc_tuples} in bind b5 as {ra:ip, rb:vid, rc:tuples} in 
                (acc_vid.insert vid;
                 {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
                 ((\b1 -> bind b1 as {i:tuple} in tuple)) ((\_ -> (\_ -> ())))
                 ()).fold ((\_accmap -> (\x ->
                 (_accmap.insert ({i:x.key});_accmap))))
                 empty {i:real} @ { Collection }})))) {key:empty { key:int,
                value:int } @ { Seq }, value:empty {i:real} @ { Collection }}
              in
              ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
                value:vid_send_list_tup} in 
                ((delete_CUSTOMER_rcv_corrective_s5_m_QUERY22_mCUSTOMER1_L2_1,
                   ip)<- {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
                 re:corrective_vid, rf:vid_send_list_tup.key,
                 rg:vid_send_list_tup.value};
                 acc_count + 1)))) acc_count
            else if stmt_id == 2
              then let ips_vids =
                (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
                  nd_log_get_bound_insert_CUSTOMER vid as
                  {ra:CUSTOMER_CUSTKEY, rb:CUSTOMER_NAME, rc:CUSTOMER_ADDRESS, rd:CUSTOMER_NATIONKEY, re:CUSTOMER_PHONE, rf:CUSTOMER_ACCTBAL, rg:CUSTOMER_MKTSEGMENT, rh:CUSTOMER_COMMENT}
                  in
                  (shuffle_QUERY22_mCUSTOMER1_L2_1_to_QUERY22 {ra:None immut,
                     rb:delta_tuples2, rc:false}).fold ((\_accmap -> (\b3 ->
                    bind b3 as {key:ip, value:tuples} in 
                    (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold
                     ((\_accmap -> (\b3 -> bind b3 as {key:vid,
                     value:map_val} in (_accmap.insert {i:map_val};_accmap))))
                     empty {i:real} @ { Collection }};
                     _accmap)))) empty { ra:address, rb:{ key:int, value:int },
                    rc:collection {i:real} @ { Collection } } @ { Collection }))))
                  empty { ra:address, rb:{ key:int, value:int },
                  rc:collection {i:real} @ { Collection }
                  } @ { Collection }).groupBy ((\b1 -> bind b1 as {ra:ip,
                  rb:vid, rc:tuples} in ip)) ((\b2 -> (\b5 ->
                  bind b2 as {key:acc_vid, value:acc_tuples} in 
                  bind b5 as {ra:ip, rb:vid, rc:tuples} in 
                  (acc_vid.insert vid;
                   {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
                   ((\b1 -> bind b1 as {i:tuple} in tuple)) ((\_ -> (\_ ->
                   ()))) ()).fold ((\_accmap -> (\x ->
                   (_accmap.insert ({i:x.key});_accmap))))
                   empty {i:real} @ { Collection }})))) {key:empty { key:int,
                  value:int } @ { Seq }, value:empty {i:real} @ { Collection }}
                in
                ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
                  value:vid_send_list_tup} in 
                  ((insert_CUSTOMER_rcv_corrective_s2_m_QUERY22_mCUSTOMER1_L2_1,
                     ip)<- {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
                   re:corrective_vid, rf:vid_send_list_tup.key,
                   rg:vid_send_list_tup.value};
                   acc_count + 1)))) acc_count else acc_count))) 0)


declare nd_QUERY22_mCUSTOMER1_send_correctives : { ra:address, rb:int, rc:{
  key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:collection {
  ra:int, rb:int, rc:real, rd:real } @ { Collection } } -> int = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
  re:corrective_vid, rf:delta_tuples} in let corrective_list =
  nd_filter_corrective_list {key:corrective_vid, value:{| key:int, value:int |
    {key:0, value:2}, {key:1, value:5}, {key:2, value:6}, {key:3,
    value:8}|} @ { Collection }} in
  if 0 == corrective_list.size () then 0
    else let delta_tuples2 =
      delta_tuples.fold ((\_accmap -> (\b3 -> bind b3 as {ra:map_0, rb:map_1,
        rc:map_2, rd:map_val} in 
        (_accmap.insert {ra:g_min_vid, rb:map_0, rc:map_1, rd:map_2,
         re:map_val};
         _accmap)))) empty { ra:{ key:int, value:int }, rb:int, rc:int,
        rd:real, re:real } @ { Collection } in
      corrective_list.fold ((\acc_count -> (\b3 -> bind b3 as {key:stmt_id,
        value:vid_list} in if stmt_id == 8
        then let ips_vids =
          (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
            nd_log_get_bound_delete_ORDERS vid as
            {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
            in
            (shuffle_QUERY22_mCUSTOMER1_to_QUERY22_bind_0t0 {ra:None immut,
               rb:delta_tuples2, rc:false}).fold ((\_accmap -> (\b3 ->
              bind b3 as {key:ip, value:tuples} in 
              (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold ((\_accmap ->
               (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_1, rd:map_2,
               re:map_val} in 
               (_accmap.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_val};
                _accmap)))) empty { ra:int, rb:int, rc:real, rd:real
               } @ { Collection }};
               _accmap)))) empty { ra:address, rb:{ key:int, value:int },
              rc:collection { ra:int, rb:int, rc:real, rd:real
              } @ { Collection } } @ { Collection })))) empty { ra:address,
            rb:{ key:int, value:int }, rc:collection { ra:int, rb:int, rc:real,
            rd:real } @ { Collection } } @ { Collection }).groupBy ((\b1 ->
            bind b1 as {ra:ip, rb:vid, rc:tuples} in ip)) ((\b2 -> (\b5 ->
            bind b2 as {key:acc_vid, value:acc_tuples} in bind b5 as {ra:ip,
            rb:vid, rc:tuples} in 
            (acc_vid.insert vid;
             {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
             ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold ((\_accmap ->
             (\x -> (_accmap.insert (x.key);_accmap)))) empty { ra:int, rb:int,
             rc:real, rd:real } @ { Collection }})))) {key:empty { key:int,
            value:int } @ { Seq }, value:empty { ra:int, rb:int, rc:real,
            rd:real } @ { Collection }} in
          ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
            value:vid_send_list_tup} in 
            ((delete_ORDERS_rcv_corrective_s8_m_QUERY22_mCUSTOMER1, ip)<- {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:corrective_vid,
             rf:vid_send_list_tup.key, rg:vid_send_list_tup.value};
             acc_count + 1)))) acc_count
        else if stmt_id == 6
          then let ips_vids =
            (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
              nd_log_get_bound_insert_ORDERS vid as
              {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
              in
              (shuffle_QUERY22_mCUSTOMER1_to_QUERY22_bind_0t0 {ra:None immut,
                 rb:delta_tuples2, rc:false}).fold ((\_accmap -> (\b3 ->
                bind b3 as {key:ip, value:tuples} in 
                (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold ((\_accmap ->
                 (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_1, rd:map_2,
                 re:map_val} in 
                 (_accmap.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_val};
                  _accmap)))) empty { ra:int, rb:int, rc:real, rd:real
                 } @ { Collection }};
                 _accmap)))) empty { ra:address, rb:{ key:int, value:int },
                rc:collection { ra:int, rb:int, rc:real, rd:real
                } @ { Collection } } @ { Collection })))) empty { ra:address,
              rb:{ key:int, value:int }, rc:collection { ra:int, rb:int,
              rc:real, rd:real } @ { Collection } } @ { Collection }).groupBy
              ((\b1 -> bind b1 as {ra:ip, rb:vid, rc:tuples} in ip)) ((\b2 ->
              (\b5 -> bind b2 as {key:acc_vid, value:acc_tuples} in 
              bind b5 as {ra:ip, rb:vid, rc:tuples} in 
              (acc_vid.insert vid;
               {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
               ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold ((\_accmap ->
               (\x -> (_accmap.insert (x.key);_accmap)))) empty { ra:int,
               rb:int, rc:real, rd:real } @ { Collection }})))) {key:empty {
              key:int, value:int } @ { Seq }, value:empty { ra:int, rb:int,
              rc:real, rd:real } @ { Collection }} in
            ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
              value:vid_send_list_tup} in 
              ((insert_ORDERS_rcv_corrective_s6_m_QUERY22_mCUSTOMER1, ip)<- {ra:orig_addr,
               rb:orig_stmt_id, rc:orig_vid, rd:hop, re:corrective_vid,
               rf:vid_send_list_tup.key, rg:vid_send_list_tup.value};
               acc_count + 1)))) acc_count
          else if stmt_id == 5
            then let ips_vids =
              (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
                nd_log_get_bound_delete_CUSTOMER vid as
                {ra:CUSTOMER_CUSTKEY, rb:CUSTOMER_NAME, rc:CUSTOMER_ADDRESS, rd:CUSTOMER_NATIONKEY, re:CUSTOMER_PHONE, rf:CUSTOMER_ACCTBAL, rg:CUSTOMER_MKTSEGMENT, rh:CUSTOMER_COMMENT}
                in
                (shuffle_QUERY22_mCUSTOMER1_to_QUERY22_bind_0t0 {ra:None immut,
                   rb:delta_tuples2, rc:false}).fold ((\_accmap -> (\b3 ->
                  bind b3 as {key:ip, value:tuples} in 
                  (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold ((\_accmap ->
                   (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_1, rd:map_2,
                   re:map_val} in 
                   (_accmap.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_val};
                    _accmap)))) empty { ra:int, rb:int, rc:real, rd:real
                   } @ { Collection }};
                   _accmap)))) empty { ra:address, rb:{ key:int, value:int },
                  rc:collection { ra:int, rb:int, rc:real, rd:real
                  } @ { Collection } } @ { Collection })))) empty { ra:address,
                rb:{ key:int, value:int }, rc:collection { ra:int, rb:int,
                rc:real, rd:real } @ { Collection } } @ { Collection }).groupBy
                ((\b1 -> bind b1 as {ra:ip, rb:vid, rc:tuples} in ip)) ((\b2 ->
                (\b5 -> bind b2 as {key:acc_vid, value:acc_tuples} in 
                bind b5 as {ra:ip, rb:vid, rc:tuples} in 
                (acc_vid.insert vid;
                 {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
                 ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold
                 ((\_accmap -> (\x -> (_accmap.insert (x.key);_accmap))))
                 empty { ra:int, rb:int, rc:real, rd:real } @ { Collection }}))))
                {key:empty { key:int, value:int } @ { Seq }, value:empty {
                ra:int, rb:int, rc:real, rd:real } @ { Collection }} in
              ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
                value:vid_send_list_tup} in 
                ((delete_CUSTOMER_rcv_corrective_s5_m_QUERY22_mCUSTOMER1, ip)<- {ra:orig_addr,
                 rb:orig_stmt_id, rc:orig_vid, rd:hop, re:corrective_vid,
                 rf:vid_send_list_tup.key, rg:vid_send_list_tup.value};
                 acc_count + 1)))) acc_count
            else if stmt_id == 2
              then let ips_vids =
                (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
                  nd_log_get_bound_insert_CUSTOMER vid as
                  {ra:CUSTOMER_CUSTKEY, rb:CUSTOMER_NAME, rc:CUSTOMER_ADDRESS, rd:CUSTOMER_NATIONKEY, re:CUSTOMER_PHONE, rf:CUSTOMER_ACCTBAL, rg:CUSTOMER_MKTSEGMENT, rh:CUSTOMER_COMMENT}
                  in
                  (shuffle_QUERY22_mCUSTOMER1_to_QUERY22_bind_0t0
                     {ra:None immut, rb:delta_tuples2, rc:false}).fold
                    ((\_accmap -> (\b3 -> bind b3 as {key:ip, value:tuples} in 
                    (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold
                     ((\_accmap -> (\b3 -> bind b3 as {ra:vid, rb:map_0,
                     rc:map_1, rd:map_2, re:map_val} in 
                     (_accmap.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_val};
                      _accmap)))) empty { ra:int, rb:int, rc:real, rd:real
                     } @ { Collection }};
                     _accmap)))) empty { ra:address, rb:{ key:int, value:int },
                    rc:collection { ra:int, rb:int, rc:real, rd:real
                    } @ { Collection } } @ { Collection })))) empty {
                  ra:address, rb:{ key:int, value:int }, rc:collection {
                  ra:int, rb:int, rc:real, rd:real } @ { Collection }
                  } @ { Collection }).groupBy ((\b1 -> bind b1 as {ra:ip,
                  rb:vid, rc:tuples} in ip)) ((\b2 -> (\b5 ->
                  bind b2 as {key:acc_vid, value:acc_tuples} in 
                  bind b5 as {ra:ip, rb:vid, rc:tuples} in 
                  (acc_vid.insert vid;
                   {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
                   ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold
                   ((\_accmap -> (\x -> (_accmap.insert (x.key);_accmap))))
                   empty { ra:int, rb:int, rc:real, rd:real } @ { Collection }}))))
                  {key:empty { key:int, value:int } @ { Seq }, value:empty {
                  ra:int, rb:int, rc:real, rd:real } @ { Collection }} in
                ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
                  value:vid_send_list_tup} in 
                  ((insert_CUSTOMER_rcv_corrective_s2_m_QUERY22_mCUSTOMER1, ip)<- {ra:orig_addr,
                   rb:orig_stmt_id, rc:orig_vid, rd:hop, re:corrective_vid,
                   rf:vid_send_list_tup.key, rg:vid_send_list_tup.value};
                   acc_count + 1)))) acc_count else acc_count))) 0)


declare sw_insert_CUSTOMER : { ra:int, rb:string, rc:string, rd:int, re:string,
  rf:real, rg:string, rh:string } -> () = (\args ->
  (sw_buf_insert_CUSTOMER.insert args;
   sw_trig_buf_idx.insert {i:0};
   sw_need_vid_cntr = sw_need_vid_cntr + 1))


declare sw_insert_CUSTOMER_send_fetch : { key:int, value:int } -> () = (\vid ->
  case (sw_buf_insert_CUSTOMER.peek ()) of
  {Some args ->
    (sw_buf_insert_CUSTOMER.erase args;
     bind args as
     {ra:CUSTOMER_CUSTKEY, rb:CUSTOMER_NAME, rc:CUSTOMER_ADDRESS, rd:CUSTOMER_NATIONKEY, re:CUSTOMER_PHONE, rf:CUSTOMER_ACCTBAL, rg:CUSTOMER_MKTSEGMENT, rh:CUSTOMER_COMMENT}
     in
     ((route_to_int_int_float {ra:2, rb:Some CUSTOMER_NATIONKEY,
         rc:Some CUSTOMER_CUSTKEY, rd:Some CUSTOMER_ACCTBAL}).iterate ((\b1 ->
      bind b1 as {i:ip} in 
      (nd_insert_CUSTOMER_do_complete_s0_trig, ip)<- {ra:vid,
      rb:CUSTOMER_CUSTKEY, rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS,
      re:CUSTOMER_NATIONKEY, rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL,
      rh:CUSTOMER_MKTSEGMENT, ri:CUSTOMER_COMMENT}));
      (route_to_ {key:3, value:()}).iterate ((\b1 -> bind b1 as {i:ip} in 
      (nd_insert_CUSTOMER_do_complete_s1_trig, ip)<- {ra:vid,
      rb:CUSTOMER_CUSTKEY, rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS,
      re:CUSTOMER_NATIONKEY, rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL,
      rh:CUSTOMER_MKTSEGMENT, ri:CUSTOMER_COMMENT}));
      ((((empty { ra:address, rb:int, rc:int } @ { Collection }).combine (let
      sender_count =
      (route_to_ {key:3, value:()}).fold ((\count -> (\b3 ->
        bind b3 as {i:ip} in count + 1))) 0 in
      ((shuffle_QUERY22_mCUSTOMER1_L2_1_to_QUERY22 {ra:None immut, rb:empty {
          key:{ key:int, value:int }, value:real } @ { Collection }, rc:true}).fold
        ((\_accmap -> (\b3 -> bind b3 as {key:ip, value:tuples} in 
        (_accmap.insert {ra:ip, rb:2, rc:sender_count};_accmap)))) empty {
        ra:address, rb:int, rc:int } @ { Collection }).combine (let
        sender_count =
        (route_to_int_int_float {ra:2, rb:None immut, rc:None immut,
           rd:None immut}).fold ((\count -> (\b3 -> bind b3 as {i:ip} in count
          + 1))) 0 in
        ((shuffle_QUERY22_mCUSTOMER1_to_QUERY22_bind_0t0 {ra:None immut,
            rb:empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:real,
            re:real } @ { Collection }, rc:true}).fold ((\_accmap -> (\b3 ->
          bind b3 as {key:ip, value:tuples} in 
          (_accmap.insert {ra:ip, rb:2, rc:sender_count};_accmap)))) empty {
          ra:address, rb:int, rc:int } @ { Collection }).combine (let
          sender_count =
          (route_to_int {key:4, value:None immut}).fold ((\count -> (\b3 ->
            bind b3 as {i:ip} in count + 1))) 0 in
          (shuffle_QUERY22_mCUSTOMER1_L3_1_to_QUERY22 {ra:None immut,
             rb:empty { ra:{ key:int, value:int }, rb:int, rc:int
             } @ { Collection }, rc:true}).fold ((\_accmap -> (\b3 ->
            bind b3 as {key:ip, value:tuples} in 
            (_accmap.insert {ra:ip, rb:2, rc:sender_count};_accmap)))) empty {
            ra:address, rb:int, rc:int } @ { Collection })))).groupBy ((\b1 ->
      bind b1 as {ra:ip, rb:stmt_id, rc:count} in {key:ip, value:stmt_id}))
      ((\acc -> (\b3 -> bind b3 as {ra:ip, rb:stmt_id, rc:count} in acc +
      count))) 0).groupBy ((\b1 -> bind b1 as {key:b2, value:count} in 
      bind b2 as {key:ip, value:stmt_id} in ip)) ((\acc -> (\b3 ->
      bind b3 as {key:ip_and_stmt_id, value:count} in bind ip_and_stmt_id as
      {key:ip, value:stmt_id} in
      acc.combine ({| key:int, value:int | {key:stmt_id,
        value:count}|} @ { Collection })))) empty { key:int, value:int
      } @ { Collection }).iterate ((\b1 -> bind b1 as {key:addr,
      value:stmt_cnt_list} in 
      ((nd_insert_CUSTOMER_rcv_put, addr)<- {ra:me, rb:stmt_cnt_list, rc:vid,
       rd:CUSTOMER_CUSTKEY, re:CUSTOMER_NAME, rf:CUSTOMER_ADDRESS,
       rg:CUSTOMER_NATIONKEY, rh:CUSTOMER_PHONE, ri:CUSTOMER_ACCTBAL,
       rj:CUSTOMER_MKTSEGMENT, rk:CUSTOMER_COMMENT};
       (sw_num_sent = sw_num_sent + 1;
        (case ((sw_ack_log.filter ((\b1 -> bind b1 as {key:key,
        value:value} in key == vid))).peek ()) of
        {Some x -> sw_ack_log.update x {key:vid, value:x.value + 1}}{None ->
                                                                    sw_ack_log.insert
                                                                    {key:vid,
                                                                    value:1}})))));
      ((((route_to_int {key:4, value:None immut}).fold ((\_accmap -> (\b3 ->
      bind b3 as {i:ip} in (_accmap.insert {ra:2, rb:4, rc:ip};_accmap))))
      empty { ra:int, rb:int, rc:address } @ { Collection }).combine
      (((route_to_int_int_float {ra:2, rb:None immut, rc:None immut,
           rd:None immut}).fold ((\_accmap -> (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {ra:2, rb:2, rc:ip};_accmap)))) empty { ra:int, rb:int,
      rc:address } @ { Collection }).combine
      (((route_to_ {key:3, value:()}).fold ((\_accmap -> (\b3 ->
      bind b3 as {i:ip} in (_accmap.insert {ra:2, rb:3, rc:ip};_accmap))))
      empty { ra:int, rb:int, rc:address } @ { Collection }).combine empty {
      ra:int, rb:int, rc:address } @ { Collection }))).groupBy ((\b1 ->
      bind b1 as {ra:stmt_id, rb:map_id, rc:ip} in ip)) ((\acc -> (\b3 ->
      bind b3 as {ra:stmt_id, rb:map_id, rc:ip} in 
      (acc.insert {key:stmt_id, value:map_id};acc)))) empty { key:int,
      value:int } @ { Collection }).iterate ((\b1 -> bind b1 as {key:ip,
      value:stmt_map_ids} in 
      (nd_insert_CUSTOMER_rcv_fetch, ip)<- {ra:stmt_map_ids, rb:vid,
      rc:CUSTOMER_CUSTKEY, rd:CUSTOMER_NAME, re:CUSTOMER_ADDRESS,
      rf:CUSTOMER_NATIONKEY, rg:CUSTOMER_PHONE, rh:CUSTOMER_ACCTBAL,
      ri:CUSTOMER_MKTSEGMENT, rj:CUSTOMER_COMMENT}))))}{None ->
                                                         error
                                                           (print
                                                              "unexpected missing arguments in sw_buf_insert_CUSTOMER")})


declare nd_insert_CUSTOMER_do_complete_s2 : { ra:{ key:int, value:int },
  rb:int, rc:string, rd:string, re:int, rf:string, rg:real, rh:string,
  ri:string } -> () = (\b1 -> bind b1 as {ra:vid, rb:CUSTOMER_CUSTKEY,
  rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
  rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
  ri:CUSTOMER_COMMENT} in let delta_values =
  ((((((({| key:real, value:int | let __map_ret__1 =
    case ((bind map_QUERY22_mCUSTOMER1_L2_1_s2_buf as ind __x in
      (frontier_float {key:vid, value:__x}).fold ((\acc -> (\b3 ->
        bind b3 as {key:vid, value:map_val} in (acc.insert {i:map_val};acc))))
        empty {i:real} @ { Collection }).peek ()) of {Some x -> x.i}{None -> 0}
    in {key:__map_ret__1, value:1}|} @ { Collection }).fold ((\_accext ->
    (\b3 -> bind b3 as {key:__sql_inline_agg_2, value:__lift_ret__1} in 
    _accext.combine (({| key:int, value:int | let __val_ret__3 = 0 in
    {key:__val_ret__3, value:1}|} @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {key:__sql_inline_agg_1, value:__lift_ret__2} in 
    (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
     rc:__lift_ret__1 * __lift_ret__2};
     _accmap)))) empty { ra:real, rb:int, rc:int } @ { Collection })))) empty {
    ra:real, rb:int, rc:int } @ { Collection }).fold ((\_accext -> (\b3 ->
    bind b3 as {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
    rc:__prod_ret__2} in _accext.combine ((bind map_QUERY22_mCUSTOMER1_s2_buf
    as ind __x in
    (frontier_int_int_float_float {key:vid, value:__x}).fold ((\acc -> (\b3 ->
      bind b3 as {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val} in 
      (acc.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_val};acc)))) empty {
      ra:int, rb:int, rc:real, rd:real } @ { Collection }).fold ((\_accmap ->
    (\b3 -> bind b3 as {ra:C1_NATIONKEY, rb:C1_CUSTKEY, rc:C1_ACCTBAL,
    rd:__map_ret__2} in 
    (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
     rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__2 *
     __map_ret__2};
     _accmap)))) empty { ra:real, rb:int, rc:int, rd:int, re:real, rf:real
    } @ { Collection })))) empty { ra:real, rb:int, rc:int, rd:int, re:real,
    rf:real } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1, rc:C1_NATIONKEY,
    rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__3} in 
    (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
     rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__3 * let
     __map_ret__3 =
     let wrapped_lookup_value =
       bind map_QUERY22_mCUSTOMER1_L3_1_s2_buf as ind __x in
         (frontier_int_int {key:vid, value:__x.filter ((\b1 ->
            bind b1 as {ra:ra, rb:rb, rc:rc} in rb == C1_CUSTKEY))}).fold
           ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
           (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
           value:int } @ { Collection } in
       case (wrapped_lookup_value.peek ()) of
         {Some unwrapped_value -> bind unwrapped_value as
           {key:_, value:projected_field} in projected_field}{None -> 0} in
     if __map_ret__3 == __sql_inline_agg_1 then 1 else 0};
     _accmap)))) empty { ra:real, rb:int, rc:int, rd:int, re:real, rf:real
    } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1, rc:C1_NATIONKEY,
    rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__4} in 
    (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
     rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__4 *
     if C1_ACCTBAL < __sql_inline_agg_2 then 1 else 0};
     _accmap)))) empty { ra:real, rb:int, rc:int, rd:int, re:real, rf:real
    } @ { Collection }).groupBy ((\b1 -> bind b1 as {ra:__sql_inline_agg_2,
    rb:__sql_inline_agg_1, rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL,
    rf:__prod_ret__5} in C1_NATIONKEY)) ((\__accv_1 -> (\b3 ->
    bind b3 as {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1, rc:C1_NATIONKEY,
    rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__5} in __accv_1 +
    __prod_ret__5))) 0).fold ((\_accmap -> (\b3 ->
    bind b3 as {key:C1_NATIONKEY, value:__prod_ret__5} in 
    (_accmap.insert {key:C1_NATIONKEY, value:__prod_ret__5};_accmap)))) empty {
    key:int, value:real } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {key:C1_NATIONKEY, value:__prod_ret__5} in 
    (_accmap.insert {key:C1_NATIONKEY, value:__prod_ret__5};_accmap)))) empty {
    key:int, value:real } @ { Collection } in
  ((nd_add_delta_to_int_float {ra:QUERY22, rb:false, rc:vid, rd:delta_values});
   (nd_complete_stmt_cntr_check {key:vid, value:2})))


declare nd_insert_CUSTOMER_do_complete_s0 : { ra:{ key:int, value:int },
  rb:int, rc:string, rd:string, re:int, rf:string, rg:real, rh:string,
  ri:string } -> () = (\b1 -> bind b1 as {ra:vid, rb:CUSTOMER_CUSTKEY,
  rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
  rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
  ri:CUSTOMER_COMMENT} in let __val_ret__1 = CUSTOMER_ACCTBAL in
  ((nd_add_delta_to_int_int_float_float {ra:QUERY22_mCUSTOMER1, rb:false,
      rc:vid, rd:{| ra:int, rb:int, rc:real, rd:real | {ra:CUSTOMER_NATIONKEY,
      rb:CUSTOMER_CUSTKEY, rc:CUSTOMER_ACCTBAL,
      rd:__val_ret__1}|} @ { Collection }});
   let sent_msgs =
   nd_QUERY22_mCUSTOMER1_send_correctives {ra:me, rb:0, rc:vid, rd:1, re:vid,
     rf:{| ra:int, rb:int, rc:real, rd:real | {ra:CUSTOMER_NATIONKEY,
     rb:CUSTOMER_CUSTKEY, rc:CUSTOMER_ACCTBAL,
     rd:__val_ret__1}|} @ { Collection }} in
   if sent_msgs == 0 then ()
     else
       nd_update_stmt_cntr_corr_map {ra:vid, rb:0, rc:1, rd:sent_msgs, re:true,
         rf:true}))


declare nd_insert_CUSTOMER_do_complete_s1 : { ra:{ key:int, value:int },
  rb:int, rc:string, rd:string, re:int, rf:string, rg:real, rh:string,
  ri:string } -> () = (\b1 -> bind b1 as {ra:vid, rb:CUSTOMER_CUSTKEY,
  rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
  rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
  ri:CUSTOMER_COMMENT} in let __prod_ret__1 =
  (if 0 < CUSTOMER_ACCTBAL then 1 else 0) * CUSTOMER_ACCTBAL in
  ((nd_add_delta_to_float {ra:QUERY22_mCUSTOMER1_L2_1, rb:false, rc:vid,
      rd:{|i:real| __prod_ret__1|} @ { Collection }});
   let sent_msgs =
   nd_QUERY22_mCUSTOMER1_L2_1_send_correctives {ra:me, rb:1, rc:vid, rd:1,
     re:vid, rf:{|i:real| __prod_ret__1|} @ { Collection }} in
   if sent_msgs == 0 then ()
     else
       nd_update_stmt_cntr_corr_map {ra:vid, rb:1, rc:1, rd:sent_msgs, re:true,
         rf:true}))


declare insert_CUSTOMER_do_corrective_s2_m_QUERY22_mCUSTOMER1_L2_1 : {
  ra:address, rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int,
  value:int }, rf:int, rg:string, rh:string, ri:int, rj:string, rk:real,
  rl:string, rm:string, rn:collection {i:real} @ { Collection } } -> int =
  (\b1 -> bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
  re:vid, rf:CUSTOMER_CUSTKEY, rg:CUSTOMER_NAME, rh:CUSTOMER_ADDRESS,
  ri:CUSTOMER_NATIONKEY, rj:CUSTOMER_PHONE, rk:CUSTOMER_ACCTBAL,
  rl:CUSTOMER_MKTSEGMENT, rm:CUSTOMER_COMMENT, rn:delta_tuples} in let
  new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 ->
    bind b3 as {i:delta_QUERY22_mCUSTOMER1_L2_1} in _accext.combine (let
    delta_values =
    ((((((((({| key:int, value:int | let __val_ret__63 = 0 in
      {key:__val_ret__63, value:1}|} @ { Collection }).fold ((\_accext ->
      (\b3 -> bind b3 as {key:__sql_inline_agg_1, value:__lift_ret__60} in 
      _accext.combine ((({| key:real, value:int | let __sum_ret__31 =
      case ((bind map_QUERY22_mCUSTOMER1_L2_1_s2_buf as ind __x in
        (frontier_float {key:vid, value:__x}).fold ((\acc -> (\b3 ->
          bind b3 as {key:vid, value:map_val} in 
          (acc.insert {i:map_val};acc)))) empty {i:real} @ { Collection }).peek
        ()) of {Some x -> x.i}{None -> 0} + delta_QUERY22_mCUSTOMER1_L2_1 in
      {key:__sum_ret__31, value:1}|} @ { Collection }).combine (({| key:real,
      value:int | let __map_ret__52 =
      case ((bind map_QUERY22_mCUSTOMER1_L2_1_s2_buf as ind __x in
        (frontier_float {key:vid, value:__x}).fold ((\acc -> (\b3 ->
          bind b3 as {key:vid, value:map_val} in 
          (acc.insert {i:map_val};acc)))) empty {i:real} @ { Collection }).peek
        ()) of {Some x -> x.i}{None -> 0} in
      {key:__map_ret__52, value:1}|} @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {key:__sql_inline_agg_2, value:__lift_ret__62} in 
      (_accmap.insert {key:__sql_inline_agg_2, value:__lift_ret__62 * -1};
       _accmap)))) empty { key:real, value:int } @ { Collection })).fold
      ((\_accmap -> (\b3 -> bind b3 as {key:__sql_inline_agg_2,
      value:__sum_ret__32} in 
      (_accmap.insert {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
       rc:__lift_ret__60 * __sum_ret__32};
       _accmap)))) empty { ra:int, rb:real, rc:int } @ { Collection }))))
      empty { ra:int, rb:real, rc:int } @ { Collection }).fold ((\_accext ->
      (\b3 -> bind b3 as {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
      rc:__prod_ret__87} in _accext.combine ((bind
      map_QUERY22_mCUSTOMER1_s2_buf as ind __x in
      (frontier_int_int_float_float {key:vid, value:__x}).fold ((\acc ->
        (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_1, rd:map_2,
        re:map_val} in 
        (acc.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_val};acc)))) empty {
        ra:int, rb:int, rc:real, rd:real } @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {ra:C1_NATIONKEY, rb:C1_CUSTKEY, rc:C1_ACCTBAL,
      rd:__map_ret__53} in 
      (_accmap.insert {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
       rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__87 *
       __map_ret__53};
       _accmap)))) empty { ra:int, rb:real, rc:int, rd:int, re:real, rf:real
      } @ { Collection })))) empty { ra:int, rb:real, rc:int, rd:int, re:real,
      rf:real } @ { Collection }).fold ((\_accmap -> (\b3 ->
      bind b3 as {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
      rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__88} in 
      (_accmap.insert {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
       rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__88 * let
       __map_ret__54 =
       let wrapped_lookup_value =
         bind map_QUERY22_mCUSTOMER1_L3_1_s2_buf as ind __x in
           (frontier_int_int {key:vid, value:__x.filter ((\b1 ->
              bind b1 as {ra:ra, rb:rb, rc:rc} in rb == C1_CUSTKEY))}).fold
             ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
             (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
             value:int } @ { Collection } in
         case (wrapped_lookup_value.peek ()) of
           {Some unwrapped_value -> bind unwrapped_value as
             {key:_, value:projected_field} in projected_field}{None -> 0} in
       if __map_ret__54 == __sql_inline_agg_1 then 1 else 0};
       _accmap)))) empty { ra:int, rb:real, rc:int, rd:int, re:real, rf:real
      } @ { Collection }).fold ((\_accmap -> (\b3 ->
      bind b3 as {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
      rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__89} in 
      (_accmap.insert {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
       rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__89 *
       if C1_ACCTBAL < __sql_inline_agg_2 then 1 else 0};
       _accmap)))) empty { ra:int, rb:real, rc:int, rd:int, re:real, rf:real
      } @ { Collection }).groupBy ((\b1 -> bind b1 as {ra:__sql_inline_agg_1,
      rb:__sql_inline_agg_2, rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL,
      rf:__prod_ret__90} in C1_NATIONKEY)) ((\__accv_23 -> (\b3 ->
      bind b3 as {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
      rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__90} in 
      __accv_23 + __prod_ret__90))) 0).fold ((\_accmap -> (\b3 ->
      bind b3 as {key:C1_NATIONKEY, value:__prod_ret__90} in 
      (_accmap.insert {key:C1_NATIONKEY, value:__prod_ret__90};_accmap))))
      empty { key:int, value:real } @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {key:C1_NATIONKEY, value:__prod_ret__90} in 
      (_accmap.insert {key:C1_NATIONKEY, value:__prod_ret__90};_accmap))))
      empty { key:int, value:real } @ { Collection }).groupBy ((\b1 ->
      bind b1 as {key:map_0, value:map_val} in map_0)) ((\acc -> (\b3 ->
      bind b3 as {key:map_0, value:map_val} in acc + map_val))) 0).fold
      ((\acc -> (\b3 -> bind b3 as {key:g, value:val} in 
      (acc.insert {key:g, value:val};acc)))) empty { key:int, value:real
      } @ { Collection } in delta_values)))) empty { key:int, value:real
    } @ { Collection }).filter ((\b1 -> bind b1 as {key:map_0,
    value:map_val} in 0 != map_val)) in
  ((nd_add_delta_to_int_float {ra:QUERY22, rb:true, rc:vid, rd:new_tuples});0))


declare insert_CUSTOMER_do_corrective_s2_m_QUERY22_mCUSTOMER1 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:int,
  rg:string, rh:string, ri:int, rj:string, rk:real, rl:string, rm:string,
  rn:collection { ra:int, rb:int, rc:real, rd:real } @ { Collection }
  } -> int = (\b1 -> bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid,
  rd:hop, re:vid, rf:CUSTOMER_CUSTKEY, rg:CUSTOMER_NAME, rh:CUSTOMER_ADDRESS,
  ri:CUSTOMER_NATIONKEY, rj:CUSTOMER_PHONE, rk:CUSTOMER_ACCTBAL,
  rl:CUSTOMER_MKTSEGMENT, rm:CUSTOMER_COMMENT, rn:delta_tuples} in let
  new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 -> bind b3 as {ra:delta_C1_NATIONKEY,
    rb:delta_C1_CUSTKEY, rc:delta_C1_ACCTBAL, rd:delta_QUERY22_mCUSTOMER1} in 
    _accext.combine (let __prod_ret__94 =
    (((({| key:real, value:int | let __map_ret__55 =
      case ((bind map_QUERY22_mCUSTOMER1_L2_1_s2_buf as ind __x in
        (frontier_float {key:vid, value:__x}).fold ((\acc -> (\b3 ->
          bind b3 as {key:vid, value:map_val} in 
          (acc.insert {i:map_val};acc)))) empty {i:real} @ { Collection }).peek
        ()) of {Some x -> x.i}{None -> 0} in
      {key:__map_ret__55, value:1}|} @ { Collection }).fold ((\_accext ->
      (\b3 -> bind b3 as {key:__sql_inline_agg_2, value:__lift_ret__64} in 
      _accext.combine (({| key:int, value:int | let __val_ret__66 = 0 in
      {key:__val_ret__66, value:1}|} @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {key:__sql_inline_agg_1, value:__lift_ret__65} in 
      (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
       rc:__lift_ret__64 * __lift_ret__65};
       _accmap)))) empty { ra:real, rb:int, rc:int } @ { Collection }))))
      empty { ra:real, rb:int, rc:int } @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
      rc:__prod_ret__91} in 
      (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
       rc:__prod_ret__91 * let __map_ret__56 =
       let wrapped_lookup_value =
         bind map_QUERY22_mCUSTOMER1_L3_1_s2_buf as ind __x in
           (frontier_int_int {key:vid, value:__x.filter ((\b1 ->
              bind b1 as {ra:ra, rb:rb, rc:rc} in rb == delta_C1_CUSTKEY))}).fold
             ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
             (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
             value:int } @ { Collection } in
         case (wrapped_lookup_value.peek ()) of
           {Some unwrapped_value -> bind unwrapped_value as
             {key:_, value:projected_field} in projected_field}{None -> 0} in
       if __map_ret__56 == __sql_inline_agg_1 then 1 else 0};
       _accmap)))) empty { ra:real, rb:int, rc:int } @ { Collection }).fold
      ((\_accmap -> (\b3 -> bind b3 as {ra:__sql_inline_agg_2,
      rb:__sql_inline_agg_1, rc:__prod_ret__92} in 
      (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
       rc:__prod_ret__92 * if delta_C1_ACCTBAL < __sql_inline_agg_2 then 1
       else 0};
       _accmap)))) empty { ra:real, rb:int, rc:int } @ { Collection }).fold
      ((\__accv_24 -> (\b3 -> bind b3 as {ra:__sql_inline_agg_2,
      rb:__sql_inline_agg_1, rc:__prod_ret__93} in __accv_24 +
      __prod_ret__93))) 0 * delta_QUERY22_mCUSTOMER1 in
    {| key:int, value:real | {key:delta_C1_NATIONKEY,
      value:__prod_ret__94}|} @ { Collection })))) empty { key:int, value:real
    } @ { Collection }).filter ((\b1 -> bind b1 as {key:map_0,
    value:map_val} in 0 != map_val)) in
  ((nd_add_delta_to_int_float {ra:QUERY22, rb:true, rc:vid, rd:new_tuples});0))


declare insert_CUSTOMER_do_corrective_s2_m_QUERY22_mCUSTOMER1_L3_1 : {
  ra:address, rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int,
  value:int }, rf:int, rg:string, rh:string, ri:int, rj:string, rk:real,
  rl:string, rm:string, rn:collection { key:int, value:int } @ { Collection }
  } -> int = (\b1 -> bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid,
  rd:hop, re:vid, rf:CUSTOMER_CUSTKEY, rg:CUSTOMER_NAME, rh:CUSTOMER_ADDRESS,
  ri:CUSTOMER_NATIONKEY, rj:CUSTOMER_PHONE, rk:CUSTOMER_ACCTBAL,
  rl:CUSTOMER_MKTSEGMENT, rm:CUSTOMER_COMMENT, rn:delta_tuples} in let
  new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 -> bind b3 as {key:delta_C1_CUSTKEY,
    value:delta_QUERY22_mCUSTOMER1_L3_1} in _accext.combine (let delta_values =
    ((((((({| key:real, value:int | let __map_ret__57 =
      case ((bind map_QUERY22_mCUSTOMER1_L2_1_s2_buf as ind __x in
        (frontier_float {key:vid, value:__x}).fold ((\acc -> (\b3 ->
          bind b3 as {key:vid, value:map_val} in 
          (acc.insert {i:map_val};acc)))) empty {i:real} @ { Collection }).peek
        ()) of {Some x -> x.i}{None -> 0} in
      {key:__map_ret__57, value:1}|} @ { Collection }).fold ((\_accext ->
      (\b3 -> bind b3 as {key:__sql_inline_agg_2, value:__lift_ret__67} in 
      _accext.combine (({| key:int, value:int | let __val_ret__68 = 0 in
      {key:__val_ret__68, value:1}|} @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {key:__sql_inline_agg_1, value:__lift_ret__68} in 
      (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
       rc:__lift_ret__67 * __lift_ret__68};
       _accmap)))) empty { ra:real, rb:int, rc:int } @ { Collection }))))
      empty { ra:real, rb:int, rc:int } @ { Collection }).fold ((\_accext ->
      (\b3 -> bind b3 as {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
      rc:__prod_ret__96} in _accext.combine (((bind
      map_QUERY22_mCUSTOMER1_s2_buf as ind __x in
      (frontier_int_int_float_float {key:vid, value:__x.filter ((\b1 ->
         bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd, re:re} in rc ==
         delta_C1_CUSTKEY))}).fold ((\acc -> (\b3 -> bind b3 as {ra:vid,
        rb:map_0, rc:map_1, rd:map_2, re:map_val} in 
        (acc.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_val};acc)))) empty {
        ra:int, rb:int, rc:real, rd:real } @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {ra:C1_NATIONKEY, rb:delta_C1_CUSTKEY, rc:C1_ACCTBAL,
      rd:__map_ret__58} in 
      (_accmap.insert {ra:C1_NATIONKEY, rb:C1_ACCTBAL, rc:__map_ret__58};
       _accmap)))) empty { ra:int, rb:real, rc:real } @ { Collection }).fold
      ((\_accmap -> (\b3 -> bind b3 as {ra:C1_NATIONKEY, rb:C1_ACCTBAL,
      rc:__map_ret__58} in 
      (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
       rc:C1_NATIONKEY, rd:C1_ACCTBAL, re:__prod_ret__96 * __map_ret__58};
       _accmap)))) empty { ra:real, rb:int, rc:int, rd:real, re:real
      } @ { Collection })))) empty { ra:real, rb:int, rc:int, rd:real, re:real
      } @ { Collection }).fold ((\_accmap -> (\b3 ->
      bind b3 as {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
      rc:C1_NATIONKEY, rd:C1_ACCTBAL, re:__prod_ret__97} in 
      (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
       rc:C1_NATIONKEY, rd:C1_ACCTBAL, re:__prod_ret__97 * ((let __sum_ret__33
       =
       (let wrapped_lookup_value =
         bind map_QUERY22_mCUSTOMER1_L3_1_s2_buf as ind __x in
           (frontier_int_int {key:vid, value:__x.filter ((\b1 ->
              bind b1 as {ra:ra, rb:rb, rc:rc} in rb == delta_C1_CUSTKEY))}).fold
             ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
             (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
             value:int } @ { Collection } in
         case (wrapped_lookup_value.peek ()) of
           {Some unwrapped_value -> bind unwrapped_value as
             {key:_, value:projected_field} in projected_field}{None -> 0}) +
         delta_QUERY22_mCUSTOMER1_L3_1 in
       if __sum_ret__33 == __sql_inline_agg_1 then 1 else 0) + ((let
       __map_ret__60 =
       let wrapped_lookup_value =
         bind map_QUERY22_mCUSTOMER1_L3_1_s2_buf as ind __x in
           (frontier_int_int {key:vid, value:__x.filter ((\b1 ->
              bind b1 as {ra:ra, rb:rb, rc:rc} in rb == delta_C1_CUSTKEY))}).fold
             ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
             (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
             value:int } @ { Collection } in
         case (wrapped_lookup_value.peek ()) of
           {Some unwrapped_value -> bind unwrapped_value as
             {key:_, value:projected_field} in projected_field}{None -> 0} in
       if __map_ret__60 == __sql_inline_agg_1 then 1 else 0) * -1))};
       _accmap)))) empty { ra:real, rb:int, rc:int, rd:real, re:real
      } @ { Collection }).fold ((\_accmap -> (\b3 ->
      bind b3 as {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
      rc:C1_NATIONKEY, rd:C1_ACCTBAL, re:__prod_ret__98} in 
      (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
       rc:C1_NATIONKEY, rd:C1_ACCTBAL, re:__prod_ret__98 *
       if C1_ACCTBAL < __sql_inline_agg_2 then 1 else 0};
       _accmap)))) empty { ra:real, rb:int, rc:int, rd:real, re:real
      } @ { Collection }).groupBy ((\b1 -> bind b1 as {ra:__sql_inline_agg_2,
      rb:__sql_inline_agg_1, rc:C1_NATIONKEY, rd:C1_ACCTBAL,
      re:__prod_ret__99} in C1_NATIONKEY)) ((\__accv_25 -> (\b3 ->
      bind b3 as {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
      rc:C1_NATIONKEY, rd:C1_ACCTBAL, re:__prod_ret__99} in __accv_25 +
      __prod_ret__99))) 0).fold ((\_accmap -> (\b3 ->
      bind b3 as {key:C1_NATIONKEY, value:__prod_ret__99} in 
      (_accmap.insert {key:C1_NATIONKEY, value:__prod_ret__99};_accmap))))
      empty { key:int, value:real } @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {key:C1_NATIONKEY, value:__prod_ret__99} in 
      (_accmap.insert {key:C1_NATIONKEY, value:__prod_ret__99};_accmap))))
      empty { key:int, value:real } @ { Collection } in delta_values))))
    empty { key:int, value:real } @ { Collection }).filter ((\b1 ->
    bind b1 as {key:map_0, value:map_val} in 0 != map_val)) in
  ((nd_add_delta_to_int_float {ra:QUERY22, rb:true, rc:vid, rd:new_tuples});0))


declare sw_delete_CUSTOMER : { ra:int, rb:string, rc:string, rd:int, re:string,
  rf:real, rg:string, rh:string } -> () = (\args ->
  (sw_buf_delete_CUSTOMER.insert args;
   sw_trig_buf_idx.insert {i:1};
   sw_need_vid_cntr = sw_need_vid_cntr + 1))


declare sw_delete_CUSTOMER_send_fetch : { key:int, value:int } -> () = (\vid ->
  case (sw_buf_delete_CUSTOMER.peek ()) of
  {Some args ->
    (sw_buf_delete_CUSTOMER.erase args;
     bind args as
     {ra:CUSTOMER_CUSTKEY, rb:CUSTOMER_NAME, rc:CUSTOMER_ADDRESS, rd:CUSTOMER_NATIONKEY, re:CUSTOMER_PHONE, rf:CUSTOMER_ACCTBAL, rg:CUSTOMER_MKTSEGMENT, rh:CUSTOMER_COMMENT}
     in
     ((route_to_int_int_float {ra:2, rb:Some CUSTOMER_NATIONKEY,
         rc:Some CUSTOMER_CUSTKEY, rd:Some CUSTOMER_ACCTBAL}).iterate ((\b1 ->
      bind b1 as {i:ip} in 
      (nd_delete_CUSTOMER_do_complete_s3_trig, ip)<- {ra:vid,
      rb:CUSTOMER_CUSTKEY, rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS,
      re:CUSTOMER_NATIONKEY, rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL,
      rh:CUSTOMER_MKTSEGMENT, ri:CUSTOMER_COMMENT}));
      (route_to_ {key:3, value:()}).iterate ((\b1 -> bind b1 as {i:ip} in 
      (nd_delete_CUSTOMER_do_complete_s4_trig, ip)<- {ra:vid,
      rb:CUSTOMER_CUSTKEY, rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS,
      re:CUSTOMER_NATIONKEY, rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL,
      rh:CUSTOMER_MKTSEGMENT, ri:CUSTOMER_COMMENT}));
      ((((empty { ra:address, rb:int, rc:int } @ { Collection }).combine (let
      sender_count =
      (route_to_ {key:3, value:()}).fold ((\count -> (\b3 ->
        bind b3 as {i:ip} in count + 1))) 0 in
      ((shuffle_QUERY22_mCUSTOMER1_L2_1_to_QUERY22 {ra:None immut, rb:empty {
          key:{ key:int, value:int }, value:real } @ { Collection }, rc:true}).fold
        ((\_accmap -> (\b3 -> bind b3 as {key:ip, value:tuples} in 
        (_accmap.insert {ra:ip, rb:5, rc:sender_count};_accmap)))) empty {
        ra:address, rb:int, rc:int } @ { Collection }).combine (let
        sender_count =
        (route_to_int_int_float {ra:2, rb:None immut, rc:None immut,
           rd:None immut}).fold ((\count -> (\b3 -> bind b3 as {i:ip} in count
          + 1))) 0 in
        ((shuffle_QUERY22_mCUSTOMER1_to_QUERY22_bind_0t0 {ra:None immut,
            rb:empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:real,
            re:real } @ { Collection }, rc:true}).fold ((\_accmap -> (\b3 ->
          bind b3 as {key:ip, value:tuples} in 
          (_accmap.insert {ra:ip, rb:5, rc:sender_count};_accmap)))) empty {
          ra:address, rb:int, rc:int } @ { Collection }).combine (let
          sender_count =
          (route_to_int {key:4, value:None immut}).fold ((\count -> (\b3 ->
            bind b3 as {i:ip} in count + 1))) 0 in
          (shuffle_QUERY22_mCUSTOMER1_L3_1_to_QUERY22 {ra:None immut,
             rb:empty { ra:{ key:int, value:int }, rb:int, rc:int
             } @ { Collection }, rc:true}).fold ((\_accmap -> (\b3 ->
            bind b3 as {key:ip, value:tuples} in 
            (_accmap.insert {ra:ip, rb:5, rc:sender_count};_accmap)))) empty {
            ra:address, rb:int, rc:int } @ { Collection })))).groupBy ((\b1 ->
      bind b1 as {ra:ip, rb:stmt_id, rc:count} in {key:ip, value:stmt_id}))
      ((\acc -> (\b3 -> bind b3 as {ra:ip, rb:stmt_id, rc:count} in acc +
      count))) 0).groupBy ((\b1 -> bind b1 as {key:b2, value:count} in 
      bind b2 as {key:ip, value:stmt_id} in ip)) ((\acc -> (\b3 ->
      bind b3 as {key:ip_and_stmt_id, value:count} in bind ip_and_stmt_id as
      {key:ip, value:stmt_id} in
      acc.combine ({| key:int, value:int | {key:stmt_id,
        value:count}|} @ { Collection })))) empty { key:int, value:int
      } @ { Collection }).iterate ((\b1 -> bind b1 as {key:addr,
      value:stmt_cnt_list} in 
      ((nd_delete_CUSTOMER_rcv_put, addr)<- {ra:me, rb:stmt_cnt_list, rc:vid,
       rd:CUSTOMER_CUSTKEY, re:CUSTOMER_NAME, rf:CUSTOMER_ADDRESS,
       rg:CUSTOMER_NATIONKEY, rh:CUSTOMER_PHONE, ri:CUSTOMER_ACCTBAL,
       rj:CUSTOMER_MKTSEGMENT, rk:CUSTOMER_COMMENT};
       (sw_num_sent = sw_num_sent + 1;
        (case ((sw_ack_log.filter ((\b1 -> bind b1 as {key:key,
        value:value} in key == vid))).peek ()) of
        {Some x -> sw_ack_log.update x {key:vid, value:x.value + 1}}{None ->
                                                                    sw_ack_log.insert
                                                                    {key:vid,
                                                                    value:1}})))));
      ((((route_to_int {key:4, value:None immut}).fold ((\_accmap -> (\b3 ->
      bind b3 as {i:ip} in (_accmap.insert {ra:5, rb:4, rc:ip};_accmap))))
      empty { ra:int, rb:int, rc:address } @ { Collection }).combine
      (((route_to_int_int_float {ra:2, rb:None immut, rc:None immut,
           rd:None immut}).fold ((\_accmap -> (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {ra:5, rb:2, rc:ip};_accmap)))) empty { ra:int, rb:int,
      rc:address } @ { Collection }).combine
      (((route_to_ {key:3, value:()}).fold ((\_accmap -> (\b3 ->
      bind b3 as {i:ip} in (_accmap.insert {ra:5, rb:3, rc:ip};_accmap))))
      empty { ra:int, rb:int, rc:address } @ { Collection }).combine empty {
      ra:int, rb:int, rc:address } @ { Collection }))).groupBy ((\b1 ->
      bind b1 as {ra:stmt_id, rb:map_id, rc:ip} in ip)) ((\acc -> (\b3 ->
      bind b3 as {ra:stmt_id, rb:map_id, rc:ip} in 
      (acc.insert {key:stmt_id, value:map_id};acc)))) empty { key:int,
      value:int } @ { Collection }).iterate ((\b1 -> bind b1 as {key:ip,
      value:stmt_map_ids} in 
      (nd_delete_CUSTOMER_rcv_fetch, ip)<- {ra:stmt_map_ids, rb:vid,
      rc:CUSTOMER_CUSTKEY, rd:CUSTOMER_NAME, re:CUSTOMER_ADDRESS,
      rf:CUSTOMER_NATIONKEY, rg:CUSTOMER_PHONE, rh:CUSTOMER_ACCTBAL,
      ri:CUSTOMER_MKTSEGMENT, rj:CUSTOMER_COMMENT}))))}{None ->
                                                         error
                                                           (print
                                                              "unexpected missing arguments in sw_buf_delete_CUSTOMER")})


declare nd_delete_CUSTOMER_do_complete_s5 : { ra:{ key:int, value:int },
  rb:int, rc:string, rd:string, re:int, rf:string, rg:real, rh:string,
  ri:string } -> () = (\b1 -> bind b1 as {ra:vid, rb:CUSTOMER_CUSTKEY,
  rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
  rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
  ri:CUSTOMER_COMMENT} in let delta_values =
  ((((((({| key:real, value:int | let __map_ret__4 =
    case ((bind map_QUERY22_mCUSTOMER1_L2_1_s5_buf as ind __x in
      (frontier_float {key:vid, value:__x}).fold ((\acc -> (\b3 ->
        bind b3 as {key:vid, value:map_val} in (acc.insert {i:map_val};acc))))
        empty {i:real} @ { Collection }).peek ()) of {Some x -> x.i}{None -> 0}
    in {key:__map_ret__4, value:1}|} @ { Collection }).fold ((\_accext ->
    (\b3 -> bind b3 as {key:__sql_inline_agg_2, value:__lift_ret__4} in 
    _accext.combine (({| key:int, value:int | let __val_ret__8 = 0 in
    {key:__val_ret__8, value:1}|} @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {key:__sql_inline_agg_1, value:__lift_ret__5} in 
    (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
     rc:__lift_ret__4 * __lift_ret__5};
     _accmap)))) empty { ra:real, rb:int, rc:int } @ { Collection })))) empty {
    ra:real, rb:int, rc:int } @ { Collection }).fold ((\_accext -> (\b3 ->
    bind b3 as {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
    rc:__prod_ret__9} in _accext.combine ((bind map_QUERY22_mCUSTOMER1_s5_buf
    as ind __x in
    (frontier_int_int_float_float {key:vid, value:__x}).fold ((\acc -> (\b3 ->
      bind b3 as {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val} in 
      (acc.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_val};acc)))) empty {
      ra:int, rb:int, rc:real, rd:real } @ { Collection }).fold ((\_accmap ->
    (\b3 -> bind b3 as {ra:C1_NATIONKEY, rb:C1_CUSTKEY, rc:C1_ACCTBAL,
    rd:__map_ret__5} in 
    (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
     rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__9 *
     __map_ret__5};
     _accmap)))) empty { ra:real, rb:int, rc:int, rd:int, re:real, rf:real
    } @ { Collection })))) empty { ra:real, rb:int, rc:int, rd:int, re:real,
    rf:real } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1, rc:C1_NATIONKEY,
    rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__10} in 
    (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
     rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__10 * let
     __map_ret__6 =
     let wrapped_lookup_value =
       bind map_QUERY22_mCUSTOMER1_L3_1_s5_buf as ind __x in
         (frontier_int_int {key:vid, value:__x.filter ((\b1 ->
            bind b1 as {ra:ra, rb:rb, rc:rc} in rb == C1_CUSTKEY))}).fold
           ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
           (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
           value:int } @ { Collection } in
       case (wrapped_lookup_value.peek ()) of
         {Some unwrapped_value -> bind unwrapped_value as
           {key:_, value:projected_field} in projected_field}{None -> 0} in
     if __map_ret__6 == __sql_inline_agg_1 then 1 else 0};
     _accmap)))) empty { ra:real, rb:int, rc:int, rd:int, re:real, rf:real
    } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1, rc:C1_NATIONKEY,
    rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__11} in 
    (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
     rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__11 *
     if C1_ACCTBAL < __sql_inline_agg_2 then 1 else 0};
     _accmap)))) empty { ra:real, rb:int, rc:int, rd:int, re:real, rf:real
    } @ { Collection }).groupBy ((\b1 -> bind b1 as {ra:__sql_inline_agg_2,
    rb:__sql_inline_agg_1, rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL,
    rf:__prod_ret__12} in C1_NATIONKEY)) ((\__accv_2 -> (\b3 ->
    bind b3 as {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1, rc:C1_NATIONKEY,
    rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__12} in __accv_2 +
    __prod_ret__12))) 0).fold ((\_accmap -> (\b3 ->
    bind b3 as {key:C1_NATIONKEY, value:__prod_ret__12} in 
    (_accmap.insert {key:C1_NATIONKEY, value:__prod_ret__12};_accmap))))
    empty { key:int, value:real } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {key:C1_NATIONKEY, value:__prod_ret__12} in 
    (_accmap.insert {key:C1_NATIONKEY, value:__prod_ret__12};_accmap))))
    empty { key:int, value:real } @ { Collection } in
  ((nd_add_delta_to_int_float {ra:QUERY22, rb:false, rc:vid, rd:delta_values});
   (nd_complete_stmt_cntr_check {key:vid, value:5})))


declare nd_delete_CUSTOMER_do_complete_s3 : { ra:{ key:int, value:int },
  rb:int, rc:string, rd:string, re:int, rf:string, rg:real, rh:string,
  ri:string } -> () = (\b1 -> bind b1 as {ra:vid, rb:CUSTOMER_CUSTKEY,
  rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
  rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
  ri:CUSTOMER_COMMENT} in let __prod_ret__6 = -CUSTOMER_ACCTBAL in
  ((nd_add_delta_to_int_int_float_float {ra:QUERY22_mCUSTOMER1, rb:false,
      rc:vid, rd:{| ra:int, rb:int, rc:real, rd:real | {ra:CUSTOMER_NATIONKEY,
      rb:CUSTOMER_CUSTKEY, rc:CUSTOMER_ACCTBAL,
      rd:__prod_ret__6}|} @ { Collection }});
   let sent_msgs =
   nd_QUERY22_mCUSTOMER1_send_correctives {ra:me, rb:3, rc:vid, rd:1, re:vid,
     rf:{| ra:int, rb:int, rc:real, rd:real | {ra:CUSTOMER_NATIONKEY,
     rb:CUSTOMER_CUSTKEY, rc:CUSTOMER_ACCTBAL,
     rd:__prod_ret__6}|} @ { Collection }} in
   if sent_msgs == 0 then ()
     else
       nd_update_stmt_cntr_corr_map {ra:vid, rb:3, rc:1, rd:sent_msgs, re:true,
         rf:true}))


declare nd_delete_CUSTOMER_do_complete_s4 : { ra:{ key:int, value:int },
  rb:int, rc:string, rd:string, re:int, rf:string, rg:real, rh:string,
  ri:string } -> () = (\b1 -> bind b1 as {ra:vid, rb:CUSTOMER_CUSTKEY,
  rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
  rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
  ri:CUSTOMER_COMMENT} in let __prod_ret__8 =
  (if 0 < CUSTOMER_ACCTBAL then 1 else 0) * -CUSTOMER_ACCTBAL in
  ((nd_add_delta_to_float {ra:QUERY22_mCUSTOMER1_L2_1, rb:false, rc:vid,
      rd:{|i:real| __prod_ret__8|} @ { Collection }});
   let sent_msgs =
   nd_QUERY22_mCUSTOMER1_L2_1_send_correctives {ra:me, rb:4, rc:vid, rd:1,
     re:vid, rf:{|i:real| __prod_ret__8|} @ { Collection }} in
   if sent_msgs == 0 then ()
     else
       nd_update_stmt_cntr_corr_map {ra:vid, rb:4, rc:1, rd:sent_msgs, re:true,
         rf:true}))


declare delete_CUSTOMER_do_corrective_s5_m_QUERY22_mCUSTOMER1_L2_1 : {
  ra:address, rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int,
  value:int }, rf:int, rg:string, rh:string, ri:int, rj:string, rk:real,
  rl:string, rm:string, rn:collection {i:real} @ { Collection } } -> int =
  (\b1 -> bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
  re:vid, rf:CUSTOMER_CUSTKEY, rg:CUSTOMER_NAME, rh:CUSTOMER_ADDRESS,
  ri:CUSTOMER_NATIONKEY, rj:CUSTOMER_PHONE, rk:CUSTOMER_ACCTBAL,
  rl:CUSTOMER_MKTSEGMENT, rm:CUSTOMER_COMMENT, rn:delta_tuples} in let
  new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 ->
    bind b3 as {i:delta_QUERY22_mCUSTOMER1_L2_1} in _accext.combine (let
    delta_values =
    ((((((((({| key:int, value:int | let __val_ret__71 = 0 in
      {key:__val_ret__71, value:1}|} @ { Collection }).fold ((\_accext ->
      (\b3 -> bind b3 as {key:__sql_inline_agg_1, value:__lift_ret__71} in 
      _accext.combine ((({| key:real, value:int | let __sum_ret__35 =
      case ((bind map_QUERY22_mCUSTOMER1_L2_1_s5_buf as ind __x in
        (frontier_float {key:vid, value:__x}).fold ((\acc -> (\b3 ->
          bind b3 as {key:vid, value:map_val} in 
          (acc.insert {i:map_val};acc)))) empty {i:real} @ { Collection }).peek
        ()) of {Some x -> x.i}{None -> 0} + delta_QUERY22_mCUSTOMER1_L2_1 in
      {key:__sum_ret__35, value:1}|} @ { Collection }).combine (({| key:real,
      value:int | let __map_ret__62 =
      case ((bind map_QUERY22_mCUSTOMER1_L2_1_s5_buf as ind __x in
        (frontier_float {key:vid, value:__x}).fold ((\acc -> (\b3 ->
          bind b3 as {key:vid, value:map_val} in 
          (acc.insert {i:map_val};acc)))) empty {i:real} @ { Collection }).peek
        ()) of {Some x -> x.i}{None -> 0} in
      {key:__map_ret__62, value:1}|} @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {key:__sql_inline_agg_2, value:__lift_ret__73} in 
      (_accmap.insert {key:__sql_inline_agg_2, value:__lift_ret__73 * -1};
       _accmap)))) empty { key:real, value:int } @ { Collection })).fold
      ((\_accmap -> (\b3 -> bind b3 as {key:__sql_inline_agg_2,
      value:__sum_ret__36} in 
      (_accmap.insert {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
       rc:__lift_ret__71 * __sum_ret__36};
       _accmap)))) empty { ra:int, rb:real, rc:int } @ { Collection }))))
      empty { ra:int, rb:real, rc:int } @ { Collection }).fold ((\_accext ->
      (\b3 -> bind b3 as {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
      rc:__prod_ret__101} in _accext.combine ((bind
      map_QUERY22_mCUSTOMER1_s5_buf as ind __x in
      (frontier_int_int_float_float {key:vid, value:__x}).fold ((\acc ->
        (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_1, rd:map_2,
        re:map_val} in 
        (acc.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_val};acc)))) empty {
        ra:int, rb:int, rc:real, rd:real } @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {ra:C1_NATIONKEY, rb:C1_CUSTKEY, rc:C1_ACCTBAL,
      rd:__map_ret__63} in 
      (_accmap.insert {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
       rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__101 *
       __map_ret__63};
       _accmap)))) empty { ra:int, rb:real, rc:int, rd:int, re:real, rf:real
      } @ { Collection })))) empty { ra:int, rb:real, rc:int, rd:int, re:real,
      rf:real } @ { Collection }).fold ((\_accmap -> (\b3 ->
      bind b3 as {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
      rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__102} in 
      (_accmap.insert {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
       rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__102 * let
       __map_ret__64 =
       let wrapped_lookup_value =
         bind map_QUERY22_mCUSTOMER1_L3_1_s5_buf as ind __x in
           (frontier_int_int {key:vid, value:__x.filter ((\b1 ->
              bind b1 as {ra:ra, rb:rb, rc:rc} in rb == C1_CUSTKEY))}).fold
             ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
             (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
             value:int } @ { Collection } in
         case (wrapped_lookup_value.peek ()) of
           {Some unwrapped_value -> bind unwrapped_value as
             {key:_, value:projected_field} in projected_field}{None -> 0} in
       if __map_ret__64 == __sql_inline_agg_1 then 1 else 0};
       _accmap)))) empty { ra:int, rb:real, rc:int, rd:int, re:real, rf:real
      } @ { Collection }).fold ((\_accmap -> (\b3 ->
      bind b3 as {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
      rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__103} in 
      (_accmap.insert {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
       rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__103 *
       if C1_ACCTBAL < __sql_inline_agg_2 then 1 else 0};
       _accmap)))) empty { ra:int, rb:real, rc:int, rd:int, re:real, rf:real
      } @ { Collection }).groupBy ((\b1 -> bind b1 as {ra:__sql_inline_agg_1,
      rb:__sql_inline_agg_2, rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL,
      rf:__prod_ret__104} in C1_NATIONKEY)) ((\__accv_26 -> (\b3 ->
      bind b3 as {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
      rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__104} in 
      __accv_26 + __prod_ret__104))) 0).fold ((\_accmap -> (\b3 ->
      bind b3 as {key:C1_NATIONKEY, value:__prod_ret__104} in 
      (_accmap.insert {key:C1_NATIONKEY, value:__prod_ret__104};_accmap))))
      empty { key:int, value:real } @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {key:C1_NATIONKEY, value:__prod_ret__104} in 
      (_accmap.insert {key:C1_NATIONKEY, value:__prod_ret__104};_accmap))))
      empty { key:int, value:real } @ { Collection }).groupBy ((\b1 ->
      bind b1 as {key:map_0, value:map_val} in map_0)) ((\acc -> (\b3 ->
      bind b3 as {key:map_0, value:map_val} in acc + map_val))) 0).fold
      ((\acc -> (\b3 -> bind b3 as {key:g, value:val} in 
      (acc.insert {key:g, value:val};acc)))) empty { key:int, value:real
      } @ { Collection } in delta_values)))) empty { key:int, value:real
    } @ { Collection }).filter ((\b1 -> bind b1 as {key:map_0,
    value:map_val} in 0 != map_val)) in
  ((nd_add_delta_to_int_float {ra:QUERY22, rb:true, rc:vid, rd:new_tuples});0))


declare delete_CUSTOMER_do_corrective_s5_m_QUERY22_mCUSTOMER1 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:int,
  rg:string, rh:string, ri:int, rj:string, rk:real, rl:string, rm:string,
  rn:collection { ra:int, rb:int, rc:real, rd:real } @ { Collection }
  } -> int = (\b1 -> bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid,
  rd:hop, re:vid, rf:CUSTOMER_CUSTKEY, rg:CUSTOMER_NAME, rh:CUSTOMER_ADDRESS,
  ri:CUSTOMER_NATIONKEY, rj:CUSTOMER_PHONE, rk:CUSTOMER_ACCTBAL,
  rl:CUSTOMER_MKTSEGMENT, rm:CUSTOMER_COMMENT, rn:delta_tuples} in let
  new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 -> bind b3 as {ra:delta_C1_NATIONKEY,
    rb:delta_C1_CUSTKEY, rc:delta_C1_ACCTBAL, rd:delta_QUERY22_mCUSTOMER1} in 
    _accext.combine (let __prod_ret__108 =
    (((({| key:real, value:int | let __map_ret__65 =
      case ((bind map_QUERY22_mCUSTOMER1_L2_1_s5_buf as ind __x in
        (frontier_float {key:vid, value:__x}).fold ((\acc -> (\b3 ->
          bind b3 as {key:vid, value:map_val} in 
          (acc.insert {i:map_val};acc)))) empty {i:real} @ { Collection }).peek
        ()) of {Some x -> x.i}{None -> 0} in
      {key:__map_ret__65, value:1}|} @ { Collection }).fold ((\_accext ->
      (\b3 -> bind b3 as {key:__sql_inline_agg_2, value:__lift_ret__75} in 
      _accext.combine (({| key:int, value:int | let __val_ret__74 = 0 in
      {key:__val_ret__74, value:1}|} @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {key:__sql_inline_agg_1, value:__lift_ret__76} in 
      (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
       rc:__lift_ret__75 * __lift_ret__76};
       _accmap)))) empty { ra:real, rb:int, rc:int } @ { Collection }))))
      empty { ra:real, rb:int, rc:int } @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
      rc:__prod_ret__105} in 
      (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
       rc:__prod_ret__105 * let __map_ret__66 =
       let wrapped_lookup_value =
         bind map_QUERY22_mCUSTOMER1_L3_1_s5_buf as ind __x in
           (frontier_int_int {key:vid, value:__x.filter ((\b1 ->
              bind b1 as {ra:ra, rb:rb, rc:rc} in rb == delta_C1_CUSTKEY))}).fold
             ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
             (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
             value:int } @ { Collection } in
         case (wrapped_lookup_value.peek ()) of
           {Some unwrapped_value -> bind unwrapped_value as
             {key:_, value:projected_field} in projected_field}{None -> 0} in
       if __map_ret__66 == __sql_inline_agg_1 then 1 else 0};
       _accmap)))) empty { ra:real, rb:int, rc:int } @ { Collection }).fold
      ((\_accmap -> (\b3 -> bind b3 as {ra:__sql_inline_agg_2,
      rb:__sql_inline_agg_1, rc:__prod_ret__106} in 
      (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
       rc:__prod_ret__106 * if delta_C1_ACCTBAL < __sql_inline_agg_2 
       then 1 else 0};
       _accmap)))) empty { ra:real, rb:int, rc:int } @ { Collection }).fold
      ((\__accv_27 -> (\b3 -> bind b3 as {ra:__sql_inline_agg_2,
      rb:__sql_inline_agg_1, rc:__prod_ret__107} in __accv_27 +
      __prod_ret__107))) 0 * delta_QUERY22_mCUSTOMER1 in
    {| key:int, value:real | {key:delta_C1_NATIONKEY,
      value:__prod_ret__108}|} @ { Collection })))) empty { key:int, value:real
    } @ { Collection }).filter ((\b1 -> bind b1 as {key:map_0,
    value:map_val} in 0 != map_val)) in
  ((nd_add_delta_to_int_float {ra:QUERY22, rb:true, rc:vid, rd:new_tuples});0))


declare delete_CUSTOMER_do_corrective_s5_m_QUERY22_mCUSTOMER1_L3_1 : {
  ra:address, rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int,
  value:int }, rf:int, rg:string, rh:string, ri:int, rj:string, rk:real,
  rl:string, rm:string, rn:collection { key:int, value:int } @ { Collection }
  } -> int = (\b1 -> bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid,
  rd:hop, re:vid, rf:CUSTOMER_CUSTKEY, rg:CUSTOMER_NAME, rh:CUSTOMER_ADDRESS,
  ri:CUSTOMER_NATIONKEY, rj:CUSTOMER_PHONE, rk:CUSTOMER_ACCTBAL,
  rl:CUSTOMER_MKTSEGMENT, rm:CUSTOMER_COMMENT, rn:delta_tuples} in let
  new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 -> bind b3 as {key:delta_C1_CUSTKEY,
    value:delta_QUERY22_mCUSTOMER1_L3_1} in _accext.combine (let delta_values =
    ((((((({| key:real, value:int | let __map_ret__67 =
      case ((bind map_QUERY22_mCUSTOMER1_L2_1_s5_buf as ind __x in
        (frontier_float {key:vid, value:__x}).fold ((\acc -> (\b3 ->
          bind b3 as {key:vid, value:map_val} in 
          (acc.insert {i:map_val};acc)))) empty {i:real} @ { Collection }).peek
        ()) of {Some x -> x.i}{None -> 0} in
      {key:__map_ret__67, value:1}|} @ { Collection }).fold ((\_accext ->
      (\b3 -> bind b3 as {key:__sql_inline_agg_2, value:__lift_ret__78} in 
      _accext.combine (({| key:int, value:int | let __val_ret__76 = 0 in
      {key:__val_ret__76, value:1}|} @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {key:__sql_inline_agg_1, value:__lift_ret__79} in 
      (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
       rc:__lift_ret__78 * __lift_ret__79};
       _accmap)))) empty { ra:real, rb:int, rc:int } @ { Collection }))))
      empty { ra:real, rb:int, rc:int } @ { Collection }).fold ((\_accext ->
      (\b3 -> bind b3 as {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
      rc:__prod_ret__110} in _accext.combine (((bind
      map_QUERY22_mCUSTOMER1_s5_buf as ind __x in
      (frontier_int_int_float_float {key:vid, value:__x.filter ((\b1 ->
         bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd, re:re} in rc ==
         delta_C1_CUSTKEY))}).fold ((\acc -> (\b3 -> bind b3 as {ra:vid,
        rb:map_0, rc:map_1, rd:map_2, re:map_val} in 
        (acc.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_val};acc)))) empty {
        ra:int, rb:int, rc:real, rd:real } @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {ra:C1_NATIONKEY, rb:delta_C1_CUSTKEY, rc:C1_ACCTBAL,
      rd:__map_ret__68} in 
      (_accmap.insert {ra:C1_NATIONKEY, rb:C1_ACCTBAL, rc:__map_ret__68};
       _accmap)))) empty { ra:int, rb:real, rc:real } @ { Collection }).fold
      ((\_accmap -> (\b3 -> bind b3 as {ra:C1_NATIONKEY, rb:C1_ACCTBAL,
      rc:__map_ret__68} in 
      (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
       rc:C1_NATIONKEY, rd:C1_ACCTBAL, re:__prod_ret__110 * __map_ret__68};
       _accmap)))) empty { ra:real, rb:int, rc:int, rd:real, re:real
      } @ { Collection })))) empty { ra:real, rb:int, rc:int, rd:real, re:real
      } @ { Collection }).fold ((\_accmap -> (\b3 ->
      bind b3 as {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
      rc:C1_NATIONKEY, rd:C1_ACCTBAL, re:__prod_ret__111} in 
      (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
       rc:C1_NATIONKEY, rd:C1_ACCTBAL, re:__prod_ret__111 * ((let __sum_ret__37
       =
       (let wrapped_lookup_value =
         bind map_QUERY22_mCUSTOMER1_L3_1_s5_buf as ind __x in
           (frontier_int_int {key:vid, value:__x.filter ((\b1 ->
              bind b1 as {ra:ra, rb:rb, rc:rc} in rb == delta_C1_CUSTKEY))}).fold
             ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
             (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
             value:int } @ { Collection } in
         case (wrapped_lookup_value.peek ()) of
           {Some unwrapped_value -> bind unwrapped_value as
             {key:_, value:projected_field} in projected_field}{None -> 0}) +
         delta_QUERY22_mCUSTOMER1_L3_1 in
       if __sum_ret__37 == __sql_inline_agg_1 then 1 else 0) + ((let
       __map_ret__70 =
       let wrapped_lookup_value =
         bind map_QUERY22_mCUSTOMER1_L3_1_s5_buf as ind __x in
           (frontier_int_int {key:vid, value:__x.filter ((\b1 ->
              bind b1 as {ra:ra, rb:rb, rc:rc} in rb == delta_C1_CUSTKEY))}).fold
             ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
             (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
             value:int } @ { Collection } in
         case (wrapped_lookup_value.peek ()) of
           {Some unwrapped_value -> bind unwrapped_value as
             {key:_, value:projected_field} in projected_field}{None -> 0} in
       if __map_ret__70 == __sql_inline_agg_1 then 1 else 0) * -1))};
       _accmap)))) empty { ra:real, rb:int, rc:int, rd:real, re:real
      } @ { Collection }).fold ((\_accmap -> (\b3 ->
      bind b3 as {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
      rc:C1_NATIONKEY, rd:C1_ACCTBAL, re:__prod_ret__112} in 
      (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
       rc:C1_NATIONKEY, rd:C1_ACCTBAL, re:__prod_ret__112 *
       if C1_ACCTBAL < __sql_inline_agg_2 then 1 else 0};
       _accmap)))) empty { ra:real, rb:int, rc:int, rd:real, re:real
      } @ { Collection }).groupBy ((\b1 -> bind b1 as {ra:__sql_inline_agg_2,
      rb:__sql_inline_agg_1, rc:C1_NATIONKEY, rd:C1_ACCTBAL,
      re:__prod_ret__113} in C1_NATIONKEY)) ((\__accv_28 -> (\b3 ->
      bind b3 as {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
      rc:C1_NATIONKEY, rd:C1_ACCTBAL, re:__prod_ret__113} in __accv_28 +
      __prod_ret__113))) 0).fold ((\_accmap -> (\b3 ->
      bind b3 as {key:C1_NATIONKEY, value:__prod_ret__113} in 
      (_accmap.insert {key:C1_NATIONKEY, value:__prod_ret__113};_accmap))))
      empty { key:int, value:real } @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {key:C1_NATIONKEY, value:__prod_ret__113} in 
      (_accmap.insert {key:C1_NATIONKEY, value:__prod_ret__113};_accmap))))
      empty { key:int, value:real } @ { Collection } in delta_values))))
    empty { key:int, value:real } @ { Collection }).filter ((\b1 ->
    bind b1 as {key:map_0, value:map_val} in 0 != map_val)) in
  ((nd_add_delta_to_int_float {ra:QUERY22, rb:true, rc:vid, rd:new_tuples});0))


declare sw_insert_ORDERS : { ra:int, rb:int, rc:string, rd:real, re:int,
  rf:string, rg:string, rh:int, ri:string } -> () = (\args ->
  (sw_buf_insert_ORDERS.insert args;
   sw_trig_buf_idx.insert {i:2};
   sw_need_vid_cntr = sw_need_vid_cntr + 1))


declare sw_insert_ORDERS_send_fetch : { key:int, value:int } -> () = (\vid ->
  case (sw_buf_insert_ORDERS.peek ()) of
  {Some args ->
    (sw_buf_insert_ORDERS.erase args;
     bind args as
     {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
     in
     ((route_to_int {key:4, value:Some ORDERS_CUSTKEY}).iterate ((\b1 ->
      bind b1 as {i:ip} in 
      (nd_insert_ORDERS_do_complete_s7_trig, ip)<- {ra:vid, rb:ORDERS_ORDERKEY,
      rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
      rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
      ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT}));
      ((((empty { ra:address, rb:int, rc:int } @ { Collection }).combine (let
      sender_count =
      (route_to_ {key:3, value:()}).fold ((\count -> (\b3 ->
        bind b3 as {i:ip} in count + 1))) 0 in
      ((shuffle_QUERY22_mCUSTOMER1_L2_1_to_QUERY22 {ra:None immut, rb:empty {
          key:{ key:int, value:int }, value:real } @ { Collection }, rc:true}).fold
        ((\_accmap -> (\b3 -> bind b3 as {key:ip, value:tuples} in 
        (_accmap.insert {ra:ip, rb:6, rc:sender_count};_accmap)))) empty {
        ra:address, rb:int, rc:int } @ { Collection }).combine (let
        sender_count =
        (route_to_int_int_float {ra:2, rb:None immut, rc:Some ORDERS_CUSTKEY,
           rd:None immut}).fold ((\count -> (\b3 -> bind b3 as {i:ip} in count
          + 1))) 0 in
        ((shuffle_QUERY22_mCUSTOMER1_to_QUERY22_bind_0t0 {ra:None immut,
            rb:empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:real,
            re:real } @ { Collection }, rc:true}).fold ((\_accmap -> (\b3 ->
          bind b3 as {key:ip, value:tuples} in 
          (_accmap.insert {ra:ip, rb:6, rc:sender_count};_accmap)))) empty {
          ra:address, rb:int, rc:int } @ { Collection }).combine (let
          sender_count =
          (route_to_int {key:4, value:Some ORDERS_CUSTKEY}).fold ((\count ->
            (\b3 -> bind b3 as {i:ip} in count + 1))) 0 in
          (shuffle_QUERY22_mCUSTOMER1_L3_1_to_QUERY22 {ra:None immut,
             rb:empty { ra:{ key:int, value:int }, rb:int, rc:int
             } @ { Collection }, rc:true}).fold ((\_accmap -> (\b3 ->
            bind b3 as {key:ip, value:tuples} in 
            (_accmap.insert {ra:ip, rb:6, rc:sender_count};_accmap)))) empty {
            ra:address, rb:int, rc:int } @ { Collection })))).groupBy ((\b1 ->
      bind b1 as {ra:ip, rb:stmt_id, rc:count} in {key:ip, value:stmt_id}))
      ((\acc -> (\b3 -> bind b3 as {ra:ip, rb:stmt_id, rc:count} in acc +
      count))) 0).groupBy ((\b1 -> bind b1 as {key:b2, value:count} in 
      bind b2 as {key:ip, value:stmt_id} in ip)) ((\acc -> (\b3 ->
      bind b3 as {key:ip_and_stmt_id, value:count} in bind ip_and_stmt_id as
      {key:ip, value:stmt_id} in
      acc.combine ({| key:int, value:int | {key:stmt_id,
        value:count}|} @ { Collection })))) empty { key:int, value:int
      } @ { Collection }).iterate ((\b1 -> bind b1 as {key:addr,
      value:stmt_cnt_list} in 
      ((nd_insert_ORDERS_rcv_put, addr)<- {ra:me, rb:stmt_cnt_list, rc:vid,
       rd:ORDERS_ORDERKEY, re:ORDERS_CUSTKEY, rf:ORDERS_ORDERSTATUS,
       rg:ORDERS_TOTALPRICE, rh:ORDERS_ORDERDATE, ri:ORDERS_ORDERPRIORITY,
       rj:ORDERS_CLERK, rk:ORDERS_SHIPPRIORITY, rl:ORDERS_COMMENT};
       (sw_num_sent = sw_num_sent + 1;
        (case ((sw_ack_log.filter ((\b1 -> bind b1 as {key:key,
        value:value} in key == vid))).peek ()) of
        {Some x -> sw_ack_log.update x {key:vid, value:x.value + 1}}{None ->
                                                                    sw_ack_log.insert
                                                                    {key:vid,
                                                                    value:1}})))));
      ((((route_to_int {key:4, value:Some ORDERS_CUSTKEY}).fold ((\_accmap ->
      (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {ra:6, rb:4, rc:ip};_accmap)))) empty { ra:int, rb:int,
      rc:address } @ { Collection }).combine
      (((route_to_int_int_float {ra:2, rb:None immut, rc:Some ORDERS_CUSTKEY,
           rd:None immut}).fold ((\_accmap -> (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {ra:6, rb:2, rc:ip};_accmap)))) empty { ra:int, rb:int,
      rc:address } @ { Collection }).combine
      (((route_to_ {key:3, value:()}).fold ((\_accmap -> (\b3 ->
      bind b3 as {i:ip} in (_accmap.insert {ra:6, rb:3, rc:ip};_accmap))))
      empty { ra:int, rb:int, rc:address } @ { Collection }).combine empty {
      ra:int, rb:int, rc:address } @ { Collection }))).groupBy ((\b1 ->
      bind b1 as {ra:stmt_id, rb:map_id, rc:ip} in ip)) ((\acc -> (\b3 ->
      bind b3 as {ra:stmt_id, rb:map_id, rc:ip} in 
      (acc.insert {key:stmt_id, value:map_id};acc)))) empty { key:int,
      value:int } @ { Collection }).iterate ((\b1 -> bind b1 as {key:ip,
      value:stmt_map_ids} in 
      (nd_insert_ORDERS_rcv_fetch, ip)<- {ra:stmt_map_ids, rb:vid,
      rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
      rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
      ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT}))))}
  {None ->
    error (print "unexpected missing arguments in sw_buf_insert_ORDERS")})


declare nd_insert_ORDERS_do_complete_s6 : { ra:{ key:int, value:int }, rb:int,
  rc:int, rd:string, re:real, rf:int, rg:string, rh:string, ri:int, rj:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
  rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
  rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
  rj:ORDERS_COMMENT} in let delta_values =
  (((((({| key:real, value:int | let __map_ret__7 =
    case ((bind map_QUERY22_mCUSTOMER1_L2_1_s6_buf as ind __x in
      (frontier_float {key:vid, value:__x}).fold ((\acc -> (\b3 ->
        bind b3 as {key:vid, value:map_val} in (acc.insert {i:map_val};acc))))
        empty {i:real} @ { Collection }).peek ()) of {Some x -> x.i}{None -> 0}
    in {key:__map_ret__7, value:1}|} @ { Collection }).fold ((\_accext ->
    (\b3 -> bind b3 as {key:__sql_inline_agg_2, value:__lift_ret__7} in 
    _accext.combine (((bind map_QUERY22_mCUSTOMER1_s6_buf as ind __x in
    (frontier_int_int_float_float {key:vid, value:__x.filter ((\b1 ->
       bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd, re:re} in rc ==
       ORDERS_CUSTKEY))}).fold ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0,
      rc:map_1, rd:map_2, re:map_val} in 
      (acc.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_val};acc)))) empty {
      ra:int, rb:int, rc:real, rd:real } @ { Collection }).fold ((\_accmap ->
    (\b3 -> bind b3 as {ra:C1_NATIONKEY, rb:ORDERS_CUSTKEY, rc:C1_ACCTBAL,
    rd:__map_ret__8} in 
    (_accmap.insert {ra:C1_NATIONKEY, rb:C1_ACCTBAL, rc:__map_ret__8};_accmap))))
    empty { ra:int, rb:real, rc:real } @ { Collection }).fold ((\_accmap ->
    (\b3 -> bind b3 as {ra:C1_NATIONKEY, rb:C1_ACCTBAL, rc:__map_ret__8} in 
    (_accmap.insert {ra:__sql_inline_agg_2, rb:C1_NATIONKEY, rc:C1_ACCTBAL,
     rd:__lift_ret__7 * __map_ret__8};
     _accmap)))) empty { ra:real, rb:int, rc:real, rd:real
    } @ { Collection })))) empty { ra:real, rb:int, rc:real, rd:real
    } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:__sql_inline_agg_2, rb:C1_NATIONKEY, rc:C1_ACCTBAL,
    rd:__prod_ret__13} in 
    (_accmap.insert {ra:__sql_inline_agg_2, rb:C1_NATIONKEY, rc:C1_ACCTBAL,
     rd:__prod_ret__13 * if C1_ACCTBAL < __sql_inline_agg_2 then 1 else 0};
     _accmap)))) empty { ra:real, rb:int, rc:real, rd:real
    } @ { Collection }).groupBy ((\b1 -> bind b1 as {ra:__sql_inline_agg_2,
    rb:C1_NATIONKEY, rc:C1_ACCTBAL, rd:__prod_ret__14} in C1_NATIONKEY))
    ((\__accv_3 -> (\b3 -> bind b3 as {ra:__sql_inline_agg_2, rb:C1_NATIONKEY,
    rc:C1_ACCTBAL, rd:__prod_ret__14} in __accv_3 + __prod_ret__14))) 0).fold
    ((\_accmap -> (\b3 -> bind b3 as {key:C1_NATIONKEY,
    value:__prod_ret__14} in 
    (_accmap.insert {key:C1_NATIONKEY, value:__prod_ret__14};_accmap))))
    empty { key:int, value:real } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {key:C1_NATIONKEY, value:__prod_ret__14} in 
    (_accmap.insert {key:C1_NATIONKEY, value:__prod_ret__14 * ((({| key:int,
     value:int | let __val_ret__9 = 0 in
     {key:__val_ret__9, value:1}|} @ { Collection }).fold ((\_accmap -> (\b3 ->
     bind b3 as {key:__sql_inline_agg_1, value:__lift_ret__8} in 
     (_accmap.insert {key:__sql_inline_agg_1, value:__lift_ret__8 * let
      __sum_ret__1 =
      (let wrapped_lookup_value =
        bind map_QUERY22_mCUSTOMER1_L3_1_s6_buf as ind __x in
          (frontier_int_int {key:vid, value:__x.filter ((\b1 ->
             bind b1 as {ra:ra, rb:rb, rc:rc} in rb == ORDERS_CUSTKEY))}).fold
            ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
            (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
            value:int } @ { Collection } in
        case (wrapped_lookup_value.peek ()) of
          {Some unwrapped_value -> bind unwrapped_value as
            {key:_, value:projected_field} in projected_field}{None -> 0}) + 1
      in if __sum_ret__1 == __sql_inline_agg_1 then 1 else 0};
      _accmap)))) empty { key:int, value:int } @ { Collection }).fold
     ((\__accv_4 -> (\b3 -> bind b3 as {key:__sql_inline_agg_1,
     value:__prod_ret__15} in __accv_4 + __prod_ret__15))) 0 + ((({| key:int,
     value:int | let __val_ret__11 = 0 in
     {key:__val_ret__11, value:1}|} @ { Collection }).fold ((\_accmap ->
     (\b3 -> bind b3 as {key:__sql_inline_agg_1, value:__lift_ret__10} in 
     (_accmap.insert {key:__sql_inline_agg_1, value:__lift_ret__10 * let
      __map_ret__10 =
      let wrapped_lookup_value =
        bind map_QUERY22_mCUSTOMER1_L3_1_s6_buf as ind __x in
          (frontier_int_int {key:vid, value:__x.filter ((\b1 ->
             bind b1 as {ra:ra, rb:rb, rc:rc} in rb == ORDERS_CUSTKEY))}).fold
            ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
            (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
            value:int } @ { Collection } in
        case (wrapped_lookup_value.peek ()) of
          {Some unwrapped_value -> bind unwrapped_value as
            {key:_, value:projected_field} in projected_field}{None -> 0} in
      if __map_ret__10 == __sql_inline_agg_1 then 1 else 0};
      _accmap)))) empty { key:int, value:int } @ { Collection }).fold
     ((\__accv_5 -> (\b3 -> bind b3 as {key:__sql_inline_agg_1,
     value:__prod_ret__16} in __accv_5 + __prod_ret__16))) 0 * -1))};
     _accmap)))) empty { key:int, value:real } @ { Collection }).fold
    ((\_accmap -> (\b3 -> bind b3 as {key:C1_NATIONKEY,
    value:__prod_ret__18} in 
    (_accmap.insert {key:C1_NATIONKEY, value:__prod_ret__18};_accmap))))
    empty { key:int, value:real } @ { Collection } in
  ((nd_add_delta_to_int_float {ra:QUERY22, rb:false, rc:vid, rd:delta_values});
   (nd_complete_stmt_cntr_check {key:vid, value:6})))


declare nd_insert_ORDERS_do_complete_s7 : { ra:{ key:int, value:int }, rb:int,
  rc:int, rd:string, re:real, rf:int, rg:string, rh:string, ri:int, rj:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
  rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
  rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
  rj:ORDERS_COMMENT} in let __val_ret__13 = 1 in
  ((nd_add_delta_to_int_int {ra:QUERY22_mCUSTOMER1_L3_1, rb:false, rc:vid,
      rd:{| key:int, value:int | {key:ORDERS_CUSTKEY,
      value:__val_ret__13}|} @ { Collection }});
   let sent_msgs =
   nd_QUERY22_mCUSTOMER1_L3_1_send_correctives {ra:me, rb:7, rc:vid, rd:1,
     re:vid, rf:{| key:int, value:int | {key:ORDERS_CUSTKEY,
     value:__val_ret__13}|} @ { Collection }} in
   if sent_msgs == 0 then ()
     else
       nd_update_stmt_cntr_corr_map {ra:vid, rb:7, rc:1, rd:sent_msgs, re:true,
         rf:true}))


declare insert_ORDERS_do_corrective_s6_m_QUERY22_mCUSTOMER1_L2_1 : {
  ra:address, rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int,
  value:int }, rf:int, rg:int, rh:string, ri:real, rj:int, rk:string,
  rl:string, rm:int, rn:string, ro:collection {i:real} @ { Collection }
  } -> int = (\b1 -> bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid,
  rd:hop, re:vid, rf:ORDERS_ORDERKEY, rg:ORDERS_CUSTKEY, rh:ORDERS_ORDERSTATUS,
  ri:ORDERS_TOTALPRICE, rj:ORDERS_ORDERDATE, rk:ORDERS_ORDERPRIORITY,
  rl:ORDERS_CLERK, rm:ORDERS_SHIPPRIORITY, rn:ORDERS_COMMENT,
  ro:delta_tuples} in let new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 ->
    bind b3 as {i:delta_QUERY22_mCUSTOMER1_L2_1} in _accext.combine (let
    delta_values =
    ((((((((({| key:real, value:int | let __sum_ret__5 =
      case ((bind map_QUERY22_mCUSTOMER1_L2_1_s6_buf as ind __x in
        (frontier_float {key:vid, value:__x}).fold ((\acc -> (\b3 ->
          bind b3 as {key:vid, value:map_val} in 
          (acc.insert {i:map_val};acc)))) empty {i:real} @ { Collection }).peek
        ()) of {Some x -> x.i}{None -> 0} + delta_QUERY22_mCUSTOMER1_L2_1 in
      {key:__sum_ret__5, value:1}|} @ { Collection }).combine (({| key:real,
      value:int | let __map_ret__18 =
      case ((bind map_QUERY22_mCUSTOMER1_L2_1_s6_buf as ind __x in
        (frontier_float {key:vid, value:__x}).fold ((\acc -> (\b3 ->
          bind b3 as {key:vid, value:map_val} in 
          (acc.insert {i:map_val};acc)))) empty {i:real} @ { Collection }).peek
        ()) of {Some x -> x.i}{None -> 0} in
      {key:__map_ret__18, value:1}|} @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {key:__sql_inline_agg_2, value:__lift_ret__20} in 
      (_accmap.insert {key:__sql_inline_agg_2, value:__lift_ret__20 * -1};
       _accmap)))) empty { key:real, value:int } @ { Collection })).fold
      ((\_accext -> (\b3 -> bind b3 as {key:__sql_inline_agg_2,
      value:__sum_ret__6} in _accext.combine (((bind
      map_QUERY22_mCUSTOMER1_s6_buf as ind __x in
      (frontier_int_int_float_float {key:vid, value:__x.filter ((\b1 ->
         bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd, re:re} in rc ==
         ORDERS_CUSTKEY))}).fold ((\acc -> (\b3 -> bind b3 as {ra:vid,
        rb:map_0, rc:map_1, rd:map_2, re:map_val} in 
        (acc.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_val};acc)))) empty {
        ra:int, rb:int, rc:real, rd:real } @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {ra:C1_NATIONKEY, rb:ORDERS_CUSTKEY, rc:C1_ACCTBAL,
      rd:__map_ret__19} in 
      (_accmap.insert {ra:C1_NATIONKEY, rb:C1_ACCTBAL, rc:__map_ret__19};
       _accmap)))) empty { ra:int, rb:real, rc:real } @ { Collection }).fold
      ((\_accmap -> (\b3 -> bind b3 as {ra:C1_NATIONKEY, rb:C1_ACCTBAL,
      rc:__map_ret__19} in 
      (_accmap.insert {ra:__sql_inline_agg_2, rb:C1_NATIONKEY, rc:C1_ACCTBAL,
       rd:__sum_ret__6 * __map_ret__19};
       _accmap)))) empty { ra:real, rb:int, rc:real, rd:real
      } @ { Collection })))) empty { ra:real, rb:int, rc:real, rd:real
      } @ { Collection }).fold ((\_accmap -> (\b3 ->
      bind b3 as {ra:__sql_inline_agg_2, rb:C1_NATIONKEY, rc:C1_ACCTBAL,
      rd:__prod_ret__30} in 
      (_accmap.insert {ra:__sql_inline_agg_2, rb:C1_NATIONKEY, rc:C1_ACCTBAL,
       rd:__prod_ret__30 * if C1_ACCTBAL < __sql_inline_agg_2 then 1 
       else 0};
       _accmap)))) empty { ra:real, rb:int, rc:real, rd:real
      } @ { Collection }).groupBy ((\b1 -> bind b1 as {ra:__sql_inline_agg_2,
      rb:C1_NATIONKEY, rc:C1_ACCTBAL, rd:__prod_ret__31} in C1_NATIONKEY))
      ((\__accv_8 -> (\b3 -> bind b3 as {ra:__sql_inline_agg_2,
      rb:C1_NATIONKEY, rc:C1_ACCTBAL, rd:__prod_ret__31} in __accv_8 +
      __prod_ret__31))) 0).fold ((\_accmap -> (\b3 ->
      bind b3 as {key:C1_NATIONKEY, value:__prod_ret__31} in 
      (_accmap.insert {key:C1_NATIONKEY, value:__prod_ret__31};_accmap))))
      empty { key:int, value:real } @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {key:C1_NATIONKEY, value:__prod_ret__31} in 
      (_accmap.insert {key:C1_NATIONKEY, value:__prod_ret__31 * ((({| key:int,
       value:int | let __sum_ret__7 =
       (let wrapped_lookup_value =
         bind map_QUERY22_mCUSTOMER1_L3_1_s6_buf as ind __x in
           (frontier_int_int {key:vid, value:__x.filter ((\b1 ->
              bind b1 as {ra:ra, rb:rb, rc:rc} in rb == ORDERS_CUSTKEY))}).fold
             ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
             (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
             value:int } @ { Collection } in
         case (wrapped_lookup_value.peek ()) of
           {Some unwrapped_value -> bind unwrapped_value as
             {key:_, value:projected_field} in projected_field}{None -> 0}) + 1
       in {key:__sum_ret__7, value:1}|} @ { Collection }).fold ((\_accmap ->
       (\b3 -> bind b3 as {key:__sql_inline_agg_1, value:__lift_ret__21} in 
       (_accmap.insert {key:__sql_inline_agg_1, value:__lift_ret__21 * let
        __val_ret__24 = 0 in
        if __val_ret__24 == __sql_inline_agg_1 then 1 else 0};
        _accmap)))) empty { key:int, value:int } @ { Collection }).fold
       ((\__accv_9 -> (\b3 -> bind b3 as {key:__sql_inline_agg_1,
       value:__prod_ret__32} in __accv_9 + __prod_ret__32))) 0 + ((({| key:int,
       value:int | let __map_ret__21 =
       let wrapped_lookup_value =
         bind map_QUERY22_mCUSTOMER1_L3_1_s6_buf as ind __x in
           (frontier_int_int {key:vid, value:__x.filter ((\b1 ->
              bind b1 as {ra:ra, rb:rb, rc:rc} in rb == ORDERS_CUSTKEY))}).fold
             ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
             (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
             value:int } @ { Collection } in
         case (wrapped_lookup_value.peek ()) of
           {Some unwrapped_value -> bind unwrapped_value as
             {key:_, value:projected_field} in projected_field}{None -> 0} in
       {key:__map_ret__21, value:1}|} @ { Collection }).fold ((\_accmap ->
       (\b3 -> bind b3 as {key:__sql_inline_agg_1, value:__lift_ret__23} in 
       (_accmap.insert {key:__sql_inline_agg_1, value:__lift_ret__23 * let
        __val_ret__25 = 0 in
        if __val_ret__25 == __sql_inline_agg_1 then 1 else 0};
        _accmap)))) empty { key:int, value:int } @ { Collection }).fold
       ((\__accv_10 -> (\b3 -> bind b3 as {key:__sql_inline_agg_1,
       value:__prod_ret__33} in __accv_10 + __prod_ret__33))) 0 * -1))};
       _accmap)))) empty { key:int, value:real } @ { Collection }).fold
      ((\_accmap -> (\b3 -> bind b3 as {key:C1_NATIONKEY,
      value:__prod_ret__35} in 
      (_accmap.insert {key:C1_NATIONKEY, value:__prod_ret__35};_accmap))))
      empty { key:int, value:real } @ { Collection }).groupBy ((\b1 ->
      bind b1 as {key:map_0, value:map_val} in map_0)) ((\acc -> (\b3 ->
      bind b3 as {key:map_0, value:map_val} in acc + map_val))) 0).fold
      ((\acc -> (\b3 -> bind b3 as {key:g, value:val} in 
      (acc.insert {key:g, value:val};acc)))) empty { key:int, value:real
      } @ { Collection } in delta_values)))) empty { key:int, value:real
    } @ { Collection }).filter ((\b1 -> bind b1 as {key:map_0,
    value:map_val} in 0 != map_val)) in
  ((nd_add_delta_to_int_float {ra:QUERY22, rb:true, rc:vid, rd:new_tuples});0))


declare insert_ORDERS_do_corrective_s6_m_QUERY22_mCUSTOMER1 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:int,
  rg:int, rh:string, ri:real, rj:int, rk:string, rl:string, rm:int, rn:string,
  ro:collection { ra:int, rb:int, rc:real, rd:real } @ { Collection }
  } -> int = (\b1 -> bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid,
  rd:hop, re:vid, rf:ORDERS_ORDERKEY, rg:ORDERS_CUSTKEY, rh:ORDERS_ORDERSTATUS,
  ri:ORDERS_TOTALPRICE, rj:ORDERS_ORDERDATE, rk:ORDERS_ORDERPRIORITY,
  rl:ORDERS_CLERK, rm:ORDERS_SHIPPRIORITY, rn:ORDERS_COMMENT,
  ro:delta_tuples} in let new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 -> bind b3 as {ra:delta_C1_NATIONKEY,
    rb:delta_C1_CUSTKEY, rc:delta_C1_ACCTBAL, rd:delta_QUERY22_mCUSTOMER1} in 
    _accext.combine (let __prod_ret__42 =
    (((if ORDERS_CUSTKEY == delta_C1_CUSTKEY then 1 else 0) * (({| key:real,
      value:int | let __map_ret__22 =
      case ((bind map_QUERY22_mCUSTOMER1_L2_1_s6_buf as ind __x in
        (frontier_float {key:vid, value:__x}).fold ((\acc -> (\b3 ->
          bind b3 as {key:vid, value:map_val} in 
          (acc.insert {i:map_val};acc)))) empty {i:real} @ { Collection }).peek
        ()) of {Some x -> x.i}{None -> 0} in
      {key:__map_ret__22, value:1}|} @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {key:__sql_inline_agg_2, value:__lift_ret__25} in 
      (_accmap.insert {key:__sql_inline_agg_2, value:__lift_ret__25 *
       if delta_C1_ACCTBAL < __sql_inline_agg_2 then 1 else 0};
       _accmap)))) empty { key:real, value:int } @ { Collection }).fold
      ((\__accv_11 -> (\b3 -> bind b3 as {key:__sql_inline_agg_2,
      value:__prod_ret__36} in __accv_11 + __prod_ret__36))) 0) * ((({|
      key:int, value:int | let __val_ret__27 = 0 in
      {key:__val_ret__27, value:1}|} @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {key:__sql_inline_agg_1, value:__lift_ret__26} in 
      (_accmap.insert {key:__sql_inline_agg_1, value:__lift_ret__26 * let
       __sum_ret__9 =
       (let wrapped_lookup_value =
         bind map_QUERY22_mCUSTOMER1_L3_1_s6_buf as ind __x in
           (frontier_int_int {key:vid, value:__x.filter ((\b1 ->
              bind b1 as {ra:ra, rb:rb, rc:rc} in rb == ORDERS_CUSTKEY))}).fold
             ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
             (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
             value:int } @ { Collection } in
         case (wrapped_lookup_value.peek ()) of
           {Some unwrapped_value -> bind unwrapped_value as
             {key:_, value:projected_field} in projected_field}{None -> 0}) + 1
       in if __sum_ret__9 == __sql_inline_agg_1 then 1 else 0};
       _accmap)))) empty { key:int, value:int } @ { Collection }).fold
      ((\__accv_12 -> (\b3 -> bind b3 as {key:__sql_inline_agg_1,
      value:__prod_ret__37} in __accv_12 + __prod_ret__37))) 0 + ((({| key:int,
      value:int | let __val_ret__29 = 0 in
      {key:__val_ret__29, value:1}|} @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {key:__sql_inline_agg_1, value:__lift_ret__28} in 
      (_accmap.insert {key:__sql_inline_agg_1, value:__lift_ret__28 * let
       __map_ret__24 =
       let wrapped_lookup_value =
         bind map_QUERY22_mCUSTOMER1_L3_1_s6_buf as ind __x in
           (frontier_int_int {key:vid, value:__x.filter ((\b1 ->
              bind b1 as {ra:ra, rb:rb, rc:rc} in rb == ORDERS_CUSTKEY))}).fold
             ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
             (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
             value:int } @ { Collection } in
         case (wrapped_lookup_value.peek ()) of
           {Some unwrapped_value -> bind unwrapped_value as
             {key:_, value:projected_field} in projected_field}{None -> 0} in
       if __map_ret__24 == __sql_inline_agg_1 then 1 else 0};
       _accmap)))) empty { key:int, value:int } @ { Collection }).fold
      ((\__accv_13 -> (\b3 -> bind b3 as {key:__sql_inline_agg_1,
      value:__prod_ret__38} in __accv_13 + __prod_ret__38))) 0 * -1))) *
      delta_QUERY22_mCUSTOMER1 in
    {| key:int, value:real | {key:delta_C1_NATIONKEY,
      value:__prod_ret__42}|} @ { Collection })))) empty { key:int, value:real
    } @ { Collection }).filter ((\b1 -> bind b1 as {key:map_0,
    value:map_val} in 0 != map_val)) in
  ((nd_add_delta_to_int_float {ra:QUERY22, rb:true, rc:vid, rd:new_tuples});0))


declare insert_ORDERS_do_corrective_s6_m_QUERY22_mCUSTOMER1_L3_1 : {
  ra:address, rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int,
  value:int }, rf:int, rg:int, rh:string, ri:real, rj:int, rk:string,
  rl:string, rm:int, rn:string, ro:collection { key:int, value:int
  } @ { Collection } } -> int = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:ORDERS_ORDERKEY,
  rg:ORDERS_CUSTKEY, rh:ORDERS_ORDERSTATUS, ri:ORDERS_TOTALPRICE,
  rj:ORDERS_ORDERDATE, rk:ORDERS_ORDERPRIORITY, rl:ORDERS_CLERK,
  rm:ORDERS_SHIPPRIORITY, rn:ORDERS_COMMENT, ro:delta_tuples} in let new_tuples
  =
  (delta_tuples.fold ((\_accext -> (\b3 -> bind b3 as {key:delta_C1_CUSTKEY,
    value:delta_QUERY22_mCUSTOMER1_L3_1} in _accext.combine (let delta_values =
    ((((((({| key:real, value:int | let __map_ret__25 =
      case ((bind map_QUERY22_mCUSTOMER1_L2_1_s6_buf as ind __x in
        (frontier_float {key:vid, value:__x}).fold ((\acc -> (\b3 ->
          bind b3 as {key:vid, value:map_val} in 
          (acc.insert {i:map_val};acc)))) empty {i:real} @ { Collection }).peek
        ()) of {Some x -> x.i}{None -> 0} in
      {key:__map_ret__25, value:1}|} @ { Collection }).fold ((\_accext ->
      (\b3 -> bind b3 as {key:__sql_inline_agg_2, value:__lift_ret__30} in 
      _accext.combine (((bind map_QUERY22_mCUSTOMER1_s6_buf as ind __x in
      (frontier_int_int_float_float {key:vid, value:__x.filter ((\b1 ->
         bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd, re:re} in rc ==
         ORDERS_CUSTKEY))}).fold ((\acc -> (\b3 -> bind b3 as {ra:vid,
        rb:map_0, rc:map_1, rd:map_2, re:map_val} in 
        (acc.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_val};acc)))) empty {
        ra:int, rb:int, rc:real, rd:real } @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {ra:C1_NATIONKEY, rb:ORDERS_CUSTKEY, rc:C1_ACCTBAL,
      rd:__map_ret__26} in 
      (_accmap.insert {ra:C1_NATIONKEY, rb:C1_ACCTBAL, rc:__map_ret__26};
       _accmap)))) empty { ra:int, rb:real, rc:real } @ { Collection }).fold
      ((\_accmap -> (\b3 -> bind b3 as {ra:C1_NATIONKEY, rb:C1_ACCTBAL,
      rc:__map_ret__26} in 
      (_accmap.insert {ra:__sql_inline_agg_2, rb:C1_NATIONKEY, rc:C1_ACCTBAL,
       rd:__lift_ret__30 * __map_ret__26};
       _accmap)))) empty { ra:real, rb:int, rc:real, rd:real
      } @ { Collection })))) empty { ra:real, rb:int, rc:real, rd:real
      } @ { Collection }).fold ((\_accmap -> (\b3 ->
      bind b3 as {ra:__sql_inline_agg_2, rb:C1_NATIONKEY, rc:C1_ACCTBAL,
      rd:__prod_ret__43} in 
      (_accmap.insert {ra:__sql_inline_agg_2, rb:C1_NATIONKEY, rc:C1_ACCTBAL,
       rd:__prod_ret__43 * if C1_ACCTBAL < __sql_inline_agg_2 then 1 
       else 0};
       _accmap)))) empty { ra:real, rb:int, rc:real, rd:real
      } @ { Collection }).groupBy ((\b1 -> bind b1 as {ra:__sql_inline_agg_2,
      rb:C1_NATIONKEY, rc:C1_ACCTBAL, rd:__prod_ret__44} in C1_NATIONKEY))
      ((\__accv_14 -> (\b3 -> bind b3 as {ra:__sql_inline_agg_2,
      rb:C1_NATIONKEY, rc:C1_ACCTBAL, rd:__prod_ret__44} in __accv_14 +
      __prod_ret__44))) 0).fold ((\_accmap -> (\b3 ->
      bind b3 as {key:C1_NATIONKEY, value:__prod_ret__44} in 
      (_accmap.insert {key:C1_NATIONKEY, value:__prod_ret__44};_accmap))))
      empty { key:int, value:real } @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {key:C1_NATIONKEY, value:__prod_ret__44} in 
      (_accmap.insert {key:C1_NATIONKEY, value:__prod_ret__44 *
       if ORDERS_CUSTKEY == delta_C1_CUSTKEY then 1 else 0};
       _accmap)))) empty { key:int, value:real } @ { Collection }).fold
      ((\_accmap -> (\b3 -> bind b3 as {key:C1_NATIONKEY,
      value:__prod_ret__50} in 
      (_accmap.insert {key:C1_NATIONKEY, value:__prod_ret__50 * ((({| key:int,
       value:int | let __val_ret__32 = 0 in
       {key:__val_ret__32, value:1}|} @ { Collection }).fold ((\_accmap ->
       (\b3 -> bind b3 as {key:__sql_inline_agg_1, value:__lift_ret__31} in 
       (_accmap.insert {key:__sql_inline_agg_1, value:__lift_ret__31 * ((let
        __sum_ret__11 =
        (let wrapped_lookup_value =
          bind map_QUERY22_mCUSTOMER1_L3_1_s6_buf as ind __x in
            (frontier_int_int {key:vid, value:__x.filter ((\b1 ->
               bind b1 as {ra:ra, rb:rb, rc:rc} in rb == ORDERS_CUSTKEY))}).fold
              ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
              (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
              value:int } @ { Collection } in
          case (wrapped_lookup_value.peek ()) of
            {Some unwrapped_value -> bind unwrapped_value as
              {key:_, value:projected_field} in projected_field}{None -> 0}) +
          (1 + delta_QUERY22_mCUSTOMER1_L3_1) in
        if __sum_ret__11 == __sql_inline_agg_1 then 1 else 0) + ((let
        __sum_ret__12 =
        (let wrapped_lookup_value =
          bind map_QUERY22_mCUSTOMER1_L3_1_s6_buf as ind __x in
            (frontier_int_int {key:vid, value:__x.filter ((\b1 ->
               bind b1 as {ra:ra, rb:rb, rc:rc} in rb == ORDERS_CUSTKEY))}).fold
              ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
              (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
              value:int } @ { Collection } in
          case (wrapped_lookup_value.peek ()) of
            {Some unwrapped_value -> bind unwrapped_value as
              {key:_, value:projected_field} in projected_field}{None -> 0}) +
          1 in if __sum_ret__12 == __sql_inline_agg_1 then 1 else 0) * -1))};
        _accmap)))) empty { key:int, value:int } @ { Collection }).fold
       ((\__accv_15 -> (\b3 -> bind b3 as {key:__sql_inline_agg_1,
       value:__prod_ret__46} in __accv_15 + __prod_ret__46))) 0 + ((({|
       key:int, value:int | let __val_ret__36 = 0 in
       {key:__val_ret__36, value:1}|} @ { Collection }).fold ((\_accmap ->
       (\b3 -> bind b3 as {key:__sql_inline_agg_1, value:__lift_ret__34} in 
       (_accmap.insert {key:__sql_inline_agg_1, value:__lift_ret__34 * ((let
        __sum_ret__14 =
        (let wrapped_lookup_value =
          bind map_QUERY22_mCUSTOMER1_L3_1_s6_buf as ind __x in
            (frontier_int_int {key:vid, value:__x.filter ((\b1 ->
               bind b1 as {ra:ra, rb:rb, rc:rc} in rb == ORDERS_CUSTKEY))}).fold
              ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
              (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
              value:int } @ { Collection } in
          case (wrapped_lookup_value.peek ()) of
            {Some unwrapped_value -> bind unwrapped_value as
              {key:_, value:projected_field} in projected_field}{None -> 0}) +
          delta_QUERY22_mCUSTOMER1_L3_1 in
        if __sum_ret__14 == __sql_inline_agg_1 then 1 else 0) + ((let
        __map_ret__30 =
        let wrapped_lookup_value =
          bind map_QUERY22_mCUSTOMER1_L3_1_s6_buf as ind __x in
            (frontier_int_int {key:vid, value:__x.filter ((\b1 ->
               bind b1 as {ra:ra, rb:rb, rc:rc} in rb == ORDERS_CUSTKEY))}).fold
              ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
              (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
              value:int } @ { Collection } in
          case (wrapped_lookup_value.peek ()) of
            {Some unwrapped_value -> bind unwrapped_value as
              {key:_, value:projected_field} in projected_field}{None -> 0} in
        if __map_ret__30 == __sql_inline_agg_1 then 1 else 0) * -1))};
        _accmap)))) empty { key:int, value:int } @ { Collection }).fold
       ((\__accv_16 -> (\b3 -> bind b3 as {key:__sql_inline_agg_1,
       value:__prod_ret__48} in __accv_16 + __prod_ret__48))) 0 * -1))};
       _accmap)))) empty { key:int, value:real } @ { Collection }).fold
      ((\_accmap -> (\b3 -> bind b3 as {key:C1_NATIONKEY,
      value:__prod_ret__51} in 
      (_accmap.insert {key:C1_NATIONKEY, value:__prod_ret__51};_accmap))))
      empty { key:int, value:real } @ { Collection } in delta_values))))
    empty { key:int, value:real } @ { Collection }).filter ((\b1 ->
    bind b1 as {key:map_0, value:map_val} in 0 != map_val)) in
  ((nd_add_delta_to_int_float {ra:QUERY22, rb:true, rc:vid, rd:new_tuples});0))


declare sw_delete_ORDERS : { ra:int, rb:int, rc:string, rd:real, re:int,
  rf:string, rg:string, rh:int, ri:string } -> () = (\args ->
  (sw_buf_delete_ORDERS.insert args;
   sw_trig_buf_idx.insert {i:3};
   sw_need_vid_cntr = sw_need_vid_cntr + 1))


declare sw_delete_ORDERS_send_fetch : { key:int, value:int } -> () = (\vid ->
  case (sw_buf_delete_ORDERS.peek ()) of
  {Some args ->
    (sw_buf_delete_ORDERS.erase args;
     bind args as
     {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
     in
     ((route_to_int {key:4, value:Some ORDERS_CUSTKEY}).iterate ((\b1 ->
      bind b1 as {i:ip} in 
      (nd_delete_ORDERS_do_complete_s9_trig, ip)<- {ra:vid, rb:ORDERS_ORDERKEY,
      rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
      rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
      ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT}));
      ((((empty { ra:address, rb:int, rc:int } @ { Collection }).combine (let
      sender_count =
      (route_to_ {key:3, value:()}).fold ((\count -> (\b3 ->
        bind b3 as {i:ip} in count + 1))) 0 in
      ((shuffle_QUERY22_mCUSTOMER1_L2_1_to_QUERY22 {ra:None immut, rb:empty {
          key:{ key:int, value:int }, value:real } @ { Collection }, rc:true}).fold
        ((\_accmap -> (\b3 -> bind b3 as {key:ip, value:tuples} in 
        (_accmap.insert {ra:ip, rb:8, rc:sender_count};_accmap)))) empty {
        ra:address, rb:int, rc:int } @ { Collection }).combine (let
        sender_count =
        (route_to_int_int_float {ra:2, rb:None immut, rc:None immut,
           rd:None immut}).fold ((\count -> (\b3 -> bind b3 as {i:ip} in count
          + 1))) 0 in
        ((shuffle_QUERY22_mCUSTOMER1_to_QUERY22_bind_0t0 {ra:None immut,
            rb:empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:real,
            re:real } @ { Collection }, rc:true}).fold ((\_accmap -> (\b3 ->
          bind b3 as {key:ip, value:tuples} in 
          (_accmap.insert {ra:ip, rb:8, rc:sender_count};_accmap)))) empty {
          ra:address, rb:int, rc:int } @ { Collection }).combine (let
          sender_count =
          (route_to_int {key:4, value:None immut}).fold ((\count -> (\b3 ->
            bind b3 as {i:ip} in count + 1))) 0 in
          (shuffle_QUERY22_mCUSTOMER1_L3_1_to_QUERY22 {ra:None immut,
             rb:empty { ra:{ key:int, value:int }, rb:int, rc:int
             } @ { Collection }, rc:true}).fold ((\_accmap -> (\b3 ->
            bind b3 as {key:ip, value:tuples} in 
            (_accmap.insert {ra:ip, rb:8, rc:sender_count};_accmap)))) empty {
            ra:address, rb:int, rc:int } @ { Collection })))).groupBy ((\b1 ->
      bind b1 as {ra:ip, rb:stmt_id, rc:count} in {key:ip, value:stmt_id}))
      ((\acc -> (\b3 -> bind b3 as {ra:ip, rb:stmt_id, rc:count} in acc +
      count))) 0).groupBy ((\b1 -> bind b1 as {key:b2, value:count} in 
      bind b2 as {key:ip, value:stmt_id} in ip)) ((\acc -> (\b3 ->
      bind b3 as {key:ip_and_stmt_id, value:count} in bind ip_and_stmt_id as
      {key:ip, value:stmt_id} in
      acc.combine ({| key:int, value:int | {key:stmt_id,
        value:count}|} @ { Collection })))) empty { key:int, value:int
      } @ { Collection }).iterate ((\b1 -> bind b1 as {key:addr,
      value:stmt_cnt_list} in 
      ((nd_delete_ORDERS_rcv_put, addr)<- {ra:me, rb:stmt_cnt_list, rc:vid,
       rd:ORDERS_ORDERKEY, re:ORDERS_CUSTKEY, rf:ORDERS_ORDERSTATUS,
       rg:ORDERS_TOTALPRICE, rh:ORDERS_ORDERDATE, ri:ORDERS_ORDERPRIORITY,
       rj:ORDERS_CLERK, rk:ORDERS_SHIPPRIORITY, rl:ORDERS_COMMENT};
       (sw_num_sent = sw_num_sent + 1;
        (case ((sw_ack_log.filter ((\b1 -> bind b1 as {key:key,
        value:value} in key == vid))).peek ()) of
        {Some x -> sw_ack_log.update x {key:vid, value:x.value + 1}}{None ->
                                                                    sw_ack_log.insert
                                                                    {key:vid,
                                                                    value:1}})))));
      ((((route_to_int {key:4, value:None immut}).fold ((\_accmap -> (\b3 ->
      bind b3 as {i:ip} in (_accmap.insert {ra:8, rb:4, rc:ip};_accmap))))
      empty { ra:int, rb:int, rc:address } @ { Collection }).combine
      (((route_to_int_int_float {ra:2, rb:None immut, rc:None immut,
           rd:None immut}).fold ((\_accmap -> (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {ra:8, rb:2, rc:ip};_accmap)))) empty { ra:int, rb:int,
      rc:address } @ { Collection }).combine
      (((route_to_ {key:3, value:()}).fold ((\_accmap -> (\b3 ->
      bind b3 as {i:ip} in (_accmap.insert {ra:8, rb:3, rc:ip};_accmap))))
      empty { ra:int, rb:int, rc:address } @ { Collection }).combine empty {
      ra:int, rb:int, rc:address } @ { Collection }))).groupBy ((\b1 ->
      bind b1 as {ra:stmt_id, rb:map_id, rc:ip} in ip)) ((\acc -> (\b3 ->
      bind b3 as {ra:stmt_id, rb:map_id, rc:ip} in 
      (acc.insert {key:stmt_id, value:map_id};acc)))) empty { key:int,
      value:int } @ { Collection }).iterate ((\b1 -> bind b1 as {key:ip,
      value:stmt_map_ids} in 
      (nd_delete_ORDERS_rcv_fetch, ip)<- {ra:stmt_map_ids, rb:vid,
      rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
      rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
      ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT}))))}
  {None ->
    error (print "unexpected missing arguments in sw_buf_delete_ORDERS")})


declare nd_delete_ORDERS_do_complete_s8 : { ra:{ key:int, value:int }, rb:int,
  rc:int, rd:string, re:real, rf:int, rg:string, rh:string, ri:int, rj:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
  rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
  rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
  rj:ORDERS_COMMENT} in let delta_values =
  (((((((((({| key:real, value:int | let __map_ret__11 =
    case ((bind map_QUERY22_mCUSTOMER1_L2_1_s8_buf as ind __x in
      (frontier_float {key:vid, value:__x}).fold ((\acc -> (\b3 ->
        bind b3 as {key:vid, value:map_val} in (acc.insert {i:map_val};acc))))
        empty {i:real} @ { Collection }).peek ()) of {Some x -> x.i}{None -> 0}
    in {key:__map_ret__11, value:1}|} @ { Collection }).fold ((\_accext ->
    (\b3 -> bind b3 as {key:__sql_inline_agg_2, value:__lift_ret__12} in 
    _accext.combine (({| key:int, value:int | let __val_ret__14 = 0 in
    {key:__val_ret__14, value:1}|} @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {key:__sql_inline_agg_1, value:__lift_ret__13} in 
    (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
     rc:__lift_ret__12 * __lift_ret__13};
     _accmap)))) empty { ra:real, rb:int, rc:int } @ { Collection })))) empty {
    ra:real, rb:int, rc:int } @ { Collection }).fold ((\_accext -> (\b3 ->
    bind b3 as {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
    rc:__prod_ret__20} in _accext.combine ((bind map_QUERY22_mCUSTOMER1_s8_buf
    as ind __x in
    (frontier_int_int_float_float {key:vid, value:__x}).fold ((\acc -> (\b3 ->
      bind b3 as {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val} in 
      (acc.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_val};acc)))) empty {
      ra:int, rb:int, rc:real, rd:real } @ { Collection }).fold ((\_accmap ->
    (\b3 -> bind b3 as {ra:C1_NATIONKEY, rb:C1_CUSTKEY, rc:C1_ACCTBAL,
    rd:__map_ret__12} in 
    (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
     rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__20 *
     __map_ret__12};
     _accmap)))) empty { ra:real, rb:int, rc:int, rd:int, re:real, rf:real
    } @ { Collection })))) empty { ra:real, rb:int, rc:int, rd:int, re:real,
    rf:real } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1, rc:C1_NATIONKEY,
    rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__21} in 
    (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
     rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__21 * let
     __sum_ret__3 =
     (let wrapped_lookup_value =
       bind map_QUERY22_mCUSTOMER1_L3_1_s8_buf as ind __x in
         (frontier_int_int {key:vid, value:__x.filter ((\b1 ->
            bind b1 as {ra:ra, rb:rb, rc:rc} in rb == C1_CUSTKEY))}).fold
           ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
           (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
           value:int } @ { Collection } in
       case (wrapped_lookup_value.peek ()) of
         {Some unwrapped_value -> bind unwrapped_value as
           {key:_, value:projected_field} in projected_field}{None -> 0}) +
       ((let __val_ret__15 = ORDERS_CUSTKEY in
       if __val_ret__15 == C1_CUSTKEY then 1 else 0) * -1) in
     if __sum_ret__3 == __sql_inline_agg_1 then 1 else 0};
     _accmap)))) empty { ra:real, rb:int, rc:int, rd:int, re:real, rf:real
    } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1, rc:C1_NATIONKEY,
    rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__22} in 
    (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
     rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__22 *
     if C1_ACCTBAL < __sql_inline_agg_2 then 1 else 0};
     _accmap)))) empty { ra:real, rb:int, rc:int, rd:int, re:real, rf:real
    } @ { Collection }).groupBy ((\b1 -> bind b1 as {ra:__sql_inline_agg_2,
    rb:__sql_inline_agg_1, rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL,
    rf:__prod_ret__23} in C1_NATIONKEY)) ((\__accv_6 -> (\b3 ->
    bind b3 as {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1, rc:C1_NATIONKEY,
    rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__23} in __accv_6 +
    __prod_ret__23))) 0).fold ((\_accmap -> (\b3 ->
    bind b3 as {key:C1_NATIONKEY, value:__prod_ret__23} in 
    (_accmap.insert {key:C1_NATIONKEY, value:__prod_ret__23};_accmap))))
    empty { key:int, value:real } @ { Collection }).combine (((((((({|
    key:real, value:int | let __map_ret__14 =
    case ((bind map_QUERY22_mCUSTOMER1_L2_1_s8_buf as ind __x in
      (frontier_float {key:vid, value:__x}).fold ((\acc -> (\b3 ->
        bind b3 as {key:vid, value:map_val} in (acc.insert {i:map_val};acc))))
        empty {i:real} @ { Collection }).peek ()) of {Some x -> x.i}{None -> 0}
    in {key:__map_ret__14, value:1}|} @ { Collection }).fold ((\_accext ->
    (\b3 -> bind b3 as {key:__sql_inline_agg_2, value:__lift_ret__16} in 
    _accext.combine (({| key:int, value:int | let __val_ret__17 = 0 in
    {key:__val_ret__17, value:1}|} @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {key:__sql_inline_agg_1, value:__lift_ret__17} in 
    (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
     rc:__lift_ret__16 * __lift_ret__17};
     _accmap)))) empty { ra:real, rb:int, rc:int } @ { Collection })))) empty {
    ra:real, rb:int, rc:int } @ { Collection }).fold ((\_accext -> (\b3 ->
    bind b3 as {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
    rc:__prod_ret__24} in _accext.combine ((bind map_QUERY22_mCUSTOMER1_s8_buf
    as ind __x in
    (frontier_int_int_float_float {key:vid, value:__x}).fold ((\acc -> (\b3 ->
      bind b3 as {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val} in 
      (acc.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_val};acc)))) empty {
      ra:int, rb:int, rc:real, rd:real } @ { Collection }).fold ((\_accmap ->
    (\b3 -> bind b3 as {ra:C1_NATIONKEY, rb:C1_CUSTKEY, rc:C1_ACCTBAL,
    rd:__map_ret__15} in 
    (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
     rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__24 *
     __map_ret__15};
     _accmap)))) empty { ra:real, rb:int, rc:int, rd:int, re:real, rf:real
    } @ { Collection })))) empty { ra:real, rb:int, rc:int, rd:int, re:real,
    rf:real } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1, rc:C1_NATIONKEY,
    rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__25} in 
    (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
     rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__25 * let
     __map_ret__16 =
     let wrapped_lookup_value =
       bind map_QUERY22_mCUSTOMER1_L3_1_s8_buf as ind __x in
         (frontier_int_int {key:vid, value:__x.filter ((\b1 ->
            bind b1 as {ra:ra, rb:rb, rc:rc} in rb == C1_CUSTKEY))}).fold
           ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
           (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
           value:int } @ { Collection } in
       case (wrapped_lookup_value.peek ()) of
         {Some unwrapped_value -> bind unwrapped_value as
           {key:_, value:projected_field} in projected_field}{None -> 0} in
     if __map_ret__16 == __sql_inline_agg_1 then 1 else 0};
     _accmap)))) empty { ra:real, rb:int, rc:int, rd:int, re:real, rf:real
    } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1, rc:C1_NATIONKEY,
    rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__26} in 
    (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
     rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__26 *
     if C1_ACCTBAL < __sql_inline_agg_2 then 1 else 0};
     _accmap)))) empty { ra:real, rb:int, rc:int, rd:int, re:real, rf:real
    } @ { Collection }).groupBy ((\b1 -> bind b1 as {ra:__sql_inline_agg_2,
    rb:__sql_inline_agg_1, rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL,
    rf:__prod_ret__27} in C1_NATIONKEY)) ((\__accv_7 -> (\b3 ->
    bind b3 as {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1, rc:C1_NATIONKEY,
    rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__27} in __accv_7 +
    __prod_ret__27))) 0).fold ((\_accmap -> (\b3 ->
    bind b3 as {key:C1_NATIONKEY, value:__prod_ret__27} in 
    (_accmap.insert {key:C1_NATIONKEY, value:__prod_ret__27};_accmap))))
    empty { key:int, value:real } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {key:C1_NATIONKEY, value:__prod_ret__27} in 
    (_accmap.insert {key:C1_NATIONKEY, value:__prod_ret__27 * -1};_accmap))))
    empty { key:int, value:real } @ { Collection })).fold ((\_accmap -> (\b3 ->
    bind b3 as {key:C1_NATIONKEY, value:__sum_ret__4} in 
    (_accmap.insert {key:C1_NATIONKEY, value:__sum_ret__4};_accmap)))) empty {
    key:int, value:real } @ { Collection }).groupBy ((\b1 ->
    bind b1 as {key:map_0, value:map_val} in map_0)) ((\acc -> (\b3 ->
    bind b3 as {key:map_0, value:map_val} in acc + map_val))) 0).fold ((\acc ->
    (\b3 -> bind b3 as {key:g, value:val} in 
    (acc.insert {key:g, value:val};acc)))) empty { key:int, value:real
    } @ { Collection } in
  ((nd_add_delta_to_int_float {ra:QUERY22, rb:false, rc:vid, rd:delta_values});
   (nd_complete_stmt_cntr_check {key:vid, value:8})))


declare nd_delete_ORDERS_do_complete_s9 : { ra:{ key:int, value:int }, rb:int,
  rc:int, rd:string, re:real, rf:int, rg:string, rh:string, ri:int, rj:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
  rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
  rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
  rj:ORDERS_COMMENT} in let __val_ret__19 = -1 in
  ((nd_add_delta_to_int_int {ra:QUERY22_mCUSTOMER1_L3_1, rb:false, rc:vid,
      rd:{| key:int, value:int | {key:ORDERS_CUSTKEY,
      value:__val_ret__19}|} @ { Collection }});
   let sent_msgs =
   nd_QUERY22_mCUSTOMER1_L3_1_send_correctives {ra:me, rb:9, rc:vid, rd:1,
     re:vid, rf:{| key:int, value:int | {key:ORDERS_CUSTKEY,
     value:__val_ret__19}|} @ { Collection }} in
   if sent_msgs == 0 then ()
     else
       nd_update_stmt_cntr_corr_map {ra:vid, rb:9, rc:1, rd:sent_msgs, re:true,
         rf:true}))


declare delete_ORDERS_do_corrective_s8_m_QUERY22_mCUSTOMER1_L2_1 : {
  ra:address, rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int,
  value:int }, rf:int, rg:int, rh:string, ri:real, rj:int, rk:string,
  rl:string, rm:int, rn:string, ro:collection {i:real} @ { Collection }
  } -> int = (\b1 -> bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid,
  rd:hop, re:vid, rf:ORDERS_ORDERKEY, rg:ORDERS_CUSTKEY, rh:ORDERS_ORDERSTATUS,
  ri:ORDERS_TOTALPRICE, rj:ORDERS_ORDERDATE, rk:ORDERS_ORDERPRIORITY,
  rl:ORDERS_CLERK, rm:ORDERS_SHIPPRIORITY, rn:ORDERS_COMMENT,
  ro:delta_tuples} in let new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 ->
    bind b3 as {i:delta_QUERY22_mCUSTOMER1_L2_1} in _accext.combine (let
    delta_values =
    (((((((((({| key:int, value:int | let __val_ret__40 = 0 in
      {key:__val_ret__40, value:1}|} @ { Collection }).fold ((\_accext ->
      (\b3 -> bind b3 as {key:__sql_inline_agg_1, value:__lift_ret__37} in 
      _accext.combine ((({| key:real, value:int | let __sum_ret__17 =
      case ((bind map_QUERY22_mCUSTOMER1_L2_1_s8_buf as ind __x in
        (frontier_float {key:vid, value:__x}).fold ((\acc -> (\b3 ->
          bind b3 as {key:vid, value:map_val} in 
          (acc.insert {i:map_val};acc)))) empty {i:real} @ { Collection }).peek
        ()) of {Some x -> x.i}{None -> 0} + delta_QUERY22_mCUSTOMER1_L2_1 in
      {key:__sum_ret__17, value:1}|} @ { Collection }).combine (({| key:real,
      value:int | let __map_ret__32 =
      case ((bind map_QUERY22_mCUSTOMER1_L2_1_s8_buf as ind __x in
        (frontier_float {key:vid, value:__x}).fold ((\acc -> (\b3 ->
          bind b3 as {key:vid, value:map_val} in 
          (acc.insert {i:map_val};acc)))) empty {i:real} @ { Collection }).peek
        ()) of {Some x -> x.i}{None -> 0} in
      {key:__map_ret__32, value:1}|} @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {key:__sql_inline_agg_2, value:__lift_ret__39} in 
      (_accmap.insert {key:__sql_inline_agg_2, value:__lift_ret__39 * -1};
       _accmap)))) empty { key:real, value:int } @ { Collection })).fold
      ((\_accmap -> (\b3 -> bind b3 as {key:__sql_inline_agg_2,
      value:__sum_ret__18} in 
      (_accmap.insert {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
       rc:__lift_ret__37 * __sum_ret__18};
       _accmap)))) empty { ra:int, rb:real, rc:int } @ { Collection }))))
      empty { ra:int, rb:real, rc:int } @ { Collection }).fold ((\_accext ->
      (\b3 -> bind b3 as {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
      rc:__prod_ret__54} in _accext.combine ((bind
      map_QUERY22_mCUSTOMER1_s8_buf as ind __x in
      (frontier_int_int_float_float {key:vid, value:__x}).fold ((\acc ->
        (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_1, rd:map_2,
        re:map_val} in 
        (acc.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_val};acc)))) empty {
        ra:int, rb:int, rc:real, rd:real } @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {ra:C1_NATIONKEY, rb:C1_CUSTKEY, rc:C1_ACCTBAL,
      rd:__map_ret__33} in 
      (_accmap.insert {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
       rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__54 *
       __map_ret__33};
       _accmap)))) empty { ra:int, rb:real, rc:int, rd:int, re:real, rf:real
      } @ { Collection })))) empty { ra:int, rb:real, rc:int, rd:int, re:real,
      rf:real } @ { Collection }).fold ((\_accmap -> (\b3 ->
      bind b3 as {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
      rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__55} in 
      (_accmap.insert {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
       rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__55 * let
       __sum_ret__19 =
       (let wrapped_lookup_value =
         bind map_QUERY22_mCUSTOMER1_L3_1_s8_buf as ind __x in
           (frontier_int_int {key:vid, value:__x.filter ((\b1 ->
              bind b1 as {ra:ra, rb:rb, rc:rc} in rb == C1_CUSTKEY))}).fold
             ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
             (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
             value:int } @ { Collection } in
         case (wrapped_lookup_value.peek ()) of
           {Some unwrapped_value -> bind unwrapped_value as
             {key:_, value:projected_field} in projected_field}{None -> 0}) +
         ((let __val_ret__43 = ORDERS_CUSTKEY in
         if __val_ret__43 == C1_CUSTKEY then 1 else 0) * -1) in
       if __sum_ret__19 == __sql_inline_agg_1 then 1 else 0};
       _accmap)))) empty { ra:int, rb:real, rc:int, rd:int, re:real, rf:real
      } @ { Collection }).fold ((\_accmap -> (\b3 ->
      bind b3 as {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
      rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__56} in 
      (_accmap.insert {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
       rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__56 *
       if C1_ACCTBAL < __sql_inline_agg_2 then 1 else 0};
       _accmap)))) empty { ra:int, rb:real, rc:int, rd:int, re:real, rf:real
      } @ { Collection }).groupBy ((\b1 -> bind b1 as {ra:__sql_inline_agg_1,
      rb:__sql_inline_agg_2, rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL,
      rf:__prod_ret__57} in C1_NATIONKEY)) ((\__accv_17 -> (\b3 ->
      bind b3 as {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
      rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__57} in 
      __accv_17 + __prod_ret__57))) 0).fold ((\_accmap -> (\b3 ->
      bind b3 as {key:C1_NATIONKEY, value:__prod_ret__57} in 
      (_accmap.insert {key:C1_NATIONKEY, value:__prod_ret__57};_accmap))))
      empty { key:int, value:real } @ { Collection }).combine (((((((({|
      key:int, value:int | let __val_ret__45 = 0 in
      {key:__val_ret__45, value:1}|} @ { Collection }).fold ((\_accext ->
      (\b3 -> bind b3 as {key:__sql_inline_agg_1, value:__lift_ret__42} in 
      _accext.combine ((({| key:real, value:int | let __sum_ret__20 =
      case ((bind map_QUERY22_mCUSTOMER1_L2_1_s8_buf as ind __x in
        (frontier_float {key:vid, value:__x}).fold ((\acc -> (\b3 ->
          bind b3 as {key:vid, value:map_val} in 
          (acc.insert {i:map_val};acc)))) empty {i:real} @ { Collection }).peek
        ()) of {Some x -> x.i}{None -> 0} + delta_QUERY22_mCUSTOMER1_L2_1 in
      {key:__sum_ret__20, value:1}|} @ { Collection }).combine (({| key:real,
      value:int | let __map_ret__36 =
      case ((bind map_QUERY22_mCUSTOMER1_L2_1_s8_buf as ind __x in
        (frontier_float {key:vid, value:__x}).fold ((\acc -> (\b3 ->
          bind b3 as {key:vid, value:map_val} in 
          (acc.insert {i:map_val};acc)))) empty {i:real} @ { Collection }).peek
        ()) of {Some x -> x.i}{None -> 0} in
      {key:__map_ret__36, value:1}|} @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {key:__sql_inline_agg_2, value:__lift_ret__44} in 
      (_accmap.insert {key:__sql_inline_agg_2, value:__lift_ret__44 * -1};
       _accmap)))) empty { key:real, value:int } @ { Collection })).fold
      ((\_accmap -> (\b3 -> bind b3 as {key:__sql_inline_agg_2,
      value:__sum_ret__21} in 
      (_accmap.insert {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
       rc:__lift_ret__42 * __sum_ret__21};
       _accmap)))) empty { ra:int, rb:real, rc:int } @ { Collection }))))
      empty { ra:int, rb:real, rc:int } @ { Collection }).fold ((\_accext ->
      (\b3 -> bind b3 as {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
      rc:__prod_ret__59} in _accext.combine ((bind
      map_QUERY22_mCUSTOMER1_s8_buf as ind __x in
      (frontier_int_int_float_float {key:vid, value:__x}).fold ((\acc ->
        (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_1, rd:map_2,
        re:map_val} in 
        (acc.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_val};acc)))) empty {
        ra:int, rb:int, rc:real, rd:real } @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {ra:C1_NATIONKEY, rb:C1_CUSTKEY, rc:C1_ACCTBAL,
      rd:__map_ret__37} in 
      (_accmap.insert {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
       rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__59 *
       __map_ret__37};
       _accmap)))) empty { ra:int, rb:real, rc:int, rd:int, re:real, rf:real
      } @ { Collection })))) empty { ra:int, rb:real, rc:int, rd:int, re:real,
      rf:real } @ { Collection }).fold ((\_accmap -> (\b3 ->
      bind b3 as {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
      rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__60} in 
      (_accmap.insert {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
       rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__60 * let
       __map_ret__38 =
       let wrapped_lookup_value =
         bind map_QUERY22_mCUSTOMER1_L3_1_s8_buf as ind __x in
           (frontier_int_int {key:vid, value:__x.filter ((\b1 ->
              bind b1 as {ra:ra, rb:rb, rc:rc} in rb == C1_CUSTKEY))}).fold
             ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
             (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
             value:int } @ { Collection } in
         case (wrapped_lookup_value.peek ()) of
           {Some unwrapped_value -> bind unwrapped_value as
             {key:_, value:projected_field} in projected_field}{None -> 0} in
       if __map_ret__38 == __sql_inline_agg_1 then 1 else 0};
       _accmap)))) empty { ra:int, rb:real, rc:int, rd:int, re:real, rf:real
      } @ { Collection }).fold ((\_accmap -> (\b3 ->
      bind b3 as {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
      rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__61} in 
      (_accmap.insert {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
       rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__61 *
       if C1_ACCTBAL < __sql_inline_agg_2 then 1 else 0};
       _accmap)))) empty { ra:int, rb:real, rc:int, rd:int, re:real, rf:real
      } @ { Collection }).groupBy ((\b1 -> bind b1 as {ra:__sql_inline_agg_1,
      rb:__sql_inline_agg_2, rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL,
      rf:__prod_ret__62} in C1_NATIONKEY)) ((\__accv_18 -> (\b3 ->
      bind b3 as {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
      rc:C1_NATIONKEY, rd:C1_CUSTKEY, re:C1_ACCTBAL, rf:__prod_ret__62} in 
      __accv_18 + __prod_ret__62))) 0).fold ((\_accmap -> (\b3 ->
      bind b3 as {key:C1_NATIONKEY, value:__prod_ret__62} in 
      (_accmap.insert {key:C1_NATIONKEY, value:__prod_ret__62};_accmap))))
      empty { key:int, value:real } @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {key:C1_NATIONKEY, value:__prod_ret__62} in 
      (_accmap.insert {key:C1_NATIONKEY, value:__prod_ret__62 * -1};_accmap))))
      empty { key:int, value:real } @ { Collection })).fold ((\_accmap ->
      (\b3 -> bind b3 as {key:C1_NATIONKEY, value:__sum_ret__22} in 
      (_accmap.insert {key:C1_NATIONKEY, value:__sum_ret__22};_accmap))))
      empty { key:int, value:real } @ { Collection }).groupBy ((\b1 ->
      bind b1 as {key:map_0, value:map_val} in map_0)) ((\acc -> (\b3 ->
      bind b3 as {key:map_0, value:map_val} in acc + map_val))) 0).fold
      ((\acc -> (\b3 -> bind b3 as {key:g, value:val} in 
      (acc.insert {key:g, value:val};acc)))) empty { key:int, value:real
      } @ { Collection } in delta_values)))) empty { key:int, value:real
    } @ { Collection }).filter ((\b1 -> bind b1 as {key:map_0,
    value:map_val} in 0 != map_val)) in
  ((nd_add_delta_to_int_float {ra:QUERY22, rb:true, rc:vid, rd:new_tuples});0))


declare delete_ORDERS_do_corrective_s8_m_QUERY22_mCUSTOMER1 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:int,
  rg:int, rh:string, ri:real, rj:int, rk:string, rl:string, rm:int, rn:string,
  ro:collection { ra:int, rb:int, rc:real, rd:real } @ { Collection }
  } -> int = (\b1 -> bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid,
  rd:hop, re:vid, rf:ORDERS_ORDERKEY, rg:ORDERS_CUSTKEY, rh:ORDERS_ORDERSTATUS,
  ri:ORDERS_TOTALPRICE, rj:ORDERS_ORDERDATE, rk:ORDERS_ORDERPRIORITY,
  rl:ORDERS_CLERK, rm:ORDERS_SHIPPRIORITY, rn:ORDERS_COMMENT,
  ro:delta_tuples} in let new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 -> bind b3 as {ra:delta_C1_NATIONKEY,
    rb:delta_C1_CUSTKEY, rc:delta_C1_ACCTBAL, rd:delta_QUERY22_mCUSTOMER1} in 
    _accext.combine (let __prod_ret__72 =
    ((((({| key:int, value:int | let __sum_ret__23 =
      (let wrapped_lookup_value =
        bind map_QUERY22_mCUSTOMER1_L3_1_s8_buf as ind __x in
          (frontier_int_int {key:vid, value:__x.filter ((\b1 ->
             bind b1 as {ra:ra, rb:rb, rc:rc} in rb == delta_C1_CUSTKEY))}).fold
            ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
            (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
            value:int } @ { Collection } in
        case (wrapped_lookup_value.peek ()) of
          {Some unwrapped_value -> bind unwrapped_value as
            {key:_, value:projected_field} in projected_field}{None -> 0}) +
        ((if ORDERS_CUSTKEY == delta_C1_CUSTKEY then 1 else 0) * -1) in
      {key:__sum_ret__23, value:1}|} @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {key:__sql_inline_agg_1, value:__lift_ret__46} in 
      (_accmap.insert {key:__sql_inline_agg_1, value:__lift_ret__46 * let
       __val_ret__50 = 0 in
       if __val_ret__50 == __sql_inline_agg_1 then 1 else 0};
       _accmap)))) empty { key:int, value:int } @ { Collection }).fold
      ((\_accext -> (\b3 -> bind b3 as {key:__sql_inline_agg_1,
      value:__prod_ret__65} in _accext.combine (({| key:real, value:int | let
      __map_ret__40 =
      case ((bind map_QUERY22_mCUSTOMER1_L2_1_s8_buf as ind __x in
        (frontier_float {key:vid, value:__x}).fold ((\acc -> (\b3 ->
          bind b3 as {key:vid, value:map_val} in 
          (acc.insert {i:map_val};acc)))) empty {i:real} @ { Collection }).peek
        ()) of {Some x -> x.i}{None -> 0} in
      {key:__map_ret__40, value:1}|} @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {key:__sql_inline_agg_2, value:__lift_ret__48} in 
      (_accmap.insert {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
       rc:__prod_ret__65 * __lift_ret__48};
       _accmap)))) empty { ra:int, rb:real, rc:int } @ { Collection }))))
      empty { ra:int, rb:real, rc:int } @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
      rc:__prod_ret__66} in 
      (_accmap.insert {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
       rc:__prod_ret__66 * if delta_C1_ACCTBAL < __sql_inline_agg_2 then 1
       else 0};
       _accmap)))) empty { ra:int, rb:real, rc:int } @ { Collection }).fold
      ((\__accv_19 -> (\b3 -> bind b3 as {ra:__sql_inline_agg_1,
      rb:__sql_inline_agg_2, rc:__prod_ret__67} in __accv_19 +
      __prod_ret__67))) 0 + ((((({| key:int, value:int | let __map_ret__41 =
      let wrapped_lookup_value =
        bind map_QUERY22_mCUSTOMER1_L3_1_s8_buf as ind __x in
          (frontier_int_int {key:vid, value:__x.filter ((\b1 ->
             bind b1 as {ra:ra, rb:rb, rc:rc} in rb == delta_C1_CUSTKEY))}).fold
            ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
            (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
            value:int } @ { Collection } in
        case (wrapped_lookup_value.peek ()) of
          {Some unwrapped_value -> bind unwrapped_value as
            {key:_, value:projected_field} in projected_field}{None -> 0} in
      {key:__map_ret__41, value:1}|} @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {key:__sql_inline_agg_1, value:__lift_ret__49} in 
      (_accmap.insert {key:__sql_inline_agg_1, value:__lift_ret__49 * let
       __val_ret__51 = 0 in
       if __val_ret__51 == __sql_inline_agg_1 then 1 else 0};
       _accmap)))) empty { key:int, value:int } @ { Collection }).fold
      ((\_accext -> (\b3 -> bind b3 as {key:__sql_inline_agg_1,
      value:__prod_ret__68} in _accext.combine (({| key:real, value:int | let
      __map_ret__42 =
      case ((bind map_QUERY22_mCUSTOMER1_L2_1_s8_buf as ind __x in
        (frontier_float {key:vid, value:__x}).fold ((\acc -> (\b3 ->
          bind b3 as {key:vid, value:map_val} in 
          (acc.insert {i:map_val};acc)))) empty {i:real} @ { Collection }).peek
        ()) of {Some x -> x.i}{None -> 0} in
      {key:__map_ret__42, value:1}|} @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {key:__sql_inline_agg_2, value:__lift_ret__51} in 
      (_accmap.insert {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
       rc:__prod_ret__68 * __lift_ret__51};
       _accmap)))) empty { ra:int, rb:real, rc:int } @ { Collection }))))
      empty { ra:int, rb:real, rc:int } @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
      rc:__prod_ret__69} in 
      (_accmap.insert {ra:__sql_inline_agg_1, rb:__sql_inline_agg_2,
       rc:__prod_ret__69 * if delta_C1_ACCTBAL < __sql_inline_agg_2 then 1
       else 0};
       _accmap)))) empty { ra:int, rb:real, rc:int } @ { Collection }).fold
      ((\__accv_20 -> (\b3 -> bind b3 as {ra:__sql_inline_agg_1,
      rb:__sql_inline_agg_2, rc:__prod_ret__70} in __accv_20 +
      __prod_ret__70))) 0 * -1)) * delta_QUERY22_mCUSTOMER1 in
    {| key:int, value:real | {key:delta_C1_NATIONKEY,
      value:__prod_ret__72}|} @ { Collection })))) empty { key:int, value:real
    } @ { Collection }).filter ((\b1 -> bind b1 as {key:map_0,
    value:map_val} in 0 != map_val)) in
  ((nd_add_delta_to_int_float {ra:QUERY22, rb:true, rc:vid, rd:new_tuples});0))


declare delete_ORDERS_do_corrective_s8_m_QUERY22_mCUSTOMER1_L3_1 : {
  ra:address, rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int,
  value:int }, rf:int, rg:int, rh:string, ri:real, rj:int, rk:string,
  rl:string, rm:int, rn:string, ro:collection { key:int, value:int
  } @ { Collection } } -> int = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:ORDERS_ORDERKEY,
  rg:ORDERS_CUSTKEY, rh:ORDERS_ORDERSTATUS, ri:ORDERS_TOTALPRICE,
  rj:ORDERS_ORDERDATE, rk:ORDERS_ORDERPRIORITY, rl:ORDERS_CLERK,
  rm:ORDERS_SHIPPRIORITY, rn:ORDERS_COMMENT, ro:delta_tuples} in let new_tuples
  =
  (delta_tuples.fold ((\_accext -> (\b3 -> bind b3 as {key:delta_C1_CUSTKEY,
    value:delta_QUERY22_mCUSTOMER1_L3_1} in _accext.combine (let delta_values =
    (((((((((({| key:real, value:int | let __map_ret__43 =
      case ((bind map_QUERY22_mCUSTOMER1_L2_1_s8_buf as ind __x in
        (frontier_float {key:vid, value:__x}).fold ((\acc -> (\b3 ->
          bind b3 as {key:vid, value:map_val} in 
          (acc.insert {i:map_val};acc)))) empty {i:real} @ { Collection }).peek
        ()) of {Some x -> x.i}{None -> 0} in
      {key:__map_ret__43, value:1}|} @ { Collection }).fold ((\_accext ->
      (\b3 -> bind b3 as {key:__sql_inline_agg_2, value:__lift_ret__52} in 
      _accext.combine (({| key:int, value:int | let __val_ret__54 = 0 in
      {key:__val_ret__54, value:1}|} @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {key:__sql_inline_agg_1, value:__lift_ret__53} in 
      (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
       rc:__lift_ret__52 * __lift_ret__53};
       _accmap)))) empty { ra:real, rb:int, rc:int } @ { Collection }))))
      empty { ra:real, rb:int, rc:int } @ { Collection }).fold ((\_accext ->
      (\b3 -> bind b3 as {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
      rc:__prod_ret__76} in _accext.combine (((bind
      map_QUERY22_mCUSTOMER1_s8_buf as ind __x in
      (frontier_int_int_float_float {key:vid, value:__x.filter ((\b1 ->
         bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd, re:re} in rc ==
         delta_C1_CUSTKEY))}).fold ((\acc -> (\b3 -> bind b3 as {ra:vid,
        rb:map_0, rc:map_1, rd:map_2, re:map_val} in 
        (acc.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_val};acc)))) empty {
        ra:int, rb:int, rc:real, rd:real } @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {ra:C1_NATIONKEY, rb:delta_C1_CUSTKEY, rc:C1_ACCTBAL,
      rd:__map_ret__44} in 
      (_accmap.insert {ra:C1_NATIONKEY, rb:C1_ACCTBAL, rc:__map_ret__44};
       _accmap)))) empty { ra:int, rb:real, rc:real } @ { Collection }).fold
      ((\_accmap -> (\b3 -> bind b3 as {ra:C1_NATIONKEY, rb:C1_ACCTBAL,
      rc:__map_ret__44} in 
      (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
       rc:C1_NATIONKEY, rd:C1_ACCTBAL, re:__prod_ret__76 * __map_ret__44};
       _accmap)))) empty { ra:real, rb:int, rc:int, rd:real, re:real
      } @ { Collection })))) empty { ra:real, rb:int, rc:int, rd:real, re:real
      } @ { Collection }).fold ((\_accmap -> (\b3 ->
      bind b3 as {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
      rc:C1_NATIONKEY, rd:C1_ACCTBAL, re:__prod_ret__77} in 
      (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
       rc:C1_NATIONKEY, rd:C1_ACCTBAL, re:__prod_ret__77 * ((let __sum_ret__25
       =
       ((let wrapped_lookup_value =
         bind map_QUERY22_mCUSTOMER1_L3_1_s8_buf as ind __x in
           (frontier_int_int {key:vid, value:__x.filter ((\b1 ->
              bind b1 as {ra:ra, rb:rb, rc:rc} in rb == delta_C1_CUSTKEY))}).fold
             ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
             (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
             value:int } @ { Collection } in
         case (wrapped_lookup_value.peek ()) of
           {Some unwrapped_value -> bind unwrapped_value as
             {key:_, value:projected_field} in projected_field}{None -> 0}) +
         ((if ORDERS_CUSTKEY == delta_C1_CUSTKEY then 1 else 0) * -1)) +
         delta_QUERY22_mCUSTOMER1_L3_1 in
       if __sum_ret__25 == __sql_inline_agg_1 then 1 else 0) + ((let
       __sum_ret__26 =
       (let wrapped_lookup_value =
         bind map_QUERY22_mCUSTOMER1_L3_1_s8_buf as ind __x in
           (frontier_int_int {key:vid, value:__x.filter ((\b1 ->
              bind b1 as {ra:ra, rb:rb, rc:rc} in rb == delta_C1_CUSTKEY))}).fold
             ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
             (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
             value:int } @ { Collection } in
         case (wrapped_lookup_value.peek ()) of
           {Some unwrapped_value -> bind unwrapped_value as
             {key:_, value:projected_field} in projected_field}{None -> 0}) +
         ((if ORDERS_CUSTKEY == delta_C1_CUSTKEY then 1 else 0) * -1) in
       if __sum_ret__26 == __sql_inline_agg_1 then 1 else 0) * -1))};
       _accmap)))) empty { ra:real, rb:int, rc:int, rd:real, re:real
      } @ { Collection }).fold ((\_accmap -> (\b3 ->
      bind b3 as {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
      rc:C1_NATIONKEY, rd:C1_ACCTBAL, re:__prod_ret__78} in 
      (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
       rc:C1_NATIONKEY, rd:C1_ACCTBAL, re:__prod_ret__78 *
       if C1_ACCTBAL < __sql_inline_agg_2 then 1 else 0};
       _accmap)))) empty { ra:real, rb:int, rc:int, rd:real, re:real
      } @ { Collection }).groupBy ((\b1 -> bind b1 as {ra:__sql_inline_agg_2,
      rb:__sql_inline_agg_1, rc:C1_NATIONKEY, rd:C1_ACCTBAL,
      re:__prod_ret__79} in C1_NATIONKEY)) ((\__accv_21 -> (\b3 ->
      bind b3 as {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
      rc:C1_NATIONKEY, rd:C1_ACCTBAL, re:__prod_ret__79} in __accv_21 +
      __prod_ret__79))) 0).fold ((\_accmap -> (\b3 ->
      bind b3 as {key:C1_NATIONKEY, value:__prod_ret__79} in 
      (_accmap.insert {key:C1_NATIONKEY, value:__prod_ret__79};_accmap))))
      empty { key:int, value:real } @ { Collection }).combine (((((((({|
      key:real, value:int | let __map_ret__47 =
      case ((bind map_QUERY22_mCUSTOMER1_L2_1_s8_buf as ind __x in
        (frontier_float {key:vid, value:__x}).fold ((\acc -> (\b3 ->
          bind b3 as {key:vid, value:map_val} in 
          (acc.insert {i:map_val};acc)))) empty {i:real} @ { Collection }).peek
        ()) of {Some x -> x.i}{None -> 0} in
      {key:__map_ret__47, value:1}|} @ { Collection }).fold ((\_accext ->
      (\b3 -> bind b3 as {key:__sql_inline_agg_2, value:__lift_ret__56} in 
      _accext.combine (({| key:int, value:int | let __val_ret__59 = 0 in
      {key:__val_ret__59, value:1}|} @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {key:__sql_inline_agg_1, value:__lift_ret__57} in 
      (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
       rc:__lift_ret__56 * __lift_ret__57};
       _accmap)))) empty { ra:real, rb:int, rc:int } @ { Collection }))))
      empty { ra:real, rb:int, rc:int } @ { Collection }).fold ((\_accext ->
      (\b3 -> bind b3 as {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
      rc:__prod_ret__81} in _accext.combine (((bind
      map_QUERY22_mCUSTOMER1_s8_buf as ind __x in
      (frontier_int_int_float_float {key:vid, value:__x.filter ((\b1 ->
         bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd, re:re} in rc ==
         delta_C1_CUSTKEY))}).fold ((\acc -> (\b3 -> bind b3 as {ra:vid,
        rb:map_0, rc:map_1, rd:map_2, re:map_val} in 
        (acc.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_val};acc)))) empty {
        ra:int, rb:int, rc:real, rd:real } @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {ra:C1_NATIONKEY, rb:delta_C1_CUSTKEY, rc:C1_ACCTBAL,
      rd:__map_ret__48} in 
      (_accmap.insert {ra:C1_NATIONKEY, rb:C1_ACCTBAL, rc:__map_ret__48};
       _accmap)))) empty { ra:int, rb:real, rc:real } @ { Collection }).fold
      ((\_accmap -> (\b3 -> bind b3 as {ra:C1_NATIONKEY, rb:C1_ACCTBAL,
      rc:__map_ret__48} in 
      (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
       rc:C1_NATIONKEY, rd:C1_ACCTBAL, re:__prod_ret__81 * __map_ret__48};
       _accmap)))) empty { ra:real, rb:int, rc:int, rd:real, re:real
      } @ { Collection })))) empty { ra:real, rb:int, rc:int, rd:real, re:real
      } @ { Collection }).fold ((\_accmap -> (\b3 ->
      bind b3 as {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
      rc:C1_NATIONKEY, rd:C1_ACCTBAL, re:__prod_ret__82} in 
      (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
       rc:C1_NATIONKEY, rd:C1_ACCTBAL, re:__prod_ret__82 * ((let __sum_ret__28
       =
       (let wrapped_lookup_value =
         bind map_QUERY22_mCUSTOMER1_L3_1_s8_buf as ind __x in
           (frontier_int_int {key:vid, value:__x.filter ((\b1 ->
              bind b1 as {ra:ra, rb:rb, rc:rc} in rb == delta_C1_CUSTKEY))}).fold
             ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
             (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
             value:int } @ { Collection } in
         case (wrapped_lookup_value.peek ()) of
           {Some unwrapped_value -> bind unwrapped_value as
             {key:_, value:projected_field} in projected_field}{None -> 0}) +
         delta_QUERY22_mCUSTOMER1_L3_1 in
       if __sum_ret__28 == __sql_inline_agg_1 then 1 else 0) + ((let
       __map_ret__50 =
       let wrapped_lookup_value =
         bind map_QUERY22_mCUSTOMER1_L3_1_s8_buf as ind __x in
           (frontier_int_int {key:vid, value:__x.filter ((\b1 ->
              bind b1 as {ra:ra, rb:rb, rc:rc} in rb == delta_C1_CUSTKEY))}).fold
             ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
             (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
             value:int } @ { Collection } in
         case (wrapped_lookup_value.peek ()) of
           {Some unwrapped_value -> bind unwrapped_value as
             {key:_, value:projected_field} in projected_field}{None -> 0} in
       if __map_ret__50 == __sql_inline_agg_1 then 1 else 0) * -1))};
       _accmap)))) empty { ra:real, rb:int, rc:int, rd:real, re:real
      } @ { Collection }).fold ((\_accmap -> (\b3 ->
      bind b3 as {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
      rc:C1_NATIONKEY, rd:C1_ACCTBAL, re:__prod_ret__83} in 
      (_accmap.insert {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
       rc:C1_NATIONKEY, rd:C1_ACCTBAL, re:__prod_ret__83 *
       if C1_ACCTBAL < __sql_inline_agg_2 then 1 else 0};
       _accmap)))) empty { ra:real, rb:int, rc:int, rd:real, re:real
      } @ { Collection }).groupBy ((\b1 -> bind b1 as {ra:__sql_inline_agg_2,
      rb:__sql_inline_agg_1, rc:C1_NATIONKEY, rd:C1_ACCTBAL,
      re:__prod_ret__84} in C1_NATIONKEY)) ((\__accv_22 -> (\b3 ->
      bind b3 as {ra:__sql_inline_agg_2, rb:__sql_inline_agg_1,
      rc:C1_NATIONKEY, rd:C1_ACCTBAL, re:__prod_ret__84} in __accv_22 +
      __prod_ret__84))) 0).fold ((\_accmap -> (\b3 ->
      bind b3 as {key:C1_NATIONKEY, value:__prod_ret__84} in 
      (_accmap.insert {key:C1_NATIONKEY, value:__prod_ret__84};_accmap))))
      empty { key:int, value:real } @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {key:C1_NATIONKEY, value:__prod_ret__84} in 
      (_accmap.insert {key:C1_NATIONKEY, value:__prod_ret__84 * -1};_accmap))))
      empty { key:int, value:real } @ { Collection })).fold ((\_accmap ->
      (\b3 -> bind b3 as {key:C1_NATIONKEY, value:__sum_ret__30} in 
      (_accmap.insert {key:C1_NATIONKEY, value:__sum_ret__30};_accmap))))
      empty { key:int, value:real } @ { Collection }).groupBy ((\b1 ->
      bind b1 as {key:map_0, value:map_val} in map_0)) ((\acc -> (\b3 ->
      bind b3 as {key:map_0, value:map_val} in acc + map_val))) 0).fold
      ((\acc -> (\b3 -> bind b3 as {key:g, value:val} in 
      (acc.insert {key:g, value:val};acc)))) empty { key:int, value:real
      } @ { Collection } in delta_values)))) empty { key:int, value:real
    } @ { Collection }).filter ((\b1 -> bind b1 as {key:map_0,
    value:map_val} in 0 != map_val)) in
  ((nd_add_delta_to_int_float {ra:QUERY22, rb:true, rc:vid, rd:new_tuples});0))


trigger ms_rcv_sw_init_ack : () = (\_u ->
  (ms_rcv_sw_init_ack_cnt = ms_rcv_sw_init_ack_cnt + 1;
   (if ms_rcv_sw_init_ack_cnt == num_switches
   then
     (ms_start_time = now_int ();
      (sw_rcv_token, sw_next_switch_addr)<- g_start_vid;
      (tm_insert_timer, timer_addr)<- {ra:ms_gc_interval, rb:0, rc:me})
   else ())))
trigger sw_rcv_init : () = (\_u ->
  (sw_init = true;
   (sw_driver_trig, me)<- ();
   (ms_rcv_sw_init_ack, master_addr)<- ()))
trigger ms_rcv_jobs_ack : () = (\_u ->
  (ms_rcv_jobs_ack_cnt = ms_rcv_jobs_ack_cnt + 1;
   (if ms_rcv_jobs_ack_cnt == num_peers
   then
     (switches.iterate ((\b1 -> bind b1 as {i:addr} in 
      (sw_rcv_init, addr)<- ()))) else ())))
trigger rcv_jobs : collection { key:address, value:int } @ { Map } =
  (\jobs_in ->
  (jobs = jobs_in;
   timer_addr = case ((jobs.filter ((\b1 -> bind b1 as {key:addr,
   value:job} in job == job_timer))).peek ()) of
   {Some timer -> timer.key}{None -> error (print "no timer peer found")};
   nodes = (jobs.filter ((\b1 -> bind b1 as {key:addr, value:job} in job ==
   job_node))).fold ((\_accmap -> (\x ->
   (_accmap.insert ({i:x.key});_accmap)))) empty {i:address} @ { Collection };
   num_nodes = nodes.size ();
   switches = (jobs.filter ((\b1 -> bind b1 as {key:addr, value:job} in job ==
   job_switch))).fold ((\_accmap -> (\x ->
   (_accmap.insert ({i:x.key});_accmap)))) empty {i:address} @ { Collection };
   num_switches = switches.size ();
   (if job <= job_switch
   then sw_next_switch_addr = let addr_list =
     (switches.fold ((\acc_conv -> (\b3 -> bind b3 as {i:x} in 
       (acc_conv.insert {i:x};acc_conv)))) empty {i:address} @ { Seq }).sort
       ((\b2 -> (\b3 -> bind b2 as {i:addr1} in bind b3 as {i:addr2} in 
       if addr1 < addr2 then -1 else 1))) in
     case (addr_list.peek ()) of
       {Some first_addr -> (addr_list.fold ((\b2 -> (\b5 ->
         bind b2 as {key:take, value:result} in bind b5 as {i:x} in if take
         then {key:false, value:x}
         else if x == me then {key:true, value:result}
           else {key:take, value:result}))) {key:false,
         value:first_addr.i}).value}{None ->
                                      error (print "no addresses in addr_list")}
   else ());
   nodes.iterate ((\b1 -> bind b1 as {i:addr} in add_node addr));
   (ms_rcv_jobs_ack, master_addr)<- ()))
trigger ms_rcv_job : { key:address, value:int } = (\b1 -> bind b1 as {key:addr,
  value:job} in 
  (jobs.insert {key:addr, value:job};
   ms_rcv_job_cnt = ms_rcv_job_cnt + 1;
   (if ms_rcv_job_cnt == num_peers
   then my_peers.iterate ((\b1 -> bind b1 as {i:addr} in 
     (rcv_jobs, addr)<- jobs)) else ())))
trigger rcv_master_addr : address = (\addr ->
  (master_addr = addr;(ms_rcv_job, addr)<- {key:me, value:job}))
trigger ms_send_addr_self : () = (\_u -> my_peers.iterate ((\b1 ->
  bind b1 as {i:addr} in (rcv_master_addr, addr)<- me)))
trigger shutdown_trig : () = (\_u -> haltEngine ())
trigger ms_shutdown : () = (\_u -> if ms_rcv_node_done_cnt == num_nodes
  then my_peers.iterate ((\b1 -> bind b1 as {i:addr} in 
    (shutdown_trig, addr)<- ())) else ())
trigger ms_rcv_node_done : bool = (\done -> if done
  then
    (ms_rcv_node_done_cnt = ms_rcv_node_done_cnt + 1;
     (if ms_rcv_node_done_cnt == num_nodes
     then (ms_end_time = now_int ();(ms_shutdown, me)<- ()) else ()))
  else ms_rcv_node_done_cnt = ms_rcv_node_done_cnt - 1)
trigger nd_rcv_done : () = (\_u ->
  (nd_rcvd_sys_done = true;
   (if not nd_sent_done and nd_stmt_cntrs.size () == 0
   then ((ms_rcv_node_done, master_addr)<- true;nd_sent_done = true) 
   else ())))
trigger ms_rcv_switch_done : () = (\_u ->
  (ms_rcv_switch_done_cnt = ms_rcv_switch_done_cnt + 1;
   (if ms_rcv_switch_done_cnt == num_switches
   then nodes.iterate ((\b1 -> bind b1 as {i:addr} in 
     (nd_rcv_done, addr)<- ())) else ())))
trigger sw_ack_rcv : { key:address, value:{ key:int, value:int } } = (\b1 ->
  bind b1 as {key:addr, value:vid} in 
  (sw_num_ack = sw_num_ack + 1;
   (case ((sw_ack_log.filter ((\b1 -> bind b1 as {key:key, value:value} in key
   == vid))).peek ()) of
   {Some x -> if x.value == 0 then sw_ack_log.erase x
     else sw_ack_log.update x {key:vid, value:x.value - 1}}{None -> ()});
   (if not sw_sent_done and (sw_trig_buf_idx.size () == 0 and (sw_num_ack ==
      sw_num_sent and sw_seen_sentry == true))
   then ((ms_rcv_switch_done, master_addr)<- ();sw_sent_done = true) 
   else ())))
trigger ms_rcv_gc_vid : { key:address, value:{ key:int, value:int } } =
  (\data ->
  (ms_gc_vid_map.insert data;
   ms_gc_vid_ctr = ms_gc_vid_ctr + 1;
   (if ms_gc_vid_ctr >= ms_num_gc_expected
   then let min_vid =
     ms_gc_vid_map.fold ((\min_vid -> (\b3 -> bind b3 as {key:addr,
       value:vid} in if min_vid < vid then min_vid else vid))) g_min_vid in
     (ms_gc_vid_ctr = 0;
      ms_gc_vid_map = empty { key:address, value:{ key:int, value:int }
      } @ { Map };
      my_peers.iterate ((\b1 -> bind b1 as {i:addr} in 
      (do_gc, addr)<- min_vid));
      (tm_insert_timer, timer_addr)<- {ra:ms_gc_interval, rb:0, rc:me})
   else ())))
trigger rcv_req_gc_vid : () = (\_u -> if job == job_switch or job == job_master
  then (ms_rcv_gc_vid, master_addr)<- {key:me, value:sw_ack_log.fold
    ((\min_vid -> (\b3 -> bind b3 as {key:vid, value:count} in if min_vid < vid
    then min_vid else vid))) sw_highest_vid}
  else if job == job_node
    then (ms_rcv_gc_vid, master_addr)<- {key:me, value:nd_stmt_cntrs.fold
      ((\min_vid -> (\b3 -> bind b3 as {key:vid_stmt_id, value:ctr_corrs} in 
      if min_vid < vid_stmt_id.key then min_vid else vid_stmt_id.key)))
      g_max_vid} else ())
trigger ms_send_gc_req : () = (\_u -> my_peers.iterate ((\b1 ->
  bind b1 as {i:addr} in (rcv_req_gc_vid, addr)<- ())))
trigger do_gc : { key:int, value:int } = (\min_gc_vid ->
  (let temp = empty { key:{ key:int, value:int }, value:int } @ { Set } in
   (nd_log_master.iterate ((\b1 -> bind b1 as {key:vid, value:stmt_id} in 
    if vid < min_gc_vid then temp.insert {key:vid, value:stmt_id} else ()));
    temp.iterate ((\val -> nd_log_master.erase val)));
   let temp =
   empty { key:{ key:int, value:int }, value:{ ra:int, rb:string, rc:string,
     rd:int, re:string, rf:real, rg:string, rh:string } } @ { Map } in
   (nd_log_insert_CUSTOMER.iterate ((\b1 -> bind b1 as {key:vid,
    value:args} in if vid < min_gc_vid then temp.insert {key:vid, value:args}
    else ()));
    temp.iterate ((\val -> nd_log_insert_CUSTOMER.erase val)));
   let temp =
   empty { key:{ key:int, value:int }, value:{ ra:int, rb:string, rc:string,
     rd:int, re:string, rf:real, rg:string, rh:string } } @ { Map } in
   (nd_log_delete_CUSTOMER.iterate ((\b1 -> bind b1 as {key:vid,
    value:args} in if vid < min_gc_vid then temp.insert {key:vid, value:args}
    else ()));
    temp.iterate ((\val -> nd_log_delete_CUSTOMER.erase val)));
   let temp =
   empty { key:{ key:int, value:int }, value:{ ra:int, rb:int, rc:string,
     rd:real, re:int, rf:string, rg:string, rh:int, ri:string } } @ { Map } in
   (nd_log_insert_ORDERS.iterate ((\b1 -> bind b1 as {key:vid, value:args} in 
    if vid < min_gc_vid then temp.insert {key:vid, value:args} else ()));
    temp.iterate ((\val -> nd_log_insert_ORDERS.erase val)));
   let temp =
   empty { key:{ key:int, value:int }, value:{ ra:int, rb:int, rc:string,
     rd:real, re:int, rf:string, rg:string, rh:int, ri:string } } @ { Map } in
   (nd_log_delete_ORDERS.iterate ((\b1 -> bind b1 as {key:vid, value:args} in 
    if vid < min_gc_vid then temp.insert {key:vid, value:args} else ()));
    temp.iterate ((\val -> nd_log_delete_ORDERS.erase val)));
   let temp = empty { key:{ key:int, value:int }, value:real } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_L2_1_s2_buf as ind
     map_QUERY22_mCUSTOMER1_L2_1_s2_buf_unwrap in
     let frontier =
       frontier_float {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_L2_1_s2_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_L2_1_s2_buf_unwrap.iterate ((\b1 ->
        bind b1 as {key:vid, value:map_val} in if vid < min_gc_vid
        then temp.insert {key:vid, value:map_val} else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_L2_1_s2_buf_unwrap.erase
        val));
        frontier.iterate ((\val ->
        map_QUERY22_mCUSTOMER1_L2_1_s2_buf_unwrap.insert val)));
   let temp =
   empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:real, re:real
     } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_s2_buf as ind
     map_QUERY22_mCUSTOMER1_s2_buf_unwrap in
     let frontier =
       frontier_int_int_float_float {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_s2_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_s2_buf_unwrap.iterate ((\b1 ->
        bind b1 as {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val} in 
        if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val}
        else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_s2_buf_unwrap.erase val));
        frontier.iterate ((\val -> map_QUERY22_mCUSTOMER1_s2_buf_unwrap.insert
        val)));
   let temp = empty { ra:{ key:int, value:int }, rb:int, rc:int } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_L3_1_s2_buf as ind
     map_QUERY22_mCUSTOMER1_L3_1_s2_buf_unwrap in
     let frontier =
       frontier_int_int {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_L3_1_s2_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_L3_1_s2_buf_unwrap.iterate ((\b1 ->
        bind b1 as {ra:vid, rb:map_0, rc:map_val} in if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_L3_1_s2_buf_unwrap.erase
        val));
        frontier.iterate ((\val ->
        map_QUERY22_mCUSTOMER1_L3_1_s2_buf_unwrap.insert val)));
   let temp = empty { key:{ key:int, value:int }, value:real } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_L2_1_s5_buf as ind
     map_QUERY22_mCUSTOMER1_L2_1_s5_buf_unwrap in
     let frontier =
       frontier_float {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_L2_1_s5_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_L2_1_s5_buf_unwrap.iterate ((\b1 ->
        bind b1 as {key:vid, value:map_val} in if vid < min_gc_vid
        then temp.insert {key:vid, value:map_val} else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_L2_1_s5_buf_unwrap.erase
        val));
        frontier.iterate ((\val ->
        map_QUERY22_mCUSTOMER1_L2_1_s5_buf_unwrap.insert val)));
   let temp =
   empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:real, re:real
     } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_s5_buf as ind
     map_QUERY22_mCUSTOMER1_s5_buf_unwrap in
     let frontier =
       frontier_int_int_float_float {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_s5_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_s5_buf_unwrap.iterate ((\b1 ->
        bind b1 as {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val} in 
        if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val}
        else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_s5_buf_unwrap.erase val));
        frontier.iterate ((\val -> map_QUERY22_mCUSTOMER1_s5_buf_unwrap.insert
        val)));
   let temp = empty { ra:{ key:int, value:int }, rb:int, rc:int } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_L3_1_s5_buf as ind
     map_QUERY22_mCUSTOMER1_L3_1_s5_buf_unwrap in
     let frontier =
       frontier_int_int {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_L3_1_s5_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_L3_1_s5_buf_unwrap.iterate ((\b1 ->
        bind b1 as {ra:vid, rb:map_0, rc:map_val} in if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_L3_1_s5_buf_unwrap.erase
        val));
        frontier.iterate ((\val ->
        map_QUERY22_mCUSTOMER1_L3_1_s5_buf_unwrap.insert val)));
   let temp = empty { key:{ key:int, value:int }, value:real } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_L2_1_s6_buf as ind
     map_QUERY22_mCUSTOMER1_L2_1_s6_buf_unwrap in
     let frontier =
       frontier_float {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_L2_1_s6_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_L2_1_s6_buf_unwrap.iterate ((\b1 ->
        bind b1 as {key:vid, value:map_val} in if vid < min_gc_vid
        then temp.insert {key:vid, value:map_val} else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_L2_1_s6_buf_unwrap.erase
        val));
        frontier.iterate ((\val ->
        map_QUERY22_mCUSTOMER1_L2_1_s6_buf_unwrap.insert val)));
   let temp =
   empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:real, re:real
     } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_s6_buf as ind
     map_QUERY22_mCUSTOMER1_s6_buf_unwrap in
     let frontier =
       frontier_int_int_float_float {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_s6_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_s6_buf_unwrap.iterate ((\b1 ->
        bind b1 as {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val} in 
        if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val}
        else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_s6_buf_unwrap.erase val));
        frontier.iterate ((\val -> map_QUERY22_mCUSTOMER1_s6_buf_unwrap.insert
        val)));
   let temp = empty { ra:{ key:int, value:int }, rb:int, rc:int } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_L3_1_s6_buf as ind
     map_QUERY22_mCUSTOMER1_L3_1_s6_buf_unwrap in
     let frontier =
       frontier_int_int {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_L3_1_s6_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_L3_1_s6_buf_unwrap.iterate ((\b1 ->
        bind b1 as {ra:vid, rb:map_0, rc:map_val} in if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_L3_1_s6_buf_unwrap.erase
        val));
        frontier.iterate ((\val ->
        map_QUERY22_mCUSTOMER1_L3_1_s6_buf_unwrap.insert val)));
   let temp = empty { key:{ key:int, value:int }, value:real } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_L2_1_s8_buf as ind
     map_QUERY22_mCUSTOMER1_L2_1_s8_buf_unwrap in
     let frontier =
       frontier_float {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_L2_1_s8_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_L2_1_s8_buf_unwrap.iterate ((\b1 ->
        bind b1 as {key:vid, value:map_val} in if vid < min_gc_vid
        then temp.insert {key:vid, value:map_val} else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_L2_1_s8_buf_unwrap.erase
        val));
        frontier.iterate ((\val ->
        map_QUERY22_mCUSTOMER1_L2_1_s8_buf_unwrap.insert val)));
   let temp =
   empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:real, re:real
     } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_s8_buf as ind
     map_QUERY22_mCUSTOMER1_s8_buf_unwrap in
     let frontier =
       frontier_int_int_float_float {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_s8_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_s8_buf_unwrap.iterate ((\b1 ->
        bind b1 as {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val} in 
        if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val}
        else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_s8_buf_unwrap.erase val));
        frontier.iterate ((\val -> map_QUERY22_mCUSTOMER1_s8_buf_unwrap.insert
        val)));
   let temp = empty { ra:{ key:int, value:int }, rb:int, rc:int } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_L3_1_s8_buf as ind
     map_QUERY22_mCUSTOMER1_L3_1_s8_buf_unwrap in
     let frontier =
       frontier_int_int {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_L3_1_s8_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_L3_1_s8_buf_unwrap.iterate ((\b1 ->
        bind b1 as {ra:vid, rb:map_0, rc:map_val} in if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_L3_1_s8_buf_unwrap.erase
        val));
        frontier.iterate ((\val ->
        map_QUERY22_mCUSTOMER1_L3_1_s8_buf_unwrap.insert val)));
   let temp = empty { key:{ key:int, value:int }, value:real } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_L2_1_s11_buf as ind
     map_QUERY22_mCUSTOMER1_L2_1_s11_buf_unwrap in
     let frontier =
       frontier_float {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_L2_1_s11_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_L2_1_s11_buf_unwrap.iterate ((\b1 ->
        bind b1 as {key:vid, value:map_val} in if vid < min_gc_vid
        then temp.insert {key:vid, value:map_val} else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_L2_1_s11_buf_unwrap.erase
        val));
        frontier.iterate ((\val ->
        map_QUERY22_mCUSTOMER1_L2_1_s11_buf_unwrap.insert val)));
   let temp =
   empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:real, re:real
     } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_s11_buf as ind
     map_QUERY22_mCUSTOMER1_s11_buf_unwrap in
     let frontier =
       frontier_int_int_float_float {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_s11_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_s11_buf_unwrap.iterate ((\b1 ->
        bind b1 as {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val} in 
        if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val}
        else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_s11_buf_unwrap.erase
        val));
        frontier.iterate ((\val -> map_QUERY22_mCUSTOMER1_s11_buf_unwrap.insert
        val)));
   let temp = empty { ra:{ key:int, value:int }, rb:int, rc:int } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_L3_1_s11_buf as ind
     map_QUERY22_mCUSTOMER1_L3_1_s11_buf_unwrap in
     let frontier =
       frontier_int_int {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_L3_1_s11_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_L3_1_s11_buf_unwrap.iterate ((\b1 ->
        bind b1 as {ra:vid, rb:map_0, rc:map_val} in if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_L3_1_s11_buf_unwrap.erase
        val));
        frontier.iterate ((\val ->
        map_QUERY22_mCUSTOMER1_L3_1_s11_buf_unwrap.insert val)));
   let temp = empty { key:{ key:int, value:int }, value:real } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_L2_1_s12_buf as ind
     map_QUERY22_mCUSTOMER1_L2_1_s12_buf_unwrap in
     let frontier =
       frontier_float {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_L2_1_s12_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_L2_1_s12_buf_unwrap.iterate ((\b1 ->
        bind b1 as {key:vid, value:map_val} in if vid < min_gc_vid
        then temp.insert {key:vid, value:map_val} else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_L2_1_s12_buf_unwrap.erase
        val));
        frontier.iterate ((\val ->
        map_QUERY22_mCUSTOMER1_L2_1_s12_buf_unwrap.insert val)));
   let temp = empty { ra:{ key:int, value:int }, rb:int, rc:int } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_L3_1_s12_buf as ind
     map_QUERY22_mCUSTOMER1_L3_1_s12_buf_unwrap in
     let frontier =
       frontier_int_int {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_L3_1_s12_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_L3_1_s12_buf_unwrap.iterate ((\b1 ->
        bind b1 as {ra:vid, rb:map_0, rc:map_val} in if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_L3_1_s12_buf_unwrap.erase
        val));
        frontier.iterate ((\val ->
        map_QUERY22_mCUSTOMER1_L3_1_s12_buf_unwrap.insert val)));
   let temp = empty { key:{ key:int, value:int }, value:real } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_L2_1_s13_buf as ind
     map_QUERY22_mCUSTOMER1_L2_1_s13_buf_unwrap in
     let frontier =
       frontier_float {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_L2_1_s13_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_L2_1_s13_buf_unwrap.iterate ((\b1 ->
        bind b1 as {key:vid, value:map_val} in if vid < min_gc_vid
        then temp.insert {key:vid, value:map_val} else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_L2_1_s13_buf_unwrap.erase
        val));
        frontier.iterate ((\val ->
        map_QUERY22_mCUSTOMER1_L2_1_s13_buf_unwrap.insert val)));
   let temp =
   empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:real, re:real
     } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_s13_buf as ind
     map_QUERY22_mCUSTOMER1_s13_buf_unwrap in
     let frontier =
       frontier_int_int_float_float {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_s13_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_s13_buf_unwrap.iterate ((\b1 ->
        bind b1 as {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val} in 
        if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val}
        else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_s13_buf_unwrap.erase
        val));
        frontier.iterate ((\val -> map_QUERY22_mCUSTOMER1_s13_buf_unwrap.insert
        val)));
   let temp = empty { ra:{ key:int, value:int }, rb:int, rc:int } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_L3_1_s13_buf as ind
     map_QUERY22_mCUSTOMER1_L3_1_s13_buf_unwrap in
     let frontier =
       frontier_int_int {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_L3_1_s13_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_L3_1_s13_buf_unwrap.iterate ((\b1 ->
        bind b1 as {ra:vid, rb:map_0, rc:map_val} in if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_L3_1_s13_buf_unwrap.erase
        val));
        frontier.iterate ((\val ->
        map_QUERY22_mCUSTOMER1_L3_1_s13_buf_unwrap.insert val)));
   let temp = empty { key:{ key:int, value:int }, value:real } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_L2_1_s14_buf as ind
     map_QUERY22_mCUSTOMER1_L2_1_s14_buf_unwrap in
     let frontier =
       frontier_float {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_L2_1_s14_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_L2_1_s14_buf_unwrap.iterate ((\b1 ->
        bind b1 as {key:vid, value:map_val} in if vid < min_gc_vid
        then temp.insert {key:vid, value:map_val} else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_L2_1_s14_buf_unwrap.erase
        val));
        frontier.iterate ((\val ->
        map_QUERY22_mCUSTOMER1_L2_1_s14_buf_unwrap.insert val)));
   let temp =
   empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:real, re:real
     } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_s14_buf as ind
     map_QUERY22_mCUSTOMER1_s14_buf_unwrap in
     let frontier =
       frontier_int_int_float_float {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_s14_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_s14_buf_unwrap.iterate ((\b1 ->
        bind b1 as {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val} in 
        if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val}
        else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_s14_buf_unwrap.erase
        val));
        frontier.iterate ((\val -> map_QUERY22_mCUSTOMER1_s14_buf_unwrap.insert
        val)));
   let temp = empty { ra:{ key:int, value:int }, rb:int, rc:int } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_L3_1_s14_buf as ind
     map_QUERY22_mCUSTOMER1_L3_1_s14_buf_unwrap in
     let frontier =
       frontier_int_int {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_L3_1_s14_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_L3_1_s14_buf_unwrap.iterate ((\b1 ->
        bind b1 as {ra:vid, rb:map_0, rc:map_val} in if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_L3_1_s14_buf_unwrap.erase
        val));
        frontier.iterate ((\val ->
        map_QUERY22_mCUSTOMER1_L3_1_s14_buf_unwrap.insert val)));
   let temp = empty { ra:{ key:int, value:int }, rb:int, rc:int } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_L3_1_s15_buf as ind
     map_QUERY22_mCUSTOMER1_L3_1_s15_buf_unwrap in
     let frontier =
       frontier_int_int {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_L3_1_s15_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_L3_1_s15_buf_unwrap.iterate ((\b1 ->
        bind b1 as {ra:vid, rb:map_0, rc:map_val} in if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_L3_1_s15_buf_unwrap.erase
        val));
        frontier.iterate ((\val ->
        map_QUERY22_mCUSTOMER1_L3_1_s15_buf_unwrap.insert val)));
   let temp = empty { key:{ key:int, value:int }, value:real } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_L2_1_s15_buf as ind
     map_QUERY22_mCUSTOMER1_L2_1_s15_buf_unwrap in
     let frontier =
       frontier_float {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_L2_1_s15_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_L2_1_s15_buf_unwrap.iterate ((\b1 ->
        bind b1 as {key:vid, value:map_val} in if vid < min_gc_vid
        then temp.insert {key:vid, value:map_val} else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_L2_1_s15_buf_unwrap.erase
        val));
        frontier.iterate ((\val ->
        map_QUERY22_mCUSTOMER1_L2_1_s15_buf_unwrap.insert val)));
   let temp = empty { key:{ key:int, value:int }, value:real } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_L2_1_s16_buf as ind
     map_QUERY22_mCUSTOMER1_L2_1_s16_buf_unwrap in
     let frontier =
       frontier_float {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_L2_1_s16_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_L2_1_s16_buf_unwrap.iterate ((\b1 ->
        bind b1 as {key:vid, value:map_val} in if vid < min_gc_vid
        then temp.insert {key:vid, value:map_val} else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_L2_1_s16_buf_unwrap.erase
        val));
        frontier.iterate ((\val ->
        map_QUERY22_mCUSTOMER1_L2_1_s16_buf_unwrap.insert val)));
   let temp =
   empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:real, re:real
     } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_s16_buf as ind
     map_QUERY22_mCUSTOMER1_s16_buf_unwrap in
     let frontier =
       frontier_int_int_float_float {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_s16_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_s16_buf_unwrap.iterate ((\b1 ->
        bind b1 as {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val} in 
        if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val}
        else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_s16_buf_unwrap.erase
        val));
        frontier.iterate ((\val -> map_QUERY22_mCUSTOMER1_s16_buf_unwrap.insert
        val)));
   let temp = empty { ra:{ key:int, value:int }, rb:int, rc:int } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_L3_1_s16_buf as ind
     map_QUERY22_mCUSTOMER1_L3_1_s16_buf_unwrap in
     let frontier =
       frontier_int_int {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_L3_1_s16_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_L3_1_s16_buf_unwrap.iterate ((\b1 ->
        bind b1 as {ra:vid, rb:map_0, rc:map_val} in if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_L3_1_s16_buf_unwrap.erase
        val));
        frontier.iterate ((\val ->
        map_QUERY22_mCUSTOMER1_L3_1_s16_buf_unwrap.insert val)));
   let temp = empty { key:{ key:int, value:int }, value:real } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_L2_1_s17_buf as ind
     map_QUERY22_mCUSTOMER1_L2_1_s17_buf_unwrap in
     let frontier =
       frontier_float {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_L2_1_s17_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_L2_1_s17_buf_unwrap.iterate ((\b1 ->
        bind b1 as {key:vid, value:map_val} in if vid < min_gc_vid
        then temp.insert {key:vid, value:map_val} else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_L2_1_s17_buf_unwrap.erase
        val));
        frontier.iterate ((\val ->
        map_QUERY22_mCUSTOMER1_L2_1_s17_buf_unwrap.insert val)));
   let temp =
   empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:real, re:real
     } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_s17_buf as ind
     map_QUERY22_mCUSTOMER1_s17_buf_unwrap in
     let frontier =
       frontier_int_int_float_float {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_s17_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_s17_buf_unwrap.iterate ((\b1 ->
        bind b1 as {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val} in 
        if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val}
        else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_s17_buf_unwrap.erase
        val));
        frontier.iterate ((\val -> map_QUERY22_mCUSTOMER1_s17_buf_unwrap.insert
        val)));
   let temp = empty { ra:{ key:int, value:int }, rb:int, rc:int } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_L3_1_s17_buf as ind
     map_QUERY22_mCUSTOMER1_L3_1_s17_buf_unwrap in
     let frontier =
       frontier_int_int {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_L3_1_s17_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_L3_1_s17_buf_unwrap.iterate ((\b1 ->
        bind b1 as {ra:vid, rb:map_0, rc:map_val} in if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_L3_1_s17_buf_unwrap.erase
        val));
        frontier.iterate ((\val ->
        map_QUERY22_mCUSTOMER1_L3_1_s17_buf_unwrap.insert val)));
   let temp = empty { key:{ key:int, value:int }, value:real } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_L2_1_s18_buf as ind
     map_QUERY22_mCUSTOMER1_L2_1_s18_buf_unwrap in
     let frontier =
       frontier_float {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_L2_1_s18_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_L2_1_s18_buf_unwrap.iterate ((\b1 ->
        bind b1 as {key:vid, value:map_val} in if vid < min_gc_vid
        then temp.insert {key:vid, value:map_val} else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_L2_1_s18_buf_unwrap.erase
        val));
        frontier.iterate ((\val ->
        map_QUERY22_mCUSTOMER1_L2_1_s18_buf_unwrap.insert val)));
   let temp = empty { ra:{ key:int, value:int }, rb:int, rc:int } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_L3_1_s18_buf as ind
     map_QUERY22_mCUSTOMER1_L3_1_s18_buf_unwrap in
     let frontier =
       frontier_int_int {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_L3_1_s18_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_L3_1_s18_buf_unwrap.iterate ((\b1 ->
        bind b1 as {ra:vid, rb:map_0, rc:map_val} in if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_L3_1_s18_buf_unwrap.erase
        val));
        frontier.iterate ((\val ->
        map_QUERY22_mCUSTOMER1_L3_1_s18_buf_unwrap.insert val)));
   let temp = empty { key:{ key:int, value:int }, value:real } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_L2_1_s19_buf as ind
     map_QUERY22_mCUSTOMER1_L2_1_s19_buf_unwrap in
     let frontier =
       frontier_float {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_L2_1_s19_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_L2_1_s19_buf_unwrap.iterate ((\b1 ->
        bind b1 as {key:vid, value:map_val} in if vid < min_gc_vid
        then temp.insert {key:vid, value:map_val} else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_L2_1_s19_buf_unwrap.erase
        val));
        frontier.iterate ((\val ->
        map_QUERY22_mCUSTOMER1_L2_1_s19_buf_unwrap.insert val)));
   let temp =
   empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:real, re:real
     } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_s19_buf as ind
     map_QUERY22_mCUSTOMER1_s19_buf_unwrap in
     let frontier =
       frontier_int_int_float_float {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_s19_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_s19_buf_unwrap.iterate ((\b1 ->
        bind b1 as {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val} in 
        if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val}
        else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_s19_buf_unwrap.erase
        val));
        frontier.iterate ((\val -> map_QUERY22_mCUSTOMER1_s19_buf_unwrap.insert
        val)));
   let temp = empty { ra:{ key:int, value:int }, rb:int, rc:int } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_L3_1_s19_buf as ind
     map_QUERY22_mCUSTOMER1_L3_1_s19_buf_unwrap in
     let frontier =
       frontier_int_int {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_L3_1_s19_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_L3_1_s19_buf_unwrap.iterate ((\b1 ->
        bind b1 as {ra:vid, rb:map_0, rc:map_val} in if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_L3_1_s19_buf_unwrap.erase
        val));
        frontier.iterate ((\val ->
        map_QUERY22_mCUSTOMER1_L3_1_s19_buf_unwrap.insert val)));
   let temp = empty { key:{ key:int, value:int }, value:real } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_L2_1_s20_buf as ind
     map_QUERY22_mCUSTOMER1_L2_1_s20_buf_unwrap in
     let frontier =
       frontier_float {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_L2_1_s20_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_L2_1_s20_buf_unwrap.iterate ((\b1 ->
        bind b1 as {key:vid, value:map_val} in if vid < min_gc_vid
        then temp.insert {key:vid, value:map_val} else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_L2_1_s20_buf_unwrap.erase
        val));
        frontier.iterate ((\val ->
        map_QUERY22_mCUSTOMER1_L2_1_s20_buf_unwrap.insert val)));
   let temp =
   empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:real, re:real
     } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_s20_buf as ind
     map_QUERY22_mCUSTOMER1_s20_buf_unwrap in
     let frontier =
       frontier_int_int_float_float {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_s20_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_s20_buf_unwrap.iterate ((\b1 ->
        bind b1 as {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val} in 
        if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val}
        else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_s20_buf_unwrap.erase
        val));
        frontier.iterate ((\val -> map_QUERY22_mCUSTOMER1_s20_buf_unwrap.insert
        val)));
   let temp = empty { ra:{ key:int, value:int }, rb:int, rc:int } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_L3_1_s20_buf as ind
     map_QUERY22_mCUSTOMER1_L3_1_s20_buf_unwrap in
     let frontier =
       frontier_int_int {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_L3_1_s20_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_L3_1_s20_buf_unwrap.iterate ((\b1 ->
        bind b1 as {ra:vid, rb:map_0, rc:map_val} in if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_L3_1_s20_buf_unwrap.erase
        val));
        frontier.iterate ((\val ->
        map_QUERY22_mCUSTOMER1_L3_1_s20_buf_unwrap.insert val)));
   let temp = empty { key:{ key:int, value:int }, value:real } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_L2_1_s21_buf as ind
     map_QUERY22_mCUSTOMER1_L2_1_s21_buf_unwrap in
     let frontier =
       frontier_float {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_L2_1_s21_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_L2_1_s21_buf_unwrap.iterate ((\b1 ->
        bind b1 as {key:vid, value:map_val} in if vid < min_gc_vid
        then temp.insert {key:vid, value:map_val} else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_L2_1_s21_buf_unwrap.erase
        val));
        frontier.iterate ((\val ->
        map_QUERY22_mCUSTOMER1_L2_1_s21_buf_unwrap.insert val)));
   let temp = empty { ra:{ key:int, value:int }, rb:int, rc:int } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_L3_1_s21_buf as ind
     map_QUERY22_mCUSTOMER1_L3_1_s21_buf_unwrap in
     let frontier =
       frontier_int_int {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_L3_1_s21_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_L3_1_s21_buf_unwrap.iterate ((\b1 ->
        bind b1 as {ra:vid, rb:map_0, rc:map_val} in if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_L3_1_s21_buf_unwrap.erase
        val));
        frontier.iterate ((\val ->
        map_QUERY22_mCUSTOMER1_L3_1_s21_buf_unwrap.insert val)));
   let temp = empty { key:{ key:int, value:int }, value:real } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_L2_1_s22_buf as ind
     map_QUERY22_mCUSTOMER1_L2_1_s22_buf_unwrap in
     let frontier =
       frontier_float {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_L2_1_s22_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_L2_1_s22_buf_unwrap.iterate ((\b1 ->
        bind b1 as {key:vid, value:map_val} in if vid < min_gc_vid
        then temp.insert {key:vid, value:map_val} else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_L2_1_s22_buf_unwrap.erase
        val));
        frontier.iterate ((\val ->
        map_QUERY22_mCUSTOMER1_L2_1_s22_buf_unwrap.insert val)));
   let temp =
   empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:real, re:real
     } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_s22_buf as ind
     map_QUERY22_mCUSTOMER1_s22_buf_unwrap in
     let frontier =
       frontier_int_int_float_float {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_s22_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_s22_buf_unwrap.iterate ((\b1 ->
        bind b1 as {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val} in 
        if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val}
        else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_s22_buf_unwrap.erase
        val));
        frontier.iterate ((\val -> map_QUERY22_mCUSTOMER1_s22_buf_unwrap.insert
        val)));
   let temp = empty { ra:{ key:int, value:int }, rb:int, rc:int } @ { Set } in
   bind map_QUERY22_mCUSTOMER1_L3_1_s22_buf as ind
     map_QUERY22_mCUSTOMER1_L3_1_s22_buf_unwrap in
     let frontier =
       frontier_int_int {key:min_gc_vid,
         value:map_QUERY22_mCUSTOMER1_L3_1_s22_buf_unwrap} in
       (map_QUERY22_mCUSTOMER1_L3_1_s22_buf_unwrap.iterate ((\b1 ->
        bind b1 as {ra:vid, rb:map_0, rc:map_val} in if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
        temp.iterate ((\val -> map_QUERY22_mCUSTOMER1_L3_1_s22_buf_unwrap.erase
        val));
        frontier.iterate ((\val ->
        map_QUERY22_mCUSTOMER1_L3_1_s22_buf_unwrap.insert val)));
   let temp = empty { ra:{ key:int, value:int }, rb:int, rc:real } @ { Set } in
   bind QUERY22 as ind QUERY22_unwrap in
     let frontier = frontier_int_float {key:min_gc_vid, value:QUERY22_unwrap}
       in
       (QUERY22_unwrap.iterate ((\b1 -> bind b1 as {ra:vid, rb:map_0,
        rc:map_val} in if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
        temp.iterate ((\val -> QUERY22_unwrap.erase val));
        frontier.iterate ((\val -> QUERY22_unwrap.insert val)));
   let temp =
   empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:real, re:real
     } @ { Set } in
   bind QUERY22_mCUSTOMER1 as ind QUERY22_mCUSTOMER1_unwrap in
     let frontier =
       frontier_int_int_float_float {key:min_gc_vid,
         value:QUERY22_mCUSTOMER1_unwrap} in
       (QUERY22_mCUSTOMER1_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
        rb:map_0, rc:map_1, rd:map_2, re:map_val} in if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val}
        else ()));
        temp.iterate ((\val -> QUERY22_mCUSTOMER1_unwrap.erase val));
        frontier.iterate ((\val -> QUERY22_mCUSTOMER1_unwrap.insert val)));
   let temp = empty { key:{ key:int, value:int }, value:real } @ { Set } in
   bind QUERY22_mCUSTOMER1_L2_1 as ind QUERY22_mCUSTOMER1_L2_1_unwrap in
     let frontier =
       frontier_float {key:min_gc_vid, value:QUERY22_mCUSTOMER1_L2_1_unwrap} in
       (QUERY22_mCUSTOMER1_L2_1_unwrap.iterate ((\b1 -> bind b1 as {key:vid,
        value:map_val} in if vid < min_gc_vid
        then temp.insert {key:vid, value:map_val} else ()));
        temp.iterate ((\val -> QUERY22_mCUSTOMER1_L2_1_unwrap.erase val));
        frontier.iterate ((\val -> QUERY22_mCUSTOMER1_L2_1_unwrap.insert val)));
   let temp = empty { ra:{ key:int, value:int }, rb:int, rc:int } @ { Set } in
   bind QUERY22_mCUSTOMER1_L3_1 as ind QUERY22_mCUSTOMER1_L3_1_unwrap in
     let frontier =
       frontier_int_int {key:min_gc_vid, value:QUERY22_mCUSTOMER1_L3_1_unwrap}
       in
       (QUERY22_mCUSTOMER1_L3_1_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
        rb:map_0, rc:map_val} in if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
        temp.iterate ((\val -> QUERY22_mCUSTOMER1_L3_1_unwrap.erase val));
        frontier.iterate ((\val -> QUERY22_mCUSTOMER1_L3_1_unwrap.insert val)))))
  
trigger sw_rcv_token : { key:int, value:int } = (\vid ->
  if sw_need_vid_cntr > 0
  then let next_vid = {key:vid.key, value:vid.value + sw_need_vid_cntr} in
    ((sw_rcv_token, sw_next_switch_addr)<- next_vid;
     sw_token_vid_list.insert {key:vid, value:sw_need_vid_cntr};
     sw_need_vid_cntr = 0;
     sw_highest_vid = next_vid;
     (if not sw_sent_done and (sw_trig_buf_idx.size () == 0 and (sw_num_ack ==
        sw_num_sent and sw_seen_sentry == true))
     then ((ms_rcv_switch_done, master_addr)<- ();sw_sent_done = true) 
     else ());
     (sw_driver_trig, me)<- ()) else (sw_rcv_token, sw_next_switch_addr)<- vid)
trigger tm_insert_timer : { ra:int, rb:int, rc:address } = (\b1 ->
  bind b1 as {ra:time, rb:trig_id, rc:addr} in 
  (tm_timer_list.insert {ra:time + now_int (), rb:trig_id, rc:addr};
   tm_timer_list = tm_timer_list.sort ((\b2 -> (\b6 -> bind b2 as {ra:time1,
   rb:trig_id1, rc:addr1} in bind b6 as {ra:time2, rb:trig_id2, rc:addr2} in 
   if time1 < time2 then -1 else 1)));
   (tm_check_time, me)<- ()))
trigger tm_check_time : () = (\_u -> case (tm_timer_list.peek ()) of
  {Some timer -> if now_int () >= timer.ra
    then
      (tm_timer_list.erase timer;
       bind timer as {ra:time, rb:trig_id, rc:addr} in
       if trig_id == 0 then (ms_send_gc_req, addr)<- () else ();
       (tm_check_time, me)<- ()) else ((tm_check_time, me)<- ();(sleep 1000))}
  {None -> ()})
trigger sw_demux : { ra:string, rb:int, rc:real, rd:string, re:int, rf:string,
  rg:string, rh:string, ri:string, rj:string, rk:int, rl:real, rm:real, rn:int,
  ro:string, rp:string, rq:string, rr:string, rs:int, rt:string, ru:int,
  rv:string, rw:string, rx:int, ry:string, rz:real, rza:string, rzb:int,
  rzc:real, rzd:string, rze:string, rzf:string, rzg:string, rzh:int, rzi:int,
  rzj:int, rzk:real, rzl:real, rzm:real, rzn:string } = (\args ->
  if args.ra == "ORDERS"
  then if args.rb == 1
    then
      sw_insert_ORDERS {ra:args.ru, rb:args.rk, rc:args.rw, rd:args.rzm,
        re:tpch_date (args.rt), rf:args.rv, rg:args.rg, rh:args.rzh,
        ri:args.rh}
    else
      sw_delete_ORDERS {ra:args.ru, rb:args.rk, rc:args.rw, rd:args.rzm,
        re:tpch_date (args.rt), rf:args.rv, rg:args.rg, rh:args.rzh,
        ri:args.rh}
  else if args.ra == "CUSTOMER"
    then if args.rb == 1
      then
        sw_insert_CUSTOMER {ra:args.rk, rb:args.rr, rc:args.rd, rd:args.rs,
          re:args.ry, rf:args.rc, rg:args.rq, rh:args.rh}
      else
        sw_delete_CUSTOMER {ra:args.rk, rb:args.rr, rc:args.rd, rd:args.rs,
          re:args.ry, rf:args.rc, rg:args.rq, rh:args.rh}
    else if args.ra == ""
      then
        (sw_trig_buf_idx.insert ({i:-1});
         sw_need_vid_cntr = sw_need_vid_cntr + 1)
      else error (print "unidentified trig id"))
trigger sw_driver_trig : () = (\_u ->
  if sw_init and sw_trig_buf_idx.size () > 0
  then case sw_gen_vid () of
    {Some vid -> case (sw_trig_buf_idx.peek ()) of
      {Some trig_id ->
        (sw_trig_buf_idx.erase {i:trig_id.i};
         (if trig_id.i == -1
         then
           (sw_seen_sentry = true;
            (if not sw_sent_done and (sw_trig_buf_idx.size () == 0 and
               (sw_num_ack == sw_num_sent and sw_seen_sentry == true))
            then ((ms_rcv_switch_done, master_addr)<- ();sw_sent_done = true)
            else ()))
         else
           ((if trig_id.i == 3 then sw_delete_ORDERS_send_fetch vid
            else if trig_id.i == 2 then sw_insert_ORDERS_send_fetch vid
              else if trig_id.i == 1 then sw_delete_CUSTOMER_send_fetch vid
                else if trig_id.i == 0 then sw_insert_CUSTOMER_send_fetch vid
                  else error (print "mismatch on trigger id"));
            (sw_driver_trig, me)<- ())))}{None -> ()}}{None -> ()} else ())
trigger nd_rcv_corr_done : { ra:{ key:int, value:int }, rb:int, rc:int, rd:int
  } = (\b1 -> bind b1 as {ra:vid, rb:stmt_id, rc:hop, rd:count} in 
  ((nd_update_stmt_cntr_corr_map {ra:vid, rb:stmt_id, rc:hop, rd:count,
      re:false, rf:false});
   (case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
   key == {key:vid, value:stmt_id}))).peek ()) of
   {Some lkup -> if 0 == ((lkup.value).value).size ()
     then
       (nd_stmt_cntrs.erase lkup;
        (if nd_rcvd_sys_done
        then if not nd_sent_done and nd_stmt_cntrs.size () == 0
          then ((ms_rcv_node_done, master_addr)<- true;nd_sent_done = true)
          else () else ())) else ()}{None ->
                                      error
                                        (print
                                           "nd_rcv_corr_done: expected stmt_cntr value")})))
  
trigger nd_insert_CUSTOMER_rcv_put : { ra:address, rb:collection { key:int,
  value:int } @ { Collection }, rc:{ key:int, value:int }, rd:int, re:string,
  rf:string, rg:int, rh:string, ri:real, rj:string, rk:string } = (\b1 ->
  bind b1 as {ra:sender_ip, rb:stmt_cnt_list, rc:vid, rd:CUSTOMER_CUSTKEY,
  re:CUSTOMER_NAME, rf:CUSTOMER_ADDRESS, rg:CUSTOMER_NATIONKEY,
  rh:CUSTOMER_PHONE, ri:CUSTOMER_ACCTBAL, rj:CUSTOMER_MKTSEGMENT,
  rk:CUSTOMER_COMMENT} in 
  (stmt_cnt_list.iterate ((\b1 -> bind b1 as {key:stmt_id, value:count} in 
   if nd_check_stmt_cntr_index {ra:vid, rb:stmt_id, rc:count}
   then if stmt_id == 2
     then
       nd_insert_CUSTOMER_do_complete_s2 {ra:vid, rb:CUSTOMER_CUSTKEY,
         rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
         rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
         ri:CUSTOMER_COMMENT}
     else if stmt_id == 1
       then
         nd_insert_CUSTOMER_do_complete_s1 {ra:vid, rb:CUSTOMER_CUSTKEY,
           rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
           rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
           ri:CUSTOMER_COMMENT}
       else if stmt_id == 0
         then
           nd_insert_CUSTOMER_do_complete_s0 {ra:vid, rb:CUSTOMER_CUSTKEY,
             rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
             rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
             ri:CUSTOMER_COMMENT} else () else ()));
   (sw_ack_rcv, sender_ip)<- {key:me, value:vid}))
trigger nd_insert_CUSTOMER_rcv_fetch : { ra:collection { key:int, value:int
  } @ { Collection }, rb:{ key:int, value:int }, rc:int, rd:string, re:string,
  rf:int, rg:string, rh:real, ri:string, rj:string } = (\b1 ->
  bind b1 as {ra:stmt_map_ids, rb:vid, rc:CUSTOMER_CUSTKEY, rd:CUSTOMER_NAME,
  re:CUSTOMER_ADDRESS, rf:CUSTOMER_NATIONKEY, rg:CUSTOMER_PHONE,
  rh:CUSTOMER_ACCTBAL, ri:CUSTOMER_MKTSEGMENT, rj:CUSTOMER_COMMENT} in 
  ((nd_log_write_insert_CUSTOMER {ra:vid, rb:CUSTOMER_CUSTKEY,
      rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
      rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
      ri:CUSTOMER_COMMENT});
   stmt_map_ids.iterate ((\b1 -> bind b1 as {key:stmt_id, value:map_id} in 
   if stmt_id == 2
   then if map_id == 3
     then
       (nd_insert_CUSTOMER_send_push_s2_m_QUERY22_mCUSTOMER1_L2_1, me)<- {ra:vid,
       rb:CUSTOMER_CUSTKEY, rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS,
       re:CUSTOMER_NATIONKEY, rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL,
       rh:CUSTOMER_MKTSEGMENT, ri:CUSTOMER_COMMENT}
     else if map_id == 2
       then
         (nd_insert_CUSTOMER_send_push_s2_m_QUERY22_mCUSTOMER1, me)<- {ra:vid,
         rb:CUSTOMER_CUSTKEY, rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS,
         re:CUSTOMER_NATIONKEY, rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL,
         rh:CUSTOMER_MKTSEGMENT, ri:CUSTOMER_COMMENT}
       else if map_id == 4
         then
           (nd_insert_CUSTOMER_send_push_s2_m_QUERY22_mCUSTOMER1_L3_1, me)<- {ra:vid,
           rb:CUSTOMER_CUSTKEY, rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS,
           re:CUSTOMER_NATIONKEY, rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL,
           rh:CUSTOMER_MKTSEGMENT, ri:CUSTOMER_COMMENT}
         else error (print "nd_rcv_fetch: invalid map id")
   else error (print "nd_rcv_fetch: invalid stmt id")))))
trigger nd_insert_CUSTOMER_send_push_s2_m_QUERY22_mCUSTOMER1_L2_1 : { ra:{
  key:int, value:int }, rb:int, rc:string, rd:string, re:int, rf:string,
  rg:real, rh:string, ri:string } = (\b1 -> bind b1 as {ra:vid,
  rb:CUSTOMER_CUSTKEY, rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS,
  re:CUSTOMER_NATIONKEY, rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL,
  rh:CUSTOMER_MKTSEGMENT, ri:CUSTOMER_COMMENT} in bind QUERY22_mCUSTOMER1_L2_1
  as ind QUERY22_mCUSTOMER1_L2_1_deref in
  ((nd_log_master_write {key:vid, value:2});
   (shuffle_QUERY22_mCUSTOMER1_L2_1_to_QUERY22 {ra:None immut,
      rb:frontier_float {key:vid, value:QUERY22_mCUSTOMER1_L2_1_deref},
      rc:true}).iterate ((\b1 -> bind b1 as {key:ip, value:tuples} in 
   (nd_insert_CUSTOMER_rcv_push_s2_m_QUERY22_mCUSTOMER1_L2_1, ip)<- {ra:tuples,
   rb:vid, rc:CUSTOMER_CUSTKEY, rd:CUSTOMER_NAME, re:CUSTOMER_ADDRESS,
   rf:CUSTOMER_NATIONKEY, rg:CUSTOMER_PHONE, rh:CUSTOMER_ACCTBAL,
   ri:CUSTOMER_MKTSEGMENT, rj:CUSTOMER_COMMENT}))))
trigger nd_insert_CUSTOMER_send_push_s2_m_QUERY22_mCUSTOMER1 : { ra:{ key:int,
  value:int }, rb:int, rc:string, rd:string, re:int, rf:string, rg:real,
  rh:string, ri:string } = (\b1 -> bind b1 as {ra:vid, rb:CUSTOMER_CUSTKEY,
  rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
  rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
  ri:CUSTOMER_COMMENT} in bind QUERY22_mCUSTOMER1 as ind
  QUERY22_mCUSTOMER1_deref in
  ((nd_log_master_write {key:vid, value:2});
   (shuffle_QUERY22_mCUSTOMER1_to_QUERY22_bind_0t0 {ra:None immut,
      rb:frontier_int_int_float_float {key:vid, value:QUERY22_mCUSTOMER1_deref},
      rc:true}).iterate ((\b1 -> bind b1 as {key:ip, value:tuples} in 
   (nd_insert_CUSTOMER_rcv_push_s2_m_QUERY22_mCUSTOMER1, ip)<- {ra:tuples,
   rb:vid, rc:CUSTOMER_CUSTKEY, rd:CUSTOMER_NAME, re:CUSTOMER_ADDRESS,
   rf:CUSTOMER_NATIONKEY, rg:CUSTOMER_PHONE, rh:CUSTOMER_ACCTBAL,
   ri:CUSTOMER_MKTSEGMENT, rj:CUSTOMER_COMMENT}))))
trigger nd_insert_CUSTOMER_send_push_s2_m_QUERY22_mCUSTOMER1_L3_1 : { ra:{
  key:int, value:int }, rb:int, rc:string, rd:string, re:int, rf:string,
  rg:real, rh:string, ri:string } = (\b1 -> bind b1 as {ra:vid,
  rb:CUSTOMER_CUSTKEY, rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS,
  re:CUSTOMER_NATIONKEY, rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL,
  rh:CUSTOMER_MKTSEGMENT, ri:CUSTOMER_COMMENT} in bind QUERY22_mCUSTOMER1_L3_1
  as ind QUERY22_mCUSTOMER1_L3_1_deref in
  ((nd_log_master_write {key:vid, value:2});
   (shuffle_QUERY22_mCUSTOMER1_L3_1_to_QUERY22 {ra:None immut,
      rb:frontier_int_int {key:vid, value:QUERY22_mCUSTOMER1_L3_1_deref},
      rc:true}).iterate ((\b1 -> bind b1 as {key:ip, value:tuples} in 
   (nd_insert_CUSTOMER_rcv_push_s2_m_QUERY22_mCUSTOMER1_L3_1, ip)<- {ra:tuples,
   rb:vid, rc:CUSTOMER_CUSTKEY, rd:CUSTOMER_NAME, re:CUSTOMER_ADDRESS,
   rf:CUSTOMER_NATIONKEY, rg:CUSTOMER_PHONE, rh:CUSTOMER_ACCTBAL,
   ri:CUSTOMER_MKTSEGMENT, rj:CUSTOMER_COMMENT}))))
trigger nd_insert_CUSTOMER_rcv_push_s2_m_QUERY22_mCUSTOMER1_L2_1 : {
  ra:collection { key:{ key:int, value:int }, value:real } @ { Collection },
  rb:{ key:int, value:int }, rc:int, rd:string, re:string, rf:int, rg:string,
  rh:real, ri:string, rj:string } = (\b1 -> bind b1 as {ra:tuples, rb:vid,
  rc:CUSTOMER_CUSTKEY, rd:CUSTOMER_NAME, re:CUSTOMER_ADDRESS,
  rf:CUSTOMER_NATIONKEY, rg:CUSTOMER_PHONE, rh:CUSTOMER_ACCTBAL,
  ri:CUSTOMER_MKTSEGMENT, rj:CUSTOMER_COMMENT} in 
  ((nd_log_write_insert_CUSTOMER {ra:vid, rb:CUSTOMER_CUSTKEY,
      rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
      rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
      ri:CUSTOMER_COMMENT});
   tuples.iterate ((\tuple -> bind map_QUERY22_mCUSTOMER1_L2_1_s2_buf as ind
   map_QUERY22_mCUSTOMER1_L2_1_s2_buf_d in
   bind tuple as {key:_tup0, value:_tup1} in
     case ((map_QUERY22_mCUSTOMER1_L2_1_s2_buf_d.filter ((\b1 ->
       bind b1 as {key:key, value:value} in key == _tup0))).peek ()) of
       {Some vals -> map_QUERY22_mCUSTOMER1_L2_1_s2_buf_d.update vals tuple}
       {None -> map_QUERY22_mCUSTOMER1_L2_1_s2_buf_d.insert tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:2, rc:-1}
   then
     nd_insert_CUSTOMER_do_complete_s2 {ra:vid, rb:CUSTOMER_CUSTKEY,
       rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
       rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
       ri:CUSTOMER_COMMENT} else ())))
trigger nd_insert_CUSTOMER_rcv_push_s2_m_QUERY22_mCUSTOMER1 : { ra:collection {
  ra:{ key:int, value:int }, rb:int, rc:int, rd:real, re:real
  } @ { Collection }, rb:{ key:int, value:int }, rc:int, rd:string, re:string,
  rf:int, rg:string, rh:real, ri:string, rj:string } = (\b1 ->
  bind b1 as {ra:tuples, rb:vid, rc:CUSTOMER_CUSTKEY, rd:CUSTOMER_NAME,
  re:CUSTOMER_ADDRESS, rf:CUSTOMER_NATIONKEY, rg:CUSTOMER_PHONE,
  rh:CUSTOMER_ACCTBAL, ri:CUSTOMER_MKTSEGMENT, rj:CUSTOMER_COMMENT} in 
  ((nd_log_write_insert_CUSTOMER {ra:vid, rb:CUSTOMER_CUSTKEY,
      rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
      rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
      ri:CUSTOMER_COMMENT});
   tuples.iterate ((\tuple -> bind map_QUERY22_mCUSTOMER1_s2_buf as ind
   map_QUERY22_mCUSTOMER1_s2_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2, rd:_tup3, re:_tup4} in
     case ((map_QUERY22_mCUSTOMER1_s2_buf_d.filter ((\b1 -> bind b1 as {ra:ra,
       rb:rb, rc:rc, rd:rd, re:re} in ((ra == _tup0 and rd == _tup3) and rc ==
       _tup2) and rb == _tup1))).peek ()) of
       {Some vals -> map_QUERY22_mCUSTOMER1_s2_buf_d.update vals tuple}
       {None -> map_QUERY22_mCUSTOMER1_s2_buf_d.insert tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:2, rc:-1}
   then
     nd_insert_CUSTOMER_do_complete_s2 {ra:vid, rb:CUSTOMER_CUSTKEY,
       rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
       rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
       ri:CUSTOMER_COMMENT} else ())))
trigger nd_insert_CUSTOMER_rcv_push_s2_m_QUERY22_mCUSTOMER1_L3_1 : {
  ra:collection { ra:{ key:int, value:int }, rb:int, rc:int } @ { Collection },
  rb:{ key:int, value:int }, rc:int, rd:string, re:string, rf:int, rg:string,
  rh:real, ri:string, rj:string } = (\b1 -> bind b1 as {ra:tuples, rb:vid,
  rc:CUSTOMER_CUSTKEY, rd:CUSTOMER_NAME, re:CUSTOMER_ADDRESS,
  rf:CUSTOMER_NATIONKEY, rg:CUSTOMER_PHONE, rh:CUSTOMER_ACCTBAL,
  ri:CUSTOMER_MKTSEGMENT, rj:CUSTOMER_COMMENT} in 
  ((nd_log_write_insert_CUSTOMER {ra:vid, rb:CUSTOMER_CUSTKEY,
      rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
      rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
      ri:CUSTOMER_COMMENT});
   tuples.iterate ((\tuple -> bind map_QUERY22_mCUSTOMER1_L3_1_s2_buf as ind
   map_QUERY22_mCUSTOMER1_L3_1_s2_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2} in
     case ((map_QUERY22_mCUSTOMER1_L3_1_s2_buf_d.filter ((\b1 ->
       bind b1 as {ra:ra, rb:rb, rc:rc} in ra == _tup0 and rb == _tup1))).peek
       ()) of
       {Some vals -> map_QUERY22_mCUSTOMER1_L3_1_s2_buf_d.update vals tuple}
       {None -> map_QUERY22_mCUSTOMER1_L3_1_s2_buf_d.insert tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:2, rc:-1}
   then
     nd_insert_CUSTOMER_do_complete_s2 {ra:vid, rb:CUSTOMER_CUSTKEY,
       rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
       rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
       ri:CUSTOMER_COMMENT} else ())))
trigger nd_insert_CUSTOMER_do_complete_s0_trig : { ra:{ key:int, value:int },
  rb:int, rc:string, rd:string, re:int, rf:string, rg:real, rh:string,
  ri:string } = (\b1 -> bind b1 as {ra:vid, rb:CUSTOMER_CUSTKEY,
  rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
  rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
  ri:CUSTOMER_COMMENT} in 
  nd_insert_CUSTOMER_do_complete_s0 {ra:vid, rb:CUSTOMER_CUSTKEY,
    rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
    rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
    ri:CUSTOMER_COMMENT})
trigger nd_insert_CUSTOMER_do_complete_s1_trig : { ra:{ key:int, value:int },
  rb:int, rc:string, rd:string, re:int, rf:string, rg:real, rh:string,
  ri:string } = (\b1 -> bind b1 as {ra:vid, rb:CUSTOMER_CUSTKEY,
  rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
  rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
  ri:CUSTOMER_COMMENT} in 
  nd_insert_CUSTOMER_do_complete_s1 {ra:vid, rb:CUSTOMER_CUSTKEY,
    rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
    rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
    ri:CUSTOMER_COMMENT})
trigger insert_CUSTOMER_rcv_corrective_s2_m_QUERY22_mCUSTOMER1_L2_1 : {
  ra:address, rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int,
  value:int }, rf:collection { key:int, value:int } @ { Seq },
  rg:collection {i:real} @ { Collection } } = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:compute_vids,
  rg:delta_tuples} in 
  ((nd_add_delta_to_float {ra:map_QUERY22_mCUSTOMER1_L2_1_s2_buf, rb:false,
      rc:vid, rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:2}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_insert_CUSTOMER compute_vid as
         {ra:CUSTOMER_CUSTKEY, rb:CUSTOMER_NAME, rc:CUSTOMER_ADDRESS, rd:CUSTOMER_NATIONKEY, re:CUSTOMER_PHONE, rf:CUSTOMER_ACCTBAL, rg:CUSTOMER_MKTSEGMENT, rh:CUSTOMER_COMMENT}
         in
         acc_count +
           insert_CUSTOMER_do_corrective_s2_m_QUERY22_mCUSTOMER1_L2_1
             {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
             re:compute_vid, rf:CUSTOMER_CUSTKEY, rg:CUSTOMER_NAME,
             rh:CUSTOMER_ADDRESS, ri:CUSTOMER_NATIONKEY, rj:CUSTOMER_PHONE,
             rk:CUSTOMER_ACCTBAL, rl:CUSTOMER_MKTSEGMENT, rm:CUSTOMER_COMMENT,
             rn:delta_tuples} else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger insert_CUSTOMER_rcv_corrective_s2_m_QUERY22_mCUSTOMER1 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int },
  rf:collection { key:int, value:int } @ { Seq }, rg:collection { ra:int,
  rb:int, rc:real, rd:real } @ { Collection } } = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid,
  rf:compute_vids, rg:delta_tuples} in 
  ((nd_add_delta_to_int_int_float_float {ra:map_QUERY22_mCUSTOMER1_s2_buf,
      rb:false, rc:vid, rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:2}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_insert_CUSTOMER compute_vid as
         {ra:CUSTOMER_CUSTKEY, rb:CUSTOMER_NAME, rc:CUSTOMER_ADDRESS, rd:CUSTOMER_NATIONKEY, re:CUSTOMER_PHONE, rf:CUSTOMER_ACCTBAL, rg:CUSTOMER_MKTSEGMENT, rh:CUSTOMER_COMMENT}
         in
         acc_count +
           insert_CUSTOMER_do_corrective_s2_m_QUERY22_mCUSTOMER1 {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:compute_vid,
             rf:CUSTOMER_CUSTKEY, rg:CUSTOMER_NAME, rh:CUSTOMER_ADDRESS,
             ri:CUSTOMER_NATIONKEY, rj:CUSTOMER_PHONE, rk:CUSTOMER_ACCTBAL,
             rl:CUSTOMER_MKTSEGMENT, rm:CUSTOMER_COMMENT, rn:delta_tuples}
       else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger insert_CUSTOMER_rcv_corrective_s2_m_QUERY22_mCUSTOMER1_L3_1 : {
  ra:address, rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int,
  value:int }, rf:collection { key:int, value:int } @ { Seq }, rg:collection {
  key:int, value:int } @ { Collection } } = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:compute_vids,
  rg:delta_tuples} in 
  ((nd_add_delta_to_int_int {ra:map_QUERY22_mCUSTOMER1_L3_1_s2_buf, rb:false,
      rc:vid, rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:2}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_insert_CUSTOMER compute_vid as
         {ra:CUSTOMER_CUSTKEY, rb:CUSTOMER_NAME, rc:CUSTOMER_ADDRESS, rd:CUSTOMER_NATIONKEY, re:CUSTOMER_PHONE, rf:CUSTOMER_ACCTBAL, rg:CUSTOMER_MKTSEGMENT, rh:CUSTOMER_COMMENT}
         in
         acc_count +
           insert_CUSTOMER_do_corrective_s2_m_QUERY22_mCUSTOMER1_L3_1
             {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
             re:compute_vid, rf:CUSTOMER_CUSTKEY, rg:CUSTOMER_NAME,
             rh:CUSTOMER_ADDRESS, ri:CUSTOMER_NATIONKEY, rj:CUSTOMER_PHONE,
             rk:CUSTOMER_ACCTBAL, rl:CUSTOMER_MKTSEGMENT, rm:CUSTOMER_COMMENT,
             rn:delta_tuples} else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger nd_delete_CUSTOMER_rcv_put : { ra:address, rb:collection { key:int,
  value:int } @ { Collection }, rc:{ key:int, value:int }, rd:int, re:string,
  rf:string, rg:int, rh:string, ri:real, rj:string, rk:string } = (\b1 ->
  bind b1 as {ra:sender_ip, rb:stmt_cnt_list, rc:vid, rd:CUSTOMER_CUSTKEY,
  re:CUSTOMER_NAME, rf:CUSTOMER_ADDRESS, rg:CUSTOMER_NATIONKEY,
  rh:CUSTOMER_PHONE, ri:CUSTOMER_ACCTBAL, rj:CUSTOMER_MKTSEGMENT,
  rk:CUSTOMER_COMMENT} in 
  (stmt_cnt_list.iterate ((\b1 -> bind b1 as {key:stmt_id, value:count} in 
   if nd_check_stmt_cntr_index {ra:vid, rb:stmt_id, rc:count}
   then if stmt_id == 5
     then
       nd_delete_CUSTOMER_do_complete_s5 {ra:vid, rb:CUSTOMER_CUSTKEY,
         rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
         rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
         ri:CUSTOMER_COMMENT}
     else if stmt_id == 4
       then
         nd_delete_CUSTOMER_do_complete_s4 {ra:vid, rb:CUSTOMER_CUSTKEY,
           rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
           rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
           ri:CUSTOMER_COMMENT}
       else if stmt_id == 3
         then
           nd_delete_CUSTOMER_do_complete_s3 {ra:vid, rb:CUSTOMER_CUSTKEY,
             rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
             rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
             ri:CUSTOMER_COMMENT} else () else ()));
   (sw_ack_rcv, sender_ip)<- {key:me, value:vid}))
trigger nd_delete_CUSTOMER_rcv_fetch : { ra:collection { key:int, value:int
  } @ { Collection }, rb:{ key:int, value:int }, rc:int, rd:string, re:string,
  rf:int, rg:string, rh:real, ri:string, rj:string } = (\b1 ->
  bind b1 as {ra:stmt_map_ids, rb:vid, rc:CUSTOMER_CUSTKEY, rd:CUSTOMER_NAME,
  re:CUSTOMER_ADDRESS, rf:CUSTOMER_NATIONKEY, rg:CUSTOMER_PHONE,
  rh:CUSTOMER_ACCTBAL, ri:CUSTOMER_MKTSEGMENT, rj:CUSTOMER_COMMENT} in 
  ((nd_log_write_delete_CUSTOMER {ra:vid, rb:CUSTOMER_CUSTKEY,
      rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
      rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
      ri:CUSTOMER_COMMENT});
   stmt_map_ids.iterate ((\b1 -> bind b1 as {key:stmt_id, value:map_id} in 
   if stmt_id == 5
   then if map_id == 3
     then
       (nd_delete_CUSTOMER_send_push_s5_m_QUERY22_mCUSTOMER1_L2_1, me)<- {ra:vid,
       rb:CUSTOMER_CUSTKEY, rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS,
       re:CUSTOMER_NATIONKEY, rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL,
       rh:CUSTOMER_MKTSEGMENT, ri:CUSTOMER_COMMENT}
     else if map_id == 2
       then
         (nd_delete_CUSTOMER_send_push_s5_m_QUERY22_mCUSTOMER1, me)<- {ra:vid,
         rb:CUSTOMER_CUSTKEY, rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS,
         re:CUSTOMER_NATIONKEY, rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL,
         rh:CUSTOMER_MKTSEGMENT, ri:CUSTOMER_COMMENT}
       else if map_id == 4
         then
           (nd_delete_CUSTOMER_send_push_s5_m_QUERY22_mCUSTOMER1_L3_1, me)<- {ra:vid,
           rb:CUSTOMER_CUSTKEY, rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS,
           re:CUSTOMER_NATIONKEY, rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL,
           rh:CUSTOMER_MKTSEGMENT, ri:CUSTOMER_COMMENT}
         else error (print "nd_rcv_fetch: invalid map id")
   else error (print "nd_rcv_fetch: invalid stmt id")))))
trigger nd_delete_CUSTOMER_send_push_s5_m_QUERY22_mCUSTOMER1_L2_1 : { ra:{
  key:int, value:int }, rb:int, rc:string, rd:string, re:int, rf:string,
  rg:real, rh:string, ri:string } = (\b1 -> bind b1 as {ra:vid,
  rb:CUSTOMER_CUSTKEY, rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS,
  re:CUSTOMER_NATIONKEY, rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL,
  rh:CUSTOMER_MKTSEGMENT, ri:CUSTOMER_COMMENT} in bind QUERY22_mCUSTOMER1_L2_1
  as ind QUERY22_mCUSTOMER1_L2_1_deref in
  ((nd_log_master_write {key:vid, value:5});
   (shuffle_QUERY22_mCUSTOMER1_L2_1_to_QUERY22 {ra:None immut,
      rb:frontier_float {key:vid, value:QUERY22_mCUSTOMER1_L2_1_deref},
      rc:true}).iterate ((\b1 -> bind b1 as {key:ip, value:tuples} in 
   (nd_delete_CUSTOMER_rcv_push_s5_m_QUERY22_mCUSTOMER1_L2_1, ip)<- {ra:tuples,
   rb:vid, rc:CUSTOMER_CUSTKEY, rd:CUSTOMER_NAME, re:CUSTOMER_ADDRESS,
   rf:CUSTOMER_NATIONKEY, rg:CUSTOMER_PHONE, rh:CUSTOMER_ACCTBAL,
   ri:CUSTOMER_MKTSEGMENT, rj:CUSTOMER_COMMENT}))))
trigger nd_delete_CUSTOMER_send_push_s5_m_QUERY22_mCUSTOMER1 : { ra:{ key:int,
  value:int }, rb:int, rc:string, rd:string, re:int, rf:string, rg:real,
  rh:string, ri:string } = (\b1 -> bind b1 as {ra:vid, rb:CUSTOMER_CUSTKEY,
  rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
  rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
  ri:CUSTOMER_COMMENT} in bind QUERY22_mCUSTOMER1 as ind
  QUERY22_mCUSTOMER1_deref in
  ((nd_log_master_write {key:vid, value:5});
   (shuffle_QUERY22_mCUSTOMER1_to_QUERY22_bind_0t0 {ra:None immut,
      rb:frontier_int_int_float_float {key:vid, value:QUERY22_mCUSTOMER1_deref},
      rc:true}).iterate ((\b1 -> bind b1 as {key:ip, value:tuples} in 
   (nd_delete_CUSTOMER_rcv_push_s5_m_QUERY22_mCUSTOMER1, ip)<- {ra:tuples,
   rb:vid, rc:CUSTOMER_CUSTKEY, rd:CUSTOMER_NAME, re:CUSTOMER_ADDRESS,
   rf:CUSTOMER_NATIONKEY, rg:CUSTOMER_PHONE, rh:CUSTOMER_ACCTBAL,
   ri:CUSTOMER_MKTSEGMENT, rj:CUSTOMER_COMMENT}))))
trigger nd_delete_CUSTOMER_send_push_s5_m_QUERY22_mCUSTOMER1_L3_1 : { ra:{
  key:int, value:int }, rb:int, rc:string, rd:string, re:int, rf:string,
  rg:real, rh:string, ri:string } = (\b1 -> bind b1 as {ra:vid,
  rb:CUSTOMER_CUSTKEY, rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS,
  re:CUSTOMER_NATIONKEY, rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL,
  rh:CUSTOMER_MKTSEGMENT, ri:CUSTOMER_COMMENT} in bind QUERY22_mCUSTOMER1_L3_1
  as ind QUERY22_mCUSTOMER1_L3_1_deref in
  ((nd_log_master_write {key:vid, value:5});
   (shuffle_QUERY22_mCUSTOMER1_L3_1_to_QUERY22 {ra:None immut,
      rb:frontier_int_int {key:vid, value:QUERY22_mCUSTOMER1_L3_1_deref},
      rc:true}).iterate ((\b1 -> bind b1 as {key:ip, value:tuples} in 
   (nd_delete_CUSTOMER_rcv_push_s5_m_QUERY22_mCUSTOMER1_L3_1, ip)<- {ra:tuples,
   rb:vid, rc:CUSTOMER_CUSTKEY, rd:CUSTOMER_NAME, re:CUSTOMER_ADDRESS,
   rf:CUSTOMER_NATIONKEY, rg:CUSTOMER_PHONE, rh:CUSTOMER_ACCTBAL,
   ri:CUSTOMER_MKTSEGMENT, rj:CUSTOMER_COMMENT}))))
trigger nd_delete_CUSTOMER_rcv_push_s5_m_QUERY22_mCUSTOMER1_L2_1 : {
  ra:collection { key:{ key:int, value:int }, value:real } @ { Collection },
  rb:{ key:int, value:int }, rc:int, rd:string, re:string, rf:int, rg:string,
  rh:real, ri:string, rj:string } = (\b1 -> bind b1 as {ra:tuples, rb:vid,
  rc:CUSTOMER_CUSTKEY, rd:CUSTOMER_NAME, re:CUSTOMER_ADDRESS,
  rf:CUSTOMER_NATIONKEY, rg:CUSTOMER_PHONE, rh:CUSTOMER_ACCTBAL,
  ri:CUSTOMER_MKTSEGMENT, rj:CUSTOMER_COMMENT} in 
  ((nd_log_write_delete_CUSTOMER {ra:vid, rb:CUSTOMER_CUSTKEY,
      rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
      rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
      ri:CUSTOMER_COMMENT});
   tuples.iterate ((\tuple -> bind map_QUERY22_mCUSTOMER1_L2_1_s5_buf as ind
   map_QUERY22_mCUSTOMER1_L2_1_s5_buf_d in
   bind tuple as {key:_tup0, value:_tup1} in
     case ((map_QUERY22_mCUSTOMER1_L2_1_s5_buf_d.filter ((\b1 ->
       bind b1 as {key:key, value:value} in key == _tup0))).peek ()) of
       {Some vals -> map_QUERY22_mCUSTOMER1_L2_1_s5_buf_d.update vals tuple}
       {None -> map_QUERY22_mCUSTOMER1_L2_1_s5_buf_d.insert tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:5, rc:-1}
   then
     nd_delete_CUSTOMER_do_complete_s5 {ra:vid, rb:CUSTOMER_CUSTKEY,
       rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
       rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
       ri:CUSTOMER_COMMENT} else ())))
trigger nd_delete_CUSTOMER_rcv_push_s5_m_QUERY22_mCUSTOMER1 : { ra:collection {
  ra:{ key:int, value:int }, rb:int, rc:int, rd:real, re:real
  } @ { Collection }, rb:{ key:int, value:int }, rc:int, rd:string, re:string,
  rf:int, rg:string, rh:real, ri:string, rj:string } = (\b1 ->
  bind b1 as {ra:tuples, rb:vid, rc:CUSTOMER_CUSTKEY, rd:CUSTOMER_NAME,
  re:CUSTOMER_ADDRESS, rf:CUSTOMER_NATIONKEY, rg:CUSTOMER_PHONE,
  rh:CUSTOMER_ACCTBAL, ri:CUSTOMER_MKTSEGMENT, rj:CUSTOMER_COMMENT} in 
  ((nd_log_write_delete_CUSTOMER {ra:vid, rb:CUSTOMER_CUSTKEY,
      rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
      rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
      ri:CUSTOMER_COMMENT});
   tuples.iterate ((\tuple -> bind map_QUERY22_mCUSTOMER1_s5_buf as ind
   map_QUERY22_mCUSTOMER1_s5_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2, rd:_tup3, re:_tup4} in
     case ((map_QUERY22_mCUSTOMER1_s5_buf_d.filter ((\b1 -> bind b1 as {ra:ra,
       rb:rb, rc:rc, rd:rd, re:re} in ((ra == _tup0 and rd == _tup3) and rc ==
       _tup2) and rb == _tup1))).peek ()) of
       {Some vals -> map_QUERY22_mCUSTOMER1_s5_buf_d.update vals tuple}
       {None -> map_QUERY22_mCUSTOMER1_s5_buf_d.insert tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:5, rc:-1}
   then
     nd_delete_CUSTOMER_do_complete_s5 {ra:vid, rb:CUSTOMER_CUSTKEY,
       rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
       rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
       ri:CUSTOMER_COMMENT} else ())))
trigger nd_delete_CUSTOMER_rcv_push_s5_m_QUERY22_mCUSTOMER1_L3_1 : {
  ra:collection { ra:{ key:int, value:int }, rb:int, rc:int } @ { Collection },
  rb:{ key:int, value:int }, rc:int, rd:string, re:string, rf:int, rg:string,
  rh:real, ri:string, rj:string } = (\b1 -> bind b1 as {ra:tuples, rb:vid,
  rc:CUSTOMER_CUSTKEY, rd:CUSTOMER_NAME, re:CUSTOMER_ADDRESS,
  rf:CUSTOMER_NATIONKEY, rg:CUSTOMER_PHONE, rh:CUSTOMER_ACCTBAL,
  ri:CUSTOMER_MKTSEGMENT, rj:CUSTOMER_COMMENT} in 
  ((nd_log_write_delete_CUSTOMER {ra:vid, rb:CUSTOMER_CUSTKEY,
      rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
      rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
      ri:CUSTOMER_COMMENT});
   tuples.iterate ((\tuple -> bind map_QUERY22_mCUSTOMER1_L3_1_s5_buf as ind
   map_QUERY22_mCUSTOMER1_L3_1_s5_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2} in
     case ((map_QUERY22_mCUSTOMER1_L3_1_s5_buf_d.filter ((\b1 ->
       bind b1 as {ra:ra, rb:rb, rc:rc} in ra == _tup0 and rb == _tup1))).peek
       ()) of
       {Some vals -> map_QUERY22_mCUSTOMER1_L3_1_s5_buf_d.update vals tuple}
       {None -> map_QUERY22_mCUSTOMER1_L3_1_s5_buf_d.insert tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:5, rc:-1}
   then
     nd_delete_CUSTOMER_do_complete_s5 {ra:vid, rb:CUSTOMER_CUSTKEY,
       rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
       rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
       ri:CUSTOMER_COMMENT} else ())))
trigger nd_delete_CUSTOMER_do_complete_s3_trig : { ra:{ key:int, value:int },
  rb:int, rc:string, rd:string, re:int, rf:string, rg:real, rh:string,
  ri:string } = (\b1 -> bind b1 as {ra:vid, rb:CUSTOMER_CUSTKEY,
  rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
  rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
  ri:CUSTOMER_COMMENT} in 
  nd_delete_CUSTOMER_do_complete_s3 {ra:vid, rb:CUSTOMER_CUSTKEY,
    rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
    rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
    ri:CUSTOMER_COMMENT})
trigger nd_delete_CUSTOMER_do_complete_s4_trig : { ra:{ key:int, value:int },
  rb:int, rc:string, rd:string, re:int, rf:string, rg:real, rh:string,
  ri:string } = (\b1 -> bind b1 as {ra:vid, rb:CUSTOMER_CUSTKEY,
  rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
  rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
  ri:CUSTOMER_COMMENT} in 
  nd_delete_CUSTOMER_do_complete_s4 {ra:vid, rb:CUSTOMER_CUSTKEY,
    rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
    rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
    ri:CUSTOMER_COMMENT})
trigger delete_CUSTOMER_rcv_corrective_s5_m_QUERY22_mCUSTOMER1_L2_1 : {
  ra:address, rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int,
  value:int }, rf:collection { key:int, value:int } @ { Seq },
  rg:collection {i:real} @ { Collection } } = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:compute_vids,
  rg:delta_tuples} in 
  ((nd_add_delta_to_float {ra:map_QUERY22_mCUSTOMER1_L2_1_s5_buf, rb:false,
      rc:vid, rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:5}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_delete_CUSTOMER compute_vid as
         {ra:CUSTOMER_CUSTKEY, rb:CUSTOMER_NAME, rc:CUSTOMER_ADDRESS, rd:CUSTOMER_NATIONKEY, re:CUSTOMER_PHONE, rf:CUSTOMER_ACCTBAL, rg:CUSTOMER_MKTSEGMENT, rh:CUSTOMER_COMMENT}
         in
         acc_count +
           delete_CUSTOMER_do_corrective_s5_m_QUERY22_mCUSTOMER1_L2_1
             {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
             re:compute_vid, rf:CUSTOMER_CUSTKEY, rg:CUSTOMER_NAME,
             rh:CUSTOMER_ADDRESS, ri:CUSTOMER_NATIONKEY, rj:CUSTOMER_PHONE,
             rk:CUSTOMER_ACCTBAL, rl:CUSTOMER_MKTSEGMENT, rm:CUSTOMER_COMMENT,
             rn:delta_tuples} else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger delete_CUSTOMER_rcv_corrective_s5_m_QUERY22_mCUSTOMER1 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int },
  rf:collection { key:int, value:int } @ { Seq }, rg:collection { ra:int,
  rb:int, rc:real, rd:real } @ { Collection } } = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid,
  rf:compute_vids, rg:delta_tuples} in 
  ((nd_add_delta_to_int_int_float_float {ra:map_QUERY22_mCUSTOMER1_s5_buf,
      rb:false, rc:vid, rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:5}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_delete_CUSTOMER compute_vid as
         {ra:CUSTOMER_CUSTKEY, rb:CUSTOMER_NAME, rc:CUSTOMER_ADDRESS, rd:CUSTOMER_NATIONKEY, re:CUSTOMER_PHONE, rf:CUSTOMER_ACCTBAL, rg:CUSTOMER_MKTSEGMENT, rh:CUSTOMER_COMMENT}
         in
         acc_count +
           delete_CUSTOMER_do_corrective_s5_m_QUERY22_mCUSTOMER1 {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:compute_vid,
             rf:CUSTOMER_CUSTKEY, rg:CUSTOMER_NAME, rh:CUSTOMER_ADDRESS,
             ri:CUSTOMER_NATIONKEY, rj:CUSTOMER_PHONE, rk:CUSTOMER_ACCTBAL,
             rl:CUSTOMER_MKTSEGMENT, rm:CUSTOMER_COMMENT, rn:delta_tuples}
       else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger delete_CUSTOMER_rcv_corrective_s5_m_QUERY22_mCUSTOMER1_L3_1 : {
  ra:address, rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int,
  value:int }, rf:collection { key:int, value:int } @ { Seq }, rg:collection {
  key:int, value:int } @ { Collection } } = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:compute_vids,
  rg:delta_tuples} in 
  ((nd_add_delta_to_int_int {ra:map_QUERY22_mCUSTOMER1_L3_1_s5_buf, rb:false,
      rc:vid, rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:5}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_delete_CUSTOMER compute_vid as
         {ra:CUSTOMER_CUSTKEY, rb:CUSTOMER_NAME, rc:CUSTOMER_ADDRESS, rd:CUSTOMER_NATIONKEY, re:CUSTOMER_PHONE, rf:CUSTOMER_ACCTBAL, rg:CUSTOMER_MKTSEGMENT, rh:CUSTOMER_COMMENT}
         in
         acc_count +
           delete_CUSTOMER_do_corrective_s5_m_QUERY22_mCUSTOMER1_L3_1
             {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
             re:compute_vid, rf:CUSTOMER_CUSTKEY, rg:CUSTOMER_NAME,
             rh:CUSTOMER_ADDRESS, ri:CUSTOMER_NATIONKEY, rj:CUSTOMER_PHONE,
             rk:CUSTOMER_ACCTBAL, rl:CUSTOMER_MKTSEGMENT, rm:CUSTOMER_COMMENT,
             rn:delta_tuples} else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger nd_insert_ORDERS_rcv_put : { ra:address, rb:collection { key:int,
  value:int } @ { Collection }, rc:{ key:int, value:int }, rd:int, re:int,
  rf:string, rg:real, rh:int, ri:string, rj:string, rk:int, rl:string } =
  (\b1 -> bind b1 as {ra:sender_ip, rb:stmt_cnt_list, rc:vid,
  rd:ORDERS_ORDERKEY, re:ORDERS_CUSTKEY, rf:ORDERS_ORDERSTATUS,
  rg:ORDERS_TOTALPRICE, rh:ORDERS_ORDERDATE, ri:ORDERS_ORDERPRIORITY,
  rj:ORDERS_CLERK, rk:ORDERS_SHIPPRIORITY, rl:ORDERS_COMMENT} in 
  (stmt_cnt_list.iterate ((\b1 -> bind b1 as {key:stmt_id, value:count} in 
   if nd_check_stmt_cntr_index {ra:vid, rb:stmt_id, rc:count}
   then if stmt_id == 7
     then
       nd_insert_ORDERS_do_complete_s7 {ra:vid, rb:ORDERS_ORDERKEY,
         rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
         rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
         ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT}
     else if stmt_id == 6
       then
         nd_insert_ORDERS_do_complete_s6 {ra:vid, rb:ORDERS_ORDERKEY,
           rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
           rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
           ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} else () else ()));
   (sw_ack_rcv, sender_ip)<- {key:me, value:vid}))
trigger nd_insert_ORDERS_rcv_fetch : { ra:collection { key:int, value:int
  } @ { Collection }, rb:{ key:int, value:int }, rc:int, rd:int, re:string,
  rf:real, rg:int, rh:string, ri:string, rj:int, rk:string } = (\b1 ->
  bind b1 as {ra:stmt_map_ids, rb:vid, rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY,
  re:ORDERS_ORDERSTATUS, rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE,
  rh:ORDERS_ORDERPRIORITY, ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY,
  rk:ORDERS_COMMENT} in 
  ((nd_log_write_insert_ORDERS {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
      rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
      rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
      rj:ORDERS_COMMENT});
   stmt_map_ids.iterate ((\b1 -> bind b1 as {key:stmt_id, value:map_id} in 
   if stmt_id == 6
   then if map_id == 3
     then
       (nd_insert_ORDERS_send_push_s6_m_QUERY22_mCUSTOMER1_L2_1, me)<- {ra:vid,
       rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
       re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY,
       rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT}
     else if map_id == 2
       then (nd_insert_ORDERS_send_push_s6_m_QUERY22_mCUSTOMER1, me)<- {ra:vid,
         rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
         re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY,
         rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT}
       else if map_id == 4
         then
           (nd_insert_ORDERS_send_push_s6_m_QUERY22_mCUSTOMER1_L3_1, me)<- {ra:vid,
           rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
           re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY,
           rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT}
         else error (print "nd_rcv_fetch: invalid map id")
   else error (print "nd_rcv_fetch: invalid stmt id")))))
trigger nd_insert_ORDERS_send_push_s6_m_QUERY22_mCUSTOMER1_L2_1 : { ra:{
  key:int, value:int }, rb:int, rc:int, rd:string, re:real, rf:int, rg:string,
  rh:string, ri:int, rj:string } = (\b1 -> bind b1 as {ra:vid,
  rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
  re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY,
  rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} in bind
  QUERY22_mCUSTOMER1_L2_1 as ind QUERY22_mCUSTOMER1_L2_1_deref in
  ((nd_log_master_write {key:vid, value:6});
   (shuffle_QUERY22_mCUSTOMER1_L2_1_to_QUERY22 {ra:None immut,
      rb:frontier_float {key:vid, value:QUERY22_mCUSTOMER1_L2_1_deref},
      rc:true}).iterate ((\b1 -> bind b1 as {key:ip, value:tuples} in 
   (nd_insert_ORDERS_rcv_push_s6_m_QUERY22_mCUSTOMER1_L2_1, ip)<- {ra:tuples,
   rb:vid, rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
   rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
   ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT}))))
trigger nd_insert_ORDERS_send_push_s6_m_QUERY22_mCUSTOMER1 : { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:string, re:real, rf:int, rg:string,
  rh:string, ri:int, rj:string } = (\b1 -> bind b1 as {ra:vid,
  rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
  re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY,
  rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} in bind
  QUERY22_mCUSTOMER1 as ind QUERY22_mCUSTOMER1_deref in
  ((nd_log_master_write {key:vid, value:6});
   (shuffle_QUERY22_mCUSTOMER1_to_QUERY22_bind_0t0 {ra:None immut,
      rb:frontier_int_int_float_float {key:vid,
           value:QUERY22_mCUSTOMER1_deref.filter ((\b1 -> bind b1 as {ra:ra,
           rb:rb, rc:rc, rd:rd, re:re} in rc == ORDERS_CUSTKEY))}, rc:true}).iterate
   ((\b1 -> bind b1 as {key:ip, value:tuples} in 
   (nd_insert_ORDERS_rcv_push_s6_m_QUERY22_mCUSTOMER1, ip)<- {ra:tuples,
   rb:vid, rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
   rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
   ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT}))))
trigger nd_insert_ORDERS_send_push_s6_m_QUERY22_mCUSTOMER1_L3_1 : { ra:{
  key:int, value:int }, rb:int, rc:int, rd:string, re:real, rf:int, rg:string,
  rh:string, ri:int, rj:string } = (\b1 -> bind b1 as {ra:vid,
  rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
  re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY,
  rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} in bind
  QUERY22_mCUSTOMER1_L3_1 as ind QUERY22_mCUSTOMER1_L3_1_deref in
  ((nd_log_master_write {key:vid, value:6});
   (shuffle_QUERY22_mCUSTOMER1_L3_1_to_QUERY22 {ra:None immut,
      rb:frontier_int_int {key:vid, value:QUERY22_mCUSTOMER1_L3_1_deref.filter
           ((\b1 -> bind b1 as {ra:ra, rb:rb, rc:rc} in rb == ORDERS_CUSTKEY))},
      rc:true}).iterate ((\b1 -> bind b1 as {key:ip, value:tuples} in 
   (nd_insert_ORDERS_rcv_push_s6_m_QUERY22_mCUSTOMER1_L3_1, ip)<- {ra:tuples,
   rb:vid, rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
   rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
   ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT}))))
trigger nd_insert_ORDERS_rcv_push_s6_m_QUERY22_mCUSTOMER1_L2_1 : {
  ra:collection { key:{ key:int, value:int }, value:real } @ { Collection },
  rb:{ key:int, value:int }, rc:int, rd:int, re:string, rf:real, rg:int,
  rh:string, ri:string, rj:int, rk:string } = (\b1 -> bind b1 as {ra:tuples,
  rb:vid, rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
  rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
  ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT} in 
  ((nd_log_write_insert_ORDERS {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
      rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
      rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
      rj:ORDERS_COMMENT});
   tuples.iterate ((\tuple -> bind map_QUERY22_mCUSTOMER1_L2_1_s6_buf as ind
   map_QUERY22_mCUSTOMER1_L2_1_s6_buf_d in
   bind tuple as {key:_tup0, value:_tup1} in
     case ((map_QUERY22_mCUSTOMER1_L2_1_s6_buf_d.filter ((\b1 ->
       bind b1 as {key:key, value:value} in key == _tup0))).peek ()) of
       {Some vals -> map_QUERY22_mCUSTOMER1_L2_1_s6_buf_d.update vals tuple}
       {None -> map_QUERY22_mCUSTOMER1_L2_1_s6_buf_d.insert tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:6, rc:-1}
   then
     nd_insert_ORDERS_do_complete_s6 {ra:vid, rb:ORDERS_ORDERKEY,
       rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
       rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
       ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} else ())))
trigger nd_insert_ORDERS_rcv_push_s6_m_QUERY22_mCUSTOMER1 : { ra:collection {
  ra:{ key:int, value:int }, rb:int, rc:int, rd:real, re:real
  } @ { Collection }, rb:{ key:int, value:int }, rc:int, rd:int, re:string,
  rf:real, rg:int, rh:string, ri:string, rj:int, rk:string } = (\b1 ->
  bind b1 as {ra:tuples, rb:vid, rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY,
  re:ORDERS_ORDERSTATUS, rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE,
  rh:ORDERS_ORDERPRIORITY, ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY,
  rk:ORDERS_COMMENT} in 
  ((nd_log_write_insert_ORDERS {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
      rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
      rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
      rj:ORDERS_COMMENT});
   tuples.iterate ((\tuple -> bind map_QUERY22_mCUSTOMER1_s6_buf as ind
   map_QUERY22_mCUSTOMER1_s6_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2, rd:_tup3, re:_tup4} in
     case ((map_QUERY22_mCUSTOMER1_s6_buf_d.filter ((\b1 -> bind b1 as {ra:ra,
       rb:rb, rc:rc, rd:rd, re:re} in ((ra == _tup0 and rd == _tup3) and rc ==
       _tup2) and rb == _tup1))).peek ()) of
       {Some vals -> map_QUERY22_mCUSTOMER1_s6_buf_d.update vals tuple}
       {None -> map_QUERY22_mCUSTOMER1_s6_buf_d.insert tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:6, rc:-1}
   then
     nd_insert_ORDERS_do_complete_s6 {ra:vid, rb:ORDERS_ORDERKEY,
       rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
       rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
       ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} else ())))
trigger nd_insert_ORDERS_rcv_push_s6_m_QUERY22_mCUSTOMER1_L3_1 : {
  ra:collection { ra:{ key:int, value:int }, rb:int, rc:int } @ { Collection },
  rb:{ key:int, value:int }, rc:int, rd:int, re:string, rf:real, rg:int,
  rh:string, ri:string, rj:int, rk:string } = (\b1 -> bind b1 as {ra:tuples,
  rb:vid, rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
  rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
  ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT} in 
  ((nd_log_write_insert_ORDERS {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
      rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
      rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
      rj:ORDERS_COMMENT});
   tuples.iterate ((\tuple -> bind map_QUERY22_mCUSTOMER1_L3_1_s6_buf as ind
   map_QUERY22_mCUSTOMER1_L3_1_s6_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2} in
     case ((map_QUERY22_mCUSTOMER1_L3_1_s6_buf_d.filter ((\b1 ->
       bind b1 as {ra:ra, rb:rb, rc:rc} in ra == _tup0 and rb == _tup1))).peek
       ()) of
       {Some vals -> map_QUERY22_mCUSTOMER1_L3_1_s6_buf_d.update vals tuple}
       {None -> map_QUERY22_mCUSTOMER1_L3_1_s6_buf_d.insert tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:6, rc:-1}
   then
     nd_insert_ORDERS_do_complete_s6 {ra:vid, rb:ORDERS_ORDERKEY,
       rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
       rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
       ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} else ())))
trigger nd_insert_ORDERS_do_complete_s7_trig : { ra:{ key:int, value:int },
  rb:int, rc:int, rd:string, re:real, rf:int, rg:string, rh:string, ri:int,
  rj:string } = (\b1 -> bind b1 as {ra:vid, rb:ORDERS_ORDERKEY,
  rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
  rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
  ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} in 
  nd_insert_ORDERS_do_complete_s7 {ra:vid, rb:ORDERS_ORDERKEY,
    rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
    rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
    ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT})
trigger insert_ORDERS_rcv_corrective_s6_m_QUERY22_mCUSTOMER1_L2_1 : {
  ra:address, rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int,
  value:int }, rf:collection { key:int, value:int } @ { Seq },
  rg:collection {i:real} @ { Collection } } = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:compute_vids,
  rg:delta_tuples} in 
  ((nd_add_delta_to_float {ra:map_QUERY22_mCUSTOMER1_L2_1_s6_buf, rb:false,
      rc:vid, rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:6}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_insert_ORDERS compute_vid as
         {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
         in
         acc_count +
           insert_ORDERS_do_corrective_s6_m_QUERY22_mCUSTOMER1_L2_1
             {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
             re:compute_vid, rf:ORDERS_ORDERKEY, rg:ORDERS_CUSTKEY,
             rh:ORDERS_ORDERSTATUS, ri:ORDERS_TOTALPRICE, rj:ORDERS_ORDERDATE,
             rk:ORDERS_ORDERPRIORITY, rl:ORDERS_CLERK, rm:ORDERS_SHIPPRIORITY,
             rn:ORDERS_COMMENT, ro:delta_tuples} else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger insert_ORDERS_rcv_corrective_s6_m_QUERY22_mCUSTOMER1 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int },
  rf:collection { key:int, value:int } @ { Seq }, rg:collection { ra:int,
  rb:int, rc:real, rd:real } @ { Collection } } = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid,
  rf:compute_vids, rg:delta_tuples} in 
  ((nd_add_delta_to_int_int_float_float {ra:map_QUERY22_mCUSTOMER1_s6_buf,
      rb:false, rc:vid, rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:6}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_insert_ORDERS compute_vid as
         {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
         in
         acc_count +
           insert_ORDERS_do_corrective_s6_m_QUERY22_mCUSTOMER1 {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:compute_vid,
             rf:ORDERS_ORDERKEY, rg:ORDERS_CUSTKEY, rh:ORDERS_ORDERSTATUS,
             ri:ORDERS_TOTALPRICE, rj:ORDERS_ORDERDATE,
             rk:ORDERS_ORDERPRIORITY, rl:ORDERS_CLERK, rm:ORDERS_SHIPPRIORITY,
             rn:ORDERS_COMMENT, ro:delta_tuples} else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger insert_ORDERS_rcv_corrective_s6_m_QUERY22_mCUSTOMER1_L3_1 : {
  ra:address, rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int,
  value:int }, rf:collection { key:int, value:int } @ { Seq }, rg:collection {
  key:int, value:int } @ { Collection } } = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:compute_vids,
  rg:delta_tuples} in 
  ((nd_add_delta_to_int_int {ra:map_QUERY22_mCUSTOMER1_L3_1_s6_buf, rb:false,
      rc:vid, rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:6}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_insert_ORDERS compute_vid as
         {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
         in
         acc_count +
           insert_ORDERS_do_corrective_s6_m_QUERY22_mCUSTOMER1_L3_1
             {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
             re:compute_vid, rf:ORDERS_ORDERKEY, rg:ORDERS_CUSTKEY,
             rh:ORDERS_ORDERSTATUS, ri:ORDERS_TOTALPRICE, rj:ORDERS_ORDERDATE,
             rk:ORDERS_ORDERPRIORITY, rl:ORDERS_CLERK, rm:ORDERS_SHIPPRIORITY,
             rn:ORDERS_COMMENT, ro:delta_tuples} else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger nd_delete_ORDERS_rcv_put : { ra:address, rb:collection { key:int,
  value:int } @ { Collection }, rc:{ key:int, value:int }, rd:int, re:int,
  rf:string, rg:real, rh:int, ri:string, rj:string, rk:int, rl:string } =
  (\b1 -> bind b1 as {ra:sender_ip, rb:stmt_cnt_list, rc:vid,
  rd:ORDERS_ORDERKEY, re:ORDERS_CUSTKEY, rf:ORDERS_ORDERSTATUS,
  rg:ORDERS_TOTALPRICE, rh:ORDERS_ORDERDATE, ri:ORDERS_ORDERPRIORITY,
  rj:ORDERS_CLERK, rk:ORDERS_SHIPPRIORITY, rl:ORDERS_COMMENT} in 
  (stmt_cnt_list.iterate ((\b1 -> bind b1 as {key:stmt_id, value:count} in 
   if nd_check_stmt_cntr_index {ra:vid, rb:stmt_id, rc:count}
   then if stmt_id == 9
     then
       nd_delete_ORDERS_do_complete_s9 {ra:vid, rb:ORDERS_ORDERKEY,
         rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
         rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
         ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT}
     else if stmt_id == 8
       then
         nd_delete_ORDERS_do_complete_s8 {ra:vid, rb:ORDERS_ORDERKEY,
           rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
           rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
           ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} else () else ()));
   (sw_ack_rcv, sender_ip)<- {key:me, value:vid}))
trigger nd_delete_ORDERS_rcv_fetch : { ra:collection { key:int, value:int
  } @ { Collection }, rb:{ key:int, value:int }, rc:int, rd:int, re:string,
  rf:real, rg:int, rh:string, ri:string, rj:int, rk:string } = (\b1 ->
  bind b1 as {ra:stmt_map_ids, rb:vid, rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY,
  re:ORDERS_ORDERSTATUS, rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE,
  rh:ORDERS_ORDERPRIORITY, ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY,
  rk:ORDERS_COMMENT} in 
  ((nd_log_write_delete_ORDERS {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
      rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
      rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
      rj:ORDERS_COMMENT});
   stmt_map_ids.iterate ((\b1 -> bind b1 as {key:stmt_id, value:map_id} in 
   if stmt_id == 8
   then if map_id == 3
     then
       (nd_delete_ORDERS_send_push_s8_m_QUERY22_mCUSTOMER1_L2_1, me)<- {ra:vid,
       rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
       re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY,
       rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT}
     else if map_id == 2
       then (nd_delete_ORDERS_send_push_s8_m_QUERY22_mCUSTOMER1, me)<- {ra:vid,
         rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
         re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY,
         rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT}
       else if map_id == 4
         then
           (nd_delete_ORDERS_send_push_s8_m_QUERY22_mCUSTOMER1_L3_1, me)<- {ra:vid,
           rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
           re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY,
           rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT}
         else error (print "nd_rcv_fetch: invalid map id")
   else error (print "nd_rcv_fetch: invalid stmt id")))))
trigger nd_delete_ORDERS_send_push_s8_m_QUERY22_mCUSTOMER1_L2_1 : { ra:{
  key:int, value:int }, rb:int, rc:int, rd:string, re:real, rf:int, rg:string,
  rh:string, ri:int, rj:string } = (\b1 -> bind b1 as {ra:vid,
  rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
  re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY,
  rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} in bind
  QUERY22_mCUSTOMER1_L2_1 as ind QUERY22_mCUSTOMER1_L2_1_deref in
  ((nd_log_master_write {key:vid, value:8});
   (shuffle_QUERY22_mCUSTOMER1_L2_1_to_QUERY22 {ra:None immut,
      rb:frontier_float {key:vid, value:QUERY22_mCUSTOMER1_L2_1_deref},
      rc:true}).iterate ((\b1 -> bind b1 as {key:ip, value:tuples} in 
   (nd_delete_ORDERS_rcv_push_s8_m_QUERY22_mCUSTOMER1_L2_1, ip)<- {ra:tuples,
   rb:vid, rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
   rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
   ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT}))))
trigger nd_delete_ORDERS_send_push_s8_m_QUERY22_mCUSTOMER1 : { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:string, re:real, rf:int, rg:string,
  rh:string, ri:int, rj:string } = (\b1 -> bind b1 as {ra:vid,
  rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
  re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY,
  rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} in bind
  QUERY22_mCUSTOMER1 as ind QUERY22_mCUSTOMER1_deref in
  ((nd_log_master_write {key:vid, value:8});
   (shuffle_QUERY22_mCUSTOMER1_to_QUERY22_bind_0t0 {ra:None immut,
      rb:frontier_int_int_float_float {key:vid, value:QUERY22_mCUSTOMER1_deref},
      rc:true}).iterate ((\b1 -> bind b1 as {key:ip, value:tuples} in 
   (nd_delete_ORDERS_rcv_push_s8_m_QUERY22_mCUSTOMER1, ip)<- {ra:tuples,
   rb:vid, rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
   rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
   ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT}))))
trigger nd_delete_ORDERS_send_push_s8_m_QUERY22_mCUSTOMER1_L3_1 : { ra:{
  key:int, value:int }, rb:int, rc:int, rd:string, re:real, rf:int, rg:string,
  rh:string, ri:int, rj:string } = (\b1 -> bind b1 as {ra:vid,
  rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
  re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY,
  rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} in bind
  QUERY22_mCUSTOMER1_L3_1 as ind QUERY22_mCUSTOMER1_L3_1_deref in
  ((nd_log_master_write {key:vid, value:8});
   (shuffle_QUERY22_mCUSTOMER1_L3_1_to_QUERY22 {ra:None immut,
      rb:frontier_int_int {key:vid, value:QUERY22_mCUSTOMER1_L3_1_deref},
      rc:true}).iterate ((\b1 -> bind b1 as {key:ip, value:tuples} in 
   (nd_delete_ORDERS_rcv_push_s8_m_QUERY22_mCUSTOMER1_L3_1, ip)<- {ra:tuples,
   rb:vid, rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
   rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
   ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT}))))
trigger nd_delete_ORDERS_rcv_push_s8_m_QUERY22_mCUSTOMER1_L2_1 : {
  ra:collection { key:{ key:int, value:int }, value:real } @ { Collection },
  rb:{ key:int, value:int }, rc:int, rd:int, re:string, rf:real, rg:int,
  rh:string, ri:string, rj:int, rk:string } = (\b1 -> bind b1 as {ra:tuples,
  rb:vid, rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
  rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
  ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT} in 
  ((nd_log_write_delete_ORDERS {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
      rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
      rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
      rj:ORDERS_COMMENT});
   tuples.iterate ((\tuple -> bind map_QUERY22_mCUSTOMER1_L2_1_s8_buf as ind
   map_QUERY22_mCUSTOMER1_L2_1_s8_buf_d in
   bind tuple as {key:_tup0, value:_tup1} in
     case ((map_QUERY22_mCUSTOMER1_L2_1_s8_buf_d.filter ((\b1 ->
       bind b1 as {key:key, value:value} in key == _tup0))).peek ()) of
       {Some vals -> map_QUERY22_mCUSTOMER1_L2_1_s8_buf_d.update vals tuple}
       {None -> map_QUERY22_mCUSTOMER1_L2_1_s8_buf_d.insert tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:8, rc:-1}
   then
     nd_delete_ORDERS_do_complete_s8 {ra:vid, rb:ORDERS_ORDERKEY,
       rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
       rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
       ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} else ())))
trigger nd_delete_ORDERS_rcv_push_s8_m_QUERY22_mCUSTOMER1 : { ra:collection {
  ra:{ key:int, value:int }, rb:int, rc:int, rd:real, re:real
  } @ { Collection }, rb:{ key:int, value:int }, rc:int, rd:int, re:string,
  rf:real, rg:int, rh:string, ri:string, rj:int, rk:string } = (\b1 ->
  bind b1 as {ra:tuples, rb:vid, rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY,
  re:ORDERS_ORDERSTATUS, rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE,
  rh:ORDERS_ORDERPRIORITY, ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY,
  rk:ORDERS_COMMENT} in 
  ((nd_log_write_delete_ORDERS {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
      rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
      rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
      rj:ORDERS_COMMENT});
   tuples.iterate ((\tuple -> bind map_QUERY22_mCUSTOMER1_s8_buf as ind
   map_QUERY22_mCUSTOMER1_s8_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2, rd:_tup3, re:_tup4} in
     case ((map_QUERY22_mCUSTOMER1_s8_buf_d.filter ((\b1 -> bind b1 as {ra:ra,
       rb:rb, rc:rc, rd:rd, re:re} in ((ra == _tup0 and rd == _tup3) and rc ==
       _tup2) and rb == _tup1))).peek ()) of
       {Some vals -> map_QUERY22_mCUSTOMER1_s8_buf_d.update vals tuple}
       {None -> map_QUERY22_mCUSTOMER1_s8_buf_d.insert tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:8, rc:-1}
   then
     nd_delete_ORDERS_do_complete_s8 {ra:vid, rb:ORDERS_ORDERKEY,
       rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
       rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
       ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} else ())))
trigger nd_delete_ORDERS_rcv_push_s8_m_QUERY22_mCUSTOMER1_L3_1 : {
  ra:collection { ra:{ key:int, value:int }, rb:int, rc:int } @ { Collection },
  rb:{ key:int, value:int }, rc:int, rd:int, re:string, rf:real, rg:int,
  rh:string, ri:string, rj:int, rk:string } = (\b1 -> bind b1 as {ra:tuples,
  rb:vid, rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
  rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
  ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT} in 
  ((nd_log_write_delete_ORDERS {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
      rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
      rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
      rj:ORDERS_COMMENT});
   tuples.iterate ((\tuple -> bind map_QUERY22_mCUSTOMER1_L3_1_s8_buf as ind
   map_QUERY22_mCUSTOMER1_L3_1_s8_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2} in
     case ((map_QUERY22_mCUSTOMER1_L3_1_s8_buf_d.filter ((\b1 ->
       bind b1 as {ra:ra, rb:rb, rc:rc} in ra == _tup0 and rb == _tup1))).peek
       ()) of
       {Some vals -> map_QUERY22_mCUSTOMER1_L3_1_s8_buf_d.update vals tuple}
       {None -> map_QUERY22_mCUSTOMER1_L3_1_s8_buf_d.insert tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:8, rc:-1}
   then
     nd_delete_ORDERS_do_complete_s8 {ra:vid, rb:ORDERS_ORDERKEY,
       rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
       rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
       ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} else ())))
trigger nd_delete_ORDERS_do_complete_s9_trig : { ra:{ key:int, value:int },
  rb:int, rc:int, rd:string, re:real, rf:int, rg:string, rh:string, ri:int,
  rj:string } = (\b1 -> bind b1 as {ra:vid, rb:ORDERS_ORDERKEY,
  rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
  rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
  ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} in 
  nd_delete_ORDERS_do_complete_s9 {ra:vid, rb:ORDERS_ORDERKEY,
    rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
    rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
    ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT})
trigger delete_ORDERS_rcv_corrective_s8_m_QUERY22_mCUSTOMER1_L2_1 : {
  ra:address, rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int,
  value:int }, rf:collection { key:int, value:int } @ { Seq },
  rg:collection {i:real} @ { Collection } } = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:compute_vids,
  rg:delta_tuples} in 
  ((nd_add_delta_to_float {ra:map_QUERY22_mCUSTOMER1_L2_1_s8_buf, rb:false,
      rc:vid, rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:8}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_delete_ORDERS compute_vid as
         {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
         in
         acc_count +
           delete_ORDERS_do_corrective_s8_m_QUERY22_mCUSTOMER1_L2_1
             {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
             re:compute_vid, rf:ORDERS_ORDERKEY, rg:ORDERS_CUSTKEY,
             rh:ORDERS_ORDERSTATUS, ri:ORDERS_TOTALPRICE, rj:ORDERS_ORDERDATE,
             rk:ORDERS_ORDERPRIORITY, rl:ORDERS_CLERK, rm:ORDERS_SHIPPRIORITY,
             rn:ORDERS_COMMENT, ro:delta_tuples} else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger delete_ORDERS_rcv_corrective_s8_m_QUERY22_mCUSTOMER1 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int },
  rf:collection { key:int, value:int } @ { Seq }, rg:collection { ra:int,
  rb:int, rc:real, rd:real } @ { Collection } } = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid,
  rf:compute_vids, rg:delta_tuples} in 
  ((nd_add_delta_to_int_int_float_float {ra:map_QUERY22_mCUSTOMER1_s8_buf,
      rb:false, rc:vid, rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:8}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_delete_ORDERS compute_vid as
         {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
         in
         acc_count +
           delete_ORDERS_do_corrective_s8_m_QUERY22_mCUSTOMER1 {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:compute_vid,
             rf:ORDERS_ORDERKEY, rg:ORDERS_CUSTKEY, rh:ORDERS_ORDERSTATUS,
             ri:ORDERS_TOTALPRICE, rj:ORDERS_ORDERDATE,
             rk:ORDERS_ORDERPRIORITY, rl:ORDERS_CLERK, rm:ORDERS_SHIPPRIORITY,
             rn:ORDERS_COMMENT, ro:delta_tuples} else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger delete_ORDERS_rcv_corrective_s8_m_QUERY22_mCUSTOMER1_L3_1 : {
  ra:address, rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int,
  value:int }, rf:collection { key:int, value:int } @ { Seq }, rg:collection {
  key:int, value:int } @ { Collection } } = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:compute_vids,
  rg:delta_tuples} in 
  ((nd_add_delta_to_int_int {ra:map_QUERY22_mCUSTOMER1_L3_1_s8_buf, rb:false,
      rc:vid, rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:8}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_delete_ORDERS compute_vid as
         {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
         in
         acc_count +
           delete_ORDERS_do_corrective_s8_m_QUERY22_mCUSTOMER1_L3_1
             {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
             re:compute_vid, rf:ORDERS_ORDERKEY, rg:ORDERS_CUSTKEY,
             rh:ORDERS_ORDERSTATUS, ri:ORDERS_TOTALPRICE, rj:ORDERS_ORDERDATE,
             rk:ORDERS_ORDERPRIORITY, rl:ORDERS_CLERK, rm:ORDERS_SHIPPRIORITY,
             rn:ORDERS_COMMENT, ro:delta_tuples} else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))


source master : () = value(())feed master |> ms_send_addr_self


source switch : { ra:string, rb:int, rc:real, rd:string, re:int, rf:string,
rg:string, rh:string, ri:string, rj:string, rk:int, rl:real, rm:real, rn:int,
ro:string, rp:string, rq:string, rr:string, rs:int, rt:string, ru:int,
rv:string, rw:string, rx:int, ry:string, rz:real, rza:string, rzb:int,
rzc:real, rzd:string, rze:string, rzf:string, rzg:string, rzh:int, rzi:int,
rzj:int, rzk:real, rzl:real, rzm:real, rzn:string
} = file "/k3/K3/temp/tpch22a.csv" psvfeed switch |> sw_demux








