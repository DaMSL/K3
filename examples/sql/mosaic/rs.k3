include "Core/Builtins.k3"
include "Annotation/Map.k3"
include "Annotation/Set.k3"
include "Annotation/Seq.k3"
declare my_peers : collection { i:address } @ {Collection} =
  peers.fold (\acc -> (\x -> (acc.insert {i:x.addr}; acc))) empty { i:address} @ Collection
declare ms_rcv_sw_init_ack_cnt : mut int = 0


declare ms_rcv_jobs_ack_cnt : mut int = 0


declare ms_rcv_job_cnt : mut int = 0


declare ms_rcv_node_done_cnt : mut int = 0


declare ms_rcv_switch_done_cnt : mut int = 0


declare g_init_vid : { key:int, value:int } = {key:0, value:0}


declare g_min_vid : { key:int, value:int } = {key:0, value:0}


declare g_max_vid : { key:int, value:int } = {key:get_max_int (),
  value:get_max_int ()}


declare job_master : int = 0


declare job_switch : int = 1


declare job_node : int = 2


declare job_timer : int = 3


declare job : mut int = if role == "master" then job_master
  else if role == "switch" then job_switch
    else if role == "node" then job_node
      else if role == "timer" then job_timer
        else error (print "failed to find proper role")


declare jobs : mut collection { key:address, value:int } @ { Map }


declare master_addr : mut address


declare timer_addr : mut address


declare nodes : mut collection {i:address} @ { Collection }


declare switches : mut collection {i:address} @ { Collection }


declare num_peers : mut int = my_peers.size ()


declare num_switches : mut int


declare num_nodes : mut int


declare map_ids : collection { r1:int, r2:string, r3:int } @ { Collection } =
  {| r1:int, r2:string, r3:int | {r1:1, r2:"__SQL_SUM_AGGREGATE_1", r3:1},
  {r1:2, r2:"__SQL_SUM_AGGREGATE_1_mS1", r3:2}, {r1:3,
  r2:"__SQL_SUM_AGGREGATE_1_mR1", r3:2}, {r1:4, r2:"__SQL_SUM_AGGREGATE_2",
  r3:1}, {r1:5, r2:"__SQL_SUM_AGGREGATE_2_mS3", r3:2}, {r1:6,
  r2:"__SQL_SUM_AGGREGATE_2_mR1", r3:2}|} @ { Collection }


declare trig_ids : collection { r1:int, r2:string,
  r3:collection {i:int} @ { Seq } } @ { Collection } = {| r1:int, r2:string,
  r3:collection {i:int} @ { Seq } | {r1:2, r2:"sw_insert_R", r3:{|i:int| 1,
  2|} @ { Seq }}, {r1:0, r2:"sw_insert_S", r3:{|i:int| 1,
  2|} @ { Seq }}|} @ { Collection }


declare nd_stmt_cntrs : collection { key:{ key:{ key:int, value:int },
  value:int }, value:{ key:int, value:collection { key:int, value:int
  } @ { Map } } } @ { Map }


declare nd_log_master : collection { r1:{ key:int, value:int }, r2:int, r3:int
  } @ { Collection }


declare nd_state_normal : int = 0


declare nd_state_done : int = 1


declare nd_state : mut int = nd_state_normal


declare sw_state_pre_init : int = 0


declare sw_state_idle : int = 1


declare sw_state_sending : int = 2


declare sw_state_wait_vid : int = 3


declare sw_state_done : int = 4


declare sw_state : mut int = sw_state_pre_init


declare sw_trig_buf_idx : collection {i:int} @ { Seq }


declare ms_start_time : mut int


declare ms_end_time : mut int


declare sw_buf_insert_S : collection { key:int, value:int } @ { Seq }


declare sw_buf_insert_R : collection { key:int, value:int } @ { Seq }


declare nd_log_insert_S : collection { r1:{ key:int, value:int }, r2:int,
  r3:int } @ { Collection }


declare nd_log_insert_R : collection { r1:{ key:int, value:int }, r2:int,
  r3:int } @ { Collection }


declare __SQL_SUM_AGGREGATE_1 : ind collection { key:{ key:int, value:int },
  value:int } @ { Collection } = ind {| key:{ key:int, value:int }, value:int |
  {key:g_init_vid, value:0}|} @ { Collection }


declare __SQL_SUM_AGGREGATE_1_mS1 : ind collection { r1:{ key:int, value:int },
  r2:int, r3:int } @ { Collection } = ind empty { r1:{ key:int, value:int },
  r2:int, r3:int } @ { Collection }


declare __SQL_SUM_AGGREGATE_1_mR1 : ind collection { r1:{ key:int, value:int },
  r2:int, r3:int } @ { Collection } = ind empty { r1:{ key:int, value:int },
  r2:int, r3:int } @ { Collection }


declare __SQL_SUM_AGGREGATE_2 : ind collection { key:{ key:int, value:int },
  value:int } @ { Collection } = ind {| key:{ key:int, value:int }, value:int |
  {key:g_init_vid, value:0}|} @ { Collection }


declare __SQL_SUM_AGGREGATE_2_mS3 : ind collection { r1:{ key:int, value:int },
  r2:int, r3:int } @ { Collection } = ind empty { r1:{ key:int, value:int },
  r2:int, r3:int } @ { Collection }


declare __SQL_SUM_AGGREGATE_2_mR1 : ind collection { r1:{ key:int, value:int },
  r2:int, r3:int } @ { Collection } = ind empty { r1:{ key:int, value:int },
  r2:int, r3:int } @ { Collection }


declare map___SQL_SUM_AGGREGATE_1_mS1_s0_buf : ind collection { r1:{ key:int,
  value:int }, r2:int, r3:int } @ { Collection } = ind empty { r1:{ key:int,
  value:int }, r2:int, r3:int } @ { Collection }


declare map___SQL_SUM_AGGREGATE_1_mS1_s2_buf : ind collection { r1:{ key:int,
  value:int }, r2:int, r3:int } @ { Collection } = ind empty { r1:{ key:int,
  value:int }, r2:int, r3:int } @ { Collection }


declare map___SQL_SUM_AGGREGATE_2_mS3_s2_buf : ind collection { r1:{ key:int,
  value:int }, r2:int, r3:int } @ { Collection } = ind empty { r1:{ key:int,
  value:int }, r2:int, r3:int } @ { Collection }


declare map___SQL_SUM_AGGREGATE_1_mS1_s4_buf : ind collection { r1:{ key:int,
  value:int }, r2:int, r3:int } @ { Collection } = ind empty { r1:{ key:int,
  value:int }, r2:int, r3:int } @ { Collection }


declare map___SQL_SUM_AGGREGATE_1_mS1_s6_buf : ind collection { r1:{ key:int,
  value:int }, r2:int, r3:int } @ { Collection } = ind empty { r1:{ key:int,
  value:int }, r2:int, r3:int } @ { Collection }


declare map___SQL_SUM_AGGREGATE_2_mS3_s6_buf : ind collection { r1:{ key:int,
  value:int }, r2:int, r3:int } @ { Collection } = ind empty { r1:{ key:int,
  value:int }, r2:int, r3:int } @ { Collection }


declare map___SQL_SUM_AGGREGATE_1_mR1_s8_buf : ind collection { r1:{ key:int,
  value:int }, r2:int, r3:int } @ { Collection } = ind empty { r1:{ key:int,
  value:int }, r2:int, r3:int } @ { Collection }


declare map___SQL_SUM_AGGREGATE_2_mR1_s10_buf : ind collection { r1:{ key:int,
  value:int }, r2:int, r3:int } @ { Collection } = ind empty { r1:{ key:int,
  value:int }, r2:int, r3:int } @ { Collection }


declare map___SQL_SUM_AGGREGATE_1_mR1_s10_buf : ind collection { r1:{ key:int,
  value:int }, r2:int, r3:int } @ { Collection } = ind empty { r1:{ key:int,
  value:int }, r2:int, r3:int } @ { Collection }


declare map___SQL_SUM_AGGREGATE_1_mR1_s12_buf : ind collection { r1:{ key:int,
  value:int }, r2:int, r3:int } @ { Collection } = ind empty { r1:{ key:int,
  value:int }, r2:int, r3:int } @ { Collection }


declare map___SQL_SUM_AGGREGATE_2_mR1_s14_buf : ind collection { r1:{ key:int,
  value:int }, r2:int, r3:int } @ { Collection } = ind empty { r1:{ key:int,
  value:int }, r2:int, r3:int } @ { Collection }


declare map___SQL_SUM_AGGREGATE_1_mR1_s14_buf : ind collection { r1:{ key:int,
  value:int }, r2:int, r3:int } @ { Collection } = ind empty { r1:{ key:int,
  value:int }, r2:int, r3:int } @ { Collection }


declare tm_timer_list : mut collection { r1:int, r2:int, r3:address } @ { Seq }


declare sw_next_switch_addr : mut address


declare sw_need_vid_cntr : mut int = 0


declare sw_token_vid_list : collection { key:{ key:int, value:int }, value:int
  } @ { Seq }


declare sw_highest_vid : mut { key:int, value:int }


declare node_ring : mut collection { key:address, value:int } @ { Seq }


declare replicas : mut int = 8


declare pmap_input : collection { key:string, value:collection { key:int,
  value:int } @ { Seq } } @ { Seq } = {| key:string, value:collection {
  key:int, value:int } @ { Seq } | {key:"__SQL_SUM_AGGREGATE_1_mS1", value:{|
  key:int, value:int | {key:0, value:16}|} @ { Seq }},
  {key:"__SQL_SUM_AGGREGATE_1_mR1", value:{| key:int, value:int | {key:0,
  value:16}|} @ { Seq }}, {key:"__SQL_SUM_AGGREGATE_2_mS3", value:{| key:int,
  value:int | {key:0, value:16}|} @ { Seq }}, {key:"__SQL_SUM_AGGREGATE_2_mR1",
  value:{| key:int, value:int | {key:0, value:16}|} @ { Seq }}|} @ { Seq }


declare pmap_data : collection { key:int, value:collection { key:int, value:int
  } @ { Seq } } @ { Seq } = pmap_input.fold ((\__acc_map -> (\b3 ->
  bind b3 as {key:map_name, value:map_types} in __acc_map.combine ({| key:int,
  value:collection { key:int, value:int } @ { Seq } | {key:(case
  ((map_ids.filter ((\b1 -> bind b1 as {r1:r1, r2:r2, r3:r3} in r2 ==
  map_name))).peek ()) of
  {Some x -> x}{None -> error (print "can't find map in map_ids")}).r1,
  value:map_types}|} @ { Seq })))) empty { key:int, value:collection { key:int,
  value:int } @ { Seq } } @ { Seq }


declare sw_max_ack_vid : mut { key:int, value:int } = g_min_vid


declare sw_ack_log : collection { key:{ key:int, value:int },
  value:collection {i:address} @ { Set } } @ { Map }


declare ms_gc_interval : mut int = 20000


declare ms_gc_vid_map : mut collection { key:address, value:{ key:int,
  value:int } } @ { Map }


declare ms_gc_vid_ctr : mut int = 0


declare ms_num_gc_expected : mut int = my_peers.size ()


declare nd_log_master_write : { r1:{ key:int, value:int }, r2:int, r3:int
  } -> () = (\b1 -> bind b1 as {r1:vid, r2:trig_id, r3:stmt_id} in 
  nd_log_master.insert {r1:vid, r2:trig_id, r3:stmt_id})


declare nd_log_write_insert_S : { r1:{ key:int, value:int }, r2:int, r3:int
  } -> () = (\b1 -> bind b1 as {r1:vid, r2:S_B, r3:S_C} in 
  nd_log_insert_S.insert {r1:vid, r2:S_B, r3:S_C})


declare nd_log_write_insert_R : { r1:{ key:int, value:int }, r2:int, r3:int
  } -> () = (\b1 -> bind b1 as {r1:vid, r2:R_A, r3:R_B} in 
  nd_log_insert_R.insert {r1:vid, r2:R_A, r3:R_B})


declare nd_log_get_bound_insert_S : { key:int, value:int } -> { r1:{ key:int,
  value:int }, r2:int, r3:int } = (\vid -> case ((nd_log_insert_S.filter
  ((\b1 -> bind b1 as {r1:r1, r2:r2, r3:r3} in r1 == vid))).peek ()) of
  {Some x -> x}{None -> error (print "failed to find log")})


declare nd_log_get_bound_insert_R : { key:int, value:int } -> { r1:{ key:int,
  value:int }, r2:int, r3:int } = (\vid -> case ((nd_log_insert_R.filter
  ((\b1 -> bind b1 as {r1:r1, r2:r2, r3:r3} in r1 == vid))).peek ()) of
  {Some x -> x}{None -> error (print "failed to find log")})


declare nd_log_read_geq : { key:int, value:int } -> collection { r1:{ key:int,
  value:int }, r2:int, r3:int } @ { Collection } = (\vid2 ->
  nd_log_master.filter ((\b1 -> bind b1 as {r1:vid, r2:trig_id, r3:stmt_id} in 
  vid >= vid2)))


declare nd_check_stmt_cntr_index : { r1:{ key:int, value:int }, r2:int, r3:int
  } -> bool = (\b1 -> bind b1 as {r1:vid, r2:stmt_id, r3:add_to_count} in case
  ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in key ==
  {key:vid, value:stmt_id}))).peek ()) of
  {Some lookup_value -> let new_count = add_to_count + (lookup_value.value).key
    in
    (nd_stmt_cntrs.update lookup_value {key:{key:vid, value:stmt_id},
     value:{key:new_count, value:(lookup_value.value).value}};
     0 == new_count)}{None ->
                       (nd_stmt_cntrs.insert {key:{key:vid, value:stmt_id},
                        value:{key:add_to_count, value:empty { key:int,
                        value:int } @ { Map }}};
                        false)})


declare nd_update_stmt_cntr_corr_map : { r1:{ key:int, value:int }, r2:int,
  r3:int, r4:int, r5:bool, r6:bool } -> () = (\b1 -> bind b1 as {r1:vid,
  r2:stmt_id, r3:hop, r4:count, r5:root, r6:create} in 
  ((if create
   then nd_stmt_cntrs.insert {key:{key:vid, value:stmt_id}, value:{key:0,
     value:empty { key:int, value:int } @ { Map }}} else ());
   (case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
   key == {key:vid, value:stmt_id}))).peek ()) of
   {Some lkup -> nd_stmt_cntrs.update lkup {key:{key:vid, value:stmt_id},
     value:let sc_corr_map = (lkup.value).value in
     ((case ((sc_corr_map.filter ((\b1 -> bind b1 as {key:key, value:value} in 
      key == hop))).peek ()) of
      {Some lkup2 -> sc_corr_map.update lkup2 {key:hop, value:lkup2.value +
        count}}{None -> sc_corr_map.insert {key:hop, value:count}});
      (if root then ()
      else case ((sc_corr_map.filter ((\b1 -> bind b1 as {key:key,
        value:value} in key == hop))).peek ()) of
        {Some lkup2 -> let new_corr_cnt = lkup2.value - 1 in
          if new_corr_cnt == 0 then sc_corr_map.erase lkup2
            else sc_corr_map.update lkup2 {key:hop, value:new_corr_cnt}}
        {None -> sc_corr_map.insert {key:hop, value:-1}});
      {key:(lkup.value).key, value:sc_corr_map})}}{None ->
                                                    error
                                                      (print
                                                         "nd_rcv_corr_done: missing stmt_cntrs value")})))


declare nd_filter_corrective_list : { key:{ key:int, value:int },
  value:collection { key:int, value:int } @ { Collection } } -> collection {
  key:int, value:collection { key:int, value:int } @ { Seq }
  } @ { Collection } = (\b1 -> bind b1 as {key:request_vid,
  value:trig_stmt_list} in let log_entries = nd_log_read_geq request_vid in
  (((log_entries.fold ((\acc -> (\b3 -> bind b3 as {r1:vid, r2:trig_id,
    r3:stmt_id} in (acc.insert {key:vid, value:stmt_id};acc)))) empty { key:{
    key:int, value:int }, value:int } @ { Seq }).sort ((\b2 -> (\b5 ->
    bind b2 as {key:vid1, value:stmt1} in bind b5 as {key:vid2,
    value:stmt2} in if vid1 < vid2 then -1 else 1)))).groupBy ((\b1 ->
    bind b1 as {value:stmt_id} in stmt_id)) ((\vid_list -> (\b3 ->
    bind b3 as {key:vid} in (vid_list.insert vid;vid_list)))) empty { key:int,
    value:int } @ { Seq }).fold ((\acc_conv -> (\x -> ({| key:int,
    value:collection { key:int, value:int } @ { Seq } |
    x|} @ { Collection }).combine acc_conv))) empty { key:int,
    value:collection { key:int, value:int } @ { Seq } } @ { Collection })


declare add_node : address -> () = (\addr -> let rng = range replicas in
  let new_elems =
    rng.fold ((\__acc_map -> (\b3 -> bind b3 as {i:i} in __acc_map.combine ({|
      key:address, value:int | {key:addr,
      value:hash (i + hash addr)}|} @ { Seq })))) empty { key:address,
      value:int } @ { Seq } in
    (node_ring = new_elems.combine node_ring;
     node_ring = node_ring.sort ((\b2 -> (\b5 -> bind b2 as {key:addr,
     value:hash1} in bind b5 as {key:addr, value:hash2} in if hash1 > hash2
     then -1 else 1)))))


declare get_ring_node : { key:int, value:int } -> address = (\b1 ->
  bind b1 as {key:data, value:max_val} in let scaled =
  truncate (real_of_int (get_max_int ()) * (real_of_int data /
    real_of_int max_val)) in
  let results =
    node_ring.filter ((\b1 -> bind b1 as {key:addr, value:hash} in hash >=
      scaled)) in
    bind
      case (results.peek ()) of
        {Some x -> x}{None -> case (node_ring.peek ()) of
                       {Some x -> x}{None -> error (print "empty node ring")}}
      as {key:addr, value:_} in addr)


declare frontier_int_int : { key:{ key:int, value:int }, value:collection {
  r1:{ key:int, value:int }, r2:int, r3:int } @ { Collection }
  } -> collection { r1:{ key:int, value:int }, r2:int, r3:int
  } @ { Collection } = (\b1 -> bind b1 as {key:vid, value:input_map} in 
  (input_map.groupBy ((\b1 -> bind b1 as {r1:map_vid, r2:map_0, r3:map_val} in 
  map_0)) ((\b2 -> (\b5 -> bind b2 as {key:acc, value:max_vid} in 
  bind b5 as {r1:map_vid, r2:map_0, r3:map_val} in if map_vid < vid
  then if map_vid == max_vid
    then
      (acc.insert {r1:map_vid, r2:map_0, r3:map_val};{key:acc, value:max_vid})
    else if map_vid > max_vid
      then {key:{| r1:{ key:int, value:int }, r2:int, r3:int | {r1:map_vid,
        r2:map_0, r3:map_val}|} @ { Collection }, value:map_vid}
      else {key:acc, value:max_vid} else {key:acc, value:max_vid})))
  {key:empty { r1:{ key:int, value:int }, r2:int, r3:int } @ { Collection },
  value:g_min_vid}).fold ((\__acc_ext -> (\b3 -> bind b3 as {value:b4} in 
  bind b4 as {key:project} in __acc_ext.combine project))) empty { r1:{
  key:int, value:int }, r2:int, r3:int } @ { Collection })


declare frontier_int : { key:{ key:int, value:int }, value:collection { key:{
  key:int, value:int }, value:int } @ { Collection } } -> collection { key:{
  key:int, value:int }, value:int } @ { Collection } = (\b1 ->
  bind b1 as {key:vid, value:input_map} in (input_map.fold ((\b2 -> (\b5 ->
  bind b2 as {key:acc, value:max_vid} in bind b5 as {key:map_vid,
  value:map_val} in if map_vid < vid
  then if map_vid == max_vid
    then (acc.insert {key:map_vid, value:map_val};{key:acc, value:max_vid})
    else if map_vid > max_vid
      then {key:{| key:{ key:int, value:int }, value:int | {key:map_vid,
        value:map_val}|} @ { Collection }, value:map_vid}
      else {key:acc, value:max_vid} else {key:acc, value:max_vid})))
  {key:empty { key:{ key:int, value:int }, value:int } @ { Collection },
  value:g_min_vid}).key)


declare nd_add_delta_to_int_int : { r1:ind collection { r1:{ key:int, value:int
  }, r2:int, r3:int } @ { Collection }, r2:bool, r3:{ key:int, value:int },
  r4:collection { key:int, value:int } @ { Collection } } -> () = (\b1 ->
  bind b1 as {r1:target_map, r2:corrective, r3:min_vid, r4:delta_tuples} in 
  (delta_tuples.iterate ((\b1 -> bind b1 as {key:map_0, value:map_val} in bind
   target_map as ind target_map_d in
   let lookup_value =
     if corrective
       then target_map_d.filter ((\b1 -> bind b1 as {r1:r1, r2:r2, r3:r3} in r1
         == min_vid and r2 == map_0))
       else empty { r1:{ key:int, value:int }, r2:int, r3:int
         } @ { Collection } in
     case (lookup_value.peek ()) of
       {Some val -> let update_value = map_val + val.r3 in
         target_map_d.insert {r1:min_vid, r2:map_0, r3:update_value}}
       {None -> let lookup_value =
         frontier_int_int {key:min_vid, value:target_map_d.filter ((\b1 ->
           bind b1 as {r1:r1, r2:r2, r3:r3} in r2 == map_0))} in
         let update_value =
           map_val + case (lookup_value.peek ()) of
             {Some val -> val.r3}{None -> 0} in
           target_map_d.insert {r1:min_vid, r2:map_0, r3:update_value}}));
   delta_tuples.iterate ((\b1 -> bind b1 as {key:map_0_delta,
   value:map_val_delta} in let filtered =
   bind target_map as ind target_map_d in
     (target_map_d.filter ((\b1 -> bind b1 as {r1:r1, r2:r2, r3:r3} in r2 ==
       map_0_delta))).filter ((\b1 -> bind b1 as {r1:vid, r2:map_0,
       r3:map_val} in vid > min_vid)) in
   filtered.iterate ((\b1 -> bind b1 as {r1:vid, r2:map_0, r3:map_val} in bind
     target_map as ind target_map_d in
     target_map_d.update {r1:vid, r2:map_0, r3:map_val} {r1:vid, r2:map_0,
       r3:map_val + map_val_delta}))))))


declare nd_add_delta_to_int : { r1:ind collection { key:{ key:int, value:int },
  value:int } @ { Collection }, r2:bool, r3:{ key:int, value:int },
  r4:collection {i:int} @ { Collection } } -> () = (\b1 ->
  bind b1 as {r1:target_map, r2:corrective, r3:min_vid, r4:delta_tuples} in 
  (delta_tuples.iterate ((\b1 -> bind b1 as {i:map_val} in bind target_map as
   ind target_map_d in
   let lookup_value =
     if corrective
       then target_map_d.filter ((\b1 -> bind b1 as {key:key, value:value} in 
         key == min_vid))
       else empty { key:{ key:int, value:int }, value:int } @ { Collection } in
     case (lookup_value.peek ()) of
       {Some val -> let update_value = map_val + val.value in
         target_map_d.insert {key:min_vid, value:update_value}}{None -> let
                                                                 lookup_value =
                                                                 frontier_int
                                                                   {key:min_vid,
                                                                   value:target_map_d}
                                                                 in
                                                                 let
                                                                   update_value
                                                                   =
                                                                   map_val +
                                                                    case
                                                                    (lookup_value.peek
                                                                    ()) of
                                                                    {Some val ->
                                                                    val.value}
                                                                    {None -> 0}
                                                                   in
                                                                   target_map_d.insert
                                                                    {key:min_vid,
                                                                    value:update_value}}));
   delta_tuples.iterate ((\b1 -> bind b1 as {i:map_val_delta} in let filtered =
   bind target_map as ind target_map_d in
     target_map_d.filter ((\b1 -> bind b1 as {key:vid, value:map_val} in vid >
       min_vid)) in
   filtered.iterate ((\b1 -> bind b1 as {key:vid, value:map_val} in bind
     target_map as ind target_map_d in
     target_map_d.update {key:vid, value:map_val} {key:vid, value:map_val +
       map_val_delta}))))))


declare sw_gen_vid : () -> option { key:int, value:int } = (\_ -> case
  (sw_token_vid_list.peek ()) of
  {Some vid_num -> let num_new = vid_num.value - 1 in
    let vid_new = {key:(vid_num.key).key, value:(vid_num.key).value + 1} in
      ((if num_new <= 0 then sw_token_vid_list.erase vid_num
       else sw_token_vid_list.update vid_num {key:vid_new, value:num_new});
       Some (vid_num.key))}{None -> None immut})


declare calc_dim_bounds : collection { key:int, value:int } @ { Seq } -> {
  key:collection { key:int, value:int } @ { Seq }, value:int } = (\pmap ->
  pmap.fold ((\b2 -> (\b5 -> bind b2 as {key:xs, value:acc_size} in 
  bind b5 as {key:pos, value:bin_size} in {key:xs.combine ({| key:int,
  value:int | {key:pos, value:acc_size}|} @ { Seq }), value:bin_size *
  acc_size}))) {key:empty { key:int, value:int } @ { Seq }, value:1})


declare route_to_ : { key:int, value:()
  } -> collection {i:address} @ { Collection } = (\b1 -> {|i:address|
  get_ring_node {key:1, value:1}|} @ { Collection })


declare route_to_int : { key:int, value:option int
  } -> collection {i:address} @ { Collection } = (\b1 ->
  bind b1 as {key:map_id, value:key_0} in let pmap =
  (case ((pmap_data.filter ((\b1 -> bind b1 as {key:key, value:value} in key ==
    map_id))).peek ()) of
    {Some x -> x}{None -> error (print "can't find map_id in pmap_data")}).value
  in
  case (pmap.peek ()) of
    {Some _ -> bind calc_dim_bounds pmap as {key:dim_bounds, value:max_val} in
      let bound_bucket =
        case key_0 of
          {Some key_0_unwrap -> let pmap_slice =
            pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key ==
              0)) in
            case (pmap_slice.peek ()) of
              {Some peek_slice -> let value =
                hash key_0_unwrap % peek_slice.value in
                value * (case ((dim_bounds.filter ((\b1 -> bind b1 as {key:key,
                  value:value} in key == 0))).peek ()) of
                  {Some x -> x}{None ->
                                 error (print "can't find 0 in dim_bounds")}).value}
              {None -> 0}}{None -> 0} + 0 in
        let free_dims =
          (if key_0 != None immut then empty { key:int, value:int } @ { Seq }
            else pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key
              == 0))).combine empty { key:int, value:int } @ { Seq } in
          let free_domains =
            free_dims.fold ((\__acc_map -> (\b3 -> bind b3 as {key:i,
              value:b_i} in __acc_map.combine ({| key:int,
              value:collection {i:int} @ { Seq } | {key:i,
              value:range b_i}|} @ { Seq })))) empty { key:int,
              value:collection {i:int} @ { Seq } } @ { Seq } in
            let free_cart_prod =
              free_domains.fold ((\prev_cart_prod -> (\b3 -> bind b3 as {key:i,
                value:domain} in domain.fold ((\__acc_ext -> (\b3 ->
                bind b3 as {i:domain_element} in __acc_ext.combine
                (if 0 == prev_cart_prod.size ()
                then {|i:collection { key:int, value:int } @ { Seq }| {|
                  key:int, value:int | {key:i,
                  value:domain_element}|} @ { Seq }|} @ { Seq }
                else prev_cart_prod.fold ((\__acc_map -> (\b3 ->
                  bind b3 as {i:rest_tup} in __acc_map.combine
                  ({|i:collection { key:int, value:int } @ { Seq }|
                  rest_tup.combine ({| key:int, value:int | {key:i,
                  value:domain_element}|} @ { Seq })|} @ { Seq }))))
                  empty {i:collection { key:int, value:int
                  } @ { Seq }} @ { Seq })))) empty {i:collection { key:int,
                value:int } @ { Seq }} @ { Seq }))) empty {i:collection {
                key:int, value:int } @ { Seq }} @ { Seq } in
              let sorted_ip_list =
                (free_cart_prod.fold ((\acc_ips -> (\b3 ->
                  bind b3 as {i:free_bucket} in acc_ips.combine ({|i:address|
                  get_ring_node {key:free_bucket.fold ((\acc -> (\b3 ->
                    bind b3 as {key:i, value:val} in acc + (val * (case
                    ((dim_bounds.filter ((\b1 -> bind b1 as {key:key,
                    value:value} in key == i))).peek ()) of
                    {Some x -> x}{None ->
                                   error (print "can't find i in dim_bounds")}).value))))
                    bound_bucket, value:max_val}|} @ { Collection }))))
                  empty {i:address} @ { Collection }).groupBy ((\b1 ->
                  bind b1 as {i:ip} in ip)) ((\_ -> (\_ -> ()))) () in
                if 0 == sorted_ip_list.size ()
                  then {|i:address|
                    get_ring_node {key:bound_bucket, value:max_val}|} @ { Collection }
                  else sorted_ip_list.fold ((\__acc_map -> (\x ->
                    __acc_map.combine ({|i:address|
                    x.key|} @ { Collection }))))
                    empty {i:address} @ { Collection }}{None -> nodes})


declare shuffle___SQL_SUM_AGGREGATE_1_mR1_to___SQL_SUM_AGGREGATE_2 : { r1:(),
  r2:collection { r1:{ key:int, value:int }, r2:int, r3:int } @ { Collection },
  r3:bool } -> collection { key:address, value:collection { r1:{ key:int,
  value:int }, r2:int, r3:int } @ { Collection } } @ { Collection } = (\b1 ->
  bind b1 as {r2:tuples, r3:shuffle_on_empty} in let all_targets =
  if shuffle_on_empty == true
    then (route_to_ {key:4, value:()}).fold ((\__acc_map -> (\b3 ->
      bind b3 as {i:ip} in __acc_map.combine ({| key:address,
      value:collection { r1:{ key:int, value:int }, r2:int, r3:int
      } @ { Collection } | {key:ip, value:empty { r1:{ key:int, value:int },
      r2:int, r3:int } @ { Collection }}|} @ { Collection })))) empty {
      key:address, value:collection { r1:{ key:int, value:int }, r2:int, r3:int
      } @ { Collection } } @ { Collection }
    else empty { key:address, value:collection { r1:{ key:int, value:int },
      r2:int, r3:int } @ { Collection } } @ { Collection } in
  (all_targets.combine (tuples.fold ((\__acc_ext -> (\r_tuple ->
    __acc_ext.combine (bind r_tuple as {r1:rkey_0, r2:rkey_1, r3:rkey_2} in
    (route_to_ {key:4, value:()}).fold ((\__acc_map -> (\b3 ->
      bind b3 as {i:ip} in __acc_map.combine ({| key:address,
      value:collection { r1:{ key:int, value:int }, r2:int, r3:int
      } @ { Collection } | {key:ip, value:{| r1:{ key:int, value:int }, r2:int,
      r3:int | r_tuple|} @ { Collection }}|} @ { Collection })))) empty {
      key:address, value:collection { r1:{ key:int, value:int }, r2:int, r3:int
      } @ { Collection } } @ { Collection })))) empty { key:address,
    value:collection { r1:{ key:int, value:int }, r2:int, r3:int
    } @ { Collection } } @ { Collection })).groupBy ((\b1 ->
    bind b1 as {key:ip, value:tuple} in ip)) ((\acc -> (\b3 ->
    bind b3 as {key:ip, value:tuple} in tuple.combine acc))) empty { r1:{
    key:int, value:int }, r2:int, r3:int } @ { Collection })


declare shuffle___SQL_SUM_AGGREGATE_2_mR1_to___SQL_SUM_AGGREGATE_2 : { r1:(),
  r2:collection { r1:{ key:int, value:int }, r2:int, r3:int } @ { Collection },
  r3:bool } -> collection { key:address, value:collection { r1:{ key:int,
  value:int }, r2:int, r3:int } @ { Collection } } @ { Collection } = (\b1 ->
  bind b1 as {r2:tuples, r3:shuffle_on_empty} in let all_targets =
  if shuffle_on_empty == true
    then (route_to_ {key:4, value:()}).fold ((\__acc_map -> (\b3 ->
      bind b3 as {i:ip} in __acc_map.combine ({| key:address,
      value:collection { r1:{ key:int, value:int }, r2:int, r3:int
      } @ { Collection } | {key:ip, value:empty { r1:{ key:int, value:int },
      r2:int, r3:int } @ { Collection }}|} @ { Collection })))) empty {
      key:address, value:collection { r1:{ key:int, value:int }, r2:int, r3:int
      } @ { Collection } } @ { Collection }
    else empty { key:address, value:collection { r1:{ key:int, value:int },
      r2:int, r3:int } @ { Collection } } @ { Collection } in
  (all_targets.combine (tuples.fold ((\__acc_ext -> (\r_tuple ->
    __acc_ext.combine (bind r_tuple as {r1:rkey_0, r2:rkey_1, r3:rkey_2} in
    (route_to_ {key:4, value:()}).fold ((\__acc_map -> (\b3 ->
      bind b3 as {i:ip} in __acc_map.combine ({| key:address,
      value:collection { r1:{ key:int, value:int }, r2:int, r3:int
      } @ { Collection } | {key:ip, value:{| r1:{ key:int, value:int }, r2:int,
      r3:int | r_tuple|} @ { Collection }}|} @ { Collection })))) empty {
      key:address, value:collection { r1:{ key:int, value:int }, r2:int, r3:int
      } @ { Collection } } @ { Collection })))) empty { key:address,
    value:collection { r1:{ key:int, value:int }, r2:int, r3:int
    } @ { Collection } } @ { Collection })).groupBy ((\b1 ->
    bind b1 as {key:ip, value:tuple} in ip)) ((\acc -> (\b3 ->
    bind b3 as {key:ip, value:tuple} in tuple.combine acc))) empty { r1:{
    key:int, value:int }, r2:int, r3:int } @ { Collection })


declare shuffle___SQL_SUM_AGGREGATE_1_mR1_to___SQL_SUM_AGGREGATE_1 : { r1:(),
  r2:collection { r1:{ key:int, value:int }, r2:int, r3:int } @ { Collection },
  r3:bool } -> collection { key:address, value:collection { r1:{ key:int,
  value:int }, r2:int, r3:int } @ { Collection } } @ { Collection } = (\b1 ->
  bind b1 as {r2:tuples, r3:shuffle_on_empty} in let all_targets =
  if shuffle_on_empty == true
    then (route_to_ {key:1, value:()}).fold ((\__acc_map -> (\b3 ->
      bind b3 as {i:ip} in __acc_map.combine ({| key:address,
      value:collection { r1:{ key:int, value:int }, r2:int, r3:int
      } @ { Collection } | {key:ip, value:empty { r1:{ key:int, value:int },
      r2:int, r3:int } @ { Collection }}|} @ { Collection })))) empty {
      key:address, value:collection { r1:{ key:int, value:int }, r2:int, r3:int
      } @ { Collection } } @ { Collection }
    else empty { key:address, value:collection { r1:{ key:int, value:int },
      r2:int, r3:int } @ { Collection } } @ { Collection } in
  (all_targets.combine (tuples.fold ((\__acc_ext -> (\r_tuple ->
    __acc_ext.combine (bind r_tuple as {r1:rkey_0, r2:rkey_1, r3:rkey_2} in
    (route_to_ {key:1, value:()}).fold ((\__acc_map -> (\b3 ->
      bind b3 as {i:ip} in __acc_map.combine ({| key:address,
      value:collection { r1:{ key:int, value:int }, r2:int, r3:int
      } @ { Collection } | {key:ip, value:{| r1:{ key:int, value:int }, r2:int,
      r3:int | r_tuple|} @ { Collection }}|} @ { Collection })))) empty {
      key:address, value:collection { r1:{ key:int, value:int }, r2:int, r3:int
      } @ { Collection } } @ { Collection })))) empty { key:address,
    value:collection { r1:{ key:int, value:int }, r2:int, r3:int
    } @ { Collection } } @ { Collection })).groupBy ((\b1 ->
    bind b1 as {key:ip, value:tuple} in ip)) ((\acc -> (\b3 ->
    bind b3 as {key:ip, value:tuple} in tuple.combine acc))) empty { r1:{
    key:int, value:int }, r2:int, r3:int } @ { Collection })


declare shuffle___SQL_SUM_AGGREGATE_2_mS3_to___SQL_SUM_AGGREGATE_2 : { r1:(),
  r2:collection { r1:{ key:int, value:int }, r2:int, r3:int } @ { Collection },
  r3:bool } -> collection { key:address, value:collection { r1:{ key:int,
  value:int }, r2:int, r3:int } @ { Collection } } @ { Collection } = (\b1 ->
  bind b1 as {r2:tuples, r3:shuffle_on_empty} in let all_targets =
  if shuffle_on_empty == true
    then (route_to_ {key:4, value:()}).fold ((\__acc_map -> (\b3 ->
      bind b3 as {i:ip} in __acc_map.combine ({| key:address,
      value:collection { r1:{ key:int, value:int }, r2:int, r3:int
      } @ { Collection } | {key:ip, value:empty { r1:{ key:int, value:int },
      r2:int, r3:int } @ { Collection }}|} @ { Collection })))) empty {
      key:address, value:collection { r1:{ key:int, value:int }, r2:int, r3:int
      } @ { Collection } } @ { Collection }
    else empty { key:address, value:collection { r1:{ key:int, value:int },
      r2:int, r3:int } @ { Collection } } @ { Collection } in
  (all_targets.combine (tuples.fold ((\__acc_ext -> (\r_tuple ->
    __acc_ext.combine (bind r_tuple as {r1:rkey_0, r2:rkey_1, r3:rkey_2} in
    (route_to_ {key:4, value:()}).fold ((\__acc_map -> (\b3 ->
      bind b3 as {i:ip} in __acc_map.combine ({| key:address,
      value:collection { r1:{ key:int, value:int }, r2:int, r3:int
      } @ { Collection } | {key:ip, value:{| r1:{ key:int, value:int }, r2:int,
      r3:int | r_tuple|} @ { Collection }}|} @ { Collection })))) empty {
      key:address, value:collection { r1:{ key:int, value:int }, r2:int, r3:int
      } @ { Collection } } @ { Collection })))) empty { key:address,
    value:collection { r1:{ key:int, value:int }, r2:int, r3:int
    } @ { Collection } } @ { Collection })).groupBy ((\b1 ->
    bind b1 as {key:ip, value:tuple} in ip)) ((\acc -> (\b3 ->
    bind b3 as {key:ip, value:tuple} in tuple.combine acc))) empty { r1:{
    key:int, value:int }, r2:int, r3:int } @ { Collection })


declare shuffle___SQL_SUM_AGGREGATE_1_mS1_to___SQL_SUM_AGGREGATE_2 : { r1:(),
  r2:collection { r1:{ key:int, value:int }, r2:int, r3:int } @ { Collection },
  r3:bool } -> collection { key:address, value:collection { r1:{ key:int,
  value:int }, r2:int, r3:int } @ { Collection } } @ { Collection } = (\b1 ->
  bind b1 as {r2:tuples, r3:shuffle_on_empty} in let all_targets =
  if shuffle_on_empty == true
    then (route_to_ {key:4, value:()}).fold ((\__acc_map -> (\b3 ->
      bind b3 as {i:ip} in __acc_map.combine ({| key:address,
      value:collection { r1:{ key:int, value:int }, r2:int, r3:int
      } @ { Collection } | {key:ip, value:empty { r1:{ key:int, value:int },
      r2:int, r3:int } @ { Collection }}|} @ { Collection })))) empty {
      key:address, value:collection { r1:{ key:int, value:int }, r2:int, r3:int
      } @ { Collection } } @ { Collection }
    else empty { key:address, value:collection { r1:{ key:int, value:int },
      r2:int, r3:int } @ { Collection } } @ { Collection } in
  (all_targets.combine (tuples.fold ((\__acc_ext -> (\r_tuple ->
    __acc_ext.combine (bind r_tuple as {r1:rkey_0, r2:rkey_1, r3:rkey_2} in
    (route_to_ {key:4, value:()}).fold ((\__acc_map -> (\b3 ->
      bind b3 as {i:ip} in __acc_map.combine ({| key:address,
      value:collection { r1:{ key:int, value:int }, r2:int, r3:int
      } @ { Collection } | {key:ip, value:{| r1:{ key:int, value:int }, r2:int,
      r3:int | r_tuple|} @ { Collection }}|} @ { Collection })))) empty {
      key:address, value:collection { r1:{ key:int, value:int }, r2:int, r3:int
      } @ { Collection } } @ { Collection })))) empty { key:address,
    value:collection { r1:{ key:int, value:int }, r2:int, r3:int
    } @ { Collection } } @ { Collection })).groupBy ((\b1 ->
    bind b1 as {key:ip, value:tuple} in ip)) ((\acc -> (\b3 ->
    bind b3 as {key:ip, value:tuple} in tuple.combine acc))) empty { r1:{
    key:int, value:int }, r2:int, r3:int } @ { Collection })


declare shuffle___SQL_SUM_AGGREGATE_1_mS1_to___SQL_SUM_AGGREGATE_1 : { r1:(),
  r2:collection { r1:{ key:int, value:int }, r2:int, r3:int } @ { Collection },
  r3:bool } -> collection { key:address, value:collection { r1:{ key:int,
  value:int }, r2:int, r3:int } @ { Collection } } @ { Collection } = (\b1 ->
  bind b1 as {r2:tuples, r3:shuffle_on_empty} in let all_targets =
  if shuffle_on_empty == true
    then (route_to_ {key:1, value:()}).fold ((\__acc_map -> (\b3 ->
      bind b3 as {i:ip} in __acc_map.combine ({| key:address,
      value:collection { r1:{ key:int, value:int }, r2:int, r3:int
      } @ { Collection } | {key:ip, value:empty { r1:{ key:int, value:int },
      r2:int, r3:int } @ { Collection }}|} @ { Collection })))) empty {
      key:address, value:collection { r1:{ key:int, value:int }, r2:int, r3:int
      } @ { Collection } } @ { Collection }
    else empty { key:address, value:collection { r1:{ key:int, value:int },
      r2:int, r3:int } @ { Collection } } @ { Collection } in
  (all_targets.combine (tuples.fold ((\__acc_ext -> (\r_tuple ->
    __acc_ext.combine (bind r_tuple as {r1:rkey_0, r2:rkey_1, r3:rkey_2} in
    (route_to_ {key:1, value:()}).fold ((\__acc_map -> (\b3 ->
      bind b3 as {i:ip} in __acc_map.combine ({| key:address,
      value:collection { r1:{ key:int, value:int }, r2:int, r3:int
      } @ { Collection } | {key:ip, value:{| r1:{ key:int, value:int }, r2:int,
      r3:int | r_tuple|} @ { Collection }}|} @ { Collection })))) empty {
      key:address, value:collection { r1:{ key:int, value:int }, r2:int, r3:int
      } @ { Collection } } @ { Collection })))) empty { key:address,
    value:collection { r1:{ key:int, value:int }, r2:int, r3:int
    } @ { Collection } } @ { Collection })).groupBy ((\b1 ->
    bind b1 as {key:ip, value:tuple} in ip)) ((\acc -> (\b3 ->
    bind b3 as {key:ip, value:tuple} in tuple.combine acc))) empty { r1:{
    key:int, value:int }, r2:int, r3:int } @ { Collection })


declare nd___SQL_SUM_AGGREGATE_2_mS3_send_correctives : { r1:address, r2:int,
  r3:{ key:int, value:int }, r4:int, r5:{ key:int, value:int }, r6:collection {
  key:int, value:int } @ { Collection } } -> int = (\b1 ->
  bind b1 as {r1:orig_addr, r2:orig_stmt_id, r3:orig_vid, r4:hop,
  r5:corrective_vid, r6:delta_tuples} in let corrective_list =
  nd_filter_corrective_list {key:corrective_vid, value:{| key:int, value:int |
    {key:0, value:2}|} @ { Collection }} in
  if 0 == corrective_list.size () then 0
    else let delta_tuples2 =
      delta_tuples.fold ((\__acc_map -> (\b3 -> bind b3 as {key:map_0,
        value:map_val} in __acc_map.combine ({| r1:{ key:int, value:int },
        r2:int, r3:int | {r1:g_min_vid, r2:map_0,
        r3:map_val}|} @ { Collection })))) empty { r1:{ key:int, value:int },
        r2:int, r3:int } @ { Collection } in
      corrective_list.fold ((\acc_count -> (\b3 -> bind b3 as {key:stmt_id,
        value:vid_list} in if stmt_id == 2
        then let ips_vids =
          (vid_list.fold ((\__acc_ext -> (\vid -> __acc_ext.combine (bind
            nd_log_get_bound_insert_S vid as {r1:vid, r2:S_B, r3:S_C} in
            (shuffle___SQL_SUM_AGGREGATE_2_mS3_to___SQL_SUM_AGGREGATE_2 {r1:(),
               r2:delta_tuples2, r3:false}).fold ((\__acc_map -> (\b3 ->
              bind b3 as {key:ip, value:tuples} in __acc_map.combine ({|
              r1:address, r2:{ key:int, value:int }, r3:collection { key:int,
              value:int } @ { Collection } | {r1:ip, r2:vid, r3:tuples.fold
              ((\__acc_map -> (\b3 -> bind b3 as {r1:vid, r2:map_0,
              r3:map_val} in __acc_map.combine ({| key:int, value:int |
              {key:map_0, value:map_val}|} @ { Collection })))) empty {
              key:int, value:int } @ { Collection }}|} @ { Collection }))))
              empty { r1:address, r2:{ key:int, value:int }, r3:collection {
              key:int, value:int } @ { Collection } } @ { Collection }))))
            empty { r1:address, r2:{ key:int, value:int }, r3:collection {
            key:int, value:int } @ { Collection } } @ { Collection }).groupBy
            ((\b1 -> bind b1 as {r1:ip, r2:vid, r3:tuples} in ip)) ((\b2 ->
            (\b5 -> bind b2 as {key:acc_vid, value:acc_tuples} in 
            bind b5 as {r1:ip, r2:vid, r3:tuples} in 
            (acc_vid.insert vid;
             {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
             ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold ((\__acc_map ->
             (\x -> __acc_map.combine ({| key:int, value:int |
             x.key|} @ { Collection })))) empty { key:int, value:int
             } @ { Collection }})))) {key:empty { key:int, value:int
            } @ { Seq }, value:empty { key:int, value:int } @ { Collection }}
          in
          ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
            value:vid_send_list_tup} in 
            ((insert_S_rcv_corrective_s2_m___SQL_SUM_AGGREGATE_2_mS3, ip)<- {r1:orig_addr,
             r2:orig_stmt_id, r3:orig_vid, r4:hop, r5:corrective_vid,
             r6:vid_send_list_tup.key, r7:vid_send_list_tup.value};
             acc_count + (vid_send_list_tup.key).size ())))) acc_count
        else 0))) 0)


declare nd___SQL_SUM_AGGREGATE_1_mS1_send_correctives : { r1:address, r2:int,
  r3:{ key:int, value:int }, r4:int, r5:{ key:int, value:int }, r6:collection {
  key:int, value:int } @ { Collection } } -> int = (\b1 ->
  bind b1 as {r1:orig_addr, r2:orig_stmt_id, r3:orig_vid, r4:hop,
  r5:corrective_vid, r6:delta_tuples} in let corrective_list =
  nd_filter_corrective_list {key:corrective_vid, value:{| key:int, value:int |
    {key:0, value:0}, {key:0, value:2}|} @ { Collection }} in
  if 0 == corrective_list.size () then 0
    else let delta_tuples2 =
      delta_tuples.fold ((\__acc_map -> (\b3 -> bind b3 as {key:map_0,
        value:map_val} in __acc_map.combine ({| r1:{ key:int, value:int },
        r2:int, r3:int | {r1:g_min_vid, r2:map_0,
        r3:map_val}|} @ { Collection })))) empty { r1:{ key:int, value:int },
        r2:int, r3:int } @ { Collection } in
      corrective_list.fold ((\acc_count -> (\b3 -> bind b3 as {key:stmt_id,
        value:vid_list} in if stmt_id == 2
        then let ips_vids =
          (vid_list.fold ((\__acc_ext -> (\vid -> __acc_ext.combine (bind
            nd_log_get_bound_insert_S vid as {r1:vid, r2:S_B, r3:S_C} in
            (shuffle___SQL_SUM_AGGREGATE_1_mS1_to___SQL_SUM_AGGREGATE_2 {r1:(),
               r2:delta_tuples2, r3:false}).fold ((\__acc_map -> (\b3 ->
              bind b3 as {key:ip, value:tuples} in __acc_map.combine ({|
              r1:address, r2:{ key:int, value:int }, r3:collection { key:int,
              value:int } @ { Collection } | {r1:ip, r2:vid, r3:tuples.fold
              ((\__acc_map -> (\b3 -> bind b3 as {r1:vid, r2:map_0,
              r3:map_val} in __acc_map.combine ({| key:int, value:int |
              {key:map_0, value:map_val}|} @ { Collection })))) empty {
              key:int, value:int } @ { Collection }}|} @ { Collection }))))
              empty { r1:address, r2:{ key:int, value:int }, r3:collection {
              key:int, value:int } @ { Collection } } @ { Collection }))))
            empty { r1:address, r2:{ key:int, value:int }, r3:collection {
            key:int, value:int } @ { Collection } } @ { Collection }).groupBy
            ((\b1 -> bind b1 as {r1:ip, r2:vid, r3:tuples} in ip)) ((\b2 ->
            (\b5 -> bind b2 as {key:acc_vid, value:acc_tuples} in 
            bind b5 as {r1:ip, r2:vid, r3:tuples} in 
            (acc_vid.insert vid;
             {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
             ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold ((\__acc_map ->
             (\x -> __acc_map.combine ({| key:int, value:int |
             x.key|} @ { Collection })))) empty { key:int, value:int
             } @ { Collection }})))) {key:empty { key:int, value:int
            } @ { Seq }, value:empty { key:int, value:int } @ { Collection }}
          in
          ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
            value:vid_send_list_tup} in 
            ((insert_S_rcv_corrective_s2_m___SQL_SUM_AGGREGATE_1_mS1, ip)<- {r1:orig_addr,
             r2:orig_stmt_id, r3:orig_vid, r4:hop, r5:corrective_vid,
             r6:vid_send_list_tup.key, r7:vid_send_list_tup.value};
             acc_count + (vid_send_list_tup.key).size ())))) acc_count
        else if stmt_id == 0
          then let ips_vids =
            (vid_list.fold ((\__acc_ext -> (\vid -> __acc_ext.combine (bind
              nd_log_get_bound_insert_S vid as {r1:vid, r2:S_B, r3:S_C} in
              (shuffle___SQL_SUM_AGGREGATE_1_mS1_to___SQL_SUM_AGGREGATE_1
                 {r1:(), r2:delta_tuples2, r3:false}).fold ((\__acc_map ->
                (\b3 -> bind b3 as {key:ip, value:tuples} in __acc_map.combine
                ({| r1:address, r2:{ key:int, value:int }, r3:collection {
                key:int, value:int } @ { Collection } | {r1:ip, r2:vid,
                r3:tuples.fold ((\__acc_map -> (\b3 -> bind b3 as {r1:vid,
                r2:map_0, r3:map_val} in __acc_map.combine ({| key:int,
                value:int | {key:map_0, value:map_val}|} @ { Collection }))))
                empty { key:int, value:int
                } @ { Collection }}|} @ { Collection })))) empty { r1:address,
                r2:{ key:int, value:int }, r3:collection { key:int, value:int
                } @ { Collection } } @ { Collection })))) empty { r1:address,
              r2:{ key:int, value:int }, r3:collection { key:int, value:int
              } @ { Collection } } @ { Collection }).groupBy ((\b1 ->
              bind b1 as {r1:ip, r2:vid, r3:tuples} in ip)) ((\b2 -> (\b5 ->
              bind b2 as {key:acc_vid, value:acc_tuples} in bind b5 as {r1:ip,
              r2:vid, r3:tuples} in 
              (acc_vid.insert vid;
               {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
               ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold
               ((\__acc_map -> (\x -> __acc_map.combine ({| key:int, value:int
               | x.key|} @ { Collection })))) empty { key:int, value:int
               } @ { Collection }})))) {key:empty { key:int, value:int
              } @ { Seq }, value:empty { key:int, value:int } @ { Collection }}
            in
            ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
              value:vid_send_list_tup} in 
              ((insert_S_rcv_corrective_s0_m___SQL_SUM_AGGREGATE_1_mS1, ip)<- {r1:orig_addr,
               r2:orig_stmt_id, r3:orig_vid, r4:hop, r5:corrective_vid,
               r6:vid_send_list_tup.key, r7:vid_send_list_tup.value};
               acc_count + (vid_send_list_tup.key).size ())))) acc_count 
          else 0))) 0)


declare nd___SQL_SUM_AGGREGATE_2_mR1_send_correctives : { r1:address, r2:int,
  r3:{ key:int, value:int }, r4:int, r5:{ key:int, value:int }, r6:collection {
  key:int, value:int } @ { Collection } } -> int = (\b1 ->
  bind b1 as {r1:orig_addr, r2:orig_stmt_id, r3:orig_vid, r4:hop,
  r5:corrective_vid, r6:delta_tuples} in let corrective_list =
  nd_filter_corrective_list {key:corrective_vid, value:{| key:int, value:int |
    {key:2, value:10}|} @ { Collection }} in
  if 0 == corrective_list.size () then 0
    else let delta_tuples2 =
      delta_tuples.fold ((\__acc_map -> (\b3 -> bind b3 as {key:map_0,
        value:map_val} in __acc_map.combine ({| r1:{ key:int, value:int },
        r2:int, r3:int | {r1:g_min_vid, r2:map_0,
        r3:map_val}|} @ { Collection })))) empty { r1:{ key:int, value:int },
        r2:int, r3:int } @ { Collection } in
      corrective_list.fold ((\acc_count -> (\b3 -> bind b3 as {key:stmt_id,
        value:vid_list} in if stmt_id == 10
        then let ips_vids =
          (vid_list.fold ((\__acc_ext -> (\vid -> __acc_ext.combine (bind
            nd_log_get_bound_insert_R vid as {r1:vid, r2:R_A, r3:R_B} in
            (shuffle___SQL_SUM_AGGREGATE_2_mR1_to___SQL_SUM_AGGREGATE_2 {r1:(),
               r2:delta_tuples2, r3:false}).fold ((\__acc_map -> (\b3 ->
              bind b3 as {key:ip, value:tuples} in __acc_map.combine ({|
              r1:address, r2:{ key:int, value:int }, r3:collection { key:int,
              value:int } @ { Collection } | {r1:ip, r2:vid, r3:tuples.fold
              ((\__acc_map -> (\b3 -> bind b3 as {r1:vid, r2:map_0,
              r3:map_val} in __acc_map.combine ({| key:int, value:int |
              {key:map_0, value:map_val}|} @ { Collection })))) empty {
              key:int, value:int } @ { Collection }}|} @ { Collection }))))
              empty { r1:address, r2:{ key:int, value:int }, r3:collection {
              key:int, value:int } @ { Collection } } @ { Collection }))))
            empty { r1:address, r2:{ key:int, value:int }, r3:collection {
            key:int, value:int } @ { Collection } } @ { Collection }).groupBy
            ((\b1 -> bind b1 as {r1:ip, r2:vid, r3:tuples} in ip)) ((\b2 ->
            (\b5 -> bind b2 as {key:acc_vid, value:acc_tuples} in 
            bind b5 as {r1:ip, r2:vid, r3:tuples} in 
            (acc_vid.insert vid;
             {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
             ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold ((\__acc_map ->
             (\x -> __acc_map.combine ({| key:int, value:int |
             x.key|} @ { Collection })))) empty { key:int, value:int
             } @ { Collection }})))) {key:empty { key:int, value:int
            } @ { Seq }, value:empty { key:int, value:int } @ { Collection }}
          in
          ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
            value:vid_send_list_tup} in 
            ((insert_R_rcv_corrective_s10_m___SQL_SUM_AGGREGATE_2_mR1, ip)<- {r1:orig_addr,
             r2:orig_stmt_id, r3:orig_vid, r4:hop, r5:corrective_vid,
             r6:vid_send_list_tup.key, r7:vid_send_list_tup.value};
             acc_count + (vid_send_list_tup.key).size ())))) acc_count
        else 0))) 0)


declare nd___SQL_SUM_AGGREGATE_1_mR1_send_correctives : { r1:address, r2:int,
  r3:{ key:int, value:int }, r4:int, r5:{ key:int, value:int }, r6:collection {
  key:int, value:int } @ { Collection } } -> int = (\b1 ->
  bind b1 as {r1:orig_addr, r2:orig_stmt_id, r3:orig_vid, r4:hop,
  r5:corrective_vid, r6:delta_tuples} in let corrective_list =
  nd_filter_corrective_list {key:corrective_vid, value:{| key:int, value:int |
    {key:2, value:8}, {key:2, value:10}|} @ { Collection }} in
  if 0 == corrective_list.size () then 0
    else let delta_tuples2 =
      delta_tuples.fold ((\__acc_map -> (\b3 -> bind b3 as {key:map_0,
        value:map_val} in __acc_map.combine ({| r1:{ key:int, value:int },
        r2:int, r3:int | {r1:g_min_vid, r2:map_0,
        r3:map_val}|} @ { Collection })))) empty { r1:{ key:int, value:int },
        r2:int, r3:int } @ { Collection } in
      corrective_list.fold ((\acc_count -> (\b3 -> bind b3 as {key:stmt_id,
        value:vid_list} in if stmt_id == 10
        then let ips_vids =
          (vid_list.fold ((\__acc_ext -> (\vid -> __acc_ext.combine (bind
            nd_log_get_bound_insert_R vid as {r1:vid, r2:R_A, r3:R_B} in
            (shuffle___SQL_SUM_AGGREGATE_1_mR1_to___SQL_SUM_AGGREGATE_2 {r1:(),
               r2:delta_tuples2, r3:false}).fold ((\__acc_map -> (\b3 ->
              bind b3 as {key:ip, value:tuples} in __acc_map.combine ({|
              r1:address, r2:{ key:int, value:int }, r3:collection { key:int,
              value:int } @ { Collection } | {r1:ip, r2:vid, r3:tuples.fold
              ((\__acc_map -> (\b3 -> bind b3 as {r1:vid, r2:map_0,
              r3:map_val} in __acc_map.combine ({| key:int, value:int |
              {key:map_0, value:map_val}|} @ { Collection })))) empty {
              key:int, value:int } @ { Collection }}|} @ { Collection }))))
              empty { r1:address, r2:{ key:int, value:int }, r3:collection {
              key:int, value:int } @ { Collection } } @ { Collection }))))
            empty { r1:address, r2:{ key:int, value:int }, r3:collection {
            key:int, value:int } @ { Collection } } @ { Collection }).groupBy
            ((\b1 -> bind b1 as {r1:ip, r2:vid, r3:tuples} in ip)) ((\b2 ->
            (\b5 -> bind b2 as {key:acc_vid, value:acc_tuples} in 
            bind b5 as {r1:ip, r2:vid, r3:tuples} in 
            (acc_vid.insert vid;
             {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
             ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold ((\__acc_map ->
             (\x -> __acc_map.combine ({| key:int, value:int |
             x.key|} @ { Collection })))) empty { key:int, value:int
             } @ { Collection }})))) {key:empty { key:int, value:int
            } @ { Seq }, value:empty { key:int, value:int } @ { Collection }}
          in
          ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
            value:vid_send_list_tup} in 
            ((insert_R_rcv_corrective_s10_m___SQL_SUM_AGGREGATE_1_mR1, ip)<- {r1:orig_addr,
             r2:orig_stmt_id, r3:orig_vid, r4:hop, r5:corrective_vid,
             r6:vid_send_list_tup.key, r7:vid_send_list_tup.value};
             acc_count + (vid_send_list_tup.key).size ())))) acc_count
        else if stmt_id == 8
          then let ips_vids =
            (vid_list.fold ((\__acc_ext -> (\vid -> __acc_ext.combine (bind
              nd_log_get_bound_insert_R vid as {r1:vid, r2:R_A, r3:R_B} in
              (shuffle___SQL_SUM_AGGREGATE_1_mR1_to___SQL_SUM_AGGREGATE_1
                 {r1:(), r2:delta_tuples2, r3:false}).fold ((\__acc_map ->
                (\b3 -> bind b3 as {key:ip, value:tuples} in __acc_map.combine
                ({| r1:address, r2:{ key:int, value:int }, r3:collection {
                key:int, value:int } @ { Collection } | {r1:ip, r2:vid,
                r3:tuples.fold ((\__acc_map -> (\b3 -> bind b3 as {r1:vid,
                r2:map_0, r3:map_val} in __acc_map.combine ({| key:int,
                value:int | {key:map_0, value:map_val}|} @ { Collection }))))
                empty { key:int, value:int
                } @ { Collection }}|} @ { Collection })))) empty { r1:address,
                r2:{ key:int, value:int }, r3:collection { key:int, value:int
                } @ { Collection } } @ { Collection })))) empty { r1:address,
              r2:{ key:int, value:int }, r3:collection { key:int, value:int
              } @ { Collection } } @ { Collection }).groupBy ((\b1 ->
              bind b1 as {r1:ip, r2:vid, r3:tuples} in ip)) ((\b2 -> (\b5 ->
              bind b2 as {key:acc_vid, value:acc_tuples} in bind b5 as {r1:ip,
              r2:vid, r3:tuples} in 
              (acc_vid.insert vid;
               {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
               ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold
               ((\__acc_map -> (\x -> __acc_map.combine ({| key:int, value:int
               | x.key|} @ { Collection })))) empty { key:int, value:int
               } @ { Collection }})))) {key:empty { key:int, value:int
              } @ { Seq }, value:empty { key:int, value:int } @ { Collection }}
            in
            ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
              value:vid_send_list_tup} in 
              ((insert_R_rcv_corrective_s8_m___SQL_SUM_AGGREGATE_1_mR1, ip)<- {r1:orig_addr,
               r2:orig_stmt_id, r3:orig_vid, r4:hop, r5:corrective_vid,
               r6:vid_send_list_tup.key, r7:vid_send_list_tup.value};
               acc_count + (vid_send_list_tup.key).size ())))) acc_count 
          else 0))) 0)


declare sw_insert_S : { key:int, value:int } -> () = (\args ->
  (sw_buf_insert_S.insert args;
   sw_trig_buf_idx.insert {i:0};
   sw_need_vid_cntr = sw_need_vid_cntr + 1))


declare sw_insert_S_send_fetch : { key:int, value:int } -> () = (\vid -> case
  (sw_buf_insert_S.peek ()) of
  {Some args ->
    (sw_buf_insert_S.erase args;
     bind args as {key:S_B, value:S_C} in
     ((route_to_int {key:3, value:Some S_B}).iterate ((\b1 ->
      bind b1 as {i:ip} in (nd_insert_S_do_complete_s1_trig, ip)<- {r1:vid,
      r2:S_B, r3:S_C}));
      (route_to_int {key:6, value:Some S_B}).iterate ((\b1 ->
      bind b1 as {i:ip} in (nd_insert_S_do_complete_s3_trig, ip)<- {r1:vid,
      r2:S_B, r3:S_C}));
      ((((empty { r1:address, r2:int, r3:int } @ { Collection }).combine (let
      sender_count =
      (route_to_int {key:2, value:Some S_B}).fold ((\count -> (\b3 ->
        bind b3 as {i:ip} in count + 1))) 0 in
      ((shuffle___SQL_SUM_AGGREGATE_1_mS1_to___SQL_SUM_AGGREGATE_1 {r1:(),
          r2:empty { r1:{ key:int, value:int }, r2:int, r3:int
          } @ { Collection }, r3:true}).fold ((\__acc_map -> (\b3 ->
        bind b3 as {key:ip, value:tuples} in __acc_map.combine ({| r1:address,
        r2:int, r3:int | {r1:ip, r2:0, r3:sender_count}|} @ { Collection }))))
        empty { r1:address, r2:int, r3:int } @ { Collection }).combine (let
        sender_count =
        (route_to_int {key:2, value:Some S_B}).fold ((\count -> (\b3 ->
          bind b3 as {i:ip} in count + 1))) 0 in
        ((shuffle___SQL_SUM_AGGREGATE_1_mS1_to___SQL_SUM_AGGREGATE_2 {r1:(),
            r2:empty { r1:{ key:int, value:int }, r2:int, r3:int
            } @ { Collection }, r3:true}).fold ((\__acc_map -> (\b3 ->
          bind b3 as {key:ip, value:tuples} in __acc_map.combine ({|
          r1:address, r2:int, r3:int | {r1:ip, r2:2,
          r3:sender_count}|} @ { Collection })))) empty { r1:address, r2:int,
          r3:int } @ { Collection }).combine (let sender_count =
          (route_to_int {key:5, value:Some S_B}).fold ((\count -> (\b3 ->
            bind b3 as {i:ip} in count + 1))) 0 in
          (shuffle___SQL_SUM_AGGREGATE_2_mS3_to___SQL_SUM_AGGREGATE_2 {r1:(),
             r2:empty { r1:{ key:int, value:int }, r2:int, r3:int
             } @ { Collection }, r3:true}).fold ((\__acc_map -> (\b3 ->
            bind b3 as {key:ip, value:tuples} in __acc_map.combine ({|
            r1:address, r2:int, r3:int | {r1:ip, r2:2,
            r3:sender_count}|} @ { Collection })))) empty { r1:address, r2:int,
            r3:int } @ { Collection })))).groupBy ((\b1 -> bind b1 as {r1:ip,
      r2:stmt_id, r3:count} in {key:ip, value:stmt_id})) ((\acc -> (\b3 ->
      bind b3 as {r1:ip, r2:stmt_id, r3:count} in acc + count))) 0).groupBy
      ((\b1 -> bind b1 as {key:b2, value:count} in bind b2 as {key:ip,
      value:stmt_id} in ip)) ((\acc -> (\b3 -> bind b3 as {key:ip_and_stmt_id,
      value:count} in bind ip_and_stmt_id as {key:ip, value:stmt_id} in
      acc.combine ({| key:int, value:int | {key:stmt_id,
        value:count}|} @ { Collection })))) empty { key:int, value:int
      } @ { Collection }).iterate ((\b1 -> bind b1 as {key:addr,
      value:stmt_id_cnt_list} in 
      ((nd_insert_S_rcv_put, addr)<- {r1:me, r2:stmt_id_cnt_list, r3:vid,
       r4:S_B, r5:S_C};
       (case ((sw_ack_log.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == vid))).peek ()) of
       {Some old_val -> let old_set = old_val.value in
         (old_set.insert {i:addr};sw_ack_log.insert {key:vid, value:old_set})}
       {None -> sw_ack_log.insert {key:vid, value:{|i:address|
         addr|} @ { Set }}}))));
      ((((route_to_int {key:5, value:Some S_B}).fold ((\__acc_map -> (\b3 ->
      bind b3 as {i:ip} in __acc_map.combine ({| r1:int, r2:int, r3:address |
      {r1:2, r2:5, r3:ip}|} @ { Collection })))) empty { r1:int, r2:int,
      r3:address } @ { Collection }).combine
      (((route_to_int {key:2, value:Some S_B}).fold ((\__acc_map -> (\b3 ->
      bind b3 as {i:ip} in __acc_map.combine ({| r1:int, r2:int, r3:address |
      {r1:2, r2:2, r3:ip}|} @ { Collection })))) empty { r1:int, r2:int,
      r3:address } @ { Collection }).combine
      (((route_to_int {key:2, value:Some S_B}).fold ((\__acc_map -> (\b3 ->
      bind b3 as {i:ip} in __acc_map.combine ({| r1:int, r2:int, r3:address |
      {r1:0, r2:2, r3:ip}|} @ { Collection })))) empty { r1:int, r2:int,
      r3:address } @ { Collection }).combine empty { r1:int, r2:int, r3:address
      } @ { Collection }))).groupBy ((\b1 -> bind b1 as {r1:stmt_id, r2:map_id,
      r3:ip} in ip)) ((\acc -> (\b3 -> bind b3 as {r1:stmt_id, r2:map_id,
      r3:ip} in (acc.insert {key:stmt_id, value:map_id};acc)))) empty {
      key:int, value:int } @ { Collection }).iterate ((\b1 ->
      bind b1 as {key:ip, value:stmt_map_ids} in 
      (nd_insert_S_rcv_fetch, ip)<- {r1:stmt_map_ids, r2:vid, r3:S_B, r4:S_C}))))}
  {None -> error (print "unexpected missing arguments in sw_buf_insert_S")})


declare nd_insert_S_do_complete_s0 : { r1:{ key:int, value:int }, r2:int,
  r3:int } -> () = (\b1 -> bind b1 as {r1:vid, r2:S_B, r3:S_C} in let
  __prod_ret__1 =
  let wrapped_lookup_value =
    bind map___SQL_SUM_AGGREGATE_1_mS1_s0_buf as ind __x in
      (frontier_int_int {key:vid, value:__x.filter ((\b1 -> bind b1 as {r1:r1,
         r2:r2, r3:r3} in r2 == S_B))}).fold ((\__acc_map -> (\b3 ->
        bind b3 as {r1:map_vid, r2:map_0, r3:map_val} in __acc_map.combine ({|
        key:int, value:int | {key:map_0, value:map_val}|} @ { Collection }))))
        empty { key:int, value:int } @ { Collection } in
    case (wrapped_lookup_value.peek ()) of
      {Some unwrapped_value ->
        (\b1 -> bind b1 as {value:projected_field} in projected_field)
          unwrapped_value}{None -> 0} * S_C in
  ((nd_add_delta_to_int {r1:__SQL_SUM_AGGREGATE_1, r2:false, r3:vid,
      r4:{|i:int| __prod_ret__1|} @ { Collection }});
   ((case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
    key == {key:vid, value:0}))).peek ()) of
    {Some lookup_data -> nd_stmt_cntrs.erase lookup_data}{None -> ()});
    (if nd_state == nd_state_done
    then if 0 == nd_stmt_cntrs.size ()
      then (ms_rcv_node_done, master_addr)<- true else () else ()))))


declare nd_insert_S_do_complete_s2 : { r1:{ key:int, value:int }, r2:int,
  r3:int } -> () = (\b1 -> bind b1 as {r1:vid, r2:S_B, r3:S_C} in let
  __sum_ret__1 =
  let wrapped_lookup_value =
    bind map___SQL_SUM_AGGREGATE_1_mS1_s2_buf as ind __x in
      (frontier_int_int {key:vid, value:__x.filter ((\b1 -> bind b1 as {r1:r1,
         r2:r2, r3:r3} in r2 == S_B))}).fold ((\__acc_map -> (\b3 ->
        bind b3 as {r1:map_vid, r2:map_0, r3:map_val} in __acc_map.combine ({|
        key:int, value:int | {key:map_0, value:map_val}|} @ { Collection }))))
        empty { key:int, value:int } @ { Collection } in
    case (wrapped_lookup_value.peek ()) of
      {Some unwrapped_value ->
        (\b1 -> bind b1 as {value:projected_field} in projected_field)
          unwrapped_value}{None -> 0} + let wrapped_lookup_value =
      bind map___SQL_SUM_AGGREGATE_2_mS3_s2_buf as ind __x in
        (frontier_int_int {key:vid, value:__x.filter ((\b1 ->
           bind b1 as {r1:r1, r2:r2, r3:r3} in r2 == S_B))}).fold
          ((\__acc_map -> (\b3 -> bind b3 as {r1:map_vid, r2:map_0,
          r3:map_val} in __acc_map.combine ({| key:int, value:int | {key:map_0,
          value:map_val}|} @ { Collection })))) empty { key:int, value:int
          } @ { Collection } in
      case (wrapped_lookup_value.peek ()) of
        {Some unwrapped_value ->
          (\b1 -> bind b1 as {value:projected_field} in projected_field)
            unwrapped_value}{None -> 0} * S_C in
  ((nd_add_delta_to_int {r1:__SQL_SUM_AGGREGATE_2, r2:false, r3:vid,
      r4:{|i:int| __sum_ret__1|} @ { Collection }});
   ((case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
    key == {key:vid, value:2}))).peek ()) of
    {Some lookup_data -> nd_stmt_cntrs.erase lookup_data}{None -> ()});
    (if nd_state == nd_state_done
    then if 0 == nd_stmt_cntrs.size ()
      then (ms_rcv_node_done, master_addr)<- true else () else ()))))


declare nd_insert_S_do_complete_s1 : { r1:{ key:int, value:int }, r2:int,
  r3:int } -> () = (\b1 -> bind b1 as {r1:vid, r2:S_B, r3:S_C} in let
  __val_ret__2 = S_C in
  ((nd_add_delta_to_int_int {r1:__SQL_SUM_AGGREGATE_1_mR1, r2:false, r3:vid,
      r4:{| key:int, value:int | {key:S_B,
      value:__val_ret__2}|} @ { Collection }});
   let sent_msgs =
   nd___SQL_SUM_AGGREGATE_1_mR1_send_correctives {r1:me, r2:1, r3:vid, r4:1,
     r5:vid, r6:{| key:int, value:int | {key:S_B,
     value:__val_ret__2}|} @ { Collection }} in
   if sent_msgs == 0 then ()
     else
       nd_update_stmt_cntr_corr_map {r1:vid, r2:1, r3:1, r4:sent_msgs, r5:true,
         r6:true}))


declare nd_insert_S_do_complete_s3 : { r1:{ key:int, value:int }, r2:int,
  r3:int } -> () = (\b1 -> bind b1 as {r1:vid, r2:S_B, r3:S_C} in let
  __val_ret__4 = 1 in
  ((nd_add_delta_to_int_int {r1:__SQL_SUM_AGGREGATE_2_mR1, r2:false, r3:vid,
      r4:{| key:int, value:int | {key:S_B,
      value:__val_ret__4}|} @ { Collection }});
   let sent_msgs =
   nd___SQL_SUM_AGGREGATE_2_mR1_send_correctives {r1:me, r2:3, r3:vid, r4:1,
     r5:vid, r6:{| key:int, value:int | {key:S_B,
     value:__val_ret__4}|} @ { Collection }} in
   if sent_msgs == 0 then ()
     else
       nd_update_stmt_cntr_corr_map {r1:vid, r2:3, r3:1, r4:sent_msgs, r5:true,
         r6:true}))


declare insert_S_do_corrective_s0_m___SQL_SUM_AGGREGATE_1_mS1 : { r1:address,
  r2:int, r3:{ key:int, value:int }, r4:int, r5:{ key:int, value:int }, r6:int,
  r7:int, r8:collection { key:int, value:int } @ { Collection } } -> int =
  (\b1 -> bind b1 as {r1:orig_addr, r2:orig_stmt_id, r3:orig_vid, r4:hop,
  r5:vid, r6:S_B, r7:S_C, r8:delta_tuples} in let new_tuples =
  delta_tuples.fold ((\__acc_ext -> (\b3 ->
    bind b3 as {key:delta___SQL_SUM_AGGREGATE_1_mSS_B,
    value:delta___SQL_SUM_AGGREGATE_1_mS1} in __acc_ext.combine (let
    __prod_ret__37 =
    (if S_B == delta___SQL_SUM_AGGREGATE_1_mSS_B then 1
      else 0 * delta___SQL_SUM_AGGREGATE_1_mS1) * S_C in
    {|i:int| __prod_ret__37|} @ { Collection }))))
    empty {i:int} @ { Collection } in
  ((nd_add_delta_to_int {r1:__SQL_SUM_AGGREGATE_1, r2:true, r3:vid,
      r4:new_tuples});
   0))


declare insert_S_do_corrective_s2_m___SQL_SUM_AGGREGATE_1_mS1 : { r1:address,
  r2:int, r3:{ key:int, value:int }, r4:int, r5:{ key:int, value:int }, r6:int,
  r7:int, r8:collection { key:int, value:int } @ { Collection } } -> int =
  (\b1 -> bind b1 as {r1:orig_addr, r2:orig_stmt_id, r3:orig_vid, r4:hop,
  r5:vid, r6:S_B, r7:S_C, r8:delta_tuples} in let new_tuples =
  delta_tuples.fold ((\__acc_ext -> (\b3 ->
    bind b3 as {key:delta___SQL_SUM_AGGREGATE_1_mSS_B,
    value:delta___SQL_SUM_AGGREGATE_1_mS1} in __acc_ext.combine (let
    __prod_ret__38 =
    if S_B == delta___SQL_SUM_AGGREGATE_1_mSS_B then 1
      else 0 * delta___SQL_SUM_AGGREGATE_1_mS1 in
    {|i:int| __prod_ret__38|} @ { Collection }))))
    empty {i:int} @ { Collection } in
  ((nd_add_delta_to_int {r1:__SQL_SUM_AGGREGATE_2, r2:true, r3:vid,
      r4:new_tuples});
   0))


declare insert_S_do_corrective_s2_m___SQL_SUM_AGGREGATE_2_mS3 : { r1:address,
  r2:int, r3:{ key:int, value:int }, r4:int, r5:{ key:int, value:int }, r6:int,
  r7:int, r8:collection { key:int, value:int } @ { Collection } } -> int =
  (\b1 -> bind b1 as {r1:orig_addr, r2:orig_stmt_id, r3:orig_vid, r4:hop,
  r5:vid, r6:S_B, r7:S_C, r8:delta_tuples} in let new_tuples =
  delta_tuples.fold ((\__acc_ext -> (\b3 ->
    bind b3 as {key:delta___SQL_SUM_AGGREGATE_2_mSS_B,
    value:delta___SQL_SUM_AGGREGATE_2_mS3} in __acc_ext.combine (let
    __prod_ret__43 =
    (if S_B == delta___SQL_SUM_AGGREGATE_2_mSS_B then 1
      else 0 * delta___SQL_SUM_AGGREGATE_2_mS3) * S_C in
    {|i:int| __prod_ret__43|} @ { Collection }))))
    empty {i:int} @ { Collection } in
  ((nd_add_delta_to_int {r1:__SQL_SUM_AGGREGATE_2, r2:true, r3:vid,
      r4:new_tuples});
   0))


declare sw_insert_R : { key:int, value:int } -> () = (\args ->
  (sw_buf_insert_R.insert args;
   sw_trig_buf_idx.insert {i:2};
   sw_need_vid_cntr = sw_need_vid_cntr + 1))


declare sw_insert_R_send_fetch : { key:int, value:int } -> () = (\vid -> case
  (sw_buf_insert_R.peek ()) of
  {Some args ->
    (sw_buf_insert_R.erase args;
     bind args as {key:R_A, value:R_B} in
     ((route_to_int {key:2, value:Some R_B}).iterate ((\b1 ->
      bind b1 as {i:ip} in (nd_insert_R_do_complete_s9_trig, ip)<- {r1:vid,
      r2:R_A, r3:R_B}));
      (route_to_int {key:5, value:Some R_B}).iterate ((\b1 ->
      bind b1 as {i:ip} in (nd_insert_R_do_complete_s11_trig, ip)<- {r1:vid,
      r2:R_A, r3:R_B}));
      ((((empty { r1:address, r2:int, r3:int } @ { Collection }).combine (let
      sender_count =
      (route_to_int {key:3, value:Some R_B}).fold ((\count -> (\b3 ->
        bind b3 as {i:ip} in count + 1))) 0 in
      ((shuffle___SQL_SUM_AGGREGATE_1_mR1_to___SQL_SUM_AGGREGATE_1 {r1:(),
          r2:empty { r1:{ key:int, value:int }, r2:int, r3:int
          } @ { Collection }, r3:true}).fold ((\__acc_map -> (\b3 ->
        bind b3 as {key:ip, value:tuples} in __acc_map.combine ({| r1:address,
        r2:int, r3:int | {r1:ip, r2:8, r3:sender_count}|} @ { Collection }))))
        empty { r1:address, r2:int, r3:int } @ { Collection }).combine (let
        sender_count =
        (route_to_int {key:6, value:Some R_B}).fold ((\count -> (\b3 ->
          bind b3 as {i:ip} in count + 1))) 0 in
        ((shuffle___SQL_SUM_AGGREGATE_2_mR1_to___SQL_SUM_AGGREGATE_2 {r1:(),
            r2:empty { r1:{ key:int, value:int }, r2:int, r3:int
            } @ { Collection }, r3:true}).fold ((\__acc_map -> (\b3 ->
          bind b3 as {key:ip, value:tuples} in __acc_map.combine ({|
          r1:address, r2:int, r3:int | {r1:ip, r2:10,
          r3:sender_count}|} @ { Collection })))) empty { r1:address, r2:int,
          r3:int } @ { Collection }).combine (let sender_count =
          (route_to_int {key:3, value:Some R_B}).fold ((\count -> (\b3 ->
            bind b3 as {i:ip} in count + 1))) 0 in
          (shuffle___SQL_SUM_AGGREGATE_1_mR1_to___SQL_SUM_AGGREGATE_2 {r1:(),
             r2:empty { r1:{ key:int, value:int }, r2:int, r3:int
             } @ { Collection }, r3:true}).fold ((\__acc_map -> (\b3 ->
            bind b3 as {key:ip, value:tuples} in __acc_map.combine ({|
            r1:address, r2:int, r3:int | {r1:ip, r2:10,
            r3:sender_count}|} @ { Collection })))) empty { r1:address, r2:int,
            r3:int } @ { Collection })))).groupBy ((\b1 -> bind b1 as {r1:ip,
      r2:stmt_id, r3:count} in {key:ip, value:stmt_id})) ((\acc -> (\b3 ->
      bind b3 as {r1:ip, r2:stmt_id, r3:count} in acc + count))) 0).groupBy
      ((\b1 -> bind b1 as {key:b2, value:count} in bind b2 as {key:ip,
      value:stmt_id} in ip)) ((\acc -> (\b3 -> bind b3 as {key:ip_and_stmt_id,
      value:count} in bind ip_and_stmt_id as {key:ip, value:stmt_id} in
      acc.combine ({| key:int, value:int | {key:stmt_id,
        value:count}|} @ { Collection })))) empty { key:int, value:int
      } @ { Collection }).iterate ((\b1 -> bind b1 as {key:addr,
      value:stmt_id_cnt_list} in 
      ((nd_insert_R_rcv_put, addr)<- {r1:me, r2:stmt_id_cnt_list, r3:vid,
       r4:R_A, r5:R_B};
       (case ((sw_ack_log.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == vid))).peek ()) of
       {Some old_val -> let old_set = old_val.value in
         (old_set.insert {i:addr};sw_ack_log.insert {key:vid, value:old_set})}
       {None -> sw_ack_log.insert {key:vid, value:{|i:address|
         addr|} @ { Set }}}))));
      ((((route_to_int {key:3, value:Some R_B}).fold ((\__acc_map -> (\b3 ->
      bind b3 as {i:ip} in __acc_map.combine ({| r1:int, r2:int, r3:address |
      {r1:10, r2:3, r3:ip}|} @ { Collection })))) empty { r1:int, r2:int,
      r3:address } @ { Collection }).combine
      (((route_to_int {key:6, value:Some R_B}).fold ((\__acc_map -> (\b3 ->
      bind b3 as {i:ip} in __acc_map.combine ({| r1:int, r2:int, r3:address |
      {r1:10, r2:6, r3:ip}|} @ { Collection })))) empty { r1:int, r2:int,
      r3:address } @ { Collection }).combine
      (((route_to_int {key:3, value:Some R_B}).fold ((\__acc_map -> (\b3 ->
      bind b3 as {i:ip} in __acc_map.combine ({| r1:int, r2:int, r3:address |
      {r1:8, r2:3, r3:ip}|} @ { Collection })))) empty { r1:int, r2:int,
      r3:address } @ { Collection }).combine empty { r1:int, r2:int, r3:address
      } @ { Collection }))).groupBy ((\b1 -> bind b1 as {r1:stmt_id, r2:map_id,
      r3:ip} in ip)) ((\acc -> (\b3 -> bind b3 as {r1:stmt_id, r2:map_id,
      r3:ip} in (acc.insert {key:stmt_id, value:map_id};acc)))) empty {
      key:int, value:int } @ { Collection }).iterate ((\b1 ->
      bind b1 as {key:ip, value:stmt_map_ids} in 
      (nd_insert_R_rcv_fetch, ip)<- {r1:stmt_map_ids, r2:vid, r3:R_A, r4:R_B}))))}
  {None -> error (print "unexpected missing arguments in sw_buf_insert_R")})


declare nd_insert_R_do_complete_s8 : { r1:{ key:int, value:int }, r2:int,
  r3:int } -> () = (\b1 -> bind b1 as {r1:vid, r2:R_A, r3:R_B} in let
  __prod_ret__8 =
  let wrapped_lookup_value =
    bind map___SQL_SUM_AGGREGATE_1_mR1_s8_buf as ind __x in
      (frontier_int_int {key:vid, value:__x.filter ((\b1 -> bind b1 as {r1:r1,
         r2:r2, r3:r3} in r2 == R_B))}).fold ((\__acc_map -> (\b3 ->
        bind b3 as {r1:map_vid, r2:map_0, r3:map_val} in __acc_map.combine ({|
        key:int, value:int | {key:map_0, value:map_val}|} @ { Collection }))))
        empty { key:int, value:int } @ { Collection } in
    case (wrapped_lookup_value.peek ()) of
      {Some unwrapped_value ->
        (\b1 -> bind b1 as {value:projected_field} in projected_field)
          unwrapped_value}{None -> 0} * R_A in
  ((nd_add_delta_to_int {r1:__SQL_SUM_AGGREGATE_1, r2:false, r3:vid,
      r4:{|i:int| __prod_ret__8|} @ { Collection }});
   ((case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
    key == {key:vid, value:8}))).peek ()) of
    {Some lookup_data -> nd_stmt_cntrs.erase lookup_data}{None -> ()});
    (if nd_state == nd_state_done
    then if 0 == nd_stmt_cntrs.size ()
      then (ms_rcv_node_done, master_addr)<- true else () else ()))))


declare nd_insert_R_do_complete_s10 : { r1:{ key:int, value:int }, r2:int,
  r3:int } -> () = (\b1 -> bind b1 as {r1:vid, r2:R_A, r3:R_B} in let
  __sum_ret__3 =
  (let wrapped_lookup_value =
    bind map___SQL_SUM_AGGREGATE_2_mR1_s10_buf as ind __x in
      (frontier_int_int {key:vid, value:__x.filter ((\b1 -> bind b1 as {r1:r1,
         r2:r2, r3:r3} in r2 == R_B))}).fold ((\__acc_map -> (\b3 ->
        bind b3 as {r1:map_vid, r2:map_0, r3:map_val} in __acc_map.combine ({|
        key:int, value:int | {key:map_0, value:map_val}|} @ { Collection }))))
        empty { key:int, value:int } @ { Collection } in
    case (wrapped_lookup_value.peek ()) of
      {Some unwrapped_value ->
        (\b1 -> bind b1 as {value:projected_field} in projected_field)
          unwrapped_value}{None -> 0} * R_A) + let wrapped_lookup_value =
    bind map___SQL_SUM_AGGREGATE_1_mR1_s10_buf as ind __x in
      (frontier_int_int {key:vid, value:__x.filter ((\b1 -> bind b1 as {r1:r1,
         r2:r2, r3:r3} in r2 == R_B))}).fold ((\__acc_map -> (\b3 ->
        bind b3 as {r1:map_vid, r2:map_0, r3:map_val} in __acc_map.combine ({|
        key:int, value:int | {key:map_0, value:map_val}|} @ { Collection }))))
        empty { key:int, value:int } @ { Collection } in
    case (wrapped_lookup_value.peek ()) of
      {Some unwrapped_value ->
        (\b1 -> bind b1 as {value:projected_field} in projected_field)
          unwrapped_value}{None -> 0} in
  ((nd_add_delta_to_int {r1:__SQL_SUM_AGGREGATE_2, r2:false, r3:vid,
      r4:{|i:int| __sum_ret__3|} @ { Collection }});
   ((case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
    key == {key:vid, value:10}))).peek ()) of
    {Some lookup_data -> nd_stmt_cntrs.erase lookup_data}{None -> ()});
    (if nd_state == nd_state_done
    then if 0 == nd_stmt_cntrs.size ()
      then (ms_rcv_node_done, master_addr)<- true else () else ()))))


declare nd_insert_R_do_complete_s9 : { r1:{ key:int, value:int }, r2:int,
  r3:int } -> () = (\b1 -> bind b1 as {r1:vid, r2:R_A, r3:R_B} in let
  __val_ret__13 = R_A in
  ((nd_add_delta_to_int_int {r1:__SQL_SUM_AGGREGATE_1_mS1, r2:false, r3:vid,
      r4:{| key:int, value:int | {key:R_B,
      value:__val_ret__13}|} @ { Collection }});
   let sent_msgs =
   nd___SQL_SUM_AGGREGATE_1_mS1_send_correctives {r1:me, r2:9, r3:vid, r4:1,
     r5:vid, r6:{| key:int, value:int | {key:R_B,
     value:__val_ret__13}|} @ { Collection }} in
   if sent_msgs == 0 then ()
     else
       nd_update_stmt_cntr_corr_map {r1:vid, r2:9, r3:1, r4:sent_msgs, r5:true,
         r6:true}))


declare nd_insert_R_do_complete_s11 : { r1:{ key:int, value:int }, r2:int,
  r3:int } -> () = (\b1 -> bind b1 as {r1:vid, r2:R_A, r3:R_B} in let
  __val_ret__15 = 1 in
  ((nd_add_delta_to_int_int {r1:__SQL_SUM_AGGREGATE_2_mS3, r2:false, r3:vid,
      r4:{| key:int, value:int | {key:R_B,
      value:__val_ret__15}|} @ { Collection }});
   let sent_msgs =
   nd___SQL_SUM_AGGREGATE_2_mS3_send_correctives {r1:me, r2:11, r3:vid, r4:1,
     r5:vid, r6:{| key:int, value:int | {key:R_B,
     value:__val_ret__15}|} @ { Collection }} in
   if sent_msgs == 0 then ()
     else
       nd_update_stmt_cntr_corr_map {r1:vid, r2:11, r3:1, r4:sent_msgs,
         r5:true, r6:true}))


declare insert_R_do_corrective_s8_m___SQL_SUM_AGGREGATE_1_mR1 : { r1:address,
  r2:int, r3:{ key:int, value:int }, r4:int, r5:{ key:int, value:int }, r6:int,
  r7:int, r8:collection { key:int, value:int } @ { Collection } } -> int =
  (\b1 -> bind b1 as {r1:orig_addr, r2:orig_stmt_id, r3:orig_vid, r4:hop,
  r5:vid, r6:R_A, r7:R_B, r8:delta_tuples} in let new_tuples =
  delta_tuples.fold ((\__acc_ext -> (\b3 ->
    bind b3 as {key:delta___SQL_SUM_AGGREGATE_1_mRR_B,
    value:delta___SQL_SUM_AGGREGATE_1_mR1} in __acc_ext.combine (let
    __prod_ret__16 =
    (if R_B == delta___SQL_SUM_AGGREGATE_1_mRR_B then 1
      else 0 * delta___SQL_SUM_AGGREGATE_1_mR1) * R_A in
    {|i:int| __prod_ret__16|} @ { Collection }))))
    empty {i:int} @ { Collection } in
  ((nd_add_delta_to_int {r1:__SQL_SUM_AGGREGATE_1, r2:true, r3:vid,
      r4:new_tuples});
   0))


declare insert_R_do_corrective_s10_m___SQL_SUM_AGGREGATE_2_mR1 : { r1:address,
  r2:int, r3:{ key:int, value:int }, r4:int, r5:{ key:int, value:int }, r6:int,
  r7:int, r8:collection { key:int, value:int } @ { Collection } } -> int =
  (\b1 -> bind b1 as {r1:orig_addr, r2:orig_stmt_id, r3:orig_vid, r4:hop,
  r5:vid, r6:R_A, r7:R_B, r8:delta_tuples} in let new_tuples =
  delta_tuples.fold ((\__acc_ext -> (\b3 ->
    bind b3 as {key:delta___SQL_SUM_AGGREGATE_2_mRR_B,
    value:delta___SQL_SUM_AGGREGATE_2_mR1} in __acc_ext.combine (let
    __prod_ret__22 =
    (if R_B == delta___SQL_SUM_AGGREGATE_2_mRR_B then 1
      else 0 * delta___SQL_SUM_AGGREGATE_2_mR1) * R_A in
    {|i:int| __prod_ret__22|} @ { Collection }))))
    empty {i:int} @ { Collection } in
  ((nd_add_delta_to_int {r1:__SQL_SUM_AGGREGATE_2, r2:true, r3:vid,
      r4:new_tuples});
   0))


declare insert_R_do_corrective_s10_m___SQL_SUM_AGGREGATE_1_mR1 : { r1:address,
  r2:int, r3:{ key:int, value:int }, r4:int, r5:{ key:int, value:int }, r6:int,
  r7:int, r8:collection { key:int, value:int } @ { Collection } } -> int =
  (\b1 -> bind b1 as {r1:orig_addr, r2:orig_stmt_id, r3:orig_vid, r4:hop,
  r5:vid, r6:R_A, r7:R_B, r8:delta_tuples} in let new_tuples =
  delta_tuples.fold ((\__acc_ext -> (\b3 ->
    bind b3 as {key:delta___SQL_SUM_AGGREGATE_1_mRR_B,
    value:delta___SQL_SUM_AGGREGATE_1_mR1} in __acc_ext.combine (let
    __prod_ret__17 =
    if R_B == delta___SQL_SUM_AGGREGATE_1_mRR_B then 1
      else 0 * delta___SQL_SUM_AGGREGATE_1_mR1 in
    {|i:int| __prod_ret__17|} @ { Collection }))))
    empty {i:int} @ { Collection } in
  ((nd_add_delta_to_int {r1:__SQL_SUM_AGGREGATE_2, r2:true, r3:vid,
      r4:new_tuples});
   0))


trigger ms_rcv_sw_init_ack : () = (\_u ->
  (ms_rcv_sw_init_ack_cnt = ms_rcv_sw_init_ack_cnt + 1;
   (if ms_rcv_sw_init_ack_cnt >= num_switches
   then
     (ms_start_time = now_int ();
      (sw_rcv_token, sw_next_switch_addr)<- g_min_vid;
      (tm_insert_timer, timer_addr)<- {r1:ms_gc_interval, r2:0, r3:me})
   else ())))
trigger sw_rcv_init : () = (\_u ->
  ((if sw_state == sw_state_pre_init then sw_state = sw_state_idle else ());
   (sw_driver_trig, me)<- ();
   (ms_rcv_sw_init_ack, master_addr)<- ()))
trigger ms_rcv_jobs_ack : () = (\_u ->
  (ms_rcv_jobs_ack_cnt = ms_rcv_jobs_ack_cnt + 1;
   (if ms_rcv_jobs_ack_cnt >= num_peers
   then
     (switches.iterate ((\b1 -> bind b1 as {i:addr} in 
      (sw_rcv_init, addr)<- ()))) else ())))
trigger rcv_jobs : collection { key:address, value:int } @ { Map } =
  (\jobs_in ->
  (jobs = jobs_in;
   (if job <= job_switch
   then sw_next_switch_addr = let addr_list =
     (((jobs.fold ((\acc_conv -> (\x -> ({| key:address, value:int |
       x|} @ { Seq }).combine acc_conv))) empty { key:address, value:int
       } @ { Seq }).filter ((\b1 -> bind b1 as {key:addr, value:job} in job ==
       job_switch))).fold ((\__acc_map -> (\b3 -> bind b3 as {key:addr,
       value:job} in __acc_map.combine ({|i:address| addr|} @ { Seq }))))
       empty {i:address} @ { Seq }).sort ((\b2 -> (\b3 ->
       bind b2 as {i:addr1} in bind b3 as {i:addr2} in if addr1 < addr2 
       then -1 else 1))) in
     case (addr_list.peek ()) of
       {Some first_addr -> (addr_list.fold ((\b2 -> (\b5 ->
         bind b2 as {key:take, value:result} in bind b5 as {i:x} in if take
         then {key:false, value:x}
         else if x == me then {key:true, value:result}
           else {key:take, value:result}))) {key:false,
         value:first_addr.i}).value}{None ->
                                      error (print "no addresses in addr_list")}
   else ());
   timer_addr = case ((jobs.filter ((\b1 -> bind b1 as {key:addr,
   value:job} in job == job_timer))).peek ()) of
   {Some timer -> timer.key}{None -> error (print "no timer peer found")};
   nodes = (jobs.filter ((\b1 -> bind b1 as {key:addr, value:job} in job ==
   job_node))).fold ((\__acc_map -> (\x -> __acc_map.combine ({|i:address|
   x.key|} @ { Collection })))) empty {i:address} @ { Collection };
   num_nodes = nodes.size ();
   switches = (jobs.filter ((\b1 -> bind b1 as {key:addr, value:job} in job ==
   job_switch))).fold ((\__acc_map -> (\x -> __acc_map.combine ({|i:address|
   x.key|} @ { Collection })))) empty {i:address} @ { Collection };
   num_switches = switches.size ();
   nodes.iterate ((\b1 -> bind b1 as {i:addr} in add_node addr));
   (ms_rcv_jobs_ack, master_addr)<- ()))
trigger ms_rcv_job : { key:address, value:int } = (\b1 -> bind b1 as {key:addr,
  value:job} in 
  (jobs.insert {key:addr, value:job};
   ms_rcv_job_cnt = ms_rcv_job_cnt + 1;
   (if ms_rcv_job_cnt >= num_peers
   then my_peers.iterate ((\b1 -> bind b1 as {i:addr} in 
     (rcv_jobs, addr)<- jobs)) else ())))
trigger rcv_master_addr : address = (\addr ->
  (master_addr = addr;(ms_rcv_job, addr)<- {key:me, value:job}))
trigger ms_send_addr_self : () = (\_u -> my_peers.iterate ((\b1 ->
  bind b1 as {i:addr} in (rcv_master_addr, addr)<- me)))
trigger shutdown_trig : () = (\_u -> haltEngine ())
trigger ms_shutdown : () = (\_u -> if ms_rcv_node_done_cnt >= num_nodes
  then my_peers.iterate ((\b1 -> bind b1 as {i:addr} in 
    (shutdown_trig, addr)<- ())) else ())
trigger ms_rcv_node_done : bool = (\done -> if done
  then
    (ms_rcv_node_done_cnt = ms_rcv_node_done_cnt + 1;
     (if ms_rcv_node_done_cnt >= num_nodes
     then (ms_end_time = now_int ();(ms_shutdown, me)<- ()) else ()))
  else ms_rcv_node_done_cnt = ms_rcv_node_done_cnt - 1)
trigger nd_rcv_done : () = (\_u ->
  (nd_state = nd_state_done;
   (if 0 == nd_stmt_cntrs.size () then (ms_rcv_node_done, master_addr)<- true
   else ())))
trigger ms_rcv_switch_done : () = (\_u ->
  (ms_rcv_switch_done_cnt = ms_rcv_switch_done_cnt + 1;
   (if ms_rcv_switch_done_cnt >= num_switches
   then nodes.iterate ((\b1 -> bind b1 as {i:addr} in 
     (nd_rcv_done, addr)<- ())) else ())))
trigger sw_ack_rcv : { key:address, value:{ key:int, value:int } } = (\b1 ->
  bind b1 as {key:addr, value:vid} in case ((sw_ack_log.filter ((\b1 ->
  bind b1 as {key:key, value:value} in key == vid))).peek ()) of
  {Some old_val -> let old_set = old_val.value in
    (old_set.erase {i:addr};
     (case (old_set.peek ()) of
     {Some _ -> sw_ack_log.insert {key:old_val.key, value:old_set}}{None ->
                                                                    (sw_ack_log.erase
                                                                    old_val;
                                                                    (
                                                                    if sw_state
                                                                    ==
                                                                    sw_state_done
                                                                    then
                                                                    (ms_rcv_switch_done,
                                                                    master_addr)<- ()
                                                                    else ()))}))}
  {None -> error (print "ack received but no msg sent")})
trigger ms_rcv_gc_vid : { key:address, value:{ key:int, value:int } } =
  (\data ->
  (ms_gc_vid_map.insert data;
   ms_gc_vid_ctr = ms_gc_vid_ctr + 1;
   (if ms_gc_vid_ctr >= ms_num_gc_expected
   then let min_vid =
     ms_gc_vid_map.fold ((\min_vid -> (\b3 -> bind b3 as {key:addr,
       value:vid} in if min_vid < vid then min_vid else vid))) g_min_vid in
     (ms_gc_vid_ctr = 0;
      ms_gc_vid_map = empty { key:address, value:{ key:int, value:int }
      } @ { Map };
      my_peers.iterate ((\b1 -> bind b1 as {i:addr} in 
      (do_gc, addr)<- min_vid));
      (tm_insert_timer, timer_addr)<- {r1:ms_gc_interval, r2:0, r3:me})
   else ())))
trigger rcv_req_gc_vid : () = (\_u -> if job == job_switch or job == job_master
  then (ms_rcv_gc_vid, master_addr)<- {key:me, value:sw_ack_log.fold
    ((\min_vid -> (\b3 -> bind b3 as {key:vid, value:addresses} in 
    if min_vid < vid then min_vid else vid))) sw_highest_vid}
  else if job == job_node
    then (ms_rcv_gc_vid, master_addr)<- {key:me, value:nd_stmt_cntrs.fold
      ((\min_vid -> (\b3 -> bind b3 as {key:vid_stmt_id, value:ctr_corrs} in 
      if min_vid < vid_stmt_id.key then min_vid else vid_stmt_id.key)))
      g_max_vid} else ())
trigger ms_send_gc_req : () = (\_u -> my_peers.iterate ((\b1 ->
  bind b1 as {i:addr} in (rcv_req_gc_vid, addr)<- ())))
trigger do_gc : { key:int, value:int } = (\min_gc_vid ->
  (let temp =
   empty { key:{ key:int, value:int }, value:collection {i:address} @ { Set }
     } @ { Map } in
   (sw_ack_log.iterate ((\b1 -> bind b1 as {key:vid, value:addresses} in 
    if vid < min_gc_vid then temp.insert {key:vid, value:addresses} else ()));
    temp.iterate ((\val -> sw_ack_log.erase val)));
   let temp =
   empty { r1:{ key:int, value:int }, r2:int, r3:int } @ { Collection } in
   (nd_log_master.iterate ((\b1 -> bind b1 as {r1:vid, r2:trig_id,
    r3:stmt_id} in if vid < min_gc_vid
    then temp.insert {r1:vid, r2:trig_id, r3:stmt_id} else ()));
    temp.iterate ((\val -> nd_log_master.erase val)));
   let temp =
   empty { r1:{ key:int, value:int }, r2:int, r3:int } @ { Collection } in
   (nd_log_insert_S.iterate ((\b1 -> bind b1 as {r1:vid, r2:S_B, r3:S_C} in 
    if vid < min_gc_vid then temp.insert {r1:vid, r2:S_B, r3:S_C} else ()));
    temp.iterate ((\val -> nd_log_insert_S.erase val)));
   let temp =
   empty { r1:{ key:int, value:int }, r2:int, r3:int } @ { Collection } in
   (nd_log_insert_R.iterate ((\b1 -> bind b1 as {r1:vid, r2:R_A, r3:R_B} in 
    if vid < min_gc_vid then temp.insert {r1:vid, r2:R_A, r3:R_B} else ()));
    temp.iterate ((\val -> nd_log_insert_R.erase val)));
   let temp =
   empty { r1:{ key:int, value:int }, r2:int, r3:int } @ { Collection } in
   bind map___SQL_SUM_AGGREGATE_1_mS1_s0_buf as ind
     map___SQL_SUM_AGGREGATE_1_mS1_s0_buf_unwrap in
     let frontier =
       frontier_int_int {key:min_gc_vid,
         value:map___SQL_SUM_AGGREGATE_1_mS1_s0_buf_unwrap} in
       (map___SQL_SUM_AGGREGATE_1_mS1_s0_buf_unwrap.iterate ((\b1 ->
        bind b1 as {r1:vid, r2:map_0, r3:map_val} in if vid < min_gc_vid
        then temp.insert {r1:vid, r2:map_0, r3:map_val} else ()));
        temp.iterate ((\val ->
        map___SQL_SUM_AGGREGATE_1_mS1_s0_buf_unwrap.erase val));
        frontier.iterate ((\val ->
        map___SQL_SUM_AGGREGATE_1_mS1_s0_buf_unwrap.insert val)));
   let temp =
   empty { r1:{ key:int, value:int }, r2:int, r3:int } @ { Collection } in
   bind map___SQL_SUM_AGGREGATE_1_mS1_s2_buf as ind
     map___SQL_SUM_AGGREGATE_1_mS1_s2_buf_unwrap in
     let frontier =
       frontier_int_int {key:min_gc_vid,
         value:map___SQL_SUM_AGGREGATE_1_mS1_s2_buf_unwrap} in
       (map___SQL_SUM_AGGREGATE_1_mS1_s2_buf_unwrap.iterate ((\b1 ->
        bind b1 as {r1:vid, r2:map_0, r3:map_val} in if vid < min_gc_vid
        then temp.insert {r1:vid, r2:map_0, r3:map_val} else ()));
        temp.iterate ((\val ->
        map___SQL_SUM_AGGREGATE_1_mS1_s2_buf_unwrap.erase val));
        frontier.iterate ((\val ->
        map___SQL_SUM_AGGREGATE_1_mS1_s2_buf_unwrap.insert val)));
   let temp =
   empty { r1:{ key:int, value:int }, r2:int, r3:int } @ { Collection } in
   bind map___SQL_SUM_AGGREGATE_2_mS3_s2_buf as ind
     map___SQL_SUM_AGGREGATE_2_mS3_s2_buf_unwrap in
     let frontier =
       frontier_int_int {key:min_gc_vid,
         value:map___SQL_SUM_AGGREGATE_2_mS3_s2_buf_unwrap} in
       (map___SQL_SUM_AGGREGATE_2_mS3_s2_buf_unwrap.iterate ((\b1 ->
        bind b1 as {r1:vid, r2:map_0, r3:map_val} in if vid < min_gc_vid
        then temp.insert {r1:vid, r2:map_0, r3:map_val} else ()));
        temp.iterate ((\val ->
        map___SQL_SUM_AGGREGATE_2_mS3_s2_buf_unwrap.erase val));
        frontier.iterate ((\val ->
        map___SQL_SUM_AGGREGATE_2_mS3_s2_buf_unwrap.insert val)));
   let temp =
   empty { r1:{ key:int, value:int }, r2:int, r3:int } @ { Collection } in
   bind map___SQL_SUM_AGGREGATE_1_mS1_s4_buf as ind
     map___SQL_SUM_AGGREGATE_1_mS1_s4_buf_unwrap in
     let frontier =
       frontier_int_int {key:min_gc_vid,
         value:map___SQL_SUM_AGGREGATE_1_mS1_s4_buf_unwrap} in
       (map___SQL_SUM_AGGREGATE_1_mS1_s4_buf_unwrap.iterate ((\b1 ->
        bind b1 as {r1:vid, r2:map_0, r3:map_val} in if vid < min_gc_vid
        then temp.insert {r1:vid, r2:map_0, r3:map_val} else ()));
        temp.iterate ((\val ->
        map___SQL_SUM_AGGREGATE_1_mS1_s4_buf_unwrap.erase val));
        frontier.iterate ((\val ->
        map___SQL_SUM_AGGREGATE_1_mS1_s4_buf_unwrap.insert val)));
   let temp =
   empty { r1:{ key:int, value:int }, r2:int, r3:int } @ { Collection } in
   bind map___SQL_SUM_AGGREGATE_1_mS1_s6_buf as ind
     map___SQL_SUM_AGGREGATE_1_mS1_s6_buf_unwrap in
     let frontier =
       frontier_int_int {key:min_gc_vid,
         value:map___SQL_SUM_AGGREGATE_1_mS1_s6_buf_unwrap} in
       (map___SQL_SUM_AGGREGATE_1_mS1_s6_buf_unwrap.iterate ((\b1 ->
        bind b1 as {r1:vid, r2:map_0, r3:map_val} in if vid < min_gc_vid
        then temp.insert {r1:vid, r2:map_0, r3:map_val} else ()));
        temp.iterate ((\val ->
        map___SQL_SUM_AGGREGATE_1_mS1_s6_buf_unwrap.erase val));
        frontier.iterate ((\val ->
        map___SQL_SUM_AGGREGATE_1_mS1_s6_buf_unwrap.insert val)));
   let temp =
   empty { r1:{ key:int, value:int }, r2:int, r3:int } @ { Collection } in
   bind map___SQL_SUM_AGGREGATE_2_mS3_s6_buf as ind
     map___SQL_SUM_AGGREGATE_2_mS3_s6_buf_unwrap in
     let frontier =
       frontier_int_int {key:min_gc_vid,
         value:map___SQL_SUM_AGGREGATE_2_mS3_s6_buf_unwrap} in
       (map___SQL_SUM_AGGREGATE_2_mS3_s6_buf_unwrap.iterate ((\b1 ->
        bind b1 as {r1:vid, r2:map_0, r3:map_val} in if vid < min_gc_vid
        then temp.insert {r1:vid, r2:map_0, r3:map_val} else ()));
        temp.iterate ((\val ->
        map___SQL_SUM_AGGREGATE_2_mS3_s6_buf_unwrap.erase val));
        frontier.iterate ((\val ->
        map___SQL_SUM_AGGREGATE_2_mS3_s6_buf_unwrap.insert val)));
   let temp =
   empty { r1:{ key:int, value:int }, r2:int, r3:int } @ { Collection } in
   bind map___SQL_SUM_AGGREGATE_1_mR1_s8_buf as ind
     map___SQL_SUM_AGGREGATE_1_mR1_s8_buf_unwrap in
     let frontier =
       frontier_int_int {key:min_gc_vid,
         value:map___SQL_SUM_AGGREGATE_1_mR1_s8_buf_unwrap} in
       (map___SQL_SUM_AGGREGATE_1_mR1_s8_buf_unwrap.iterate ((\b1 ->
        bind b1 as {r1:vid, r2:map_0, r3:map_val} in if vid < min_gc_vid
        then temp.insert {r1:vid, r2:map_0, r3:map_val} else ()));
        temp.iterate ((\val ->
        map___SQL_SUM_AGGREGATE_1_mR1_s8_buf_unwrap.erase val));
        frontier.iterate ((\val ->
        map___SQL_SUM_AGGREGATE_1_mR1_s8_buf_unwrap.insert val)));
   let temp =
   empty { r1:{ key:int, value:int }, r2:int, r3:int } @ { Collection } in
   bind map___SQL_SUM_AGGREGATE_2_mR1_s10_buf as ind
     map___SQL_SUM_AGGREGATE_2_mR1_s10_buf_unwrap in
     let frontier =
       frontier_int_int {key:min_gc_vid,
         value:map___SQL_SUM_AGGREGATE_2_mR1_s10_buf_unwrap} in
       (map___SQL_SUM_AGGREGATE_2_mR1_s10_buf_unwrap.iterate ((\b1 ->
        bind b1 as {r1:vid, r2:map_0, r3:map_val} in if vid < min_gc_vid
        then temp.insert {r1:vid, r2:map_0, r3:map_val} else ()));
        temp.iterate ((\val ->
        map___SQL_SUM_AGGREGATE_2_mR1_s10_buf_unwrap.erase val));
        frontier.iterate ((\val ->
        map___SQL_SUM_AGGREGATE_2_mR1_s10_buf_unwrap.insert val)));
   let temp =
   empty { r1:{ key:int, value:int }, r2:int, r3:int } @ { Collection } in
   bind map___SQL_SUM_AGGREGATE_1_mR1_s10_buf as ind
     map___SQL_SUM_AGGREGATE_1_mR1_s10_buf_unwrap in
     let frontier =
       frontier_int_int {key:min_gc_vid,
         value:map___SQL_SUM_AGGREGATE_1_mR1_s10_buf_unwrap} in
       (map___SQL_SUM_AGGREGATE_1_mR1_s10_buf_unwrap.iterate ((\b1 ->
        bind b1 as {r1:vid, r2:map_0, r3:map_val} in if vid < min_gc_vid
        then temp.insert {r1:vid, r2:map_0, r3:map_val} else ()));
        temp.iterate ((\val ->
        map___SQL_SUM_AGGREGATE_1_mR1_s10_buf_unwrap.erase val));
        frontier.iterate ((\val ->
        map___SQL_SUM_AGGREGATE_1_mR1_s10_buf_unwrap.insert val)));
   let temp =
   empty { r1:{ key:int, value:int }, r2:int, r3:int } @ { Collection } in
   bind map___SQL_SUM_AGGREGATE_1_mR1_s12_buf as ind
     map___SQL_SUM_AGGREGATE_1_mR1_s12_buf_unwrap in
     let frontier =
       frontier_int_int {key:min_gc_vid,
         value:map___SQL_SUM_AGGREGATE_1_mR1_s12_buf_unwrap} in
       (map___SQL_SUM_AGGREGATE_1_mR1_s12_buf_unwrap.iterate ((\b1 ->
        bind b1 as {r1:vid, r2:map_0, r3:map_val} in if vid < min_gc_vid
        then temp.insert {r1:vid, r2:map_0, r3:map_val} else ()));
        temp.iterate ((\val ->
        map___SQL_SUM_AGGREGATE_1_mR1_s12_buf_unwrap.erase val));
        frontier.iterate ((\val ->
        map___SQL_SUM_AGGREGATE_1_mR1_s12_buf_unwrap.insert val)));
   let temp =
   empty { r1:{ key:int, value:int }, r2:int, r3:int } @ { Collection } in
   bind map___SQL_SUM_AGGREGATE_2_mR1_s14_buf as ind
     map___SQL_SUM_AGGREGATE_2_mR1_s14_buf_unwrap in
     let frontier =
       frontier_int_int {key:min_gc_vid,
         value:map___SQL_SUM_AGGREGATE_2_mR1_s14_buf_unwrap} in
       (map___SQL_SUM_AGGREGATE_2_mR1_s14_buf_unwrap.iterate ((\b1 ->
        bind b1 as {r1:vid, r2:map_0, r3:map_val} in if vid < min_gc_vid
        then temp.insert {r1:vid, r2:map_0, r3:map_val} else ()));
        temp.iterate ((\val ->
        map___SQL_SUM_AGGREGATE_2_mR1_s14_buf_unwrap.erase val));
        frontier.iterate ((\val ->
        map___SQL_SUM_AGGREGATE_2_mR1_s14_buf_unwrap.insert val)));
   let temp =
   empty { r1:{ key:int, value:int }, r2:int, r3:int } @ { Collection } in
   bind map___SQL_SUM_AGGREGATE_1_mR1_s14_buf as ind
     map___SQL_SUM_AGGREGATE_1_mR1_s14_buf_unwrap in
     let frontier =
       frontier_int_int {key:min_gc_vid,
         value:map___SQL_SUM_AGGREGATE_1_mR1_s14_buf_unwrap} in
       (map___SQL_SUM_AGGREGATE_1_mR1_s14_buf_unwrap.iterate ((\b1 ->
        bind b1 as {r1:vid, r2:map_0, r3:map_val} in if vid < min_gc_vid
        then temp.insert {r1:vid, r2:map_0, r3:map_val} else ()));
        temp.iterate ((\val ->
        map___SQL_SUM_AGGREGATE_1_mR1_s14_buf_unwrap.erase val));
        frontier.iterate ((\val ->
        map___SQL_SUM_AGGREGATE_1_mR1_s14_buf_unwrap.insert val)));
   let temp = empty { key:{ key:int, value:int }, value:int } @ { Collection }
   in
   bind __SQL_SUM_AGGREGATE_1 as ind __SQL_SUM_AGGREGATE_1_unwrap in
     let frontier =
       frontier_int {key:min_gc_vid, value:__SQL_SUM_AGGREGATE_1_unwrap} in
       (__SQL_SUM_AGGREGATE_1_unwrap.iterate ((\b1 -> bind b1 as {key:vid,
        value:map_val} in if vid < min_gc_vid
        then temp.insert {key:vid, value:map_val} else ()));
        temp.iterate ((\val -> __SQL_SUM_AGGREGATE_1_unwrap.erase val));
        frontier.iterate ((\val -> __SQL_SUM_AGGREGATE_1_unwrap.insert val)));
   let temp =
   empty { r1:{ key:int, value:int }, r2:int, r3:int } @ { Collection } in
   bind __SQL_SUM_AGGREGATE_1_mS1 as ind __SQL_SUM_AGGREGATE_1_mS1_unwrap in
     let frontier =
       frontier_int_int {key:min_gc_vid,
         value:__SQL_SUM_AGGREGATE_1_mS1_unwrap} in
       (__SQL_SUM_AGGREGATE_1_mS1_unwrap.iterate ((\b1 -> bind b1 as {r1:vid,
        r2:map_0, r3:map_val} in if vid < min_gc_vid
        then temp.insert {r1:vid, r2:map_0, r3:map_val} else ()));
        temp.iterate ((\val -> __SQL_SUM_AGGREGATE_1_mS1_unwrap.erase val));
        frontier.iterate ((\val -> __SQL_SUM_AGGREGATE_1_mS1_unwrap.insert
        val)));
   let temp =
   empty { r1:{ key:int, value:int }, r2:int, r3:int } @ { Collection } in
   bind __SQL_SUM_AGGREGATE_1_mR1 as ind __SQL_SUM_AGGREGATE_1_mR1_unwrap in
     let frontier =
       frontier_int_int {key:min_gc_vid,
         value:__SQL_SUM_AGGREGATE_1_mR1_unwrap} in
       (__SQL_SUM_AGGREGATE_1_mR1_unwrap.iterate ((\b1 -> bind b1 as {r1:vid,
        r2:map_0, r3:map_val} in if vid < min_gc_vid
        then temp.insert {r1:vid, r2:map_0, r3:map_val} else ()));
        temp.iterate ((\val -> __SQL_SUM_AGGREGATE_1_mR1_unwrap.erase val));
        frontier.iterate ((\val -> __SQL_SUM_AGGREGATE_1_mR1_unwrap.insert
        val)));
   let temp = empty { key:{ key:int, value:int }, value:int } @ { Collection }
   in
   bind __SQL_SUM_AGGREGATE_2 as ind __SQL_SUM_AGGREGATE_2_unwrap in
     let frontier =
       frontier_int {key:min_gc_vid, value:__SQL_SUM_AGGREGATE_2_unwrap} in
       (__SQL_SUM_AGGREGATE_2_unwrap.iterate ((\b1 -> bind b1 as {key:vid,
        value:map_val} in if vid < min_gc_vid
        then temp.insert {key:vid, value:map_val} else ()));
        temp.iterate ((\val -> __SQL_SUM_AGGREGATE_2_unwrap.erase val));
        frontier.iterate ((\val -> __SQL_SUM_AGGREGATE_2_unwrap.insert val)));
   let temp =
   empty { r1:{ key:int, value:int }, r2:int, r3:int } @ { Collection } in
   bind __SQL_SUM_AGGREGATE_2_mS3 as ind __SQL_SUM_AGGREGATE_2_mS3_unwrap in
     let frontier =
       frontier_int_int {key:min_gc_vid,
         value:__SQL_SUM_AGGREGATE_2_mS3_unwrap} in
       (__SQL_SUM_AGGREGATE_2_mS3_unwrap.iterate ((\b1 -> bind b1 as {r1:vid,
        r2:map_0, r3:map_val} in if vid < min_gc_vid
        then temp.insert {r1:vid, r2:map_0, r3:map_val} else ()));
        temp.iterate ((\val -> __SQL_SUM_AGGREGATE_2_mS3_unwrap.erase val));
        frontier.iterate ((\val -> __SQL_SUM_AGGREGATE_2_mS3_unwrap.insert
        val)));
   let temp =
   empty { r1:{ key:int, value:int }, r2:int, r3:int } @ { Collection } in
   bind __SQL_SUM_AGGREGATE_2_mR1 as ind __SQL_SUM_AGGREGATE_2_mR1_unwrap in
     let frontier =
       frontier_int_int {key:min_gc_vid,
         value:__SQL_SUM_AGGREGATE_2_mR1_unwrap} in
       (__SQL_SUM_AGGREGATE_2_mR1_unwrap.iterate ((\b1 -> bind b1 as {r1:vid,
        r2:map_0, r3:map_val} in if vid < min_gc_vid
        then temp.insert {r1:vid, r2:map_0, r3:map_val} else ()));
        temp.iterate ((\val -> __SQL_SUM_AGGREGATE_2_mR1_unwrap.erase val));
        frontier.iterate ((\val -> __SQL_SUM_AGGREGATE_2_mR1_unwrap.insert
        val)))))
trigger sw_rcv_token : { key:int, value:int } = (\vid ->
  if sw_need_vid_cntr > 0
  then let next_vid = {key:vid.key, value:vid.value + sw_need_vid_cntr} in
    (sw_token_vid_list.insert {key:vid, value:sw_need_vid_cntr};
     sw_need_vid_cntr = 0;
     sw_highest_vid = next_vid;
     (sw_rcv_token, sw_next_switch_addr)<- next_vid;
     (if sw_state == sw_state_wait_vid then (sw_driver_trig, me)<- () else ()))
  else (sw_rcv_token, sw_next_switch_addr)<- vid)
trigger tm_insert_timer : { r1:int, r2:int, r3:address } = (\b1 ->
  bind b1 as {r1:time, r2:trig_id, r3:addr} in 
  (tm_timer_list.insert {r1:time + now_int (), r2:trig_id, r3:addr};
   tm_timer_list = tm_timer_list.sort ((\b2 -> (\b6 -> bind b2 as {r1:time1,
   r2:trig_id1, r3:addr1} in bind b6 as {r1:time2, r2:trig_id2, r3:addr2} in 
   if time1 < time2 then -1 else 1)));
   (tm_check_time, me)<- ()))
trigger tm_check_time : () = (\_u -> case (tm_timer_list.peek ()) of
  {Some timer -> if now_int () >= timer.r1
    then
      (tm_timer_list.erase timer;
       bind timer as {r1:time, r2:trig_id, r3:addr} in
       if trig_id == 0 then (ms_send_gc_req, addr)<- () else ();
       (tm_check_time, me)<- ()) else ((tm_check_time, me)<- ();(sleep 1000))}
  {None -> ()})
trigger sw_demux : { r1:int, r2:int, r3:int } = (\args -> if args.r1 == 2
  then sw_insert_R {key:args.r2, value:args.r3}
  else if args.r1 == 0 then sw_insert_S {key:args.r2, value:args.r3}
    else if args.r1 == -1
      then
        (sw_trig_buf_idx.insert ({i:-1});
         sw_need_vid_cntr = sw_need_vid_cntr + 1)
      else error (print "unidentified trig id"))
trigger sw_driver_trig : () = (\_u -> if sw_state == sw_state_done then ()
  else case sw_gen_vid () of
    {Some vid -> case (sw_trig_buf_idx.peek ()) of
      {Some trig_id ->
        (sw_trig_buf_idx.erase {i:trig_id.i};
         (if trig_id.i == -1 then sw_state = sw_state_done
         else
           (sw_state = sw_state_sending;
            (if trig_id.i == 2 then sw_insert_R_send_fetch vid
            else if trig_id.i == 0 then sw_insert_S_send_fetch vid
              else error (print "mismatch on trigger id"));
            (sw_driver_trig, me)<- ())))}{None -> sw_state = sw_state_idle}}
    {None -> sw_state = sw_state_wait_vid})
trigger nd_rcv_corr_done : { r1:{ key:int, value:int }, r2:int, r3:int, r4:int
  } = (\b1 -> bind b1 as {r1:vid, r2:stmt_id, r3:hop, r4:count} in 
  ((nd_update_stmt_cntr_corr_map {r1:vid, r2:stmt_id, r3:hop, r4:count,
      r5:false, r6:false});
   (case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
   key == {key:vid, value:stmt_id}))).peek ()) of
   {Some lkup -> if 0 == ((lkup.value).value).size ()
     then
       (nd_stmt_cntrs.erase lkup;
        (if nd_state == nd_state_done
        then if 0 == nd_stmt_cntrs.size ()
          then (ms_rcv_node_done, master_addr)<- true else () else ()))
     else ()}{None ->
               error (print "nd_rcv_corr_done: expected stmt_cntr value")})))
trigger nd_insert_S_rcv_put : { r1:address, r2:collection { key:int, value:int
  } @ { Collection }, r3:{ key:int, value:int }, r4:int, r5:int } = (\b1 ->
  bind b1 as {r1:sender_ip, r2:stmt_id_cnt_list, r3:vid, r4:S_B, r5:S_C} in 
  (stmt_id_cnt_list.iterate ((\b1 -> bind b1 as {key:stmt_id, value:count} in 
   if nd_check_stmt_cntr_index {r1:vid, r2:stmt_id, r3:count}
   then if stmt_id == 3
     then nd_insert_S_do_complete_s3 {r1:vid, r2:S_B, r3:S_C}
     else if stmt_id == 2
       then nd_insert_S_do_complete_s2 {r1:vid, r2:S_B, r3:S_C}
       else if stmt_id == 1
         then nd_insert_S_do_complete_s1 {r1:vid, r2:S_B, r3:S_C}
         else if stmt_id == 0
           then nd_insert_S_do_complete_s0 {r1:vid, r2:S_B, r3:S_C} else ()
   else ()));
   (sw_ack_rcv, sender_ip)<- {key:me, value:vid}))
trigger nd_insert_S_rcv_fetch : { r1:collection { key:int, value:int
  } @ { Collection }, r2:{ key:int, value:int }, r3:int, r4:int } = (\b1 ->
  bind b1 as {r1:stmts_and_map_ids, r2:vid, r3:S_B, r4:S_C} in 
  ((nd_log_write_insert_S {r1:vid, r2:S_B, r3:S_C});
   stmts_and_map_ids.iterate ((\b1 -> bind b1 as {key:stmt_id,
   value:map_id} in if stmt_id == 0
   then if map_id == 2
     then (nd_insert_S_send_push_s0_m___SQL_SUM_AGGREGATE_1_mS1, me)<- {r1:vid,
       r2:S_B, r3:S_C} else error (print "nd_rcv_fetch: invalid map id")
   else if stmt_id == 2
     then if map_id == 2
       then
         (nd_insert_S_send_push_s2_m___SQL_SUM_AGGREGATE_1_mS1, me)<- {r1:vid,
         r2:S_B, r3:S_C}
       else if map_id == 5
         then
           (nd_insert_S_send_push_s2_m___SQL_SUM_AGGREGATE_2_mS3, me)<- {r1:vid,
           r2:S_B, r3:S_C} else error (print "nd_rcv_fetch: invalid map id")
     else error (print "nd_rcv_fetch: invalid stmt id")))))
trigger nd_insert_S_send_push_s0_m___SQL_SUM_AGGREGATE_1_mS1 : { r1:{ key:int,
  value:int }, r2:int, r3:int } = (\b1 -> bind b1 as {r1:vid, r2:S_B,
  r3:S_C} in bind __SQL_SUM_AGGREGATE_1_mS1 as ind
  __SQL_SUM_AGGREGATE_1_mS1_deref in
  ((nd_log_master_write {r1:vid, r2:0, r3:0});
   (shuffle___SQL_SUM_AGGREGATE_1_mS1_to___SQL_SUM_AGGREGATE_1 {r1:(),
      r2:frontier_int_int {key:vid,
           value:__SQL_SUM_AGGREGATE_1_mS1_deref.filter ((\b1 ->
           bind b1 as {r1:r1, r2:r2, r3:r3} in r2 == S_B))}, r3:true}).iterate
   ((\b1 -> bind b1 as {key:ip, value:tuples} in 
   (nd_insert_S_rcv_push_s0_m___SQL_SUM_AGGREGATE_1_mS1, ip)<- {r1:tuples,
   r2:vid, r3:S_B, r4:S_C}))))
trigger nd_insert_S_send_push_s2_m___SQL_SUM_AGGREGATE_1_mS1 : { r1:{ key:int,
  value:int }, r2:int, r3:int } = (\b1 -> bind b1 as {r1:vid, r2:S_B,
  r3:S_C} in bind __SQL_SUM_AGGREGATE_1_mS1 as ind
  __SQL_SUM_AGGREGATE_1_mS1_deref in
  ((nd_log_master_write {r1:vid, r2:0, r3:2});
   (shuffle___SQL_SUM_AGGREGATE_1_mS1_to___SQL_SUM_AGGREGATE_2 {r1:(),
      r2:frontier_int_int {key:vid,
           value:__SQL_SUM_AGGREGATE_1_mS1_deref.filter ((\b1 ->
           bind b1 as {r1:r1, r2:r2, r3:r3} in r2 == S_B))}, r3:true}).iterate
   ((\b1 -> bind b1 as {key:ip, value:tuples} in 
   (nd_insert_S_rcv_push_s2_m___SQL_SUM_AGGREGATE_1_mS1, ip)<- {r1:tuples,
   r2:vid, r3:S_B, r4:S_C}))))
trigger nd_insert_S_send_push_s2_m___SQL_SUM_AGGREGATE_2_mS3 : { r1:{ key:int,
  value:int }, r2:int, r3:int } = (\b1 -> bind b1 as {r1:vid, r2:S_B,
  r3:S_C} in bind __SQL_SUM_AGGREGATE_2_mS3 as ind
  __SQL_SUM_AGGREGATE_2_mS3_deref in
  ((nd_log_master_write {r1:vid, r2:0, r3:2});
   (shuffle___SQL_SUM_AGGREGATE_2_mS3_to___SQL_SUM_AGGREGATE_2 {r1:(),
      r2:frontier_int_int {key:vid,
           value:__SQL_SUM_AGGREGATE_2_mS3_deref.filter ((\b1 ->
           bind b1 as {r1:r1, r2:r2, r3:r3} in r2 == S_B))}, r3:true}).iterate
   ((\b1 -> bind b1 as {key:ip, value:tuples} in 
   (nd_insert_S_rcv_push_s2_m___SQL_SUM_AGGREGATE_2_mS3, ip)<- {r1:tuples,
   r2:vid, r3:S_B, r4:S_C}))))
trigger nd_insert_S_rcv_push_s0_m___SQL_SUM_AGGREGATE_1_mS1 : { r1:collection {
  r1:{ key:int, value:int }, r2:int, r3:int } @ { Collection }, r2:{ key:int,
  value:int }, r3:int, r4:int } = (\b1 -> bind b1 as {r1:tuples, r2:vid,
  r3:S_B, r4:S_C} in 
  ((nd_log_write_insert_S {r1:vid, r2:S_B, r3:S_C});
   tuples.iterate ((\tuple -> bind map___SQL_SUM_AGGREGATE_1_mS1_s0_buf as ind
   map___SQL_SUM_AGGREGATE_1_mS1_s0_buf_d in
   bind tuple as {r1:_tup0, r2:_tup1, r3:_tup2} in
     case ((map___SQL_SUM_AGGREGATE_1_mS1_s0_buf_d.filter ((\b1 ->
       bind b1 as {r1:r1, r2:r2, r3:r3} in r1 == _tup0 and r2 == _tup1))).peek
       ()) of
       {Some vals -> map___SQL_SUM_AGGREGATE_1_mS1_s0_buf_d.update vals tuple}
       {None -> map___SQL_SUM_AGGREGATE_1_mS1_s0_buf_d.insert tuple}));
   (if nd_check_stmt_cntr_index {r1:vid, r2:0, r3:-1}
   then nd_insert_S_do_complete_s0 {r1:vid, r2:S_B, r3:S_C} else ())))
trigger nd_insert_S_rcv_push_s2_m___SQL_SUM_AGGREGATE_1_mS1 : { r1:collection {
  r1:{ key:int, value:int }, r2:int, r3:int } @ { Collection }, r2:{ key:int,
  value:int }, r3:int, r4:int } = (\b1 -> bind b1 as {r1:tuples, r2:vid,
  r3:S_B, r4:S_C} in 
  ((nd_log_write_insert_S {r1:vid, r2:S_B, r3:S_C});
   tuples.iterate ((\tuple -> bind map___SQL_SUM_AGGREGATE_1_mS1_s2_buf as ind
   map___SQL_SUM_AGGREGATE_1_mS1_s2_buf_d in
   bind tuple as {r1:_tup0, r2:_tup1, r3:_tup2} in
     case ((map___SQL_SUM_AGGREGATE_1_mS1_s2_buf_d.filter ((\b1 ->
       bind b1 as {r1:r1, r2:r2, r3:r3} in r1 == _tup0 and r2 == _tup1))).peek
       ()) of
       {Some vals -> map___SQL_SUM_AGGREGATE_1_mS1_s2_buf_d.update vals tuple}
       {None -> map___SQL_SUM_AGGREGATE_1_mS1_s2_buf_d.insert tuple}));
   (if nd_check_stmt_cntr_index {r1:vid, r2:2, r3:-1}
   then nd_insert_S_do_complete_s2 {r1:vid, r2:S_B, r3:S_C} else ())))
trigger nd_insert_S_rcv_push_s2_m___SQL_SUM_AGGREGATE_2_mS3 : { r1:collection {
  r1:{ key:int, value:int }, r2:int, r3:int } @ { Collection }, r2:{ key:int,
  value:int }, r3:int, r4:int } = (\b1 -> bind b1 as {r1:tuples, r2:vid,
  r3:S_B, r4:S_C} in 
  ((nd_log_write_insert_S {r1:vid, r2:S_B, r3:S_C});
   tuples.iterate ((\tuple -> bind map___SQL_SUM_AGGREGATE_2_mS3_s2_buf as ind
   map___SQL_SUM_AGGREGATE_2_mS3_s2_buf_d in
   bind tuple as {r1:_tup0, r2:_tup1, r3:_tup2} in
     case ((map___SQL_SUM_AGGREGATE_2_mS3_s2_buf_d.filter ((\b1 ->
       bind b1 as {r1:r1, r2:r2, r3:r3} in r1 == _tup0 and r2 == _tup1))).peek
       ()) of
       {Some vals -> map___SQL_SUM_AGGREGATE_2_mS3_s2_buf_d.update vals tuple}
       {None -> map___SQL_SUM_AGGREGATE_2_mS3_s2_buf_d.insert tuple}));
   (if nd_check_stmt_cntr_index {r1:vid, r2:2, r3:-1}
   then nd_insert_S_do_complete_s2 {r1:vid, r2:S_B, r3:S_C} else ())))
trigger nd_insert_S_do_complete_s1_trig : { r1:{ key:int, value:int }, r2:int,
  r3:int } = (\b1 -> bind b1 as {r1:vid, r2:S_B, r3:S_C} in 
  nd_insert_S_do_complete_s1 {r1:vid, r2:S_B, r3:S_C})
trigger nd_insert_S_do_complete_s3_trig : { r1:{ key:int, value:int }, r2:int,
  r3:int } = (\b1 -> bind b1 as {r1:vid, r2:S_B, r3:S_C} in 
  nd_insert_S_do_complete_s3 {r1:vid, r2:S_B, r3:S_C})
trigger insert_S_rcv_corrective_s0_m___SQL_SUM_AGGREGATE_1_mS1 : { r1:address,
  r2:int, r3:{ key:int, value:int }, r4:int, r5:{ key:int, value:int },
  r6:collection { key:int, value:int } @ { Seq }, r7:collection { key:int,
  value:int } @ { Collection } } = (\b1 -> bind b1 as {r1:orig_addr,
  r2:orig_stmt_id, r3:orig_vid, r4:hop, r5:vid, r6:compute_vids,
  r7:delta_tuples} in 
  ((nd_add_delta_to_int_int {r1:map___SQL_SUM_AGGREGATE_1_mS1_s0_buf, r2:false,
      r3:vid, r4:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> case
     ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in key
     == {key:compute_vid, value:0}))).peek ()) of
     {Some lkup -> if (lkup.value).key == 0
       then bind nd_log_get_bound_insert_S compute_vid as
         {r1:vid, r2:S_B, r3:S_C} in
         acc_count +
           insert_S_do_corrective_s0_m___SQL_SUM_AGGREGATE_1_mS1 {r1:orig_addr,
             r2:orig_stmt_id, r3:orig_vid, r4:hop, r5:compute_vid, r6:S_B,
             r7:S_C, r8:delta_tuples} else acc_count}{None ->
                                                       error
                                                         (print
                                                            "nd_rcv_corrective: failed to find entry in stmt_cntrs for corrective")})))
     0 in
   (nd_rcv_corr_done, orig_addr)<- {r1:orig_vid, r2:orig_stmt_id, r3:hop,
     r4:sent_msgs}))
trigger insert_S_rcv_corrective_s2_m___SQL_SUM_AGGREGATE_1_mS1 : { r1:address,
  r2:int, r3:{ key:int, value:int }, r4:int, r5:{ key:int, value:int },
  r6:collection { key:int, value:int } @ { Seq }, r7:collection { key:int,
  value:int } @ { Collection } } = (\b1 -> bind b1 as {r1:orig_addr,
  r2:orig_stmt_id, r3:orig_vid, r4:hop, r5:vid, r6:compute_vids,
  r7:delta_tuples} in 
  ((nd_add_delta_to_int_int {r1:map___SQL_SUM_AGGREGATE_1_mS1_s2_buf, r2:false,
      r3:vid, r4:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> case
     ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in key
     == {key:compute_vid, value:2}))).peek ()) of
     {Some lkup -> if (lkup.value).key == 0
       then bind nd_log_get_bound_insert_S compute_vid as
         {r1:vid, r2:S_B, r3:S_C} in
         acc_count +
           insert_S_do_corrective_s2_m___SQL_SUM_AGGREGATE_1_mS1 {r1:orig_addr,
             r2:orig_stmt_id, r3:orig_vid, r4:hop, r5:compute_vid, r6:S_B,
             r7:S_C, r8:delta_tuples} else acc_count}{None ->
                                                       error
                                                         (print
                                                            "nd_rcv_corrective: failed to find entry in stmt_cntrs for corrective")})))
     0 in
   (nd_rcv_corr_done, orig_addr)<- {r1:orig_vid, r2:orig_stmt_id, r3:hop,
     r4:sent_msgs}))
trigger insert_S_rcv_corrective_s2_m___SQL_SUM_AGGREGATE_2_mS3 : { r1:address,
  r2:int, r3:{ key:int, value:int }, r4:int, r5:{ key:int, value:int },
  r6:collection { key:int, value:int } @ { Seq }, r7:collection { key:int,
  value:int } @ { Collection } } = (\b1 -> bind b1 as {r1:orig_addr,
  r2:orig_stmt_id, r3:orig_vid, r4:hop, r5:vid, r6:compute_vids,
  r7:delta_tuples} in 
  ((nd_add_delta_to_int_int {r1:map___SQL_SUM_AGGREGATE_2_mS3_s2_buf, r2:false,
      r3:vid, r4:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> case
     ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in key
     == {key:compute_vid, value:2}))).peek ()) of
     {Some lkup -> if (lkup.value).key == 0
       then bind nd_log_get_bound_insert_S compute_vid as
         {r1:vid, r2:S_B, r3:S_C} in
         acc_count +
           insert_S_do_corrective_s2_m___SQL_SUM_AGGREGATE_2_mS3 {r1:orig_addr,
             r2:orig_stmt_id, r3:orig_vid, r4:hop, r5:compute_vid, r6:S_B,
             r7:S_C, r8:delta_tuples} else acc_count}{None ->
                                                       error
                                                         (print
                                                            "nd_rcv_corrective: failed to find entry in stmt_cntrs for corrective")})))
     0 in
   (nd_rcv_corr_done, orig_addr)<- {r1:orig_vid, r2:orig_stmt_id, r3:hop,
     r4:sent_msgs}))
trigger nd_insert_R_rcv_put : { r1:address, r2:collection { key:int, value:int
  } @ { Collection }, r3:{ key:int, value:int }, r4:int, r5:int } = (\b1 ->
  bind b1 as {r1:sender_ip, r2:stmt_id_cnt_list, r3:vid, r4:R_A, r5:R_B} in 
  (stmt_id_cnt_list.iterate ((\b1 -> bind b1 as {key:stmt_id, value:count} in 
   if nd_check_stmt_cntr_index {r1:vid, r2:stmt_id, r3:count}
   then if stmt_id == 11
     then nd_insert_R_do_complete_s11 {r1:vid, r2:R_A, r3:R_B}
     else if stmt_id == 10
       then nd_insert_R_do_complete_s10 {r1:vid, r2:R_A, r3:R_B}
       else if stmt_id == 9
         then nd_insert_R_do_complete_s9 {r1:vid, r2:R_A, r3:R_B}
         else if stmt_id == 8
           then nd_insert_R_do_complete_s8 {r1:vid, r2:R_A, r3:R_B} else ()
   else ()));
   (sw_ack_rcv, sender_ip)<- {key:me, value:vid}))
trigger nd_insert_R_rcv_fetch : { r1:collection { key:int, value:int
  } @ { Collection }, r2:{ key:int, value:int }, r3:int, r4:int } = (\b1 ->
  bind b1 as {r1:stmts_and_map_ids, r2:vid, r3:R_A, r4:R_B} in 
  ((nd_log_write_insert_R {r1:vid, r2:R_A, r3:R_B});
   stmts_and_map_ids.iterate ((\b1 -> bind b1 as {key:stmt_id,
   value:map_id} in if stmt_id == 8
   then if map_id == 3
     then (nd_insert_R_send_push_s8_m___SQL_SUM_AGGREGATE_1_mR1, me)<- {r1:vid,
       r2:R_A, r3:R_B} else error (print "nd_rcv_fetch: invalid map id")
   else if stmt_id == 10
     then if map_id == 6
       then
         (nd_insert_R_send_push_s10_m___SQL_SUM_AGGREGATE_2_mR1, me)<- {r1:vid,
         r2:R_A, r3:R_B}
       else if map_id == 3
         then
           (nd_insert_R_send_push_s10_m___SQL_SUM_AGGREGATE_1_mR1, me)<- {r1:vid,
           r2:R_A, r3:R_B} else error (print "nd_rcv_fetch: invalid map id")
     else error (print "nd_rcv_fetch: invalid stmt id")))))
trigger nd_insert_R_send_push_s8_m___SQL_SUM_AGGREGATE_1_mR1 : { r1:{ key:int,
  value:int }, r2:int, r3:int } = (\b1 -> bind b1 as {r1:vid, r2:R_A,
  r3:R_B} in bind __SQL_SUM_AGGREGATE_1_mR1 as ind
  __SQL_SUM_AGGREGATE_1_mR1_deref in
  ((nd_log_master_write {r1:vid, r2:2, r3:8});
   (shuffle___SQL_SUM_AGGREGATE_1_mR1_to___SQL_SUM_AGGREGATE_1 {r1:(),
      r2:frontier_int_int {key:vid,
           value:__SQL_SUM_AGGREGATE_1_mR1_deref.filter ((\b1 ->
           bind b1 as {r1:r1, r2:r2, r3:r3} in r2 == R_B))}, r3:true}).iterate
   ((\b1 -> bind b1 as {key:ip, value:tuples} in 
   (nd_insert_R_rcv_push_s8_m___SQL_SUM_AGGREGATE_1_mR1, ip)<- {r1:tuples,
   r2:vid, r3:R_A, r4:R_B}))))
trigger nd_insert_R_send_push_s10_m___SQL_SUM_AGGREGATE_2_mR1 : { r1:{ key:int,
  value:int }, r2:int, r3:int } = (\b1 -> bind b1 as {r1:vid, r2:R_A,
  r3:R_B} in bind __SQL_SUM_AGGREGATE_2_mR1 as ind
  __SQL_SUM_AGGREGATE_2_mR1_deref in
  ((nd_log_master_write {r1:vid, r2:2, r3:10});
   (shuffle___SQL_SUM_AGGREGATE_2_mR1_to___SQL_SUM_AGGREGATE_2 {r1:(),
      r2:frontier_int_int {key:vid,
           value:__SQL_SUM_AGGREGATE_2_mR1_deref.filter ((\b1 ->
           bind b1 as {r1:r1, r2:r2, r3:r3} in r2 == R_B))}, r3:true}).iterate
   ((\b1 -> bind b1 as {key:ip, value:tuples} in 
   (nd_insert_R_rcv_push_s10_m___SQL_SUM_AGGREGATE_2_mR1, ip)<- {r1:tuples,
   r2:vid, r3:R_A, r4:R_B}))))
trigger nd_insert_R_send_push_s10_m___SQL_SUM_AGGREGATE_1_mR1 : { r1:{ key:int,
  value:int }, r2:int, r3:int } = (\b1 -> bind b1 as {r1:vid, r2:R_A,
  r3:R_B} in bind __SQL_SUM_AGGREGATE_1_mR1 as ind
  __SQL_SUM_AGGREGATE_1_mR1_deref in
  ((nd_log_master_write {r1:vid, r2:2, r3:10});
   (shuffle___SQL_SUM_AGGREGATE_1_mR1_to___SQL_SUM_AGGREGATE_2 {r1:(),
      r2:frontier_int_int {key:vid,
           value:__SQL_SUM_AGGREGATE_1_mR1_deref.filter ((\b1 ->
           bind b1 as {r1:r1, r2:r2, r3:r3} in r2 == R_B))}, r3:true}).iterate
   ((\b1 -> bind b1 as {key:ip, value:tuples} in 
   (nd_insert_R_rcv_push_s10_m___SQL_SUM_AGGREGATE_1_mR1, ip)<- {r1:tuples,
   r2:vid, r3:R_A, r4:R_B}))))
trigger nd_insert_R_rcv_push_s8_m___SQL_SUM_AGGREGATE_1_mR1 : { r1:collection {
  r1:{ key:int, value:int }, r2:int, r3:int } @ { Collection }, r2:{ key:int,
  value:int }, r3:int, r4:int } = (\b1 -> bind b1 as {r1:tuples, r2:vid,
  r3:R_A, r4:R_B} in 
  ((nd_log_write_insert_R {r1:vid, r2:R_A, r3:R_B});
   tuples.iterate ((\tuple -> bind map___SQL_SUM_AGGREGATE_1_mR1_s8_buf as ind
   map___SQL_SUM_AGGREGATE_1_mR1_s8_buf_d in
   bind tuple as {r1:_tup0, r2:_tup1, r3:_tup2} in
     case ((map___SQL_SUM_AGGREGATE_1_mR1_s8_buf_d.filter ((\b1 ->
       bind b1 as {r1:r1, r2:r2, r3:r3} in r1 == _tup0 and r2 == _tup1))).peek
       ()) of
       {Some vals -> map___SQL_SUM_AGGREGATE_1_mR1_s8_buf_d.update vals tuple}
       {None -> map___SQL_SUM_AGGREGATE_1_mR1_s8_buf_d.insert tuple}));
   (if nd_check_stmt_cntr_index {r1:vid, r2:8, r3:-1}
   then nd_insert_R_do_complete_s8 {r1:vid, r2:R_A, r3:R_B} else ())))
trigger nd_insert_R_rcv_push_s10_m___SQL_SUM_AGGREGATE_2_mR1 : {
  r1:collection { r1:{ key:int, value:int }, r2:int, r3:int } @ { Collection },
  r2:{ key:int, value:int }, r3:int, r4:int } = (\b1 -> bind b1 as {r1:tuples,
  r2:vid, r3:R_A, r4:R_B} in 
  ((nd_log_write_insert_R {r1:vid, r2:R_A, r3:R_B});
   tuples.iterate ((\tuple -> bind map___SQL_SUM_AGGREGATE_2_mR1_s10_buf as ind
   map___SQL_SUM_AGGREGATE_2_mR1_s10_buf_d in
   bind tuple as {r1:_tup0, r2:_tup1, r3:_tup2} in
     case ((map___SQL_SUM_AGGREGATE_2_mR1_s10_buf_d.filter ((\b1 ->
       bind b1 as {r1:r1, r2:r2, r3:r3} in r1 == _tup0 and r2 == _tup1))).peek
       ()) of
       {Some vals -> map___SQL_SUM_AGGREGATE_2_mR1_s10_buf_d.update vals tuple}
       {None -> map___SQL_SUM_AGGREGATE_2_mR1_s10_buf_d.insert tuple}));
   (if nd_check_stmt_cntr_index {r1:vid, r2:10, r3:-1}
   then nd_insert_R_do_complete_s10 {r1:vid, r2:R_A, r3:R_B} else ())))
trigger nd_insert_R_rcv_push_s10_m___SQL_SUM_AGGREGATE_1_mR1 : {
  r1:collection { r1:{ key:int, value:int }, r2:int, r3:int } @ { Collection },
  r2:{ key:int, value:int }, r3:int, r4:int } = (\b1 -> bind b1 as {r1:tuples,
  r2:vid, r3:R_A, r4:R_B} in 
  ((nd_log_write_insert_R {r1:vid, r2:R_A, r3:R_B});
   tuples.iterate ((\tuple -> bind map___SQL_SUM_AGGREGATE_1_mR1_s10_buf as ind
   map___SQL_SUM_AGGREGATE_1_mR1_s10_buf_d in
   bind tuple as {r1:_tup0, r2:_tup1, r3:_tup2} in
     case ((map___SQL_SUM_AGGREGATE_1_mR1_s10_buf_d.filter ((\b1 ->
       bind b1 as {r1:r1, r2:r2, r3:r3} in r1 == _tup0 and r2 == _tup1))).peek
       ()) of
       {Some vals -> map___SQL_SUM_AGGREGATE_1_mR1_s10_buf_d.update vals tuple}
       {None -> map___SQL_SUM_AGGREGATE_1_mR1_s10_buf_d.insert tuple}));
   (if nd_check_stmt_cntr_index {r1:vid, r2:10, r3:-1}
   then nd_insert_R_do_complete_s10 {r1:vid, r2:R_A, r3:R_B} else ())))
trigger nd_insert_R_do_complete_s9_trig : { r1:{ key:int, value:int }, r2:int,
  r3:int } = (\b1 -> bind b1 as {r1:vid, r2:R_A, r3:R_B} in 
  nd_insert_R_do_complete_s9 {r1:vid, r2:R_A, r3:R_B})
trigger nd_insert_R_do_complete_s11_trig : { r1:{ key:int, value:int }, r2:int,
  r3:int } = (\b1 -> bind b1 as {r1:vid, r2:R_A, r3:R_B} in 
  nd_insert_R_do_complete_s11 {r1:vid, r2:R_A, r3:R_B})
trigger insert_R_rcv_corrective_s8_m___SQL_SUM_AGGREGATE_1_mR1 : { r1:address,
  r2:int, r3:{ key:int, value:int }, r4:int, r5:{ key:int, value:int },
  r6:collection { key:int, value:int } @ { Seq }, r7:collection { key:int,
  value:int } @ { Collection } } = (\b1 -> bind b1 as {r1:orig_addr,
  r2:orig_stmt_id, r3:orig_vid, r4:hop, r5:vid, r6:compute_vids,
  r7:delta_tuples} in 
  ((nd_add_delta_to_int_int {r1:map___SQL_SUM_AGGREGATE_1_mR1_s8_buf, r2:false,
      r3:vid, r4:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> case
     ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in key
     == {key:compute_vid, value:8}))).peek ()) of
     {Some lkup -> if (lkup.value).key == 0
       then bind nd_log_get_bound_insert_R compute_vid as
         {r1:vid, r2:R_A, r3:R_B} in
         acc_count +
           insert_R_do_corrective_s8_m___SQL_SUM_AGGREGATE_1_mR1 {r1:orig_addr,
             r2:orig_stmt_id, r3:orig_vid, r4:hop, r5:compute_vid, r6:R_A,
             r7:R_B, r8:delta_tuples} else acc_count}{None ->
                                                       error
                                                         (print
                                                            "nd_rcv_corrective: failed to find entry in stmt_cntrs for corrective")})))
     0 in
   (nd_rcv_corr_done, orig_addr)<- {r1:orig_vid, r2:orig_stmt_id, r3:hop,
     r4:sent_msgs}))
trigger insert_R_rcv_corrective_s10_m___SQL_SUM_AGGREGATE_2_mR1 : { r1:address,
  r2:int, r3:{ key:int, value:int }, r4:int, r5:{ key:int, value:int },
  r6:collection { key:int, value:int } @ { Seq }, r7:collection { key:int,
  value:int } @ { Collection } } = (\b1 -> bind b1 as {r1:orig_addr,
  r2:orig_stmt_id, r3:orig_vid, r4:hop, r5:vid, r6:compute_vids,
  r7:delta_tuples} in 
  ((nd_add_delta_to_int_int {r1:map___SQL_SUM_AGGREGATE_2_mR1_s10_buf,
      r2:false, r3:vid, r4:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> case
     ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in key
     == {key:compute_vid, value:10}))).peek ()) of
     {Some lkup -> if (lkup.value).key == 0
       then bind nd_log_get_bound_insert_R compute_vid as
         {r1:vid, r2:R_A, r3:R_B} in
         acc_count +
           insert_R_do_corrective_s10_m___SQL_SUM_AGGREGATE_2_mR1
             {r1:orig_addr, r2:orig_stmt_id, r3:orig_vid, r4:hop,
             r5:compute_vid, r6:R_A, r7:R_B, r8:delta_tuples} else acc_count}
     {None ->
       error
         (print
            "nd_rcv_corrective: failed to find entry in stmt_cntrs for corrective")})))
     0 in
   (nd_rcv_corr_done, orig_addr)<- {r1:orig_vid, r2:orig_stmt_id, r3:hop,
     r4:sent_msgs}))
trigger insert_R_rcv_corrective_s10_m___SQL_SUM_AGGREGATE_1_mR1 : { r1:address,
  r2:int, r3:{ key:int, value:int }, r4:int, r5:{ key:int, value:int },
  r6:collection { key:int, value:int } @ { Seq }, r7:collection { key:int,
  value:int } @ { Collection } } = (\b1 -> bind b1 as {r1:orig_addr,
  r2:orig_stmt_id, r3:orig_vid, r4:hop, r5:vid, r6:compute_vids,
  r7:delta_tuples} in 
  ((nd_add_delta_to_int_int {r1:map___SQL_SUM_AGGREGATE_1_mR1_s10_buf,
      r2:false, r3:vid, r4:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> case
     ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in key
     == {key:compute_vid, value:10}))).peek ()) of
     {Some lkup -> if (lkup.value).key == 0
       then bind nd_log_get_bound_insert_R compute_vid as
         {r1:vid, r2:R_A, r3:R_B} in
         acc_count +
           insert_R_do_corrective_s10_m___SQL_SUM_AGGREGATE_1_mR1
             {r1:orig_addr, r2:orig_stmt_id, r3:orig_vid, r4:hop,
             r5:compute_vid, r6:R_A, r7:R_B, r8:delta_tuples} else acc_count}
     {None ->
       error
         (print
            "nd_rcv_corrective: failed to find entry in stmt_cntrs for corrective")})))
     0 in
   (nd_rcv_corr_done, orig_addr)<- {r1:orig_vid, r2:orig_stmt_id, r3:hop,
     r4:sent_msgs}))


source master : () = value(())feed master |> ms_send_addr_self


source switch : { r1:int, r2:int, r3:int } = file "rs.csv" k3
feed switch |> sw_demux








