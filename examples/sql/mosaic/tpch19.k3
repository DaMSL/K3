include "Core/Builtins.k3"
include "Annotation/Map.k3"
include "Annotation/Set.k3"
include "Annotation/Seq.k3"
declare my_peers : collection { i:address } @ {Collection} =
  peers.fold (\acc -> (\x -> (acc.insert {i:x.addr}; acc))) empty { i:address} @ Collection
declare switch_path : string = "agenda.csv"


declare nd_sent_done : mut bool = false


declare sw_sent_done : mut bool = false


declare ms_rcv_sw_init_ack_cnt : mut int = 0


declare ms_rcv_jobs_ack_cnt : mut int = 0


declare ms_rcv_job_cnt : mut int = 0


declare ms_rcv_node_done_cnt : mut int = 0


declare ms_rcv_switch_done_cnt : mut int = 0


declare g_init_vid : { key:int, value:int } = {key:0, value:0}


declare g_min_vid : { key:int, value:int } = {key:0, value:0}


declare g_max_vid : { key:int, value:int } = {key:get_max_int (),
  value:get_max_int ()}


declare g_start_vid : { key:int, value:int } = {key:0, value:1}


declare job_master : int = 0


declare job_switch : int = 1


declare job_node : int = 2


declare job_timer : int = 3


declare job : mut int = if role == "master" then job_master
  else if role == "switch" then job_switch
    else if role == "node" then job_node
      else if role == "timer" then job_timer
        else error (print "failed to find proper role")


declare jobs : mut collection { key:address, value:int } @ { Map }


declare master_addr : mut address


declare timer_addr : mut address


declare nodes : mut collection {i:address} @ { Collection }


declare switches : mut collection {i:address} @ { Collection }


declare num_peers : mut int = my_peers.size ()


declare num_switches : mut int = 0


declare num_nodes : mut int = 0


declare map_ids : collection { ra:int, rb:string, rc:int } @ { Collection } =
  {| ra:int, rb:string, rc:int | {ra:1, rb:"REVENUE", rc:1}, {ra:2,
  rb:"REVENUE_mPART1", rc:5}, {ra:3, rb:"REVENUE_mPART2", rc:5}, {ra:4,
  rb:"REVENUE_mLINEITEM1", rc:5}|} @ { Collection }


declare nd_stmt_cntrs : collection { key:{ key:{ key:int, value:int },
  value:int }, value:{ key:int, value:collection { key:int, value:int
  } @ { Map } } } @ { Map }


declare nd_log_master : collection { key:{ key:int, value:int }, value:int
  } @ { Set }


declare nd_rcvd_sys_done : mut bool = false


declare sw_init : mut bool = false


declare sw_seen_sentry : mut bool = false


declare sw_trig_buf_idx : collection {i:int} @ { Seq }


declare ms_start_time : mut int = 0


declare ms_end_time : mut int = 0


declare sw_buf_insert_PART : collection { ra:int, rb:string, rc:string,
  rd:string, re:string, rf:int, rg:string, rh:real, ri:string } @ { Seq }


declare sw_buf_delete_PART : collection { ra:int, rb:string, rc:string,
  rd:string, re:string, rf:int, rg:string, rh:real, ri:string } @ { Seq }


declare sw_buf_insert_LINEITEM : collection { ra:int, rb:int, rc:int, rd:int,
  re:real, rf:real, rg:real, rh:real, ri:string, rj:string, rk:int, rl:int,
  rm:int, rn:string, ro:string, rp:string } @ { Seq }


declare sw_buf_delete_LINEITEM : collection { ra:int, rb:int, rc:int, rd:int,
  re:real, rf:real, rg:real, rh:real, ri:string, rj:string, rk:int, rl:int,
  rm:int, rn:string, ro:string, rp:string } @ { Seq }


declare nd_log_insert_PART : collection { key:{ key:int, value:int }, value:{
  ra:int, rb:string, rc:string, rd:string, re:string, rf:int, rg:string,
  rh:real, ri:string } } @ { Map }


declare nd_log_delete_PART : collection { key:{ key:int, value:int }, value:{
  ra:int, rb:string, rc:string, rd:string, re:string, rf:int, rg:string,
  rh:real, ri:string } } @ { Map }


declare nd_log_insert_LINEITEM : collection { key:{ key:int, value:int },
  value:{ ra:int, rb:int, rc:int, rd:int, re:real, rf:real, rg:real, rh:real,
  ri:string, rj:string, rk:int, rl:int, rm:int, rn:string, ro:string, rp:string
  } } @ { Map }


declare nd_log_delete_LINEITEM : collection { key:{ key:int, value:int },
  value:{ ra:int, rb:int, rc:int, rd:int, re:real, rf:real, rg:real, rh:real,
  ri:string, rj:string, rk:int, rl:int, rm:int, rn:string, ro:string, rp:string
  } } @ { Map }


declare REVENUE : ind collection { key:{ key:int, value:int }, value:real
  } @ { Set } = ind {| key:{ key:int, value:int }, value:real |
  {key:g_init_vid, value:0}|} @ { Set }


declare REVENUE_mPART1 : ind collection { ra:{ key:int, value:int }, rb:real,
  rc:string, rd:int, re:string, rf:real } @ { Set } = ind empty { ra:{ key:int,
  value:int }, rb:real, rc:string, rd:int, re:string, rf:real } @ { Set }


declare REVENUE_mPART2 : ind collection { ra:{ key:int, value:int }, rb:real,
  rc:string, rd:int, re:string, rf:real } @ { Set } = ind empty { ra:{ key:int,
  value:int }, rb:real, rc:string, rd:int, re:string, rf:real } @ { Set }


declare REVENUE_mLINEITEM1 : ind collection { ra:{ key:int, value:int },
  rb:string, rc:int, rd:string, re:int, rf:int } @ { Set } = ind empty { ra:{
  key:int, value:int }, rb:string, rc:int, rd:string, re:int, rf:int
  } @ { Set }


declare map_REVENUE_mPART1_s0_buf : ind collection { ra:{ key:int, value:int },
  rb:real, rc:string, rd:int, re:string, rf:real } @ { Set } = ind empty { ra:{
  key:int, value:int }, rb:real, rc:string, rd:int, re:string, rf:real
  } @ { Set }


declare map_REVENUE_mPART2_s0_buf : ind collection { ra:{ key:int, value:int },
  rb:real, rc:string, rd:int, re:string, rf:real } @ { Set } = ind empty { ra:{
  key:int, value:int }, rb:real, rc:string, rd:int, re:string, rf:real
  } @ { Set }


declare map_REVENUE_mPART1_s2_buf : ind collection { ra:{ key:int, value:int },
  rb:real, rc:string, rd:int, re:string, rf:real } @ { Set } = ind empty { ra:{
  key:int, value:int }, rb:real, rc:string, rd:int, re:string, rf:real
  } @ { Set }


declare map_REVENUE_mPART2_s2_buf : ind collection { ra:{ key:int, value:int },
  rb:real, rc:string, rd:int, re:string, rf:real } @ { Set } = ind empty { ra:{
  key:int, value:int }, rb:real, rc:string, rd:int, re:string, rf:real
  } @ { Set }


declare map_REVENUE_mLINEITEM1_s4_buf : ind collection { ra:{ key:int,
  value:int }, rb:string, rc:int, rd:string, re:int, rf:int } @ { Set } = ind
  empty { ra:{ key:int, value:int }, rb:string, rc:int, rd:string, re:int,
  rf:int } @ { Set }


declare map_REVENUE_mLINEITEM1_s7_buf : ind collection { ra:{ key:int,
  value:int }, rb:string, rc:int, rd:string, re:int, rf:int } @ { Set } = ind
  empty { ra:{ key:int, value:int }, rb:string, rc:int, rd:string, re:int,
  rf:int } @ { Set }


declare tm_timer_list : mut collection { ra:int, rb:int, rc:address } @ { Seq }


declare sw_next_switch_addr : mut address


declare sw_need_vid_cntr : mut int = 0


declare sw_token_vid_list : collection { key:{ key:int, value:int }, value:int
  } @ { Seq }


declare sw_highest_vid : mut { key:int, value:int }


declare node_ring : mut collection { key:address, value:int } @ { Seq }


declare replicas : mut int = 8


declare pmap_input : collection { key:string, value:collection { key:int,
  value:int } @ { Seq } } @ { Seq } = {| key:string, value:collection {
  key:int, value:int } @ { Seq } | {key:"REVENUE_mPART1", value:{| key:int,
  value:int | {key:0, value:2}, {key:1, value:2}, {key:2, value:2}, {key:3,
  value:2}|} @ { Seq }}, {key:"REVENUE_mPART2", value:{| key:int, value:int |
  {key:0, value:2}, {key:1, value:2}, {key:2, value:2}, {key:3,
  value:2}|} @ { Seq }}, {key:"REVENUE_mLINEITEM1", value:{| key:int, value:int
  | {key:0, value:2}, {key:1, value:2}, {key:2, value:2}, {key:3,
  value:2}|} @ { Seq }}|} @ { Seq }


declare pmap_data : collection { key:int, value:collection { key:int, value:int
  } @ { Seq } } @ { Seq } = pmap_input.fold ((\_accmap -> (\b3 ->
  bind b3 as {key:map_name, value:map_types} in 
  (_accmap.insert {key:(case ((map_ids.filter ((\b1 -> bind b1 as {ra:ra,
   rb:rb, rc:rc} in rb == map_name))).peek ()) of
   {Some x -> x}{None -> error (print "can't find map in map_ids")}).ra,
   value:map_types};
   _accmap)))) empty { key:int, value:collection { key:int, value:int
  } @ { Seq } } @ { Seq }


declare sw_num_ack : mut int = 0


declare sw_num_sent : mut int = 0


declare sw_ack_log : collection { key:{ key:int, value:int }, value:int
  } @ { Map }


declare ms_gc_interval : mut int = 20000


declare ms_gc_vid_map : mut collection { key:address, value:{ key:int,
  value:int } } @ { Map }


declare ms_gc_vid_ctr : mut int = 0


declare ms_num_gc_expected : mut int = my_peers.size ()


declare nd_log_master_write : { key:{ key:int, value:int }, value:int } -> () =
  (\b1 -> bind b1 as {key:vid, value:stmt_id} in nd_log_master.insert {key:vid,
  value:stmt_id})


declare nd_log_write_insert_PART : { ra:{ key:int, value:int }, rb:int,
  rc:string, rd:string, re:string, rf:string, rg:int, rh:string, ri:real,
  rj:string } -> () = (\b1 -> bind b1 as {ra:vid, rb:PART_PARTKEY,
  rc:PART_NAME, rd:PART_MFGR, re:PART_BRAND, rf:PART_TYPE, rg:PART_SIZE,
  rh:PART_CONTAINER, ri:PART_RETAILPRICE, rj:PART_COMMENT} in 
  nd_log_insert_PART.insert {key:vid, value:{ra:PART_PARTKEY, rb:PART_NAME,
  rc:PART_MFGR, rd:PART_BRAND, re:PART_TYPE, rf:PART_SIZE, rg:PART_CONTAINER,
  rh:PART_RETAILPRICE, ri:PART_COMMENT}})


declare nd_log_write_delete_PART : { ra:{ key:int, value:int }, rb:int,
  rc:string, rd:string, re:string, rf:string, rg:int, rh:string, ri:real,
  rj:string } -> () = (\b1 -> bind b1 as {ra:vid, rb:PART_PARTKEY,
  rc:PART_NAME, rd:PART_MFGR, re:PART_BRAND, rf:PART_TYPE, rg:PART_SIZE,
  rh:PART_CONTAINER, ri:PART_RETAILPRICE, rj:PART_COMMENT} in 
  nd_log_delete_PART.insert {key:vid, value:{ra:PART_PARTKEY, rb:PART_NAME,
  rc:PART_MFGR, rd:PART_BRAND, re:PART_TYPE, rf:PART_SIZE, rg:PART_CONTAINER,
  rh:PART_RETAILPRICE, ri:PART_COMMENT}})


declare nd_log_write_insert_LINEITEM : { ra:{ key:int, value:int }, rb:int,
  rc:int, rd:int, re:int, rf:real, rg:real, rh:real, ri:real, rj:string,
  rk:string, rl:int, rm:int, rn:int, ro:string, rp:string, rq:string } -> () =
  (\b1 -> bind b1 as {ra:vid, rb:LINEITEM_ORDERKEY, rc:LINEITEM_PARTKEY,
  rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER, rf:LINEITEM_QUANTITY,
  rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX,
  rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS, rl:LINEITEM_SHIPDATE,
  rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE, ro:LINEITEM_SHIPINSTRUCT,
  rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT} in nd_log_insert_LINEITEM.insert
  {key:vid, value:{ra:LINEITEM_ORDERKEY, rb:LINEITEM_PARTKEY,
  rc:LINEITEM_SUPPKEY, rd:LINEITEM_LINENUMBER, re:LINEITEM_QUANTITY,
  rf:LINEITEM_EXTENDEDPRICE, rg:LINEITEM_DISCOUNT, rh:LINEITEM_TAX,
  ri:LINEITEM_RETURNFLAG, rj:LINEITEM_LINESTATUS, rk:LINEITEM_SHIPDATE,
  rl:LINEITEM_COMMITDATE, rm:LINEITEM_RECEIPTDATE, rn:LINEITEM_SHIPINSTRUCT,
  ro:LINEITEM_SHIPMODE, rp:LINEITEM_COMMENT}})


declare nd_log_write_delete_LINEITEM : { ra:{ key:int, value:int }, rb:int,
  rc:int, rd:int, re:int, rf:real, rg:real, rh:real, ri:real, rj:string,
  rk:string, rl:int, rm:int, rn:int, ro:string, rp:string, rq:string } -> () =
  (\b1 -> bind b1 as {ra:vid, rb:LINEITEM_ORDERKEY, rc:LINEITEM_PARTKEY,
  rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER, rf:LINEITEM_QUANTITY,
  rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX,
  rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS, rl:LINEITEM_SHIPDATE,
  rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE, ro:LINEITEM_SHIPINSTRUCT,
  rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT} in nd_log_delete_LINEITEM.insert
  {key:vid, value:{ra:LINEITEM_ORDERKEY, rb:LINEITEM_PARTKEY,
  rc:LINEITEM_SUPPKEY, rd:LINEITEM_LINENUMBER, re:LINEITEM_QUANTITY,
  rf:LINEITEM_EXTENDEDPRICE, rg:LINEITEM_DISCOUNT, rh:LINEITEM_TAX,
  ri:LINEITEM_RETURNFLAG, rj:LINEITEM_LINESTATUS, rk:LINEITEM_SHIPDATE,
  rl:LINEITEM_COMMITDATE, rm:LINEITEM_RECEIPTDATE, rn:LINEITEM_SHIPINSTRUCT,
  ro:LINEITEM_SHIPMODE, rp:LINEITEM_COMMENT}})


declare nd_log_get_bound_insert_PART : { key:int, value:int } -> { ra:int,
  rb:string, rc:string, rd:string, re:string, rf:int, rg:string, rh:real,
  ri:string } = (\vid -> (case ((nd_log_insert_PART.filter ((\b1 ->
  bind b1 as {key:key, value:value} in key == vid))).peek ()) of
  {Some x -> x}{None -> error (print "failed to find log")}).value)


declare nd_log_get_bound_delete_PART : { key:int, value:int } -> { ra:int,
  rb:string, rc:string, rd:string, re:string, rf:int, rg:string, rh:real,
  ri:string } = (\vid -> (case ((nd_log_delete_PART.filter ((\b1 ->
  bind b1 as {key:key, value:value} in key == vid))).peek ()) of
  {Some x -> x}{None -> error (print "failed to find log")}).value)


declare nd_log_get_bound_insert_LINEITEM : { key:int, value:int } -> { ra:int,
  rb:int, rc:int, rd:int, re:real, rf:real, rg:real, rh:real, ri:string,
  rj:string, rk:int, rl:int, rm:int, rn:string, ro:string, rp:string } =
  (\vid -> (case ((nd_log_insert_LINEITEM.filter ((\b1 -> bind b1 as {key:key,
  value:value} in key == vid))).peek ()) of
  {Some x -> x}{None -> error (print "failed to find log")}).value)


declare nd_log_get_bound_delete_LINEITEM : { key:int, value:int } -> { ra:int,
  rb:int, rc:int, rd:int, re:real, rf:real, rg:real, rh:real, ri:string,
  rj:string, rk:int, rl:int, rm:int, rn:string, ro:string, rp:string } =
  (\vid -> (case ((nd_log_delete_LINEITEM.filter ((\b1 -> bind b1 as {key:key,
  value:value} in key == vid))).peek ()) of
  {Some x -> x}{None -> error (print "failed to find log")}).value)


declare nd_log_read_geq : { key:int, value:int } -> collection { key:{ key:int,
  value:int }, value:int } @ { Set } = (\vid2 -> nd_log_master.filter ((\b1 ->
  bind b1 as {key:vid, value:stmt_id} in vid >= vid2)))


declare nd_check_stmt_cntr_index : { ra:{ key:int, value:int }, rb:int, rc:int
  } -> bool = (\b1 -> bind b1 as {ra:vid, rb:stmt_id, rc:add_to_count} in case
  ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in key ==
  {key:vid, value:stmt_id}))).peek ()) of
  {Some lookup_value -> let new_count = add_to_count + (lookup_value.value).key
    in
    (nd_stmt_cntrs.update lookup_value {key:{key:vid, value:stmt_id},
     value:{key:new_count, value:(lookup_value.value).value}};
     0 == new_count)}{None ->
                       (nd_stmt_cntrs.insert {key:{key:vid, value:stmt_id},
                        value:{key:add_to_count, value:empty { key:int,
                        value:int } @ { Map }}};
                        false)})


declare nd_complete_stmt_cntr_check : { key:{ key:int, value:int }, value:int
  } -> () = (\b1 -> bind b1 as {key:vid, value:stmt_id} in 
  ((case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
   key == {key:vid, value:stmt_id}))).peek ()) of
   {Some lookup_data -> nd_stmt_cntrs.erase lookup_data}{None -> ()});
   (if nd_rcvd_sys_done
   then if not nd_sent_done and nd_stmt_cntrs.size () == 0
     then ((ms_rcv_node_done, master_addr)<- true;nd_sent_done = true) 
     else () else ())))


declare nd_update_stmt_cntr_corr_map : { ra:{ key:int, value:int }, rb:int,
  rc:int, rd:int, re:bool, rf:bool } -> () = (\b1 -> bind b1 as {ra:vid,
  rb:stmt_id, rc:hop, rd:count, re:root, rf:create} in 
  ((if create
   then nd_stmt_cntrs.insert {key:{key:vid, value:stmt_id}, value:{key:0,
     value:empty { key:int, value:int } @ { Map }}} else ());
   (case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
   key == {key:vid, value:stmt_id}))).peek ()) of
   {Some lkup -> nd_stmt_cntrs.update lkup {key:{key:vid, value:stmt_id},
     value:let sc_corr_map = (lkup.value).value in
     ((case ((sc_corr_map.filter ((\b1 -> bind b1 as {key:key, value:value} in 
      key == hop))).peek ()) of
      {Some lkup2 -> sc_corr_map.update lkup2 {key:hop, value:lkup2.value +
        count}}{None -> sc_corr_map.insert {key:hop, value:count}});
      (if root then ()
      else case ((sc_corr_map.filter ((\b1 -> bind b1 as {key:key,
        value:value} in key == hop))).peek ()) of
        {Some lkup2 -> let new_corr_cnt = lkup2.value - 1 in
          if new_corr_cnt == 0 then sc_corr_map.erase lkup2
            else sc_corr_map.update lkup2 {key:hop, value:new_corr_cnt}}
        {None -> sc_corr_map.insert {key:hop, value:-1}});
      {key:(lkup.value).key, value:sc_corr_map})}}{None ->
                                                    error
                                                      (print
                                                         "nd_update_stmt_cntr_corr_map: missing stmt_cntrs value")})))


declare nd_filter_corrective_list : { key:{ key:int, value:int },
  value:collection { key:int, value:int } @ { Collection } } -> collection {
  key:int, value:collection { key:int, value:int } @ { Seq }
  } @ { Collection } = (\b1 -> bind b1 as {key:request_vid,
  value:trig_stmt_list} in ((((nd_log_read_geq request_vid).fold ((\acc_conv ->
  (\x -> (acc_conv.insert x;acc_conv)))) empty { key:{ key:int, value:int },
  value:int } @ { Seq }).sort ((\b2 -> (\b5 -> bind b2 as {key:vid1,
  value:stmt1} in bind b5 as {key:vid2, value:stmt2} in if vid1 < vid2 
  then -1 else 1)))).groupBy ((\b1 -> bind b1 as {value:stmt_id} in stmt_id))
  ((\vid_list -> (\b3 -> bind b3 as {key:vid} in 
  (vid_list.insert vid;vid_list)))) empty { key:int, value:int
  } @ { Seq }).fold ((\acc_conv -> (\x -> (acc_conv.insert x;acc_conv))))
  empty { key:int, value:collection { key:int, value:int } @ { Seq }
  } @ { Collection })


declare add_node : address -> () = (\addr -> let rng = range replicas in
  let new_elems =
    rng.fold ((\_accmap -> (\b3 -> bind b3 as {i:i} in 
      (_accmap.insert {key:addr, value:abs (hash ((i * 2683) + hash addr))};
       _accmap)))) empty { key:address, value:int } @ { Seq } in
    (node_ring = node_ring.combine new_elems;
     node_ring = node_ring.sort ((\b2 -> (\b5 -> bind b2 as {key:addr,
     value:hash1} in bind b5 as {key:addr, value:hash2} in if hash1 < hash2
     then -1 else 1)))))


declare get_ring_node : { key:int, value:int } -> address = (\b1 ->
  bind b1 as {key:data, value:max_val} in let scaled =
  truncate (real_of_int (get_max_int ()) * (real_of_int data /
    real_of_int max_val)) in
  let results =
    node_ring.filter ((\b1 -> bind b1 as {key:addr, value:hash} in hash >=
      scaled)) in
    bind
      case (results.peek ()) of
        {Some x -> x}{None -> case (node_ring.peek ()) of
                       {Some x -> x}{None -> error (print "empty node ring")}}
      as {key:addr, value:_} in addr)


declare frontier_float : { key:{ key:int, value:int }, value:collection { key:{
  key:int, value:int }, value:real } @ { Set } } -> collection { key:{ key:int,
  value:int }, value:real } @ { Collection } = (\b1 -> bind b1 as {key:vid,
  value:input_map} in (input_map.fold ((\b2 -> (\b5 -> bind b2 as {key:acc,
  value:max_vid} in bind b5 as {key:map_vid, value:map_val} in if map_vid < vid
  then if map_vid == max_vid
    then (acc.insert {key:map_vid, value:map_val};{key:acc, value:max_vid})
    else if map_vid > max_vid
      then {key:{| key:{ key:int, value:int }, value:real | {key:map_vid,
        value:map_val}|} @ { Collection }, value:map_vid}
      else {key:acc, value:max_vid} else {key:acc, value:max_vid})))
  {key:empty { key:{ key:int, value:int }, value:real } @ { Collection },
  value:g_min_vid}).key)


declare frontier_float_string_int_string_float : { key:{ key:int, value:int },
  value:collection { ra:{ key:int, value:int }, rb:real, rc:string, rd:int,
  re:string, rf:real } @ { Set } } -> collection { ra:{ key:int, value:int },
  rb:real, rc:string, rd:int, re:string, rf:real } @ { Collection } = (\b1 ->
  bind b1 as {key:vid, value:input_map} in (input_map.groupBy ((\b1 ->
  bind b1 as {ra:map_vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
  rf:map_val} in {ra:map_0, rb:map_1, rc:map_2, rd:map_3})) ((\b2 -> (\b5 ->
  bind b2 as {key:acc, value:max_vid} in bind b5 as {ra:map_vid, rb:map_0,
  rc:map_1, rd:map_2, re:map_3, rf:map_val} in if map_vid < vid
  then if map_vid == max_vid
    then
      (acc.insert {ra:map_vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
       rf:map_val};
       {key:acc, value:max_vid})
    else if map_vid > max_vid
      then {key:{| ra:{ key:int, value:int }, rb:real, rc:string, rd:int,
        re:string, rf:real | {ra:map_vid, rb:map_0, rc:map_1, rd:map_2,
        re:map_3, rf:map_val}|} @ { Collection }, value:map_vid}
      else {key:acc, value:max_vid} else {key:acc, value:max_vid})))
  {key:empty { ra:{ key:int, value:int }, rb:real, rc:string, rd:int,
  re:string, rf:real } @ { Collection }, value:g_min_vid}).fold ((\_accext ->
  (\b3 -> bind b3 as {value:b4} in bind b4 as {key:project} in _accext.combine
  project))) empty { ra:{ key:int, value:int }, rb:real, rc:string, rd:int,
  re:string, rf:real } @ { Collection })


declare frontier_string_int_string_int_int : { key:{ key:int, value:int },
  value:collection { ra:{ key:int, value:int }, rb:string, rc:int, rd:string,
  re:int, rf:int } @ { Set } } -> collection { ra:{ key:int, value:int },
  rb:string, rc:int, rd:string, re:int, rf:int } @ { Collection } = (\b1 ->
  bind b1 as {key:vid, value:input_map} in (input_map.groupBy ((\b1 ->
  bind b1 as {ra:map_vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
  rf:map_val} in {ra:map_0, rb:map_1, rc:map_2, rd:map_3})) ((\b2 -> (\b5 ->
  bind b2 as {key:acc, value:max_vid} in bind b5 as {ra:map_vid, rb:map_0,
  rc:map_1, rd:map_2, re:map_3, rf:map_val} in if map_vid < vid
  then if map_vid == max_vid
    then
      (acc.insert {ra:map_vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
       rf:map_val};
       {key:acc, value:max_vid})
    else if map_vid > max_vid
      then {key:{| ra:{ key:int, value:int }, rb:string, rc:int, rd:string,
        re:int, rf:int | {ra:map_vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
        rf:map_val}|} @ { Collection }, value:map_vid}
      else {key:acc, value:max_vid} else {key:acc, value:max_vid})))
  {key:empty { ra:{ key:int, value:int }, rb:string, rc:int, rd:string, re:int,
  rf:int } @ { Collection }, value:g_min_vid}).fold ((\_accext -> (\b3 ->
  bind b3 as {value:b4} in bind b4 as {key:project} in _accext.combine
  project))) empty { ra:{ key:int, value:int }, rb:string, rc:int, rd:string,
  re:int, rf:int } @ { Collection })


declare nd_add_delta_to_float : { ra:ind collection { key:{ key:int, value:int
  }, value:real } @ { Set }, rb:bool, rc:{ key:int, value:int },
  rd:collection {i:real} @ { Collection } } -> () = (\b1 ->
  bind b1 as {ra:target_map, rb:corrective, rc:min_vid, rd:delta_tuples} in 
  (delta_tuples.iterate ((\b1 -> bind b1 as {i:map_val} in bind target_map as
   ind target_map_d in
   let lookup_value =
     if corrective
       then target_map_d.filter ((\b1 -> bind b1 as {key:key, value:value} in 
         key == min_vid))
       else empty { key:{ key:int, value:int }, value:real } @ { Set } in
     case (lookup_value.peek ()) of
       {Some val -> let update_value = map_val + val.value in
         target_map_d.update val {key:min_vid, value:update_value}}{None -> let
                                                                    lookup_value
                                                                    =
                                                                    frontier_float
                                                                    {key:min_vid,
                                                                    value:target_map_d}
                                                                    in
                                                                    let
                                                                    update_value
                                                                    =
                                                                    map_val +
                                                                    case
                                                                    (lookup_value.peek
                                                                    ()) of
                                                                    {Some val ->
                                                                    val.value}
                                                                    {None -> 0}
                                                                    in
                                                                    target_map_d.insert
                                                                    {key:min_vid,
                                                                    value:update_value}}));
   delta_tuples.iterate ((\b1 -> bind b1 as {i:map_val_delta} in let filtered =
   bind target_map as ind target_map_d in
     target_map_d.filter ((\b1 -> bind b1 as {key:vid, value:map_val} in vid >
       min_vid)) in
   filtered.iterate ((\b1 -> bind b1 as {key:vid, value:map_val} in bind
     target_map as ind target_map_d in
     target_map_d.update {key:vid, value:map_val} {key:vid, value:map_val +
       map_val_delta}))))))


declare nd_add_delta_to_float_string_int_string_float : { ra:ind collection {
  ra:{ key:int, value:int }, rb:real, rc:string, rd:int, re:string, rf:real
  } @ { Set }, rb:bool, rc:{ key:int, value:int }, rd:collection { ra:real,
  rb:string, rc:int, rd:string, re:real } @ { Collection } } -> () = (\b1 ->
  bind b1 as {ra:target_map, rb:corrective, rc:min_vid, rd:delta_tuples} in 
  (delta_tuples.iterate ((\b1 -> bind b1 as {ra:map_0, rb:map_1, rc:map_2,
   rd:map_3, re:map_val} in bind target_map as ind target_map_d in
   let lookup_value =
     if corrective
       then target_map_d.filter ((\b1 -> bind b1 as {ra:ra, rb:rb, rc:rc,
         rd:rd, re:re, rf:rf} in (((ra == min_vid and re == map_3) and rd ==
         map_2) and rc == map_1) and rb == map_0))
       else empty { ra:{ key:int, value:int }, rb:real, rc:string, rd:int,
         re:string, rf:real } @ { Set } in
     case (lookup_value.peek ()) of
       {Some val -> let update_value = map_val + val.rf in
         target_map_d.update val {ra:min_vid, rb:map_0, rc:map_1, rd:map_2,
           re:map_3, rf:update_value}}{None -> let lookup_value =
                                        frontier_float_string_int_string_float
                                          {key:min_vid,
                                          value:target_map_d.filter ((\b1 ->
                                          bind b1 as {ra:ra, rb:rb, rc:rc,
                                          rd:rd, re:re, rf:rf} in ((rb == map_0
                                          and re == map_3) and rd == map_2) and
                                          rc == map_1))} in
                                        let update_value =
                                          map_val + case (lookup_value.peek ())
                                            of {Some val -> val.rf}{None -> 0}
                                          in
                                          target_map_d.insert {ra:min_vid,
                                            rb:map_0, rc:map_1, rd:map_2,
                                            re:map_3, rf:update_value}}));
   delta_tuples.iterate ((\b1 -> bind b1 as {ra:map_0_delta, rb:map_1_delta,
   rc:map_2_delta, rd:map_3_delta, re:map_val_delta} in let filtered =
   bind target_map as ind target_map_d in
     (target_map_d.filter ((\b1 -> bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd,
       re:re, rf:rf} in ((rb == map_0_delta and re == map_3_delta) and rd ==
       map_2_delta) and rc == map_1_delta))).filter ((\b1 ->
       bind b1 as {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
       rf:map_val} in vid > min_vid)) in
   filtered.iterate ((\b1 -> bind b1 as {ra:vid, rb:map_0, rc:map_1, rd:map_2,
     re:map_3, rf:map_val} in bind target_map as ind target_map_d in
     target_map_d.update {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
       rf:map_val} {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3, rf:map_val
       + map_val_delta}))))))


declare nd_add_delta_to_string_int_string_int_int : { ra:ind collection { ra:{
  key:int, value:int }, rb:string, rc:int, rd:string, re:int, rf:int
  } @ { Set }, rb:bool, rc:{ key:int, value:int }, rd:collection { ra:string,
  rb:int, rc:string, rd:int, re:int } @ { Collection } } -> () = (\b1 ->
  bind b1 as {ra:target_map, rb:corrective, rc:min_vid, rd:delta_tuples} in 
  (delta_tuples.iterate ((\b1 -> bind b1 as {ra:map_0, rb:map_1, rc:map_2,
   rd:map_3, re:map_val} in bind target_map as ind target_map_d in
   let lookup_value =
     if corrective
       then target_map_d.filter ((\b1 -> bind b1 as {ra:ra, rb:rb, rc:rc,
         rd:rd, re:re, rf:rf} in (((ra == min_vid and re == map_3) and rd ==
         map_2) and rc == map_1) and rb == map_0))
       else empty { ra:{ key:int, value:int }, rb:string, rc:int, rd:string,
         re:int, rf:int } @ { Set } in
     case (lookup_value.peek ()) of
       {Some val -> let update_value = map_val + val.rf in
         target_map_d.update val {ra:min_vid, rb:map_0, rc:map_1, rd:map_2,
           re:map_3, rf:update_value}}{None -> let lookup_value =
                                        frontier_string_int_string_int_int
                                          {key:min_vid,
                                          value:target_map_d.filter ((\b1 ->
                                          bind b1 as {ra:ra, rb:rb, rc:rc,
                                          rd:rd, re:re, rf:rf} in ((rb == map_0
                                          and re == map_3) and rd == map_2) and
                                          rc == map_1))} in
                                        let update_value =
                                          map_val + case (lookup_value.peek ())
                                            of {Some val -> val.rf}{None -> 0}
                                          in
                                          target_map_d.insert {ra:min_vid,
                                            rb:map_0, rc:map_1, rd:map_2,
                                            re:map_3, rf:update_value}}));
   delta_tuples.iterate ((\b1 -> bind b1 as {ra:map_0_delta, rb:map_1_delta,
   rc:map_2_delta, rd:map_3_delta, re:map_val_delta} in let filtered =
   bind target_map as ind target_map_d in
     (target_map_d.filter ((\b1 -> bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd,
       re:re, rf:rf} in ((rb == map_0_delta and re == map_3_delta) and rd ==
       map_2_delta) and rc == map_1_delta))).filter ((\b1 ->
       bind b1 as {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
       rf:map_val} in vid > min_vid)) in
   filtered.iterate ((\b1 -> bind b1 as {ra:vid, rb:map_0, rc:map_1, rd:map_2,
     re:map_3, rf:map_val} in bind target_map as ind target_map_d in
     target_map_d.update {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
       rf:map_val} {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3, rf:map_val
       + map_val_delta}))))))


declare sw_gen_vid : () -> option { key:int, value:int } = (\_ -> case
  (sw_token_vid_list.peek ()) of
  {Some vid_num -> let num_new = vid_num.value - 1 in
    let vid_new = {key:(vid_num.key).key, value:(vid_num.key).value + 1} in
      ((if num_new <= 0 then sw_token_vid_list.erase vid_num
       else sw_token_vid_list.update vid_num {key:vid_new, value:num_new});
       Some (vid_num.key))}{None -> None immut})


declare calc_dim_bounds : collection { key:int, value:int } @ { Seq } -> {
  key:collection { key:int, value:int } @ { Seq }, value:int } = (\pmap ->
  pmap.fold ((\b2 -> (\b5 -> bind b2 as {key:xs, value:acc_size} in 
  bind b5 as {key:pos, value:bin_size} in {key:xs.combine ({| key:int,
  value:int | {key:pos, value:acc_size}|} @ { Seq }), value:bin_size *
  acc_size}))) {key:empty { key:int, value:int } @ { Seq }, value:1})


declare route_to_float_string_int_string : { ra:int, rb:option real,
  rc:option string, rd:option int, re:option string
  } -> collection {i:address} @ { Collection } = (\b1 -> bind b1 as {ra:map_id,
  rb:key_0, rc:key_1, rd:key_2, re:key_3} in let pmap =
  (case ((pmap_data.filter ((\b1 -> bind b1 as {key:key, value:value} in key ==
    map_id))).peek ()) of
    {Some x -> x}{None -> error (print "can't find map_id in pmap_data")}).value
  in
  case (pmap.peek ()) of
    {Some _ -> bind calc_dim_bounds pmap as {key:dim_bounds, value:max_val} in
      let bound_bucket =
        case key_3 of
          {Some key_3_unwrap -> let pmap_slice =
            pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key ==
              3)) in
            case (pmap_slice.peek ()) of
              {Some peek_slice -> let value =
                abs (hash key_3_unwrap) % peek_slice.value in
                value * (case ((dim_bounds.filter ((\b1 -> bind b1 as {key:key,
                  value:value} in key == 3))).peek ()) of
                  {Some x -> x}{None ->
                                 error (print "can't find 3 in dim_bounds")}).value}
              {None -> 0}}{None -> 0} + (case key_2 of
          {Some key_2_unwrap -> let pmap_slice =
            pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key ==
              2)) in
            case (pmap_slice.peek ()) of
              {Some peek_slice -> let value =
                abs (hash key_2_unwrap) % peek_slice.value in
                value * (case ((dim_bounds.filter ((\b1 -> bind b1 as {key:key,
                  value:value} in key == 2))).peek ()) of
                  {Some x -> x}{None ->
                                 error (print "can't find 2 in dim_bounds")}).value}
              {None -> 0}}{None -> 0} + (case key_1 of
          {Some key_1_unwrap -> let pmap_slice =
            pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key ==
              1)) in
            case (pmap_slice.peek ()) of
              {Some peek_slice -> let value =
                abs (hash key_1_unwrap) % peek_slice.value in
                value * (case ((dim_bounds.filter ((\b1 -> bind b1 as {key:key,
                  value:value} in key == 1))).peek ()) of
                  {Some x -> x}{None ->
                                 error (print "can't find 1 in dim_bounds")}).value}
              {None -> 0}}{None -> 0} + (case key_0 of
          {Some key_0_unwrap -> let pmap_slice =
            pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key ==
              0)) in
            case (pmap_slice.peek ()) of
              {Some peek_slice -> let value =
                abs (hash key_0_unwrap) % peek_slice.value in
                value * (case ((dim_bounds.filter ((\b1 -> bind b1 as {key:key,
                  value:value} in key == 0))).peek ()) of
                  {Some x -> x}{None ->
                                 error (print "can't find 0 in dim_bounds")}).value}
              {None -> 0}}{None -> 0} + 0))) in
        let free_dims =
          (if key_3 != None immut then empty { key:int, value:int } @ { Seq }
            else pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key
              == 3))).combine ((if key_2 != None immut
            then empty { key:int, value:int } @ { Seq }
            else pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key
              == 2))).combine ((if key_1 != None immut
            then empty { key:int, value:int } @ { Seq }
            else pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key
              == 1))).combine ((if key_0 != None immut
            then empty { key:int, value:int } @ { Seq }
            else pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key
              == 0))).combine empty { key:int, value:int } @ { Seq }))) in
          let free_domains =
            free_dims.fold ((\_accmap -> (\b3 -> bind b3 as {key:i,
              value:b_i} in 
              (_accmap.insert {key:i, value:range b_i};_accmap)))) empty {
              key:int, value:collection {i:int} @ { Seq } } @ { Seq } in
            let free_cart_prod =
              free_domains.fold ((\prev_cart_prod -> (\b3 -> bind b3 as {key:i,
                value:domain} in domain.fold ((\_accext -> (\b3 ->
                bind b3 as {i:domain_element} in _accext.combine
                (if 0 == prev_cart_prod.size ()
                then {|i:collection { key:int, value:int } @ { Seq }| {|
                  key:int, value:int | {key:i,
                  value:domain_element}|} @ { Seq }|} @ { Seq }
                else prev_cart_prod.fold ((\_accmap -> (\b3 ->
                  bind b3 as {i:rest_tup} in 
                  (_accmap.insert ({i:rest_tup.combine ({| key:int, value:int |
                   {key:i, value:domain_element}|} @ { Seq })});
                   _accmap)))) empty {i:collection { key:int, value:int
                  } @ { Seq }} @ { Seq })))) empty {i:collection { key:int,
                value:int } @ { Seq }} @ { Seq }))) empty {i:collection {
                key:int, value:int } @ { Seq }} @ { Seq } in
              let sorted_ip_list =
                (free_cart_prod.fold ((\acc_ips -> (\b3 ->
                  bind b3 as {i:free_bucket} in acc_ips.combine ({|i:address|
                  get_ring_node {key:free_bucket.fold ((\acc -> (\b3 ->
                    bind b3 as {key:i, value:val} in acc + (val * (case
                    ((dim_bounds.filter ((\b1 -> bind b1 as {key:key,
                    value:value} in key == i))).peek ()) of
                    {Some x -> x}{None ->
                                   error (print "can't find i in dim_bounds")}).value))))
                    bound_bucket, value:max_val}|} @ { Collection }))))
                  empty {i:address} @ { Collection }).groupBy ((\b1 ->
                  bind b1 as {i:ip} in ip)) ((\_ -> (\_ -> ()))) () in
                if 0 == sorted_ip_list.size ()
                  then {|i:address|
                    get_ring_node {key:bound_bucket, value:max_val}|} @ { Collection }
                  else sorted_ip_list.fold ((\_accmap -> (\x ->
                    (_accmap.insert ({i:x.key});_accmap))))
                    empty {i:address} @ { Collection }}{None -> nodes})


declare route_to_string_int_string_int : { ra:int, rb:option string,
  rc:option int, rd:option string, re:option int
  } -> collection {i:address} @ { Collection } = (\b1 -> bind b1 as {ra:map_id,
  rb:key_0, rc:key_1, rd:key_2, re:key_3} in let pmap =
  (case ((pmap_data.filter ((\b1 -> bind b1 as {key:key, value:value} in key ==
    map_id))).peek ()) of
    {Some x -> x}{None -> error (print "can't find map_id in pmap_data")}).value
  in
  case (pmap.peek ()) of
    {Some _ -> bind calc_dim_bounds pmap as {key:dim_bounds, value:max_val} in
      let bound_bucket =
        case key_3 of
          {Some key_3_unwrap -> let pmap_slice =
            pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key ==
              3)) in
            case (pmap_slice.peek ()) of
              {Some peek_slice -> let value =
                abs (hash key_3_unwrap) % peek_slice.value in
                value * (case ((dim_bounds.filter ((\b1 -> bind b1 as {key:key,
                  value:value} in key == 3))).peek ()) of
                  {Some x -> x}{None ->
                                 error (print "can't find 3 in dim_bounds")}).value}
              {None -> 0}}{None -> 0} + (case key_2 of
          {Some key_2_unwrap -> let pmap_slice =
            pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key ==
              2)) in
            case (pmap_slice.peek ()) of
              {Some peek_slice -> let value =
                abs (hash key_2_unwrap) % peek_slice.value in
                value * (case ((dim_bounds.filter ((\b1 -> bind b1 as {key:key,
                  value:value} in key == 2))).peek ()) of
                  {Some x -> x}{None ->
                                 error (print "can't find 2 in dim_bounds")}).value}
              {None -> 0}}{None -> 0} + (case key_1 of
          {Some key_1_unwrap -> let pmap_slice =
            pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key ==
              1)) in
            case (pmap_slice.peek ()) of
              {Some peek_slice -> let value =
                abs (hash key_1_unwrap) % peek_slice.value in
                value * (case ((dim_bounds.filter ((\b1 -> bind b1 as {key:key,
                  value:value} in key == 1))).peek ()) of
                  {Some x -> x}{None ->
                                 error (print "can't find 1 in dim_bounds")}).value}
              {None -> 0}}{None -> 0} + (case key_0 of
          {Some key_0_unwrap -> let pmap_slice =
            pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key ==
              0)) in
            case (pmap_slice.peek ()) of
              {Some peek_slice -> let value =
                abs (hash key_0_unwrap) % peek_slice.value in
                value * (case ((dim_bounds.filter ((\b1 -> bind b1 as {key:key,
                  value:value} in key == 0))).peek ()) of
                  {Some x -> x}{None ->
                                 error (print "can't find 0 in dim_bounds")}).value}
              {None -> 0}}{None -> 0} + 0))) in
        let free_dims =
          (if key_3 != None immut then empty { key:int, value:int } @ { Seq }
            else pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key
              == 3))).combine ((if key_2 != None immut
            then empty { key:int, value:int } @ { Seq }
            else pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key
              == 2))).combine ((if key_1 != None immut
            then empty { key:int, value:int } @ { Seq }
            else pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key
              == 1))).combine ((if key_0 != None immut
            then empty { key:int, value:int } @ { Seq }
            else pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key
              == 0))).combine empty { key:int, value:int } @ { Seq }))) in
          let free_domains =
            free_dims.fold ((\_accmap -> (\b3 -> bind b3 as {key:i,
              value:b_i} in 
              (_accmap.insert {key:i, value:range b_i};_accmap)))) empty {
              key:int, value:collection {i:int} @ { Seq } } @ { Seq } in
            let free_cart_prod =
              free_domains.fold ((\prev_cart_prod -> (\b3 -> bind b3 as {key:i,
                value:domain} in domain.fold ((\_accext -> (\b3 ->
                bind b3 as {i:domain_element} in _accext.combine
                (if 0 == prev_cart_prod.size ()
                then {|i:collection { key:int, value:int } @ { Seq }| {|
                  key:int, value:int | {key:i,
                  value:domain_element}|} @ { Seq }|} @ { Seq }
                else prev_cart_prod.fold ((\_accmap -> (\b3 ->
                  bind b3 as {i:rest_tup} in 
                  (_accmap.insert ({i:rest_tup.combine ({| key:int, value:int |
                   {key:i, value:domain_element}|} @ { Seq })});
                   _accmap)))) empty {i:collection { key:int, value:int
                  } @ { Seq }} @ { Seq })))) empty {i:collection { key:int,
                value:int } @ { Seq }} @ { Seq }))) empty {i:collection {
                key:int, value:int } @ { Seq }} @ { Seq } in
              let sorted_ip_list =
                (free_cart_prod.fold ((\acc_ips -> (\b3 ->
                  bind b3 as {i:free_bucket} in acc_ips.combine ({|i:address|
                  get_ring_node {key:free_bucket.fold ((\acc -> (\b3 ->
                    bind b3 as {key:i, value:val} in acc + (val * (case
                    ((dim_bounds.filter ((\b1 -> bind b1 as {key:key,
                    value:value} in key == i))).peek ()) of
                    {Some x -> x}{None ->
                                   error (print "can't find i in dim_bounds")}).value))))
                    bound_bucket, value:max_val}|} @ { Collection }))))
                  empty {i:address} @ { Collection }).groupBy ((\b1 ->
                  bind b1 as {i:ip} in ip)) ((\_ -> (\_ -> ()))) () in
                if 0 == sorted_ip_list.size ()
                  then {|i:address|
                    get_ring_node {key:bound_bucket, value:max_val}|} @ { Collection }
                  else sorted_ip_list.fold ((\_accmap -> (\x ->
                    (_accmap.insert ({i:x.key});_accmap))))
                    empty {i:address} @ { Collection }}{None -> nodes})


declare route_to_ : { key:int, value:()
  } -> collection {i:address} @ { Collection } = (\b1 -> {|i:address|
  get_ring_node {key:1, value:1}|} @ { Collection })


declare shuffle_REVENUE_mLINEITEM1_to_REVENUE : { ra:(), rb:collection { ra:{
  key:int, value:int }, rb:string, rc:int, rd:string, re:int, rf:int
  } @ { Collection }, rc:bool } -> collection { key:address, value:collection {
  ra:{ key:int, value:int }, rb:string, rc:int, rd:string, re:int, rf:int
  } @ { Collection } } @ { Collection } = (\b1 -> bind b1 as {rb:tuples,
  rc:shuffle_on_empty} in let all_targets =
  if shuffle_on_empty == true
    then (route_to_ {key:1, value:()}).fold ((\_accmap -> (\b3 ->
      bind b3 as {i:ip} in 
      (_accmap.insert {key:ip, value:empty { ra:{ key:int, value:int },
       rb:string, rc:int, rd:string, re:int, rf:int } @ { Collection }};
       _accmap)))) empty { key:address, value:collection { ra:{ key:int,
      value:int }, rb:string, rc:int, rd:string, re:int, rf:int
      } @ { Collection } } @ { Collection }
    else empty { key:address, value:collection { ra:{ key:int, value:int },
      rb:string, rc:int, rd:string, re:int, rf:int } @ { Collection }
      } @ { Collection } in
  (all_targets.combine (tuples.fold ((\_accext -> (\r_tuple -> _accext.combine
    (bind r_tuple as
    {ra:rkey_0, rb:rkey_1, rc:rkey_2, rd:rkey_3, re:rkey_4, rf:rkey_5} in
    (route_to_ {key:1, value:()}).fold ((\_accmap -> (\b3 ->
      bind b3 as {i:ip} in 
      (_accmap.insert {key:ip, value:{| ra:{ key:int, value:int }, rb:string,
       rc:int, rd:string, re:int, rf:int | r_tuple|} @ { Collection }};
       _accmap)))) empty { key:address, value:collection { ra:{ key:int,
      value:int }, rb:string, rc:int, rd:string, re:int, rf:int
      } @ { Collection } } @ { Collection })))) empty { key:address,
    value:collection { ra:{ key:int, value:int }, rb:string, rc:int, rd:string,
    re:int, rf:int } @ { Collection } } @ { Collection })).groupBy ((\b1 ->
    bind b1 as {key:ip, value:tuple} in ip)) ((\acc -> (\b3 ->
    bind b3 as {key:ip, value:tuple} in tuple.combine acc))) empty { ra:{
    key:int, value:int }, rb:string, rc:int, rd:string, re:int, rf:int
    } @ { Collection })


declare shuffle_REVENUE_mPART2_to_REVENUE : { ra:(), rb:collection { ra:{
  key:int, value:int }, rb:real, rc:string, rd:int, re:string, rf:real
  } @ { Collection }, rc:bool } -> collection { key:address, value:collection {
  ra:{ key:int, value:int }, rb:real, rc:string, rd:int, re:string, rf:real
  } @ { Collection } } @ { Collection } = (\b1 -> bind b1 as {rb:tuples,
  rc:shuffle_on_empty} in let all_targets =
  if shuffle_on_empty == true
    then (route_to_ {key:1, value:()}).fold ((\_accmap -> (\b3 ->
      bind b3 as {i:ip} in 
      (_accmap.insert {key:ip, value:empty { ra:{ key:int, value:int },
       rb:real, rc:string, rd:int, re:string, rf:real } @ { Collection }};
       _accmap)))) empty { key:address, value:collection { ra:{ key:int,
      value:int }, rb:real, rc:string, rd:int, re:string, rf:real
      } @ { Collection } } @ { Collection }
    else empty { key:address, value:collection { ra:{ key:int, value:int },
      rb:real, rc:string, rd:int, re:string, rf:real } @ { Collection }
      } @ { Collection } in
  (all_targets.combine (tuples.fold ((\_accext -> (\r_tuple -> _accext.combine
    (bind r_tuple as
    {ra:rkey_0, rb:rkey_1, rc:rkey_2, rd:rkey_3, re:rkey_4, rf:rkey_5} in
    (route_to_ {key:1, value:()}).fold ((\_accmap -> (\b3 ->
      bind b3 as {i:ip} in 
      (_accmap.insert {key:ip, value:{| ra:{ key:int, value:int }, rb:real,
       rc:string, rd:int, re:string, rf:real | r_tuple|} @ { Collection }};
       _accmap)))) empty { key:address, value:collection { ra:{ key:int,
      value:int }, rb:real, rc:string, rd:int, re:string, rf:real
      } @ { Collection } } @ { Collection })))) empty { key:address,
    value:collection { ra:{ key:int, value:int }, rb:real, rc:string, rd:int,
    re:string, rf:real } @ { Collection } } @ { Collection })).groupBy ((\b1 ->
    bind b1 as {key:ip, value:tuple} in ip)) ((\acc -> (\b3 ->
    bind b3 as {key:ip, value:tuple} in tuple.combine acc))) empty { ra:{
    key:int, value:int }, rb:real, rc:string, rd:int, re:string, rf:real
    } @ { Collection })


declare shuffle_REVENUE_mPART1_to_REVENUE : { ra:(), rb:collection { ra:{
  key:int, value:int }, rb:real, rc:string, rd:int, re:string, rf:real
  } @ { Collection }, rc:bool } -> collection { key:address, value:collection {
  ra:{ key:int, value:int }, rb:real, rc:string, rd:int, re:string, rf:real
  } @ { Collection } } @ { Collection } = (\b1 -> bind b1 as {rb:tuples,
  rc:shuffle_on_empty} in let all_targets =
  if shuffle_on_empty == true
    then (route_to_ {key:1, value:()}).fold ((\_accmap -> (\b3 ->
      bind b3 as {i:ip} in 
      (_accmap.insert {key:ip, value:empty { ra:{ key:int, value:int },
       rb:real, rc:string, rd:int, re:string, rf:real } @ { Collection }};
       _accmap)))) empty { key:address, value:collection { ra:{ key:int,
      value:int }, rb:real, rc:string, rd:int, re:string, rf:real
      } @ { Collection } } @ { Collection }
    else empty { key:address, value:collection { ra:{ key:int, value:int },
      rb:real, rc:string, rd:int, re:string, rf:real } @ { Collection }
      } @ { Collection } in
  (all_targets.combine (tuples.fold ((\_accext -> (\r_tuple -> _accext.combine
    (bind r_tuple as
    {ra:rkey_0, rb:rkey_1, rc:rkey_2, rd:rkey_3, re:rkey_4, rf:rkey_5} in
    (route_to_ {key:1, value:()}).fold ((\_accmap -> (\b3 ->
      bind b3 as {i:ip} in 
      (_accmap.insert {key:ip, value:{| ra:{ key:int, value:int }, rb:real,
       rc:string, rd:int, re:string, rf:real | r_tuple|} @ { Collection }};
       _accmap)))) empty { key:address, value:collection { ra:{ key:int,
      value:int }, rb:real, rc:string, rd:int, re:string, rf:real
      } @ { Collection } } @ { Collection })))) empty { key:address,
    value:collection { ra:{ key:int, value:int }, rb:real, rc:string, rd:int,
    re:string, rf:real } @ { Collection } } @ { Collection })).groupBy ((\b1 ->
    bind b1 as {key:ip, value:tuple} in ip)) ((\acc -> (\b3 ->
    bind b3 as {key:ip, value:tuple} in tuple.combine acc))) empty { ra:{
    key:int, value:int }, rb:real, rc:string, rd:int, re:string, rf:real
    } @ { Collection })


declare nd_REVENUE_mPART2_send_correctives : { ra:address, rb:int, rc:{
  key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:collection {
  ra:real, rb:string, rc:int, rd:string, re:real } @ { Collection } } -> int =
  (\b1 -> bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
  re:corrective_vid, rf:delta_tuples} in let corrective_list =
  nd_filter_corrective_list {key:corrective_vid, value:{| key:int, value:int |
    {key:0, value:0}, {key:1, value:2}|} @ { Collection }} in
  if 0 == corrective_list.size () then 0
    else let delta_tuples2 =
      delta_tuples.fold ((\_accmap -> (\b3 -> bind b3 as {ra:map_0, rb:map_1,
        rc:map_2, rd:map_3, re:map_val} in 
        (_accmap.insert {ra:g_min_vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
         rf:map_val};
         _accmap)))) empty { ra:{ key:int, value:int }, rb:real, rc:string,
        rd:int, re:string, rf:real } @ { Collection } in
      corrective_list.fold ((\acc_count -> (\b3 -> bind b3 as {key:stmt_id,
        value:vid_list} in if stmt_id == 2
        then let ips_vids =
          (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
            nd_log_get_bound_delete_PART vid as
            {ra:PART_PARTKEY, rb:PART_NAME, rc:PART_MFGR, rd:PART_BRAND, re:PART_TYPE, rf:PART_SIZE, rg:PART_CONTAINER, rh:PART_RETAILPRICE, ri:PART_COMMENT}
            in
            (shuffle_REVENUE_mPART2_to_REVENUE {ra:(), rb:delta_tuples2,
               rc:false}).fold ((\_accmap -> (\b3 -> bind b3 as {key:ip,
              value:tuples} in 
              (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold ((\_accmap ->
               (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_1, rd:map_2,
               re:map_3, rf:map_val} in 
               (_accmap.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_3,
                re:map_val};
                _accmap)))) empty { ra:real, rb:string, rc:int, rd:string,
               re:real } @ { Collection }};
               _accmap)))) empty { ra:address, rb:{ key:int, value:int },
              rc:collection { ra:real, rb:string, rc:int, rd:string, re:real
              } @ { Collection } } @ { Collection })))) empty { ra:address,
            rb:{ key:int, value:int }, rc:collection { ra:real, rb:string,
            rc:int, rd:string, re:real } @ { Collection }
            } @ { Collection }).groupBy ((\b1 -> bind b1 as {ra:ip, rb:vid,
            rc:tuples} in ip)) ((\b2 -> (\b5 -> bind b2 as {key:acc_vid,
            value:acc_tuples} in bind b5 as {ra:ip, rb:vid, rc:tuples} in 
            (acc_vid.insert vid;
             {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
             ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold ((\_accmap ->
             (\x -> (_accmap.insert (x.key);_accmap)))) empty { ra:real,
             rb:string, rc:int, rd:string, re:real } @ { Collection }}))))
            {key:empty { key:int, value:int } @ { Seq }, value:empty { ra:real,
            rb:string, rc:int, rd:string, re:real } @ { Collection }} in
          ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
            value:vid_send_list_tup} in 
            ((delete_PART_rcv_corrective_s2_m_REVENUE_mPART2, ip)<- {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:corrective_vid,
             rf:vid_send_list_tup.key, rg:vid_send_list_tup.value};
             acc_count + 1)))) acc_count
        else if stmt_id == 0
          then let ips_vids =
            (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
              nd_log_get_bound_insert_PART vid as
              {ra:PART_PARTKEY, rb:PART_NAME, rc:PART_MFGR, rd:PART_BRAND, re:PART_TYPE, rf:PART_SIZE, rg:PART_CONTAINER, rh:PART_RETAILPRICE, ri:PART_COMMENT}
              in
              (shuffle_REVENUE_mPART2_to_REVENUE {ra:(), rb:delta_tuples2,
                 rc:false}).fold ((\_accmap -> (\b3 -> bind b3 as {key:ip,
                value:tuples} in 
                (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold ((\_accmap ->
                 (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_1, rd:map_2,
                 re:map_3, rf:map_val} in 
                 (_accmap.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_3,
                  re:map_val};
                  _accmap)))) empty { ra:real, rb:string, rc:int, rd:string,
                 re:real } @ { Collection }};
                 _accmap)))) empty { ra:address, rb:{ key:int, value:int },
                rc:collection { ra:real, rb:string, rc:int, rd:string, re:real
                } @ { Collection } } @ { Collection })))) empty { ra:address,
              rb:{ key:int, value:int }, rc:collection { ra:real, rb:string,
              rc:int, rd:string, re:real } @ { Collection }
              } @ { Collection }).groupBy ((\b1 -> bind b1 as {ra:ip, rb:vid,
              rc:tuples} in ip)) ((\b2 -> (\b5 -> bind b2 as {key:acc_vid,
              value:acc_tuples} in bind b5 as {ra:ip, rb:vid, rc:tuples} in 
              (acc_vid.insert vid;
               {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
               ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold ((\_accmap ->
               (\x -> (_accmap.insert (x.key);_accmap)))) empty { ra:real,
               rb:string, rc:int, rd:string, re:real } @ { Collection }}))))
              {key:empty { key:int, value:int } @ { Seq }, value:empty {
              ra:real, rb:string, rc:int, rd:string, re:real
              } @ { Collection }} in
            ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
              value:vid_send_list_tup} in 
              ((insert_PART_rcv_corrective_s0_m_REVENUE_mPART2, ip)<- {ra:orig_addr,
               rb:orig_stmt_id, rc:orig_vid, rd:hop, re:corrective_vid,
               rf:vid_send_list_tup.key, rg:vid_send_list_tup.value};
               acc_count + 1)))) acc_count else acc_count))) 0)


declare nd_REVENUE_mPART1_send_correctives : { ra:address, rb:int, rc:{
  key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:collection {
  ra:real, rb:string, rc:int, rd:string, re:real } @ { Collection } } -> int =
  (\b1 -> bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
  re:corrective_vid, rf:delta_tuples} in let corrective_list =
  nd_filter_corrective_list {key:corrective_vid, value:{| key:int, value:int |
    {key:0, value:0}, {key:1, value:2}|} @ { Collection }} in
  if 0 == corrective_list.size () then 0
    else let delta_tuples2 =
      delta_tuples.fold ((\_accmap -> (\b3 -> bind b3 as {ra:map_0, rb:map_1,
        rc:map_2, rd:map_3, re:map_val} in 
        (_accmap.insert {ra:g_min_vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
         rf:map_val};
         _accmap)))) empty { ra:{ key:int, value:int }, rb:real, rc:string,
        rd:int, re:string, rf:real } @ { Collection } in
      corrective_list.fold ((\acc_count -> (\b3 -> bind b3 as {key:stmt_id,
        value:vid_list} in if stmt_id == 2
        then let ips_vids =
          (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
            nd_log_get_bound_delete_PART vid as
            {ra:PART_PARTKEY, rb:PART_NAME, rc:PART_MFGR, rd:PART_BRAND, re:PART_TYPE, rf:PART_SIZE, rg:PART_CONTAINER, rh:PART_RETAILPRICE, ri:PART_COMMENT}
            in
            (shuffle_REVENUE_mPART1_to_REVENUE {ra:(), rb:delta_tuples2,
               rc:false}).fold ((\_accmap -> (\b3 -> bind b3 as {key:ip,
              value:tuples} in 
              (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold ((\_accmap ->
               (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_1, rd:map_2,
               re:map_3, rf:map_val} in 
               (_accmap.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_3,
                re:map_val};
                _accmap)))) empty { ra:real, rb:string, rc:int, rd:string,
               re:real } @ { Collection }};
               _accmap)))) empty { ra:address, rb:{ key:int, value:int },
              rc:collection { ra:real, rb:string, rc:int, rd:string, re:real
              } @ { Collection } } @ { Collection })))) empty { ra:address,
            rb:{ key:int, value:int }, rc:collection { ra:real, rb:string,
            rc:int, rd:string, re:real } @ { Collection }
            } @ { Collection }).groupBy ((\b1 -> bind b1 as {ra:ip, rb:vid,
            rc:tuples} in ip)) ((\b2 -> (\b5 -> bind b2 as {key:acc_vid,
            value:acc_tuples} in bind b5 as {ra:ip, rb:vid, rc:tuples} in 
            (acc_vid.insert vid;
             {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
             ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold ((\_accmap ->
             (\x -> (_accmap.insert (x.key);_accmap)))) empty { ra:real,
             rb:string, rc:int, rd:string, re:real } @ { Collection }}))))
            {key:empty { key:int, value:int } @ { Seq }, value:empty { ra:real,
            rb:string, rc:int, rd:string, re:real } @ { Collection }} in
          ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
            value:vid_send_list_tup} in 
            ((delete_PART_rcv_corrective_s2_m_REVENUE_mPART1, ip)<- {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:corrective_vid,
             rf:vid_send_list_tup.key, rg:vid_send_list_tup.value};
             acc_count + 1)))) acc_count
        else if stmt_id == 0
          then let ips_vids =
            (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
              nd_log_get_bound_insert_PART vid as
              {ra:PART_PARTKEY, rb:PART_NAME, rc:PART_MFGR, rd:PART_BRAND, re:PART_TYPE, rf:PART_SIZE, rg:PART_CONTAINER, rh:PART_RETAILPRICE, ri:PART_COMMENT}
              in
              (shuffle_REVENUE_mPART1_to_REVENUE {ra:(), rb:delta_tuples2,
                 rc:false}).fold ((\_accmap -> (\b3 -> bind b3 as {key:ip,
                value:tuples} in 
                (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold ((\_accmap ->
                 (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_1, rd:map_2,
                 re:map_3, rf:map_val} in 
                 (_accmap.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_3,
                  re:map_val};
                  _accmap)))) empty { ra:real, rb:string, rc:int, rd:string,
                 re:real } @ { Collection }};
                 _accmap)))) empty { ra:address, rb:{ key:int, value:int },
                rc:collection { ra:real, rb:string, rc:int, rd:string, re:real
                } @ { Collection } } @ { Collection })))) empty { ra:address,
              rb:{ key:int, value:int }, rc:collection { ra:real, rb:string,
              rc:int, rd:string, re:real } @ { Collection }
              } @ { Collection }).groupBy ((\b1 -> bind b1 as {ra:ip, rb:vid,
              rc:tuples} in ip)) ((\b2 -> (\b5 -> bind b2 as {key:acc_vid,
              value:acc_tuples} in bind b5 as {ra:ip, rb:vid, rc:tuples} in 
              (acc_vid.insert vid;
               {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
               ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold ((\_accmap ->
               (\x -> (_accmap.insert (x.key);_accmap)))) empty { ra:real,
               rb:string, rc:int, rd:string, re:real } @ { Collection }}))))
              {key:empty { key:int, value:int } @ { Seq }, value:empty {
              ra:real, rb:string, rc:int, rd:string, re:real
              } @ { Collection }} in
            ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
              value:vid_send_list_tup} in 
              ((insert_PART_rcv_corrective_s0_m_REVENUE_mPART1, ip)<- {ra:orig_addr,
               rb:orig_stmt_id, rc:orig_vid, rd:hop, re:corrective_vid,
               rf:vid_send_list_tup.key, rg:vid_send_list_tup.value};
               acc_count + 1)))) acc_count else acc_count))) 0)


declare nd_REVENUE_mLINEITEM1_send_correctives : { ra:address, rb:int, rc:{
  key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:collection {
  ra:string, rb:int, rc:string, rd:int, re:int } @ { Collection } } -> int =
  (\b1 -> bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
  re:corrective_vid, rf:delta_tuples} in let corrective_list =
  nd_filter_corrective_list {key:corrective_vid, value:{| key:int, value:int |
    {key:2, value:4}, {key:3, value:7}|} @ { Collection }} in
  if 0 == corrective_list.size () then 0
    else let delta_tuples2 =
      delta_tuples.fold ((\_accmap -> (\b3 -> bind b3 as {ra:map_0, rb:map_1,
        rc:map_2, rd:map_3, re:map_val} in 
        (_accmap.insert {ra:g_min_vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
         rf:map_val};
         _accmap)))) empty { ra:{ key:int, value:int }, rb:string, rc:int,
        rd:string, re:int, rf:int } @ { Collection } in
      corrective_list.fold ((\acc_count -> (\b3 -> bind b3 as {key:stmt_id,
        value:vid_list} in if stmt_id == 7
        then let ips_vids =
          (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
            nd_log_get_bound_delete_LINEITEM vid as
            {ra:LINEITEM_ORDERKEY, rb:LINEITEM_PARTKEY, rc:LINEITEM_SUPPKEY, rd:LINEITEM_LINENUMBER, re:LINEITEM_QUANTITY, rf:LINEITEM_EXTENDEDPRICE, rg:LINEITEM_DISCOUNT, rh:LINEITEM_TAX, ri:LINEITEM_RETURNFLAG, rj:LINEITEM_LINESTATUS, rk:LINEITEM_SHIPDATE, rl:LINEITEM_COMMITDATE, rm:LINEITEM_RECEIPTDATE, rn:LINEITEM_SHIPINSTRUCT, ro:LINEITEM_SHIPMODE, rp:LINEITEM_COMMENT}
            in
            (shuffle_REVENUE_mLINEITEM1_to_REVENUE {ra:(), rb:delta_tuples2,
               rc:false}).fold ((\_accmap -> (\b3 -> bind b3 as {key:ip,
              value:tuples} in 
              (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold ((\_accmap ->
               (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_1, rd:map_2,
               re:map_3, rf:map_val} in 
               (_accmap.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_3,
                re:map_val};
                _accmap)))) empty { ra:string, rb:int, rc:string, rd:int,
               re:int } @ { Collection }};
               _accmap)))) empty { ra:address, rb:{ key:int, value:int },
              rc:collection { ra:string, rb:int, rc:string, rd:int, re:int
              } @ { Collection } } @ { Collection })))) empty { ra:address,
            rb:{ key:int, value:int }, rc:collection { ra:string, rb:int,
            rc:string, rd:int, re:int } @ { Collection }
            } @ { Collection }).groupBy ((\b1 -> bind b1 as {ra:ip, rb:vid,
            rc:tuples} in ip)) ((\b2 -> (\b5 -> bind b2 as {key:acc_vid,
            value:acc_tuples} in bind b5 as {ra:ip, rb:vid, rc:tuples} in 
            (acc_vid.insert vid;
             {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
             ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold ((\_accmap ->
             (\x -> (_accmap.insert (x.key);_accmap)))) empty { ra:string,
             rb:int, rc:string, rd:int, re:int } @ { Collection }}))))
            {key:empty { key:int, value:int } @ { Seq }, value:empty {
            ra:string, rb:int, rc:string, rd:int, re:int } @ { Collection }} in
          ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
            value:vid_send_list_tup} in 
            ((delete_LINEITEM_rcv_corrective_s7_m_REVENUE_mLINEITEM1, ip)<- {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:corrective_vid,
             rf:vid_send_list_tup.key, rg:vid_send_list_tup.value};
             acc_count + 1)))) acc_count
        else if stmt_id == 4
          then let ips_vids =
            (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
              nd_log_get_bound_insert_LINEITEM vid as
              {ra:LINEITEM_ORDERKEY, rb:LINEITEM_PARTKEY, rc:LINEITEM_SUPPKEY, rd:LINEITEM_LINENUMBER, re:LINEITEM_QUANTITY, rf:LINEITEM_EXTENDEDPRICE, rg:LINEITEM_DISCOUNT, rh:LINEITEM_TAX, ri:LINEITEM_RETURNFLAG, rj:LINEITEM_LINESTATUS, rk:LINEITEM_SHIPDATE, rl:LINEITEM_COMMITDATE, rm:LINEITEM_RECEIPTDATE, rn:LINEITEM_SHIPINSTRUCT, ro:LINEITEM_SHIPMODE, rp:LINEITEM_COMMENT}
              in
              (shuffle_REVENUE_mLINEITEM1_to_REVENUE {ra:(), rb:delta_tuples2,
                 rc:false}).fold ((\_accmap -> (\b3 -> bind b3 as {key:ip,
                value:tuples} in 
                (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold ((\_accmap ->
                 (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_1, rd:map_2,
                 re:map_3, rf:map_val} in 
                 (_accmap.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_3,
                  re:map_val};
                  _accmap)))) empty { ra:string, rb:int, rc:string, rd:int,
                 re:int } @ { Collection }};
                 _accmap)))) empty { ra:address, rb:{ key:int, value:int },
                rc:collection { ra:string, rb:int, rc:string, rd:int, re:int
                } @ { Collection } } @ { Collection })))) empty { ra:address,
              rb:{ key:int, value:int }, rc:collection { ra:string, rb:int,
              rc:string, rd:int, re:int } @ { Collection }
              } @ { Collection }).groupBy ((\b1 -> bind b1 as {ra:ip, rb:vid,
              rc:tuples} in ip)) ((\b2 -> (\b5 -> bind b2 as {key:acc_vid,
              value:acc_tuples} in bind b5 as {ra:ip, rb:vid, rc:tuples} in 
              (acc_vid.insert vid;
               {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
               ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold ((\_accmap ->
               (\x -> (_accmap.insert (x.key);_accmap)))) empty { ra:string,
               rb:int, rc:string, rd:int, re:int } @ { Collection }}))))
              {key:empty { key:int, value:int } @ { Seq }, value:empty {
              ra:string, rb:int, rc:string, rd:int, re:int } @ { Collection }}
            in
            ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
              value:vid_send_list_tup} in 
              ((insert_LINEITEM_rcv_corrective_s4_m_REVENUE_mLINEITEM1, ip)<- {ra:orig_addr,
               rb:orig_stmt_id, rc:orig_vid, rd:hop, re:corrective_vid,
               rf:vid_send_list_tup.key, rg:vid_send_list_tup.value};
               acc_count + 1)))) acc_count else acc_count))) 0)


declare sw_insert_PART : { ra:int, rb:string, rc:string, rd:string, re:string,
  rf:int, rg:string, rh:real, ri:string } -> () = (\args ->
  (sw_buf_insert_PART.insert args;
   sw_trig_buf_idx.insert {i:0};
   sw_need_vid_cntr = sw_need_vid_cntr + 1))


declare sw_insert_PART_send_fetch : { key:int, value:int } -> () = (\vid ->
  case (sw_buf_insert_PART.peek ()) of
  {Some args ->
    (sw_buf_insert_PART.erase args;
     bind args as
     {ra:PART_PARTKEY, rb:PART_NAME, rc:PART_MFGR, rd:PART_BRAND, re:PART_TYPE, rf:PART_SIZE, rg:PART_CONTAINER, rh:PART_RETAILPRICE, ri:PART_COMMENT}
     in
     ((route_to_string_int_string_int {ra:4, rb:Some PART_CONTAINER,
         rc:Some PART_SIZE, rd:Some PART_BRAND, re:Some PART_PARTKEY}).iterate
      ((\b1 -> bind b1 as {i:ip} in 
      (nd_insert_PART_do_complete_s1_trig, ip)<- {ra:vid, rb:PART_PARTKEY,
      rc:PART_NAME, rd:PART_MFGR, re:PART_BRAND, rf:PART_TYPE, rg:PART_SIZE,
      rh:PART_CONTAINER, ri:PART_RETAILPRICE, rj:PART_COMMENT}));
      ((((empty { ra:address, rb:int, rc:int } @ { Collection }).combine (let
      sender_count =
      (route_to_float_string_int_string {ra:2, rb:None immut, rc:None immut,
         rd:None immut, re:None immut}).fold ((\count -> (\b3 ->
        bind b3 as {i:ip} in count + 1))) 0 in
      ((shuffle_REVENUE_mPART1_to_REVENUE {ra:(), rb:empty { ra:{ key:int,
          value:int }, rb:real, rc:string, rd:int, re:string, rf:real
          } @ { Collection }, rc:true}).fold ((\_accmap -> (\b3 ->
        bind b3 as {key:ip, value:tuples} in 
        (_accmap.insert {ra:ip, rb:0, rc:sender_count};_accmap)))) empty {
        ra:address, rb:int, rc:int } @ { Collection }).combine (let
        sender_count =
        (route_to_float_string_int_string {ra:3, rb:None immut, rc:None immut,
           rd:None immut, re:None immut}).fold ((\count -> (\b3 ->
          bind b3 as {i:ip} in count + 1))) 0 in
        (shuffle_REVENUE_mPART2_to_REVENUE {ra:(), rb:empty { ra:{ key:int,
           value:int }, rb:real, rc:string, rd:int, re:string, rf:real
           } @ { Collection }, rc:true}).fold ((\_accmap -> (\b3 ->
          bind b3 as {key:ip, value:tuples} in 
          (_accmap.insert {ra:ip, rb:0, rc:sender_count};_accmap)))) empty {
          ra:address, rb:int, rc:int } @ { Collection }))).groupBy ((\b1 ->
      bind b1 as {ra:ip, rb:stmt_id, rc:count} in {key:ip, value:stmt_id}))
      ((\acc -> (\b3 -> bind b3 as {ra:ip, rb:stmt_id, rc:count} in acc +
      count))) 0).groupBy ((\b1 -> bind b1 as {key:b2, value:count} in 
      bind b2 as {key:ip, value:stmt_id} in ip)) ((\acc -> (\b3 ->
      bind b3 as {key:ip_and_stmt_id, value:count} in bind ip_and_stmt_id as
      {key:ip, value:stmt_id} in
      acc.combine ({| key:int, value:int | {key:stmt_id,
        value:count}|} @ { Collection })))) empty { key:int, value:int
      } @ { Collection }).iterate ((\b1 -> bind b1 as {key:addr,
      value:stmt_cnt_list} in 
      ((nd_insert_PART_rcv_put, addr)<- {ra:me, rb:stmt_cnt_list, rc:vid,
       rd:PART_PARTKEY, re:PART_NAME, rf:PART_MFGR, rg:PART_BRAND,
       rh:PART_TYPE, ri:PART_SIZE, rj:PART_CONTAINER, rk:PART_RETAILPRICE,
       rl:PART_COMMENT};
       (sw_num_sent = sw_num_sent + 1;
        (case ((sw_ack_log.filter ((\b1 -> bind b1 as {key:key,
        value:value} in key == vid))).peek ()) of
        {Some x -> sw_ack_log.update x {key:vid, value:x.value + 1}}{None ->
                                                                    sw_ack_log.insert
                                                                    {key:vid,
                                                                    value:1}})))));
      ((((route_to_float_string_int_string {ra:3, rb:None immut, rc:None immut,
            rd:None immut, re:None immut}).fold ((\_accmap -> (\b3 ->
      bind b3 as {i:ip} in (_accmap.insert {ra:0, rb:3, rc:ip};_accmap))))
      empty { ra:int, rb:int, rc:address } @ { Collection }).combine
      (((route_to_float_string_int_string {ra:2, rb:None immut, rc:None immut,
           rd:None immut, re:None immut}).fold ((\_accmap -> (\b3 ->
      bind b3 as {i:ip} in (_accmap.insert {ra:0, rb:2, rc:ip};_accmap))))
      empty { ra:int, rb:int, rc:address } @ { Collection }).combine empty {
      ra:int, rb:int, rc:address } @ { Collection })).groupBy ((\b1 ->
      bind b1 as {ra:stmt_id, rb:map_id, rc:ip} in ip)) ((\acc -> (\b3 ->
      bind b3 as {ra:stmt_id, rb:map_id, rc:ip} in 
      (acc.insert {key:stmt_id, value:map_id};acc)))) empty { key:int,
      value:int } @ { Collection }).iterate ((\b1 -> bind b1 as {key:ip,
      value:stmt_map_ids} in (nd_insert_PART_rcv_fetch, ip)<- {ra:stmt_map_ids,
      rb:vid, rc:PART_PARTKEY, rd:PART_NAME, re:PART_MFGR, rf:PART_BRAND,
      rg:PART_TYPE, rh:PART_SIZE, ri:PART_CONTAINER, rj:PART_RETAILPRICE,
      rk:PART_COMMENT}))))}{None ->
                             error
                               (print
                                  "unexpected missing arguments in sw_buf_insert_PART")})


declare nd_insert_PART_do_complete_s0 : { ra:{ key:int, value:int }, rb:int,
  rc:string, rd:string, re:string, rf:string, rg:int, rh:string, ri:real,
  rj:string } -> () = (\b1 -> bind b1 as {ra:vid, rb:PART_PARTKEY,
  rc:PART_NAME, rd:PART_MFGR, re:PART_BRAND, rf:PART_TYPE, rg:PART_SIZE,
  rh:PART_CONTAINER, ri:PART_RETAILPRICE, rj:PART_COMMENT} in let __sum_ret__9
  =
  ((((bind map_REVENUE_mPART1_s0_buf as ind __x in
    (frontier_float_string_int_string_float {key:vid, value:__x}).fold
      ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_1, rd:map_2,
      re:map_3, rf:map_val} in 
      (acc.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_3, re:map_val};acc))))
      empty { ra:real, rb:string, rc:int, rd:string, re:real } @ { Collection }).fold
    ((\_accext -> (\b3 -> bind b3 as {ra:L_QUANTITY, rb:L_SHIPMODE,
    rc:L_PARTKEY, rd:L_SHIPINSTRUCT, re:__map_ret__1} in _accext.combine (({|
    key:int, value:int | let __prod_ret__13 =
    ((((if L_SHIPINSTRUCT == "DELIVER IN PERSON" then 1 else 0) *
      if PART_PARTKEY == L_PARTKEY then 1 else 0) * ((if L_SHIPMODE == "AIR"
      then 1 else 0) + if L_SHIPMODE == "AIR REG" then 1 else 0)) *
      if 1 <= PART_SIZE then 1 else 0) * (((((((if PART_BRAND == "Brand#12"
      then 1 else 0) * if PART_SIZE <= 5 then 1 else 0) * if L_QUANTITY <= 11
      then 1 else 0) * if 1 <= L_QUANTITY then 1 else 0) *
      ((((if PART_CONTAINER == "SM CASE" then 1 else 0) +
      if PART_CONTAINER == "SM BOX" then 1 else 0) +
      if PART_CONTAINER == "SM PACK" then 1 else 0) +
      if PART_CONTAINER == "SM PKG" then 1 else 0)) * 2) +
      (((((if PART_BRAND == "Brand#34" then 1 else 0) *
      ((((if PART_CONTAINER == "LG CASE" then 1 else 0) +
      if PART_CONTAINER == "LG BOX" then 1 else 0) +
      if PART_CONTAINER == "LG PACK" then 1 else 0) +
      if PART_CONTAINER == "LG PKG" then 1 else 0)) * if 20 <= L_QUANTITY
      then 1 else 0) * if L_QUANTITY <= 30 then 1 else 0) * if PART_SIZE <= 15
      then 1 else 0)) in {key:__prod_ret__13, value:1}|} @ { Collection }).fold
    ((\_accmap -> (\b3 -> bind b3 as {key:__sql_inline_or_7,
    value:__lift_ret__1} in 
    (_accmap.insert {ra:L_QUANTITY, rb:L_SHIPMODE, rc:L_PARTKEY,
     rd:L_SHIPINSTRUCT, re:__sql_inline_or_7, rf:__map_ret__1 * __lift_ret__1};
     _accmap)))) empty { ra:real, rb:string, rc:int, rd:string, re:int, rf:real
    } @ { Collection })))) empty { ra:real, rb:string, rc:int, rd:string,
    re:int, rf:real } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:L_QUANTITY, rb:L_SHIPMODE, rc:L_PARTKEY, rd:L_SHIPINSTRUCT,
    re:__sql_inline_or_7, rf:__prod_ret__14} in 
    (_accmap.insert {ra:L_QUANTITY, rb:L_SHIPMODE, rc:L_PARTKEY,
     rd:L_SHIPINSTRUCT, re:__sql_inline_or_7, rf:__prod_ret__14 *
     if 0 < __sql_inline_or_7 then 1 else 0};
     _accmap)))) empty { ra:real, rb:string, rc:int, rd:string, re:int, rf:real
    } @ { Collection }).fold ((\__accv_1 -> (\b3 -> bind b3 as {ra:L_QUANTITY,
    rb:L_SHIPMODE, rc:L_PARTKEY, rd:L_SHIPINSTRUCT, re:__sql_inline_or_7,
    rf:__prod_ret__15} in __accv_1 + __prod_ret__15))) 0 * -1) + (((bind
    map_REVENUE_mPART2_s0_buf as ind __x in
    (frontier_float_string_int_string_float {key:vid, value:__x}).fold
      ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_1, rd:map_2,
      re:map_3, rf:map_val} in 
      (acc.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_3, re:map_val};acc))))
      empty { ra:real, rb:string, rc:int, rd:string, re:real } @ { Collection }).fold
    ((\_accext -> (\b3 -> bind b3 as {ra:L_QUANTITY, rb:L_SHIPMODE,
    rc:L_PARTKEY, rd:L_SHIPINSTRUCT, re:__map_ret__2} in _accext.combine (({|
    key:int, value:int | let __prod_ret__29 =
    ((((if L_SHIPINSTRUCT == "DELIVER IN PERSON" then 1 else 0) *
      if PART_PARTKEY == L_PARTKEY then 1 else 0) * ((if L_SHIPMODE == "AIR"
      then 1 else 0) + if L_SHIPMODE == "AIR REG" then 1 else 0)) *
      if 1 <= PART_SIZE then 1 else 0) * (((((((if PART_BRAND == "Brand#12"
      then 1 else 0) * if PART_SIZE <= 5 then 1 else 0) * if L_QUANTITY <= 11
      then 1 else 0) * if 1 <= L_QUANTITY then 1 else 0) *
      ((((if PART_CONTAINER == "SM CASE" then 1 else 0) +
      if PART_CONTAINER == "SM BOX" then 1 else 0) +
      if PART_CONTAINER == "SM PACK" then 1 else 0) +
      if PART_CONTAINER == "SM PKG" then 1 else 0)) * 2) +
      (((((if PART_BRAND == "Brand#34" then 1 else 0) *
      ((((if PART_CONTAINER == "LG CASE" then 1 else 0) +
      if PART_CONTAINER == "LG BOX" then 1 else 0) +
      if PART_CONTAINER == "LG PACK" then 1 else 0) +
      if PART_CONTAINER == "LG PKG" then 1 else 0)) * if 20 <= L_QUANTITY
      then 1 else 0) * if L_QUANTITY <= 30 then 1 else 0) * if PART_SIZE <= 15
      then 1 else 0)) in {key:__prod_ret__29, value:1}|} @ { Collection }).fold
    ((\_accmap -> (\b3 -> bind b3 as {key:__sql_inline_or_7,
    value:__lift_ret__2} in 
    (_accmap.insert {ra:L_QUANTITY, rb:L_SHIPMODE, rc:L_PARTKEY,
     rd:L_SHIPINSTRUCT, re:__sql_inline_or_7, rf:__map_ret__2 * __lift_ret__2};
     _accmap)))) empty { ra:real, rb:string, rc:int, rd:string, re:int, rf:real
    } @ { Collection })))) empty { ra:real, rb:string, rc:int, rd:string,
    re:int, rf:real } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:L_QUANTITY, rb:L_SHIPMODE, rc:L_PARTKEY, rd:L_SHIPINSTRUCT,
    re:__sql_inline_or_7, rf:__prod_ret__30} in 
    (_accmap.insert {ra:L_QUANTITY, rb:L_SHIPMODE, rc:L_PARTKEY,
     rd:L_SHIPINSTRUCT, re:__sql_inline_or_7, rf:__prod_ret__30 *
     if 0 < __sql_inline_or_7 then 1 else 0};
     _accmap)))) empty { ra:real, rb:string, rc:int, rd:string, re:int, rf:real
    } @ { Collection }).fold ((\__accv_2 -> (\b3 -> bind b3 as {ra:L_QUANTITY,
    rb:L_SHIPMODE, rc:L_PARTKEY, rd:L_SHIPINSTRUCT, re:__sql_inline_or_7,
    rf:__prod_ret__31} in __accv_2 + __prod_ret__31))) 0 in
  ((nd_add_delta_to_float {ra:REVENUE, rb:false, rc:vid, rd:{|i:real|
      __sum_ret__9|} @ { Collection }});
   (nd_complete_stmt_cntr_check {key:vid, value:0})))


declare nd_insert_PART_do_complete_s1 : { ra:{ key:int, value:int }, rb:int,
  rc:string, rd:string, re:string, rf:string, rg:int, rh:string, ri:real,
  rj:string } -> () = (\b1 -> bind b1 as {ra:vid, rb:PART_PARTKEY,
  rc:PART_NAME, rd:PART_MFGR, re:PART_BRAND, rf:PART_TYPE, rg:PART_SIZE,
  rh:PART_CONTAINER, ri:PART_RETAILPRICE, rj:PART_COMMENT} in let __val_ret__4
  = 1 in
  ((nd_add_delta_to_string_int_string_int_int {ra:REVENUE_mLINEITEM1, rb:false,
      rc:vid, rd:{| ra:string, rb:int, rc:string, rd:int, re:int |
      {ra:PART_CONTAINER, rb:PART_SIZE, rc:PART_BRAND, rd:PART_PARTKEY,
      re:__val_ret__4}|} @ { Collection }});
   let sent_msgs =
   nd_REVENUE_mLINEITEM1_send_correctives {ra:me, rb:1, rc:vid, rd:1, re:vid,
     rf:{| ra:string, rb:int, rc:string, rd:int, re:int | {ra:PART_CONTAINER,
     rb:PART_SIZE, rc:PART_BRAND, rd:PART_PARTKEY,
     re:__val_ret__4}|} @ { Collection }} in
   if sent_msgs == 0 then ()
     else
       nd_update_stmt_cntr_corr_map {ra:vid, rb:1, rc:1, rd:sent_msgs, re:true,
         rf:true}))


declare insert_PART_do_corrective_s0_m_REVENUE_mPART1 : { ra:address, rb:int,
  rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:int,
  rg:string, rh:string, ri:string, rj:string, rk:int, rl:string, rm:real,
  rn:string, ro:collection { ra:real, rb:string, rc:int, rd:string, re:real
  } @ { Collection } } -> int = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:PART_PARTKEY, rg:PART_NAME,
  rh:PART_MFGR, ri:PART_BRAND, rj:PART_TYPE, rk:PART_SIZE, rl:PART_CONTAINER,
  rm:PART_RETAILPRICE, rn:PART_COMMENT, ro:delta_tuples} in let new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 -> bind b3 as {ra:delta_L_QUANTITY,
    rb:delta_L_SHIPMODE, rc:delta_L_PARTKEY, rd:delta_L_SHIPINSTRUCT,
    re:delta_REVENUE_mPART1} in _accext.combine (let __prod_ret__152 =
    (({| key:int, value:int | let __prod_ret__149 =
      ((((if delta_L_SHIPINSTRUCT == "DELIVER IN PERSON" then 1 else 0) *
        if PART_PARTKEY == delta_L_PARTKEY then 1 else 0) *
        ((if delta_L_SHIPMODE == "AIR" then 1 else 0) +
        if delta_L_SHIPMODE == "AIR REG" then 1 else 0)) * if 1 <= PART_SIZE
        then 1 else 0) * (((((((if PART_BRAND == "Brand#12" then 1 else 0) *
        if PART_SIZE <= 5 then 1 else 0) * if delta_L_QUANTITY <= 11 
        then 1 else 0) * if 1 <= delta_L_QUANTITY then 1 else 0) *
        ((((if PART_CONTAINER == "SM CASE" then 1 else 0) +
        if PART_CONTAINER == "SM BOX" then 1 else 0) +
        if PART_CONTAINER == "SM PACK" then 1 else 0) +
        if PART_CONTAINER == "SM PKG" then 1 else 0)) * 2) +
        (((((if PART_BRAND == "Brand#34" then 1 else 0) *
        ((((if PART_CONTAINER == "LG CASE" then 1 else 0) +
        if PART_CONTAINER == "LG BOX" then 1 else 0) +
        if PART_CONTAINER == "LG PACK" then 1 else 0) +
        if PART_CONTAINER == "LG PKG" then 1 else 0)) *
        if 20 <= delta_L_QUANTITY then 1 else 0) * if delta_L_QUANTITY <= 30
        then 1 else 0) * if PART_SIZE <= 15 then 1 else 0)) in
      {key:__prod_ret__149, value:1}|} @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {key:__sql_inline_or_7, value:__lift_ret__9} in 
      (_accmap.insert {key:__sql_inline_or_7, value:__lift_ret__9 *
       if 0 < __sql_inline_or_7 then 1 else 0};
       _accmap)))) empty { key:int, value:int } @ { Collection }).fold
      ((\__accv_9 -> (\b3 -> bind b3 as {key:__sql_inline_or_7,
      value:__prod_ret__150} in __accv_9 + __prod_ret__150))) 0 *
      -delta_REVENUE_mPART1 in {|i:real| __prod_ret__152|} @ { Collection }))))
    empty {i:real} @ { Collection }).filter ((\b1 -> bind b1 as {i:map_val} in 
    0 != map_val)) in
  ((nd_add_delta_to_float {ra:REVENUE, rb:true, rc:vid, rd:new_tuples});0))


declare insert_PART_do_corrective_s0_m_REVENUE_mPART2 : { ra:address, rb:int,
  rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:int,
  rg:string, rh:string, ri:string, rj:string, rk:int, rl:string, rm:real,
  rn:string, ro:collection { ra:real, rb:string, rc:int, rd:string, re:real
  } @ { Collection } } -> int = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:PART_PARTKEY, rg:PART_NAME,
  rh:PART_MFGR, ri:PART_BRAND, rj:PART_TYPE, rk:PART_SIZE, rl:PART_CONTAINER,
  rm:PART_RETAILPRICE, rn:PART_COMMENT, ro:delta_tuples} in let new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 -> bind b3 as {ra:delta_L_QUANTITY,
    rb:delta_L_SHIPMODE, rc:delta_L_PARTKEY, rd:delta_L_SHIPINSTRUCT,
    re:delta_REVENUE_mPART2} in _accext.combine (let __prod_ret__167 =
    (({| key:int, value:int | let __prod_ret__165 =
      ((((if delta_L_SHIPINSTRUCT == "DELIVER IN PERSON" then 1 else 0) *
        if PART_PARTKEY == delta_L_PARTKEY then 1 else 0) *
        ((if delta_L_SHIPMODE == "AIR" then 1 else 0) +
        if delta_L_SHIPMODE == "AIR REG" then 1 else 0)) * if 1 <= PART_SIZE
        then 1 else 0) * (((((((if PART_BRAND == "Brand#12" then 1 else 0) *
        if PART_SIZE <= 5 then 1 else 0) * if delta_L_QUANTITY <= 11 
        then 1 else 0) * if 1 <= delta_L_QUANTITY then 1 else 0) *
        ((((if PART_CONTAINER == "SM CASE" then 1 else 0) +
        if PART_CONTAINER == "SM BOX" then 1 else 0) +
        if PART_CONTAINER == "SM PACK" then 1 else 0) +
        if PART_CONTAINER == "SM PKG" then 1 else 0)) * 2) +
        (((((if PART_BRAND == "Brand#34" then 1 else 0) *
        ((((if PART_CONTAINER == "LG CASE" then 1 else 0) +
        if PART_CONTAINER == "LG BOX" then 1 else 0) +
        if PART_CONTAINER == "LG PACK" then 1 else 0) +
        if PART_CONTAINER == "LG PKG" then 1 else 0)) *
        if 20 <= delta_L_QUANTITY then 1 else 0) * if delta_L_QUANTITY <= 30
        then 1 else 0) * if PART_SIZE <= 15 then 1 else 0)) in
      {key:__prod_ret__165, value:1}|} @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {key:__sql_inline_or_7, value:__lift_ret__10} in 
      (_accmap.insert {key:__sql_inline_or_7, value:__lift_ret__10 *
       if 0 < __sql_inline_or_7 then 1 else 0};
       _accmap)))) empty { key:int, value:int } @ { Collection }).fold
      ((\__accv_10 -> (\b3 -> bind b3 as {key:__sql_inline_or_7,
      value:__prod_ret__166} in __accv_10 + __prod_ret__166))) 0 *
      delta_REVENUE_mPART2 in {|i:real| __prod_ret__167|} @ { Collection }))))
    empty {i:real} @ { Collection }).filter ((\b1 -> bind b1 as {i:map_val} in 
    0 != map_val)) in
  ((nd_add_delta_to_float {ra:REVENUE, rb:true, rc:vid, rd:new_tuples});0))


declare sw_delete_PART : { ra:int, rb:string, rc:string, rd:string, re:string,
  rf:int, rg:string, rh:real, ri:string } -> () = (\args ->
  (sw_buf_delete_PART.insert args;
   sw_trig_buf_idx.insert {i:1};
   sw_need_vid_cntr = sw_need_vid_cntr + 1))


declare sw_delete_PART_send_fetch : { key:int, value:int } -> () = (\vid ->
  case (sw_buf_delete_PART.peek ()) of
  {Some args ->
    (sw_buf_delete_PART.erase args;
     bind args as
     {ra:PART_PARTKEY, rb:PART_NAME, rc:PART_MFGR, rd:PART_BRAND, re:PART_TYPE, rf:PART_SIZE, rg:PART_CONTAINER, rh:PART_RETAILPRICE, ri:PART_COMMENT}
     in
     ((route_to_string_int_string_int {ra:4, rb:Some PART_CONTAINER,
         rc:Some PART_SIZE, rd:Some PART_BRAND, re:Some PART_PARTKEY}).iterate
      ((\b1 -> bind b1 as {i:ip} in 
      (nd_delete_PART_do_complete_s3_trig, ip)<- {ra:vid, rb:PART_PARTKEY,
      rc:PART_NAME, rd:PART_MFGR, re:PART_BRAND, rf:PART_TYPE, rg:PART_SIZE,
      rh:PART_CONTAINER, ri:PART_RETAILPRICE, rj:PART_COMMENT}));
      ((((empty { ra:address, rb:int, rc:int } @ { Collection }).combine (let
      sender_count =
      (route_to_float_string_int_string {ra:2, rb:None immut, rc:None immut,
         rd:None immut, re:None immut}).fold ((\count -> (\b3 ->
        bind b3 as {i:ip} in count + 1))) 0 in
      ((shuffle_REVENUE_mPART1_to_REVENUE {ra:(), rb:empty { ra:{ key:int,
          value:int }, rb:real, rc:string, rd:int, re:string, rf:real
          } @ { Collection }, rc:true}).fold ((\_accmap -> (\b3 ->
        bind b3 as {key:ip, value:tuples} in 
        (_accmap.insert {ra:ip, rb:2, rc:sender_count};_accmap)))) empty {
        ra:address, rb:int, rc:int } @ { Collection }).combine (let
        sender_count =
        (route_to_float_string_int_string {ra:3, rb:None immut, rc:None immut,
           rd:None immut, re:None immut}).fold ((\count -> (\b3 ->
          bind b3 as {i:ip} in count + 1))) 0 in
        (shuffle_REVENUE_mPART2_to_REVENUE {ra:(), rb:empty { ra:{ key:int,
           value:int }, rb:real, rc:string, rd:int, re:string, rf:real
           } @ { Collection }, rc:true}).fold ((\_accmap -> (\b3 ->
          bind b3 as {key:ip, value:tuples} in 
          (_accmap.insert {ra:ip, rb:2, rc:sender_count};_accmap)))) empty {
          ra:address, rb:int, rc:int } @ { Collection }))).groupBy ((\b1 ->
      bind b1 as {ra:ip, rb:stmt_id, rc:count} in {key:ip, value:stmt_id}))
      ((\acc -> (\b3 -> bind b3 as {ra:ip, rb:stmt_id, rc:count} in acc +
      count))) 0).groupBy ((\b1 -> bind b1 as {key:b2, value:count} in 
      bind b2 as {key:ip, value:stmt_id} in ip)) ((\acc -> (\b3 ->
      bind b3 as {key:ip_and_stmt_id, value:count} in bind ip_and_stmt_id as
      {key:ip, value:stmt_id} in
      acc.combine ({| key:int, value:int | {key:stmt_id,
        value:count}|} @ { Collection })))) empty { key:int, value:int
      } @ { Collection }).iterate ((\b1 -> bind b1 as {key:addr,
      value:stmt_cnt_list} in 
      ((nd_delete_PART_rcv_put, addr)<- {ra:me, rb:stmt_cnt_list, rc:vid,
       rd:PART_PARTKEY, re:PART_NAME, rf:PART_MFGR, rg:PART_BRAND,
       rh:PART_TYPE, ri:PART_SIZE, rj:PART_CONTAINER, rk:PART_RETAILPRICE,
       rl:PART_COMMENT};
       (sw_num_sent = sw_num_sent + 1;
        (case ((sw_ack_log.filter ((\b1 -> bind b1 as {key:key,
        value:value} in key == vid))).peek ()) of
        {Some x -> sw_ack_log.update x {key:vid, value:x.value + 1}}{None ->
                                                                    sw_ack_log.insert
                                                                    {key:vid,
                                                                    value:1}})))));
      ((((route_to_float_string_int_string {ra:3, rb:None immut, rc:None immut,
            rd:None immut, re:None immut}).fold ((\_accmap -> (\b3 ->
      bind b3 as {i:ip} in (_accmap.insert {ra:2, rb:3, rc:ip};_accmap))))
      empty { ra:int, rb:int, rc:address } @ { Collection }).combine
      (((route_to_float_string_int_string {ra:2, rb:None immut, rc:None immut,
           rd:None immut, re:None immut}).fold ((\_accmap -> (\b3 ->
      bind b3 as {i:ip} in (_accmap.insert {ra:2, rb:2, rc:ip};_accmap))))
      empty { ra:int, rb:int, rc:address } @ { Collection }).combine empty {
      ra:int, rb:int, rc:address } @ { Collection })).groupBy ((\b1 ->
      bind b1 as {ra:stmt_id, rb:map_id, rc:ip} in ip)) ((\acc -> (\b3 ->
      bind b3 as {ra:stmt_id, rb:map_id, rc:ip} in 
      (acc.insert {key:stmt_id, value:map_id};acc)))) empty { key:int,
      value:int } @ { Collection }).iterate ((\b1 -> bind b1 as {key:ip,
      value:stmt_map_ids} in (nd_delete_PART_rcv_fetch, ip)<- {ra:stmt_map_ids,
      rb:vid, rc:PART_PARTKEY, rd:PART_NAME, re:PART_MFGR, rf:PART_BRAND,
      rg:PART_TYPE, rh:PART_SIZE, ri:PART_CONTAINER, rj:PART_RETAILPRICE,
      rk:PART_COMMENT}))))}{None ->
                             error
                               (print
                                  "unexpected missing arguments in sw_buf_delete_PART")})


declare nd_delete_PART_do_complete_s2 : { ra:{ key:int, value:int }, rb:int,
  rc:string, rd:string, re:string, rf:string, rg:int, rh:string, ri:real,
  rj:string } -> () = (\b1 -> bind b1 as {ra:vid, rb:PART_PARTKEY,
  rc:PART_NAME, rd:PART_MFGR, re:PART_BRAND, rf:PART_TYPE, rg:PART_SIZE,
  rh:PART_CONTAINER, ri:PART_RETAILPRICE, rj:PART_COMMENT} in let __sum_ret__18
  =
  (((bind map_REVENUE_mPART1_s2_buf as ind __x in
    (frontier_float_string_int_string_float {key:vid, value:__x}).fold
      ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_1, rd:map_2,
      re:map_3, rf:map_val} in 
      (acc.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_3, re:map_val};acc))))
      empty { ra:real, rb:string, rc:int, rd:string, re:real } @ { Collection }).fold
    ((\_accext -> (\b3 -> bind b3 as {ra:L_QUANTITY, rb:L_SHIPMODE,
    rc:L_PARTKEY, rd:L_SHIPINSTRUCT, re:__map_ret__3} in _accext.combine (({|
    key:int, value:int | let __prod_ret__44 =
    ((((if L_SHIPINSTRUCT == "DELIVER IN PERSON" then 1 else 0) *
      if PART_PARTKEY == L_PARTKEY then 1 else 0) * ((if L_SHIPMODE == "AIR"
      then 1 else 0) + if L_SHIPMODE == "AIR REG" then 1 else 0)) *
      if 1 <= PART_SIZE then 1 else 0) * (((((((if PART_BRAND == "Brand#12"
      then 1 else 0) * if PART_SIZE <= 5 then 1 else 0) * if L_QUANTITY <= 11
      then 1 else 0) * if 1 <= L_QUANTITY then 1 else 0) *
      ((((if PART_CONTAINER == "SM CASE" then 1 else 0) +
      if PART_CONTAINER == "SM BOX" then 1 else 0) +
      if PART_CONTAINER == "SM PACK" then 1 else 0) +
      if PART_CONTAINER == "SM PKG" then 1 else 0)) * 2) +
      (((((if PART_BRAND == "Brand#34" then 1 else 0) *
      ((((if PART_CONTAINER == "LG CASE" then 1 else 0) +
      if PART_CONTAINER == "LG BOX" then 1 else 0) +
      if PART_CONTAINER == "LG PACK" then 1 else 0) +
      if PART_CONTAINER == "LG PKG" then 1 else 0)) * if 20 <= L_QUANTITY
      then 1 else 0) * if L_QUANTITY <= 30 then 1 else 0) * if PART_SIZE <= 15
      then 1 else 0)) in {key:__prod_ret__44, value:1}|} @ { Collection }).fold
    ((\_accmap -> (\b3 -> bind b3 as {key:__sql_inline_or_7,
    value:__lift_ret__3} in 
    (_accmap.insert {ra:L_QUANTITY, rb:L_SHIPMODE, rc:L_PARTKEY,
     rd:L_SHIPINSTRUCT, re:__sql_inline_or_7, rf:__map_ret__3 * __lift_ret__3};
     _accmap)))) empty { ra:real, rb:string, rc:int, rd:string, re:int, rf:real
    } @ { Collection })))) empty { ra:real, rb:string, rc:int, rd:string,
    re:int, rf:real } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:L_QUANTITY, rb:L_SHIPMODE, rc:L_PARTKEY, rd:L_SHIPINSTRUCT,
    re:__sql_inline_or_7, rf:__prod_ret__45} in 
    (_accmap.insert {ra:L_QUANTITY, rb:L_SHIPMODE, rc:L_PARTKEY,
     rd:L_SHIPINSTRUCT, re:__sql_inline_or_7, rf:__prod_ret__45 *
     if 0 < __sql_inline_or_7 then 1 else 0};
     _accmap)))) empty { ra:real, rb:string, rc:int, rd:string, re:int, rf:real
    } @ { Collection }).fold ((\__accv_3 -> (\b3 -> bind b3 as {ra:L_QUANTITY,
    rb:L_SHIPMODE, rc:L_PARTKEY, rd:L_SHIPINSTRUCT, re:__sql_inline_or_7,
    rf:__prod_ret__46} in __accv_3 + __prod_ret__46))) 0 + ((((bind
    map_REVENUE_mPART2_s2_buf as ind __x in
    (frontier_float_string_int_string_float {key:vid, value:__x}).fold
      ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_1, rd:map_2,
      re:map_3, rf:map_val} in 
      (acc.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_3, re:map_val};acc))))
      empty { ra:real, rb:string, rc:int, rd:string, re:real } @ { Collection }).fold
    ((\_accext -> (\b3 -> bind b3 as {ra:L_QUANTITY, rb:L_SHIPMODE,
    rc:L_PARTKEY, rd:L_SHIPINSTRUCT, re:__map_ret__4} in _accext.combine (({|
    key:int, value:int | let __prod_ret__59 =
    ((((if L_SHIPINSTRUCT == "DELIVER IN PERSON" then 1 else 0) *
      if PART_PARTKEY == L_PARTKEY then 1 else 0) * ((if L_SHIPMODE == "AIR"
      then 1 else 0) + if L_SHIPMODE == "AIR REG" then 1 else 0)) *
      if 1 <= PART_SIZE then 1 else 0) * (((((((if PART_BRAND == "Brand#12"
      then 1 else 0) * if PART_SIZE <= 5 then 1 else 0) * if L_QUANTITY <= 11
      then 1 else 0) * if 1 <= L_QUANTITY then 1 else 0) *
      ((((if PART_CONTAINER == "SM CASE" then 1 else 0) +
      if PART_CONTAINER == "SM BOX" then 1 else 0) +
      if PART_CONTAINER == "SM PACK" then 1 else 0) +
      if PART_CONTAINER == "SM PKG" then 1 else 0)) * 2) +
      (((((if PART_BRAND == "Brand#34" then 1 else 0) *
      ((((if PART_CONTAINER == "LG CASE" then 1 else 0) +
      if PART_CONTAINER == "LG BOX" then 1 else 0) +
      if PART_CONTAINER == "LG PACK" then 1 else 0) +
      if PART_CONTAINER == "LG PKG" then 1 else 0)) * if 20 <= L_QUANTITY
      then 1 else 0) * if L_QUANTITY <= 30 then 1 else 0) * if PART_SIZE <= 15
      then 1 else 0)) in {key:__prod_ret__59, value:1}|} @ { Collection }).fold
    ((\_accmap -> (\b3 -> bind b3 as {key:__sql_inline_or_7,
    value:__lift_ret__4} in 
    (_accmap.insert {ra:L_QUANTITY, rb:L_SHIPMODE, rc:L_PARTKEY,
     rd:L_SHIPINSTRUCT, re:__sql_inline_or_7, rf:__map_ret__4 * __lift_ret__4};
     _accmap)))) empty { ra:real, rb:string, rc:int, rd:string, re:int, rf:real
    } @ { Collection })))) empty { ra:real, rb:string, rc:int, rd:string,
    re:int, rf:real } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:L_QUANTITY, rb:L_SHIPMODE, rc:L_PARTKEY, rd:L_SHIPINSTRUCT,
    re:__sql_inline_or_7, rf:__prod_ret__60} in 
    (_accmap.insert {ra:L_QUANTITY, rb:L_SHIPMODE, rc:L_PARTKEY,
     rd:L_SHIPINSTRUCT, re:__sql_inline_or_7, rf:__prod_ret__60 *
     if 0 < __sql_inline_or_7 then 1 else 0};
     _accmap)))) empty { ra:real, rb:string, rc:int, rd:string, re:int, rf:real
    } @ { Collection }).fold ((\__accv_4 -> (\b3 -> bind b3 as {ra:L_QUANTITY,
    rb:L_SHIPMODE, rc:L_PARTKEY, rd:L_SHIPINSTRUCT, re:__sql_inline_or_7,
    rf:__prod_ret__61} in __accv_4 + __prod_ret__61))) 0 * -1) in
  ((nd_add_delta_to_float {ra:REVENUE, rb:false, rc:vid, rd:{|i:real|
      __sum_ret__18|} @ { Collection }});
   (nd_complete_stmt_cntr_check {key:vid, value:2})))


declare nd_delete_PART_do_complete_s3 : { ra:{ key:int, value:int }, rb:int,
  rc:string, rd:string, re:string, rf:string, rg:int, rh:string, ri:real,
  rj:string } -> () = (\b1 -> bind b1 as {ra:vid, rb:PART_PARTKEY,
  rc:PART_NAME, rd:PART_MFGR, re:PART_BRAND, rf:PART_TYPE, rg:PART_SIZE,
  rh:PART_CONTAINER, ri:PART_RETAILPRICE, rj:PART_COMMENT} in let __val_ret__8
  = -1 in
  ((nd_add_delta_to_string_int_string_int_int {ra:REVENUE_mLINEITEM1, rb:false,
      rc:vid, rd:{| ra:string, rb:int, rc:string, rd:int, re:int |
      {ra:PART_CONTAINER, rb:PART_SIZE, rc:PART_BRAND, rd:PART_PARTKEY,
      re:__val_ret__8}|} @ { Collection }});
   let sent_msgs =
   nd_REVENUE_mLINEITEM1_send_correctives {ra:me, rb:3, rc:vid, rd:1, re:vid,
     rf:{| ra:string, rb:int, rc:string, rd:int, re:int | {ra:PART_CONTAINER,
     rb:PART_SIZE, rc:PART_BRAND, rd:PART_PARTKEY,
     re:__val_ret__8}|} @ { Collection }} in
   if sent_msgs == 0 then ()
     else
       nd_update_stmt_cntr_corr_map {ra:vid, rb:3, rc:1, rd:sent_msgs, re:true,
         rf:true}))


declare delete_PART_do_corrective_s2_m_REVENUE_mPART1 : { ra:address, rb:int,
  rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:int,
  rg:string, rh:string, ri:string, rj:string, rk:int, rl:string, rm:real,
  rn:string, ro:collection { ra:real, rb:string, rc:int, rd:string, re:real
  } @ { Collection } } -> int = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:PART_PARTKEY, rg:PART_NAME,
  rh:PART_MFGR, ri:PART_BRAND, rj:PART_TYPE, rk:PART_SIZE, rl:PART_CONTAINER,
  rm:PART_RETAILPRICE, rn:PART_COMMENT, ro:delta_tuples} in let new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 -> bind b3 as {ra:delta_L_QUANTITY,
    rb:delta_L_SHIPMODE, rc:delta_L_PARTKEY, rd:delta_L_SHIPINSTRUCT,
    re:delta_REVENUE_mPART1} in _accext.combine (let __prod_ret__182 =
    (({| key:int, value:int | let __prod_ret__180 =
      ((((if delta_L_SHIPINSTRUCT == "DELIVER IN PERSON" then 1 else 0) *
        if PART_PARTKEY == delta_L_PARTKEY then 1 else 0) *
        ((if delta_L_SHIPMODE == "AIR" then 1 else 0) +
        if delta_L_SHIPMODE == "AIR REG" then 1 else 0)) * if 1 <= PART_SIZE
        then 1 else 0) * (((((((if PART_BRAND == "Brand#12" then 1 else 0) *
        if PART_SIZE <= 5 then 1 else 0) * if delta_L_QUANTITY <= 11 
        then 1 else 0) * if 1 <= delta_L_QUANTITY then 1 else 0) *
        ((((if PART_CONTAINER == "SM CASE" then 1 else 0) +
        if PART_CONTAINER == "SM BOX" then 1 else 0) +
        if PART_CONTAINER == "SM PACK" then 1 else 0) +
        if PART_CONTAINER == "SM PKG" then 1 else 0)) * 2) +
        (((((if PART_BRAND == "Brand#34" then 1 else 0) *
        ((((if PART_CONTAINER == "LG CASE" then 1 else 0) +
        if PART_CONTAINER == "LG BOX" then 1 else 0) +
        if PART_CONTAINER == "LG PACK" then 1 else 0) +
        if PART_CONTAINER == "LG PKG" then 1 else 0)) *
        if 20 <= delta_L_QUANTITY then 1 else 0) * if delta_L_QUANTITY <= 30
        then 1 else 0) * if PART_SIZE <= 15 then 1 else 0)) in
      {key:__prod_ret__180, value:1}|} @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {key:__sql_inline_or_7, value:__lift_ret__11} in 
      (_accmap.insert {key:__sql_inline_or_7, value:__lift_ret__11 *
       if 0 < __sql_inline_or_7 then 1 else 0};
       _accmap)))) empty { key:int, value:int } @ { Collection }).fold
      ((\__accv_11 -> (\b3 -> bind b3 as {key:__sql_inline_or_7,
      value:__prod_ret__181} in __accv_11 + __prod_ret__181))) 0 *
      delta_REVENUE_mPART1 in {|i:real| __prod_ret__182|} @ { Collection }))))
    empty {i:real} @ { Collection }).filter ((\b1 -> bind b1 as {i:map_val} in 
    0 != map_val)) in
  ((nd_add_delta_to_float {ra:REVENUE, rb:true, rc:vid, rd:new_tuples});0))


declare delete_PART_do_corrective_s2_m_REVENUE_mPART2 : { ra:address, rb:int,
  rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:int,
  rg:string, rh:string, ri:string, rj:string, rk:int, rl:string, rm:real,
  rn:string, ro:collection { ra:real, rb:string, rc:int, rd:string, re:real
  } @ { Collection } } -> int = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:PART_PARTKEY, rg:PART_NAME,
  rh:PART_MFGR, ri:PART_BRAND, rj:PART_TYPE, rk:PART_SIZE, rl:PART_CONTAINER,
  rm:PART_RETAILPRICE, rn:PART_COMMENT, ro:delta_tuples} in let new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 -> bind b3 as {ra:delta_L_QUANTITY,
    rb:delta_L_SHIPMODE, rc:delta_L_PARTKEY, rd:delta_L_SHIPINSTRUCT,
    re:delta_REVENUE_mPART2} in _accext.combine (let __prod_ret__198 =
    (({| key:int, value:int | let __prod_ret__195 =
      ((((if delta_L_SHIPINSTRUCT == "DELIVER IN PERSON" then 1 else 0) *
        if PART_PARTKEY == delta_L_PARTKEY then 1 else 0) *
        ((if delta_L_SHIPMODE == "AIR" then 1 else 0) +
        if delta_L_SHIPMODE == "AIR REG" then 1 else 0)) * if 1 <= PART_SIZE
        then 1 else 0) * (((((((if PART_BRAND == "Brand#12" then 1 else 0) *
        if PART_SIZE <= 5 then 1 else 0) * if delta_L_QUANTITY <= 11 
        then 1 else 0) * if 1 <= delta_L_QUANTITY then 1 else 0) *
        ((((if PART_CONTAINER == "SM CASE" then 1 else 0) +
        if PART_CONTAINER == "SM BOX" then 1 else 0) +
        if PART_CONTAINER == "SM PACK" then 1 else 0) +
        if PART_CONTAINER == "SM PKG" then 1 else 0)) * 2) +
        (((((if PART_BRAND == "Brand#34" then 1 else 0) *
        ((((if PART_CONTAINER == "LG CASE" then 1 else 0) +
        if PART_CONTAINER == "LG BOX" then 1 else 0) +
        if PART_CONTAINER == "LG PACK" then 1 else 0) +
        if PART_CONTAINER == "LG PKG" then 1 else 0)) *
        if 20 <= delta_L_QUANTITY then 1 else 0) * if delta_L_QUANTITY <= 30
        then 1 else 0) * if PART_SIZE <= 15 then 1 else 0)) in
      {key:__prod_ret__195, value:1}|} @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {key:__sql_inline_or_7, value:__lift_ret__12} in 
      (_accmap.insert {key:__sql_inline_or_7, value:__lift_ret__12 *
       if 0 < __sql_inline_or_7 then 1 else 0};
       _accmap)))) empty { key:int, value:int } @ { Collection }).fold
      ((\__accv_12 -> (\b3 -> bind b3 as {key:__sql_inline_or_7,
      value:__prod_ret__196} in __accv_12 + __prod_ret__196))) 0 *
      -delta_REVENUE_mPART2 in {|i:real| __prod_ret__198|} @ { Collection }))))
    empty {i:real} @ { Collection }).filter ((\b1 -> bind b1 as {i:map_val} in 
    0 != map_val)) in
  ((nd_add_delta_to_float {ra:REVENUE, rb:true, rc:vid, rd:new_tuples});0))


declare sw_insert_LINEITEM : { ra:int, rb:int, rc:int, rd:int, re:real,
  rf:real, rg:real, rh:real, ri:string, rj:string, rk:int, rl:int, rm:int,
  rn:string, ro:string, rp:string } -> () = (\args ->
  (sw_buf_insert_LINEITEM.insert args;
   sw_trig_buf_idx.insert {i:2};
   sw_need_vid_cntr = sw_need_vid_cntr + 1))


declare sw_insert_LINEITEM_send_fetch : { key:int, value:int } -> () = (\vid ->
  case (sw_buf_insert_LINEITEM.peek ()) of
  {Some args ->
    (sw_buf_insert_LINEITEM.erase args;
     bind args as
     {ra:LINEITEM_ORDERKEY, rb:LINEITEM_PARTKEY, rc:LINEITEM_SUPPKEY, rd:LINEITEM_LINENUMBER, re:LINEITEM_QUANTITY, rf:LINEITEM_EXTENDEDPRICE, rg:LINEITEM_DISCOUNT, rh:LINEITEM_TAX, ri:LINEITEM_RETURNFLAG, rj:LINEITEM_LINESTATUS, rk:LINEITEM_SHIPDATE, rl:LINEITEM_COMMITDATE, rm:LINEITEM_RECEIPTDATE, rn:LINEITEM_SHIPINSTRUCT, ro:LINEITEM_SHIPMODE, rp:LINEITEM_COMMENT}
     in
     ((route_to_float_string_int_string {ra:2, rb:Some LINEITEM_QUANTITY,
         rc:Some LINEITEM_SHIPMODE, rd:Some LINEITEM_PARTKEY,
         re:Some LINEITEM_SHIPINSTRUCT}).iterate ((\b1 -> bind b1 as {i:ip} in 
      (nd_insert_LINEITEM_do_complete_s5_trig, ip)<- {ra:vid,
      rb:LINEITEM_ORDERKEY, rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY,
      re:LINEITEM_LINENUMBER, rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE,
      rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG,
      rk:LINEITEM_LINESTATUS, rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE,
      rn:LINEITEM_RECEIPTDATE, ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE,
      rq:LINEITEM_COMMENT}));
      (route_to_float_string_int_string {ra:3, rb:Some LINEITEM_QUANTITY,
         rc:Some LINEITEM_SHIPMODE, rd:Some LINEITEM_PARTKEY,
         re:Some LINEITEM_SHIPINSTRUCT}).iterate ((\b1 -> bind b1 as {i:ip} in 
      (nd_insert_LINEITEM_do_complete_s6_trig, ip)<- {ra:vid,
      rb:LINEITEM_ORDERKEY, rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY,
      re:LINEITEM_LINENUMBER, rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE,
      rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG,
      rk:LINEITEM_LINESTATUS, rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE,
      rn:LINEITEM_RECEIPTDATE, ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE,
      rq:LINEITEM_COMMENT}));
      ((((empty { ra:address, rb:int, rc:int } @ { Collection }).combine (let
      sender_count =
      (route_to_string_int_string_int {ra:4, rb:None immut, rc:None immut,
         rd:None immut, re:None immut}).fold ((\count -> (\b3 ->
        bind b3 as {i:ip} in count + 1))) 0 in
      (shuffle_REVENUE_mLINEITEM1_to_REVENUE {ra:(), rb:empty { ra:{ key:int,
         value:int }, rb:string, rc:int, rd:string, re:int, rf:int
         } @ { Collection }, rc:true}).fold ((\_accmap -> (\b3 ->
        bind b3 as {key:ip, value:tuples} in 
        (_accmap.insert {ra:ip, rb:4, rc:sender_count};_accmap)))) empty {
        ra:address, rb:int, rc:int } @ { Collection })).groupBy ((\b1 ->
      bind b1 as {ra:ip, rb:stmt_id, rc:count} in {key:ip, value:stmt_id}))
      ((\acc -> (\b3 -> bind b3 as {ra:ip, rb:stmt_id, rc:count} in acc +
      count))) 0).groupBy ((\b1 -> bind b1 as {key:b2, value:count} in 
      bind b2 as {key:ip, value:stmt_id} in ip)) ((\acc -> (\b3 ->
      bind b3 as {key:ip_and_stmt_id, value:count} in bind ip_and_stmt_id as
      {key:ip, value:stmt_id} in
      acc.combine ({| key:int, value:int | {key:stmt_id,
        value:count}|} @ { Collection })))) empty { key:int, value:int
      } @ { Collection }).iterate ((\b1 -> bind b1 as {key:addr,
      value:stmt_cnt_list} in 
      ((nd_insert_LINEITEM_rcv_put, addr)<- {ra:me, rb:stmt_cnt_list, rc:vid,
       rd:LINEITEM_ORDERKEY, re:LINEITEM_PARTKEY, rf:LINEITEM_SUPPKEY,
       rg:LINEITEM_LINENUMBER, rh:LINEITEM_QUANTITY, ri:LINEITEM_EXTENDEDPRICE,
       rj:LINEITEM_DISCOUNT, rk:LINEITEM_TAX, rl:LINEITEM_RETURNFLAG,
       rm:LINEITEM_LINESTATUS, rn:LINEITEM_SHIPDATE, ro:LINEITEM_COMMITDATE,
       rp:LINEITEM_RECEIPTDATE, rq:LINEITEM_SHIPINSTRUCT, rr:LINEITEM_SHIPMODE,
       rs:LINEITEM_COMMENT};
       (sw_num_sent = sw_num_sent + 1;
        (case ((sw_ack_log.filter ((\b1 -> bind b1 as {key:key,
        value:value} in key == vid))).peek ()) of
        {Some x -> sw_ack_log.update x {key:vid, value:x.value + 1}}{None ->
                                                                    sw_ack_log.insert
                                                                    {key:vid,
                                                                    value:1}})))));
      ((((route_to_string_int_string_int {ra:4, rb:None immut, rc:None immut,
            rd:None immut, re:None immut}).fold ((\_accmap -> (\b3 ->
      bind b3 as {i:ip} in (_accmap.insert {ra:4, rb:4, rc:ip};_accmap))))
      empty { ra:int, rb:int, rc:address } @ { Collection }).combine empty {
      ra:int, rb:int, rc:address } @ { Collection }).groupBy ((\b1 ->
      bind b1 as {ra:stmt_id, rb:map_id, rc:ip} in ip)) ((\acc -> (\b3 ->
      bind b3 as {ra:stmt_id, rb:map_id, rc:ip} in 
      (acc.insert {key:stmt_id, value:map_id};acc)))) empty { key:int,
      value:int } @ { Collection }).iterate ((\b1 -> bind b1 as {key:ip,
      value:stmt_map_ids} in 
      (nd_insert_LINEITEM_rcv_fetch, ip)<- {ra:stmt_map_ids, rb:vid,
      rc:LINEITEM_ORDERKEY, rd:LINEITEM_PARTKEY, re:LINEITEM_SUPPKEY,
      rf:LINEITEM_LINENUMBER, rg:LINEITEM_QUANTITY, rh:LINEITEM_EXTENDEDPRICE,
      ri:LINEITEM_DISCOUNT, rj:LINEITEM_TAX, rk:LINEITEM_RETURNFLAG,
      rl:LINEITEM_LINESTATUS, rm:LINEITEM_SHIPDATE, rn:LINEITEM_COMMITDATE,
      ro:LINEITEM_RECEIPTDATE, rp:LINEITEM_SHIPINSTRUCT, rq:LINEITEM_SHIPMODE,
      rr:LINEITEM_COMMENT}))))}{None ->
                                 error
                                   (print
                                      "unexpected missing arguments in sw_buf_insert_LINEITEM")})


declare nd_insert_LINEITEM_do_complete_s4 : { ra:{ key:int, value:int },
  rb:int, rc:int, rd:int, re:int, rf:real, rg:real, rh:real, ri:real,
  rj:string, rk:string, rl:int, rm:int, rn:int, ro:string, rp:string, rq:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:LINEITEM_ORDERKEY,
  rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
  rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
  ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
  rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
  ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT} in let
  __prod_ret__80 =
  ((((bind map_REVENUE_mLINEITEM1_s4_buf as ind __x in
    (frontier_string_int_string_int_int {key:vid, value:__x}).fold ((\acc ->
      (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
      rf:map_val} in 
      (acc.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_3, re:map_val};acc))))
      empty { ra:string, rb:int, rc:string, rd:int, re:int } @ { Collection }).fold
    ((\_accext -> (\b3 -> bind b3 as {ra:P_CONTAINER, rb:P_SIZE, rc:P_BRAND,
    rd:P_PARTKEY, re:__map_ret__5} in _accext.combine (({| key:int, value:int |
    let __prod_ret__75 =
    ((((if LINEITEM_SHIPINSTRUCT == "DELIVER IN PERSON" then 1 else 0) *
      if P_PARTKEY == LINEITEM_PARTKEY then 1 else 0) *
      ((if LINEITEM_SHIPMODE == "AIR" then 1 else 0) +
      if LINEITEM_SHIPMODE == "AIR REG" then 1 else 0)) * if 1 <= P_SIZE 
      then 1 else 0) * (((((((if P_BRAND == "Brand#12" then 1 else 0) *
      if P_SIZE <= 5 then 1 else 0) * if LINEITEM_QUANTITY <= 11 then 1 
      else 0) * if 1 <= LINEITEM_QUANTITY then 1 else 0) *
      ((((if P_CONTAINER == "SM CASE" then 1 else 0) +
      if P_CONTAINER == "SM BOX" then 1 else 0) + if P_CONTAINER == "SM PACK"
      then 1 else 0) + if P_CONTAINER == "SM PKG" then 1 else 0)) * 2) +
      (((((if P_BRAND == "Brand#34" then 1 else 0) *
      ((((if P_CONTAINER == "LG CASE" then 1 else 0) +
      if P_CONTAINER == "LG BOX" then 1 else 0) + if P_CONTAINER == "LG PACK"
      then 1 else 0) + if P_CONTAINER == "LG PKG" then 1 else 0)) *
      if 20 <= LINEITEM_QUANTITY then 1 else 0) * if LINEITEM_QUANTITY <= 30
      then 1 else 0) * if P_SIZE <= 15 then 1 else 0)) in
    {key:__prod_ret__75, value:1}|} @ { Collection }).fold ((\_accmap ->
    (\b3 -> bind b3 as {key:__sql_inline_or_7, value:__lift_ret__5} in 
    (_accmap.insert {ra:P_CONTAINER, rb:P_SIZE, rc:P_BRAND, rd:P_PARTKEY,
     re:__sql_inline_or_7, rf:__map_ret__5 * __lift_ret__5};
     _accmap)))) empty { ra:string, rb:int, rc:string, rd:int, re:int, rf:int
    } @ { Collection })))) empty { ra:string, rb:int, rc:string, rd:int,
    re:int, rf:int } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:P_CONTAINER, rb:P_SIZE, rc:P_BRAND, rd:P_PARTKEY,
    re:__sql_inline_or_7, rf:__prod_ret__76} in 
    (_accmap.insert {ra:P_CONTAINER, rb:P_SIZE, rc:P_BRAND, rd:P_PARTKEY,
     re:__sql_inline_or_7, rf:__prod_ret__76 * if 0 < __sql_inline_or_7 
     then 1 else 0};
     _accmap)))) empty { ra:string, rb:int, rc:string, rd:int, re:int, rf:int
    } @ { Collection }).fold ((\__accv_5 -> (\b3 -> bind b3 as {ra:P_CONTAINER,
    rb:P_SIZE, rc:P_BRAND, rd:P_PARTKEY, re:__sql_inline_or_7,
    rf:__prod_ret__77} in __accv_5 + __prod_ret__77))) 0 * (-LINEITEM_DISCOUNT
    + 1)) * LINEITEM_EXTENDEDPRICE in
  ((nd_add_delta_to_float {ra:REVENUE, rb:false, rc:vid, rd:{|i:real|
      __prod_ret__80|} @ { Collection }});
   (nd_complete_stmt_cntr_check {key:vid, value:4})))


declare nd_insert_LINEITEM_do_complete_s5 : { ra:{ key:int, value:int },
  rb:int, rc:int, rd:int, re:int, rf:real, rg:real, rh:real, ri:real,
  rj:string, rk:string, rl:int, rm:int, rn:int, ro:string, rp:string, rq:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:LINEITEM_ORDERKEY,
  rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
  rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
  ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
  rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
  ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT} in let
  __prod_ret__81 = LINEITEM_DISCOUNT * LINEITEM_EXTENDEDPRICE in
  ((nd_add_delta_to_float_string_int_string_float {ra:REVENUE_mPART1, rb:false,
      rc:vid, rd:{| ra:real, rb:string, rc:int, rd:string, re:real |
      {ra:LINEITEM_QUANTITY, rb:LINEITEM_SHIPMODE, rc:LINEITEM_PARTKEY,
      rd:LINEITEM_SHIPINSTRUCT, re:__prod_ret__81}|} @ { Collection }});
   let sent_msgs =
   nd_REVENUE_mPART1_send_correctives {ra:me, rb:5, rc:vid, rd:1, re:vid, rf:{|
     ra:real, rb:string, rc:int, rd:string, re:real | {ra:LINEITEM_QUANTITY,
     rb:LINEITEM_SHIPMODE, rc:LINEITEM_PARTKEY, rd:LINEITEM_SHIPINSTRUCT,
     re:__prod_ret__81}|} @ { Collection }} in
   if sent_msgs == 0 then ()
     else
       nd_update_stmt_cntr_corr_map {ra:vid, rb:5, rc:1, rd:sent_msgs, re:true,
         rf:true}))


declare nd_insert_LINEITEM_do_complete_s6 : { ra:{ key:int, value:int },
  rb:int, rc:int, rd:int, re:int, rf:real, rg:real, rh:real, ri:real,
  rj:string, rk:string, rl:int, rm:int, rn:int, ro:string, rp:string, rq:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:LINEITEM_ORDERKEY,
  rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
  rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
  ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
  rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
  ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT} in let
  __val_ret__16 = LINEITEM_EXTENDEDPRICE in
  ((nd_add_delta_to_float_string_int_string_float {ra:REVENUE_mPART2, rb:false,
      rc:vid, rd:{| ra:real, rb:string, rc:int, rd:string, re:real |
      {ra:LINEITEM_QUANTITY, rb:LINEITEM_SHIPMODE, rc:LINEITEM_PARTKEY,
      rd:LINEITEM_SHIPINSTRUCT, re:__val_ret__16}|} @ { Collection }});
   let sent_msgs =
   nd_REVENUE_mPART2_send_correctives {ra:me, rb:6, rc:vid, rd:1, re:vid, rf:{|
     ra:real, rb:string, rc:int, rd:string, re:real | {ra:LINEITEM_QUANTITY,
     rb:LINEITEM_SHIPMODE, rc:LINEITEM_PARTKEY, rd:LINEITEM_SHIPINSTRUCT,
     re:__val_ret__16}|} @ { Collection }} in
   if sent_msgs == 0 then ()
     else
       nd_update_stmt_cntr_corr_map {ra:vid, rb:6, rc:1, rd:sent_msgs, re:true,
         rf:true}))


declare insert_LINEITEM_do_corrective_s4_m_REVENUE_mLINEITEM1 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:int,
  rg:int, rh:int, ri:int, rj:real, rk:real, rl:real, rm:real, rn:string,
  ro:string, rp:int, rq:int, rr:int, rs:string, rt:string, ru:string,
  rv:collection { ra:string, rb:int, rc:string, rd:int, re:int
  } @ { Collection } } -> int = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:LINEITEM_ORDERKEY,
  rg:LINEITEM_PARTKEY, rh:LINEITEM_SUPPKEY, ri:LINEITEM_LINENUMBER,
  rj:LINEITEM_QUANTITY, rk:LINEITEM_EXTENDEDPRICE, rl:LINEITEM_DISCOUNT,
  rm:LINEITEM_TAX, rn:LINEITEM_RETURNFLAG, ro:LINEITEM_LINESTATUS,
  rp:LINEITEM_SHIPDATE, rq:LINEITEM_COMMITDATE, rr:LINEITEM_RECEIPTDATE,
  rs:LINEITEM_SHIPINSTRUCT, rt:LINEITEM_SHIPMODE, ru:LINEITEM_COMMENT,
  rv:delta_tuples} in let new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 -> bind b3 as {ra:delta_P_CONTAINER,
    rb:delta_P_SIZE, rc:delta_P_BRAND, rd:delta_P_PARTKEY,
    re:delta_REVENUE_mLINEITEM1} in _accext.combine (let __prod_ret__119 =
    (((({| key:int, value:int | let __prod_ret__114 =
      ((((if LINEITEM_SHIPINSTRUCT == "DELIVER IN PERSON" then 1 else 0) *
        if delta_P_PARTKEY == LINEITEM_PARTKEY then 1 else 0) *
        ((if LINEITEM_SHIPMODE == "AIR" then 1 else 0) +
        if LINEITEM_SHIPMODE == "AIR REG" then 1 else 0)) *
        if 1 <= delta_P_SIZE then 1 else 0) *
        (((((((if delta_P_BRAND == "Brand#12" then 1 else 0) *
        if delta_P_SIZE <= 5 then 1 else 0) * if LINEITEM_QUANTITY <= 11 
        then 1 else 0) * if 1 <= LINEITEM_QUANTITY then 1 else 0) *
        ((((if delta_P_CONTAINER == "SM CASE" then 1 else 0) +
        if delta_P_CONTAINER == "SM BOX" then 1 else 0) +
        if delta_P_CONTAINER == "SM PACK" then 1 else 0) +
        if delta_P_CONTAINER == "SM PKG" then 1 else 0)) * 2) +
        (((((if delta_P_BRAND == "Brand#34" then 1 else 0) *
        ((((if delta_P_CONTAINER == "LG CASE" then 1 else 0) +
        if delta_P_CONTAINER == "LG BOX" then 1 else 0) +
        if delta_P_CONTAINER == "LG PACK" then 1 else 0) +
        if delta_P_CONTAINER == "LG PKG" then 1 else 0)) *
        if 20 <= LINEITEM_QUANTITY then 1 else 0) * if LINEITEM_QUANTITY <= 30
        then 1 else 0) * if delta_P_SIZE <= 15 then 1 else 0)) in
      {key:__prod_ret__114, value:1}|} @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {key:__sql_inline_or_7, value:__lift_ret__7} in 
      (_accmap.insert {key:__sql_inline_or_7, value:__lift_ret__7 *
       if 0 < __sql_inline_or_7 then 1 else 0};
       _accmap)))) empty { key:int, value:int } @ { Collection }).fold
      ((\__accv_7 -> (\b3 -> bind b3 as {key:__sql_inline_or_7,
      value:__prod_ret__115} in __accv_7 + __prod_ret__115))) 0 *
      (-LINEITEM_DISCOUNT + 1)) * delta_REVENUE_mLINEITEM1) *
      LINEITEM_EXTENDEDPRICE in
    {|i:real| __prod_ret__119|} @ { Collection }))))
    empty {i:real} @ { Collection }).filter ((\b1 -> bind b1 as {i:map_val} in 
    0 != map_val)) in
  ((nd_add_delta_to_float {ra:REVENUE, rb:true, rc:vid, rd:new_tuples});0))


declare sw_delete_LINEITEM : { ra:int, rb:int, rc:int, rd:int, re:real,
  rf:real, rg:real, rh:real, ri:string, rj:string, rk:int, rl:int, rm:int,
  rn:string, ro:string, rp:string } -> () = (\args ->
  (sw_buf_delete_LINEITEM.insert args;
   sw_trig_buf_idx.insert {i:3};
   sw_need_vid_cntr = sw_need_vid_cntr + 1))


declare sw_delete_LINEITEM_send_fetch : { key:int, value:int } -> () = (\vid ->
  case (sw_buf_delete_LINEITEM.peek ()) of
  {Some args ->
    (sw_buf_delete_LINEITEM.erase args;
     bind args as
     {ra:LINEITEM_ORDERKEY, rb:LINEITEM_PARTKEY, rc:LINEITEM_SUPPKEY, rd:LINEITEM_LINENUMBER, re:LINEITEM_QUANTITY, rf:LINEITEM_EXTENDEDPRICE, rg:LINEITEM_DISCOUNT, rh:LINEITEM_TAX, ri:LINEITEM_RETURNFLAG, rj:LINEITEM_LINESTATUS, rk:LINEITEM_SHIPDATE, rl:LINEITEM_COMMITDATE, rm:LINEITEM_RECEIPTDATE, rn:LINEITEM_SHIPINSTRUCT, ro:LINEITEM_SHIPMODE, rp:LINEITEM_COMMENT}
     in
     ((route_to_float_string_int_string {ra:2, rb:Some LINEITEM_QUANTITY,
         rc:Some LINEITEM_SHIPMODE, rd:Some LINEITEM_PARTKEY,
         re:Some LINEITEM_SHIPINSTRUCT}).iterate ((\b1 -> bind b1 as {i:ip} in 
      (nd_delete_LINEITEM_do_complete_s8_trig, ip)<- {ra:vid,
      rb:LINEITEM_ORDERKEY, rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY,
      re:LINEITEM_LINENUMBER, rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE,
      rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG,
      rk:LINEITEM_LINESTATUS, rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE,
      rn:LINEITEM_RECEIPTDATE, ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE,
      rq:LINEITEM_COMMENT}));
      (route_to_float_string_int_string {ra:3, rb:Some LINEITEM_QUANTITY,
         rc:Some LINEITEM_SHIPMODE, rd:Some LINEITEM_PARTKEY,
         re:Some LINEITEM_SHIPINSTRUCT}).iterate ((\b1 -> bind b1 as {i:ip} in 
      (nd_delete_LINEITEM_do_complete_s9_trig, ip)<- {ra:vid,
      rb:LINEITEM_ORDERKEY, rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY,
      re:LINEITEM_LINENUMBER, rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE,
      rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG,
      rk:LINEITEM_LINESTATUS, rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE,
      rn:LINEITEM_RECEIPTDATE, ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE,
      rq:LINEITEM_COMMENT}));
      ((((empty { ra:address, rb:int, rc:int } @ { Collection }).combine (let
      sender_count =
      (route_to_string_int_string_int {ra:4, rb:None immut, rc:None immut,
         rd:None immut, re:None immut}).fold ((\count -> (\b3 ->
        bind b3 as {i:ip} in count + 1))) 0 in
      (shuffle_REVENUE_mLINEITEM1_to_REVENUE {ra:(), rb:empty { ra:{ key:int,
         value:int }, rb:string, rc:int, rd:string, re:int, rf:int
         } @ { Collection }, rc:true}).fold ((\_accmap -> (\b3 ->
        bind b3 as {key:ip, value:tuples} in 
        (_accmap.insert {ra:ip, rb:7, rc:sender_count};_accmap)))) empty {
        ra:address, rb:int, rc:int } @ { Collection })).groupBy ((\b1 ->
      bind b1 as {ra:ip, rb:stmt_id, rc:count} in {key:ip, value:stmt_id}))
      ((\acc -> (\b3 -> bind b3 as {ra:ip, rb:stmt_id, rc:count} in acc +
      count))) 0).groupBy ((\b1 -> bind b1 as {key:b2, value:count} in 
      bind b2 as {key:ip, value:stmt_id} in ip)) ((\acc -> (\b3 ->
      bind b3 as {key:ip_and_stmt_id, value:count} in bind ip_and_stmt_id as
      {key:ip, value:stmt_id} in
      acc.combine ({| key:int, value:int | {key:stmt_id,
        value:count}|} @ { Collection })))) empty { key:int, value:int
      } @ { Collection }).iterate ((\b1 -> bind b1 as {key:addr,
      value:stmt_cnt_list} in 
      ((nd_delete_LINEITEM_rcv_put, addr)<- {ra:me, rb:stmt_cnt_list, rc:vid,
       rd:LINEITEM_ORDERKEY, re:LINEITEM_PARTKEY, rf:LINEITEM_SUPPKEY,
       rg:LINEITEM_LINENUMBER, rh:LINEITEM_QUANTITY, ri:LINEITEM_EXTENDEDPRICE,
       rj:LINEITEM_DISCOUNT, rk:LINEITEM_TAX, rl:LINEITEM_RETURNFLAG,
       rm:LINEITEM_LINESTATUS, rn:LINEITEM_SHIPDATE, ro:LINEITEM_COMMITDATE,
       rp:LINEITEM_RECEIPTDATE, rq:LINEITEM_SHIPINSTRUCT, rr:LINEITEM_SHIPMODE,
       rs:LINEITEM_COMMENT};
       (sw_num_sent = sw_num_sent + 1;
        (case ((sw_ack_log.filter ((\b1 -> bind b1 as {key:key,
        value:value} in key == vid))).peek ()) of
        {Some x -> sw_ack_log.update x {key:vid, value:x.value + 1}}{None ->
                                                                    sw_ack_log.insert
                                                                    {key:vid,
                                                                    value:1}})))));
      ((((route_to_string_int_string_int {ra:4, rb:None immut, rc:None immut,
            rd:None immut, re:None immut}).fold ((\_accmap -> (\b3 ->
      bind b3 as {i:ip} in (_accmap.insert {ra:7, rb:4, rc:ip};_accmap))))
      empty { ra:int, rb:int, rc:address } @ { Collection }).combine empty {
      ra:int, rb:int, rc:address } @ { Collection }).groupBy ((\b1 ->
      bind b1 as {ra:stmt_id, rb:map_id, rc:ip} in ip)) ((\acc -> (\b3 ->
      bind b3 as {ra:stmt_id, rb:map_id, rc:ip} in 
      (acc.insert {key:stmt_id, value:map_id};acc)))) empty { key:int,
      value:int } @ { Collection }).iterate ((\b1 -> bind b1 as {key:ip,
      value:stmt_map_ids} in 
      (nd_delete_LINEITEM_rcv_fetch, ip)<- {ra:stmt_map_ids, rb:vid,
      rc:LINEITEM_ORDERKEY, rd:LINEITEM_PARTKEY, re:LINEITEM_SUPPKEY,
      rf:LINEITEM_LINENUMBER, rg:LINEITEM_QUANTITY, rh:LINEITEM_EXTENDEDPRICE,
      ri:LINEITEM_DISCOUNT, rj:LINEITEM_TAX, rk:LINEITEM_RETURNFLAG,
      rl:LINEITEM_LINESTATUS, rm:LINEITEM_SHIPDATE, rn:LINEITEM_COMMITDATE,
      ro:LINEITEM_RECEIPTDATE, rp:LINEITEM_SHIPINSTRUCT, rq:LINEITEM_SHIPMODE,
      rr:LINEITEM_COMMENT}))))}{None ->
                                 error
                                   (print
                                      "unexpected missing arguments in sw_buf_delete_LINEITEM")})


declare nd_delete_LINEITEM_do_complete_s7 : { ra:{ key:int, value:int },
  rb:int, rc:int, rd:int, re:int, rf:real, rg:real, rh:real, ri:real,
  rj:string, rk:string, rl:int, rm:int, rn:int, ro:string, rp:string, rq:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:LINEITEM_ORDERKEY,
  rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
  rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
  ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
  rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
  ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT} in let
  __prod_ret__98 =
  ((((bind map_REVENUE_mLINEITEM1_s7_buf as ind __x in
    (frontier_string_int_string_int_int {key:vid, value:__x}).fold ((\acc ->
      (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
      rf:map_val} in 
      (acc.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_3, re:map_val};acc))))
      empty { ra:string, rb:int, rc:string, rd:int, re:int } @ { Collection }).fold
    ((\_accext -> (\b3 -> bind b3 as {ra:P_CONTAINER, rb:P_SIZE, rc:P_BRAND,
    rd:P_PARTKEY, re:__map_ret__6} in _accext.combine (({| key:int, value:int |
    let __prod_ret__94 =
    ((((if LINEITEM_SHIPINSTRUCT == "DELIVER IN PERSON" then 1 else 0) *
      if P_PARTKEY == LINEITEM_PARTKEY then 1 else 0) *
      ((if LINEITEM_SHIPMODE == "AIR" then 1 else 0) +
      if LINEITEM_SHIPMODE == "AIR REG" then 1 else 0)) * if 1 <= P_SIZE 
      then 1 else 0) * (((((((if P_BRAND == "Brand#12" then 1 else 0) *
      if P_SIZE <= 5 then 1 else 0) * if LINEITEM_QUANTITY <= 11 then 1 
      else 0) * if 1 <= LINEITEM_QUANTITY then 1 else 0) *
      ((((if P_CONTAINER == "SM CASE" then 1 else 0) +
      if P_CONTAINER == "SM BOX" then 1 else 0) + if P_CONTAINER == "SM PACK"
      then 1 else 0) + if P_CONTAINER == "SM PKG" then 1 else 0)) * 2) +
      (((((if P_BRAND == "Brand#34" then 1 else 0) *
      ((((if P_CONTAINER == "LG CASE" then 1 else 0) +
      if P_CONTAINER == "LG BOX" then 1 else 0) + if P_CONTAINER == "LG PACK"
      then 1 else 0) + if P_CONTAINER == "LG PKG" then 1 else 0)) *
      if 20 <= LINEITEM_QUANTITY then 1 else 0) * if LINEITEM_QUANTITY <= 30
      then 1 else 0) * if P_SIZE <= 15 then 1 else 0)) in
    {key:__prod_ret__94, value:1}|} @ { Collection }).fold ((\_accmap ->
    (\b3 -> bind b3 as {key:__sql_inline_or_7, value:__lift_ret__6} in 
    (_accmap.insert {ra:P_CONTAINER, rb:P_SIZE, rc:P_BRAND, rd:P_PARTKEY,
     re:__sql_inline_or_7, rf:__map_ret__6 * __lift_ret__6};
     _accmap)))) empty { ra:string, rb:int, rc:string, rd:int, re:int, rf:int
    } @ { Collection })))) empty { ra:string, rb:int, rc:string, rd:int,
    re:int, rf:int } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:P_CONTAINER, rb:P_SIZE, rc:P_BRAND, rd:P_PARTKEY,
    re:__sql_inline_or_7, rf:__prod_ret__95} in 
    (_accmap.insert {ra:P_CONTAINER, rb:P_SIZE, rc:P_BRAND, rd:P_PARTKEY,
     re:__sql_inline_or_7, rf:__prod_ret__95 * if 0 < __sql_inline_or_7 
     then 1 else 0};
     _accmap)))) empty { ra:string, rb:int, rc:string, rd:int, re:int, rf:int
    } @ { Collection }).fold ((\__accv_6 -> (\b3 -> bind b3 as {ra:P_CONTAINER,
    rb:P_SIZE, rc:P_BRAND, rd:P_PARTKEY, re:__sql_inline_or_7,
    rf:__prod_ret__96} in __accv_6 + __prod_ret__96))) 0 *
    LINEITEM_EXTENDEDPRICE) * (-1 + LINEITEM_DISCOUNT) in
  ((nd_add_delta_to_float {ra:REVENUE, rb:false, rc:vid, rd:{|i:real|
      __prod_ret__98|} @ { Collection }});
   (nd_complete_stmt_cntr_check {key:vid, value:7})))


declare nd_delete_LINEITEM_do_complete_s8 : { ra:{ key:int, value:int },
  rb:int, rc:int, rd:int, re:int, rf:real, rg:real, rh:real, ri:real,
  rj:string, rk:string, rl:int, rm:int, rn:int, ro:string, rp:string, rq:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:LINEITEM_ORDERKEY,
  rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
  rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
  ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
  rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
  ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT} in let
  __prod_ret__100 = -LINEITEM_DISCOUNT * LINEITEM_EXTENDEDPRICE in
  ((nd_add_delta_to_float_string_int_string_float {ra:REVENUE_mPART1, rb:false,
      rc:vid, rd:{| ra:real, rb:string, rc:int, rd:string, re:real |
      {ra:LINEITEM_QUANTITY, rb:LINEITEM_SHIPMODE, rc:LINEITEM_PARTKEY,
      rd:LINEITEM_SHIPINSTRUCT, re:__prod_ret__100}|} @ { Collection }});
   let sent_msgs =
   nd_REVENUE_mPART1_send_correctives {ra:me, rb:8, rc:vid, rd:1, re:vid, rf:{|
     ra:real, rb:string, rc:int, rd:string, re:real | {ra:LINEITEM_QUANTITY,
     rb:LINEITEM_SHIPMODE, rc:LINEITEM_PARTKEY, rd:LINEITEM_SHIPINSTRUCT,
     re:__prod_ret__100}|} @ { Collection }} in
   if sent_msgs == 0 then ()
     else
       nd_update_stmt_cntr_corr_map {ra:vid, rb:8, rc:1, rd:sent_msgs, re:true,
         rf:true}))


declare nd_delete_LINEITEM_do_complete_s9 : { ra:{ key:int, value:int },
  rb:int, rc:int, rd:int, re:int, rf:real, rg:real, rh:real, ri:real,
  rj:string, rk:string, rl:int, rm:int, rn:int, ro:string, rp:string, rq:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:LINEITEM_ORDERKEY,
  rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
  rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
  ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
  rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
  ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT} in let
  __prod_ret__101 = -LINEITEM_EXTENDEDPRICE in
  ((nd_add_delta_to_float_string_int_string_float {ra:REVENUE_mPART2, rb:false,
      rc:vid, rd:{| ra:real, rb:string, rc:int, rd:string, re:real |
      {ra:LINEITEM_QUANTITY, rb:LINEITEM_SHIPMODE, rc:LINEITEM_PARTKEY,
      rd:LINEITEM_SHIPINSTRUCT, re:__prod_ret__101}|} @ { Collection }});
   let sent_msgs =
   nd_REVENUE_mPART2_send_correctives {ra:me, rb:9, rc:vid, rd:1, re:vid, rf:{|
     ra:real, rb:string, rc:int, rd:string, re:real | {ra:LINEITEM_QUANTITY,
     rb:LINEITEM_SHIPMODE, rc:LINEITEM_PARTKEY, rd:LINEITEM_SHIPINSTRUCT,
     re:__prod_ret__101}|} @ { Collection }} in
   if sent_msgs == 0 then ()
     else
       nd_update_stmt_cntr_corr_map {ra:vid, rb:9, rc:1, rd:sent_msgs, re:true,
         rf:true}))


declare delete_LINEITEM_do_corrective_s7_m_REVENUE_mLINEITEM1 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:int,
  rg:int, rh:int, ri:int, rj:real, rk:real, rl:real, rm:real, rn:string,
  ro:string, rp:int, rq:int, rr:int, rs:string, rt:string, ru:string,
  rv:collection { ra:string, rb:int, rc:string, rd:int, re:int
  } @ { Collection } } -> int = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:LINEITEM_ORDERKEY,
  rg:LINEITEM_PARTKEY, rh:LINEITEM_SUPPKEY, ri:LINEITEM_LINENUMBER,
  rj:LINEITEM_QUANTITY, rk:LINEITEM_EXTENDEDPRICE, rl:LINEITEM_DISCOUNT,
  rm:LINEITEM_TAX, rn:LINEITEM_RETURNFLAG, ro:LINEITEM_LINESTATUS,
  rp:LINEITEM_SHIPDATE, rq:LINEITEM_COMMITDATE, rr:LINEITEM_RECEIPTDATE,
  rs:LINEITEM_SHIPINSTRUCT, rt:LINEITEM_SHIPMODE, ru:LINEITEM_COMMENT,
  rv:delta_tuples} in let new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 -> bind b3 as {ra:delta_P_CONTAINER,
    rb:delta_P_SIZE, rc:delta_P_BRAND, rd:delta_P_PARTKEY,
    re:delta_REVENUE_mLINEITEM1} in _accext.combine (let __prod_ret__136 =
    (((({| key:int, value:int | let __prod_ret__132 =
      ((((if LINEITEM_SHIPINSTRUCT == "DELIVER IN PERSON" then 1 else 0) *
        if delta_P_PARTKEY == LINEITEM_PARTKEY then 1 else 0) *
        ((if LINEITEM_SHIPMODE == "AIR" then 1 else 0) +
        if LINEITEM_SHIPMODE == "AIR REG" then 1 else 0)) *
        if 1 <= delta_P_SIZE then 1 else 0) *
        (((((((if delta_P_BRAND == "Brand#12" then 1 else 0) *
        if delta_P_SIZE <= 5 then 1 else 0) * if LINEITEM_QUANTITY <= 11 
        then 1 else 0) * if 1 <= LINEITEM_QUANTITY then 1 else 0) *
        ((((if delta_P_CONTAINER == "SM CASE" then 1 else 0) +
        if delta_P_CONTAINER == "SM BOX" then 1 else 0) +
        if delta_P_CONTAINER == "SM PACK" then 1 else 0) +
        if delta_P_CONTAINER == "SM PKG" then 1 else 0)) * 2) +
        (((((if delta_P_BRAND == "Brand#34" then 1 else 0) *
        ((((if delta_P_CONTAINER == "LG CASE" then 1 else 0) +
        if delta_P_CONTAINER == "LG BOX" then 1 else 0) +
        if delta_P_CONTAINER == "LG PACK" then 1 else 0) +
        if delta_P_CONTAINER == "LG PKG" then 1 else 0)) *
        if 20 <= LINEITEM_QUANTITY then 1 else 0) * if LINEITEM_QUANTITY <= 30
        then 1 else 0) * if delta_P_SIZE <= 15 then 1 else 0)) in
      {key:__prod_ret__132, value:1}|} @ { Collection }).fold ((\_accmap ->
      (\b3 -> bind b3 as {key:__sql_inline_or_7, value:__lift_ret__8} in 
      (_accmap.insert {key:__sql_inline_or_7, value:__lift_ret__8 *
       if 0 < __sql_inline_or_7 then 1 else 0};
       _accmap)))) empty { key:int, value:int } @ { Collection }).fold
      ((\__accv_8 -> (\b3 -> bind b3 as {key:__sql_inline_or_7,
      value:__prod_ret__133} in __accv_8 + __prod_ret__133))) 0 *
      delta_REVENUE_mLINEITEM1) * LINEITEM_EXTENDEDPRICE) * (-1 +
      LINEITEM_DISCOUNT) in {|i:real| __prod_ret__136|} @ { Collection }))))
    empty {i:real} @ { Collection }).filter ((\b1 -> bind b1 as {i:map_val} in 
    0 != map_val)) in
  ((nd_add_delta_to_float {ra:REVENUE, rb:true, rc:vid, rd:new_tuples});0))


trigger ms_rcv_sw_init_ack : () = (\_u ->
  (ms_rcv_sw_init_ack_cnt = ms_rcv_sw_init_ack_cnt + 1;
   (if ms_rcv_sw_init_ack_cnt == num_switches
   then
     (ms_start_time = now_int ();
      (sw_rcv_token, sw_next_switch_addr)<- g_start_vid;
      (tm_insert_timer, timer_addr)<- {ra:ms_gc_interval, rb:0, rc:me})
   else ())))
trigger sw_rcv_init : () = (\_u ->
  (sw_init = true;
   (sw_driver_trig, me)<- ();
   (ms_rcv_sw_init_ack, master_addr)<- ()))
trigger ms_rcv_jobs_ack : () = (\_u ->
  (ms_rcv_jobs_ack_cnt = ms_rcv_jobs_ack_cnt + 1;
   (if ms_rcv_jobs_ack_cnt == num_peers
   then
     (switches.iterate ((\b1 -> bind b1 as {i:addr} in 
      (sw_rcv_init, addr)<- ()))) else ())))
trigger rcv_jobs : collection { key:address, value:int } @ { Map } =
  (\jobs_in ->
  (jobs = jobs_in;
   timer_addr = case ((jobs.filter ((\b1 -> bind b1 as {key:addr,
   value:job} in job == job_timer))).peek ()) of
   {Some timer -> timer.key}{None -> error (print "no timer peer found")};
   nodes = (jobs.filter ((\b1 -> bind b1 as {key:addr, value:job} in job ==
   job_node))).fold ((\_accmap -> (\x ->
   (_accmap.insert ({i:x.key});_accmap)))) empty {i:address} @ { Collection };
   num_nodes = nodes.size ();
   switches = (jobs.filter ((\b1 -> bind b1 as {key:addr, value:job} in job ==
   job_switch))).fold ((\_accmap -> (\x ->
   (_accmap.insert ({i:x.key});_accmap)))) empty {i:address} @ { Collection };
   num_switches = switches.size ();
   (if job <= job_switch
   then sw_next_switch_addr = let addr_list =
     (switches.fold ((\acc_conv -> (\b3 -> bind b3 as {i:x} in 
       (acc_conv.insert {i:x};acc_conv)))) empty {i:address} @ { Seq }).sort
       ((\b2 -> (\b3 -> bind b2 as {i:addr1} in bind b3 as {i:addr2} in 
       if addr1 < addr2 then -1 else 1))) in
     case (addr_list.peek ()) of
       {Some first_addr -> (addr_list.fold ((\b2 -> (\b5 ->
         bind b2 as {key:take, value:result} in bind b5 as {i:x} in if take
         then {key:false, value:x}
         else if x == me then {key:true, value:result}
           else {key:take, value:result}))) {key:false,
         value:first_addr.i}).value}{None ->
                                      error (print "no addresses in addr_list")}
   else ());
   nodes.iterate ((\b1 -> bind b1 as {i:addr} in add_node addr));
   (ms_rcv_jobs_ack, master_addr)<- ()))
trigger ms_rcv_job : { key:address, value:int } = (\b1 -> bind b1 as {key:addr,
  value:job} in 
  (jobs.insert {key:addr, value:job};
   ms_rcv_job_cnt = ms_rcv_job_cnt + 1;
   (if ms_rcv_job_cnt == num_peers
   then my_peers.iterate ((\b1 -> bind b1 as {i:addr} in 
     (rcv_jobs, addr)<- jobs)) else ())))
trigger rcv_master_addr : address = (\addr ->
  (master_addr = addr;(ms_rcv_job, addr)<- {key:me, value:job}))
trigger ms_send_addr_self : () = (\_u -> my_peers.iterate ((\b1 ->
  bind b1 as {i:addr} in (rcv_master_addr, addr)<- me)))
trigger shutdown_trig : () = (\_u -> haltEngine ())
trigger ms_shutdown : () = (\_u -> if ms_rcv_node_done_cnt == num_nodes
  then my_peers.iterate ((\b1 -> bind b1 as {i:addr} in 
    (shutdown_trig, addr)<- ())) else ())
trigger ms_rcv_node_done : bool = (\done -> if done
  then
    (ms_rcv_node_done_cnt = ms_rcv_node_done_cnt + 1;
     (if ms_rcv_node_done_cnt == num_nodes
     then (ms_end_time = now_int ();(ms_shutdown, me)<- ()) else ()))
  else ms_rcv_node_done_cnt = ms_rcv_node_done_cnt - 1)
trigger nd_rcv_done : () = (\_u ->
  (nd_rcvd_sys_done = true;
   (if not nd_sent_done and nd_stmt_cntrs.size () == 0
   then ((ms_rcv_node_done, master_addr)<- true;nd_sent_done = true) 
   else ())))
trigger ms_rcv_switch_done : () = (\_u ->
  (ms_rcv_switch_done_cnt = ms_rcv_switch_done_cnt + 1;
   (if ms_rcv_switch_done_cnt == num_switches
   then nodes.iterate ((\b1 -> bind b1 as {i:addr} in 
     (nd_rcv_done, addr)<- ())) else ())))
trigger sw_ack_rcv : { key:address, value:{ key:int, value:int } } = (\b1 ->
  bind b1 as {key:addr, value:vid} in 
  (sw_num_ack = sw_num_ack + 1;
   (case ((sw_ack_log.filter ((\b1 -> bind b1 as {key:key, value:value} in key
   == vid))).peek ()) of
   {Some x -> if x.value == 0 then sw_ack_log.erase x
     else sw_ack_log.update x {key:vid, value:x.value - 1}}{None -> ()});
   (if not sw_sent_done and (sw_trig_buf_idx.size () == 0 and (sw_num_ack ==
      sw_num_sent and sw_seen_sentry == true))
   then ((ms_rcv_switch_done, master_addr)<- ();sw_sent_done = true) 
   else ())))
trigger ms_rcv_gc_vid : { key:address, value:{ key:int, value:int } } =
  (\data ->
  (ms_gc_vid_map.insert data;
   ms_gc_vid_ctr = ms_gc_vid_ctr + 1;
   (if ms_gc_vid_ctr >= ms_num_gc_expected
   then let min_vid =
     ms_gc_vid_map.fold ((\min_vid -> (\b3 -> bind b3 as {key:addr,
       value:vid} in if min_vid < vid then min_vid else vid))) g_min_vid in
     (ms_gc_vid_ctr = 0;
      ms_gc_vid_map = empty { key:address, value:{ key:int, value:int }
      } @ { Map };
      my_peers.iterate ((\b1 -> bind b1 as {i:addr} in 
      (do_gc, addr)<- min_vid));
      (tm_insert_timer, timer_addr)<- {ra:ms_gc_interval, rb:0, rc:me})
   else ())))
trigger rcv_req_gc_vid : () = (\_u -> if job == job_switch or job == job_master
  then (ms_rcv_gc_vid, master_addr)<- {key:me, value:sw_ack_log.fold
    ((\min_vid -> (\b3 -> bind b3 as {key:vid, value:count} in if min_vid < vid
    then min_vid else vid))) sw_highest_vid}
  else if job == job_node
    then (ms_rcv_gc_vid, master_addr)<- {key:me, value:nd_stmt_cntrs.fold
      ((\min_vid -> (\b3 -> bind b3 as {key:vid_stmt_id, value:ctr_corrs} in 
      if min_vid < vid_stmt_id.key then min_vid else vid_stmt_id.key)))
      g_max_vid} else ())
trigger ms_send_gc_req : () = (\_u -> my_peers.iterate ((\b1 ->
  bind b1 as {i:addr} in (rcv_req_gc_vid, addr)<- ())))
trigger do_gc : { key:int, value:int } = (\min_gc_vid ->
  (let temp = empty { key:{ key:int, value:int }, value:int } @ { Set } in
   (nd_log_master.iterate ((\b1 -> bind b1 as {key:vid, value:stmt_id} in 
    if vid < min_gc_vid then temp.insert {key:vid, value:stmt_id} else ()));
    temp.iterate ((\val -> nd_log_master.erase val)));
   let temp =
   empty { key:{ key:int, value:int }, value:{ ra:int, rb:string, rc:string,
     rd:string, re:string, rf:int, rg:string, rh:real, ri:string } } @ { Map }
   in
   (nd_log_insert_PART.iterate ((\b1 -> bind b1 as {key:vid, value:args} in 
    if vid < min_gc_vid then temp.insert {key:vid, value:args} else ()));
    temp.iterate ((\val -> nd_log_insert_PART.erase val)));
   let temp =
   empty { key:{ key:int, value:int }, value:{ ra:int, rb:string, rc:string,
     rd:string, re:string, rf:int, rg:string, rh:real, ri:string } } @ { Map }
   in
   (nd_log_delete_PART.iterate ((\b1 -> bind b1 as {key:vid, value:args} in 
    if vid < min_gc_vid then temp.insert {key:vid, value:args} else ()));
    temp.iterate ((\val -> nd_log_delete_PART.erase val)));
   let temp =
   empty { key:{ key:int, value:int }, value:{ ra:int, rb:int, rc:int, rd:int,
     re:real, rf:real, rg:real, rh:real, ri:string, rj:string, rk:int, rl:int,
     rm:int, rn:string, ro:string, rp:string } } @ { Map } in
   (nd_log_insert_LINEITEM.iterate ((\b1 -> bind b1 as {key:vid,
    value:args} in if vid < min_gc_vid then temp.insert {key:vid, value:args}
    else ()));
    temp.iterate ((\val -> nd_log_insert_LINEITEM.erase val)));
   let temp =
   empty { key:{ key:int, value:int }, value:{ ra:int, rb:int, rc:int, rd:int,
     re:real, rf:real, rg:real, rh:real, ri:string, rj:string, rk:int, rl:int,
     rm:int, rn:string, ro:string, rp:string } } @ { Map } in
   (nd_log_delete_LINEITEM.iterate ((\b1 -> bind b1 as {key:vid,
    value:args} in if vid < min_gc_vid then temp.insert {key:vid, value:args}
    else ()));
    temp.iterate ((\val -> nd_log_delete_LINEITEM.erase val)));
   let temp =
   empty { ra:{ key:int, value:int }, rb:real, rc:string, rd:int, re:string,
     rf:real } @ { Set } in
   bind map_REVENUE_mPART1_s0_buf as ind map_REVENUE_mPART1_s0_buf_unwrap in
     let frontier =
       frontier_float_string_int_string_float {key:min_gc_vid,
         value:map_REVENUE_mPART1_s0_buf_unwrap} in
       (map_REVENUE_mPART1_s0_buf_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
        rb:map_0, rc:map_1, rd:map_2, re:map_3, rf:map_val} in 
        if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
          rf:map_val} else ()));
        temp.iterate ((\val -> map_REVENUE_mPART1_s0_buf_unwrap.erase val));
        frontier.iterate ((\val -> map_REVENUE_mPART1_s0_buf_unwrap.insert
        val)));
   let temp =
   empty { ra:{ key:int, value:int }, rb:real, rc:string, rd:int, re:string,
     rf:real } @ { Set } in
   bind map_REVENUE_mPART2_s0_buf as ind map_REVENUE_mPART2_s0_buf_unwrap in
     let frontier =
       frontier_float_string_int_string_float {key:min_gc_vid,
         value:map_REVENUE_mPART2_s0_buf_unwrap} in
       (map_REVENUE_mPART2_s0_buf_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
        rb:map_0, rc:map_1, rd:map_2, re:map_3, rf:map_val} in 
        if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
          rf:map_val} else ()));
        temp.iterate ((\val -> map_REVENUE_mPART2_s0_buf_unwrap.erase val));
        frontier.iterate ((\val -> map_REVENUE_mPART2_s0_buf_unwrap.insert
        val)));
   let temp =
   empty { ra:{ key:int, value:int }, rb:real, rc:string, rd:int, re:string,
     rf:real } @ { Set } in
   bind map_REVENUE_mPART1_s2_buf as ind map_REVENUE_mPART1_s2_buf_unwrap in
     let frontier =
       frontier_float_string_int_string_float {key:min_gc_vid,
         value:map_REVENUE_mPART1_s2_buf_unwrap} in
       (map_REVENUE_mPART1_s2_buf_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
        rb:map_0, rc:map_1, rd:map_2, re:map_3, rf:map_val} in 
        if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
          rf:map_val} else ()));
        temp.iterate ((\val -> map_REVENUE_mPART1_s2_buf_unwrap.erase val));
        frontier.iterate ((\val -> map_REVENUE_mPART1_s2_buf_unwrap.insert
        val)));
   let temp =
   empty { ra:{ key:int, value:int }, rb:real, rc:string, rd:int, re:string,
     rf:real } @ { Set } in
   bind map_REVENUE_mPART2_s2_buf as ind map_REVENUE_mPART2_s2_buf_unwrap in
     let frontier =
       frontier_float_string_int_string_float {key:min_gc_vid,
         value:map_REVENUE_mPART2_s2_buf_unwrap} in
       (map_REVENUE_mPART2_s2_buf_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
        rb:map_0, rc:map_1, rd:map_2, re:map_3, rf:map_val} in 
        if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
          rf:map_val} else ()));
        temp.iterate ((\val -> map_REVENUE_mPART2_s2_buf_unwrap.erase val));
        frontier.iterate ((\val -> map_REVENUE_mPART2_s2_buf_unwrap.insert
        val)));
   let temp =
   empty { ra:{ key:int, value:int }, rb:string, rc:int, rd:string, re:int,
     rf:int } @ { Set } in
   bind map_REVENUE_mLINEITEM1_s4_buf as ind
     map_REVENUE_mLINEITEM1_s4_buf_unwrap in
     let frontier =
       frontier_string_int_string_int_int {key:min_gc_vid,
         value:map_REVENUE_mLINEITEM1_s4_buf_unwrap} in
       (map_REVENUE_mLINEITEM1_s4_buf_unwrap.iterate ((\b1 ->
        bind b1 as {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
        rf:map_val} in if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
          rf:map_val} else ()));
        temp.iterate ((\val -> map_REVENUE_mLINEITEM1_s4_buf_unwrap.erase val));
        frontier.iterate ((\val -> map_REVENUE_mLINEITEM1_s4_buf_unwrap.insert
        val)));
   let temp =
   empty { ra:{ key:int, value:int }, rb:string, rc:int, rd:string, re:int,
     rf:int } @ { Set } in
   bind map_REVENUE_mLINEITEM1_s7_buf as ind
     map_REVENUE_mLINEITEM1_s7_buf_unwrap in
     let frontier =
       frontier_string_int_string_int_int {key:min_gc_vid,
         value:map_REVENUE_mLINEITEM1_s7_buf_unwrap} in
       (map_REVENUE_mLINEITEM1_s7_buf_unwrap.iterate ((\b1 ->
        bind b1 as {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
        rf:map_val} in if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
          rf:map_val} else ()));
        temp.iterate ((\val -> map_REVENUE_mLINEITEM1_s7_buf_unwrap.erase val));
        frontier.iterate ((\val -> map_REVENUE_mLINEITEM1_s7_buf_unwrap.insert
        val)));
   let temp = empty { key:{ key:int, value:int }, value:real } @ { Set } in
   bind REVENUE as ind REVENUE_unwrap in
     let frontier = frontier_float {key:min_gc_vid, value:REVENUE_unwrap} in
       (REVENUE_unwrap.iterate ((\b1 -> bind b1 as {key:vid, value:map_val} in 
        if vid < min_gc_vid then temp.insert {key:vid, value:map_val} 
        else ()));
        temp.iterate ((\val -> REVENUE_unwrap.erase val));
        frontier.iterate ((\val -> REVENUE_unwrap.insert val)));
   let temp =
   empty { ra:{ key:int, value:int }, rb:real, rc:string, rd:int, re:string,
     rf:real } @ { Set } in
   bind REVENUE_mPART1 as ind REVENUE_mPART1_unwrap in
     let frontier =
       frontier_float_string_int_string_float {key:min_gc_vid,
         value:REVENUE_mPART1_unwrap} in
       (REVENUE_mPART1_unwrap.iterate ((\b1 -> bind b1 as {ra:vid, rb:map_0,
        rc:map_1, rd:map_2, re:map_3, rf:map_val} in if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
          rf:map_val} else ()));
        temp.iterate ((\val -> REVENUE_mPART1_unwrap.erase val));
        frontier.iterate ((\val -> REVENUE_mPART1_unwrap.insert val)));
   let temp =
   empty { ra:{ key:int, value:int }, rb:real, rc:string, rd:int, re:string,
     rf:real } @ { Set } in
   bind REVENUE_mPART2 as ind REVENUE_mPART2_unwrap in
     let frontier =
       frontier_float_string_int_string_float {key:min_gc_vid,
         value:REVENUE_mPART2_unwrap} in
       (REVENUE_mPART2_unwrap.iterate ((\b1 -> bind b1 as {ra:vid, rb:map_0,
        rc:map_1, rd:map_2, re:map_3, rf:map_val} in if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
          rf:map_val} else ()));
        temp.iterate ((\val -> REVENUE_mPART2_unwrap.erase val));
        frontier.iterate ((\val -> REVENUE_mPART2_unwrap.insert val)));
   let temp =
   empty { ra:{ key:int, value:int }, rb:string, rc:int, rd:string, re:int,
     rf:int } @ { Set } in
   bind REVENUE_mLINEITEM1 as ind REVENUE_mLINEITEM1_unwrap in
     let frontier =
       frontier_string_int_string_int_int {key:min_gc_vid,
         value:REVENUE_mLINEITEM1_unwrap} in
       (REVENUE_mLINEITEM1_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
        rb:map_0, rc:map_1, rd:map_2, re:map_3, rf:map_val} in 
        if vid < min_gc_vid
        then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
          rf:map_val} else ()));
        temp.iterate ((\val -> REVENUE_mLINEITEM1_unwrap.erase val));
        frontier.iterate ((\val -> REVENUE_mLINEITEM1_unwrap.insert val)))))
trigger sw_rcv_token : { key:int, value:int } = (\vid ->
  if sw_need_vid_cntr > 0
  then let next_vid = {key:vid.key, value:vid.value + sw_need_vid_cntr} in
    ((sw_rcv_token, sw_next_switch_addr)<- next_vid;
     sw_token_vid_list.insert {key:vid, value:sw_need_vid_cntr};
     sw_need_vid_cntr = 0;
     sw_highest_vid = next_vid;
     (if not sw_sent_done and (sw_trig_buf_idx.size () == 0 and (sw_num_ack ==
        sw_num_sent and sw_seen_sentry == true))
     then ((ms_rcv_switch_done, master_addr)<- ();sw_sent_done = true) 
     else ());
     (sw_driver_trig, me)<- ()) else (sw_rcv_token, sw_next_switch_addr)<- vid)
trigger tm_insert_timer : { ra:int, rb:int, rc:address } = (\b1 ->
  bind b1 as {ra:time, rb:trig_id, rc:addr} in 
  (tm_timer_list.insert {ra:time + now_int (), rb:trig_id, rc:addr};
   tm_timer_list = tm_timer_list.sort ((\b2 -> (\b6 -> bind b2 as {ra:time1,
   rb:trig_id1, rc:addr1} in bind b6 as {ra:time2, rb:trig_id2, rc:addr2} in 
   if time1 < time2 then -1 else 1)));
   (tm_check_time, me)<- ()))
trigger tm_check_time : () = (\_u -> case (tm_timer_list.peek ()) of
  {Some timer -> if now_int () >= timer.ra
    then
      (tm_timer_list.erase timer;
       bind timer as {ra:time, rb:trig_id, rc:addr} in
       if trig_id == 0 then (ms_send_gc_req, addr)<- () else ();
       (tm_check_time, me)<- ()) else ((tm_check_time, me)<- ();(sleep 1000))}
  {None -> ()})
trigger sw_demux : { ra:string, rb:int, rc:real, rd:string, re:int, rf:string,
  rg:string, rh:string, ri:string, rj:string, rk:int, rl:real, rm:real, rn:int,
  ro:string, rp:string, rq:string, rr:string, rs:int, rt:string, ru:int,
  rv:string, rw:string, rx:int, ry:string, rz:real, rza:string, rzb:int,
  rzc:real, rzd:string, rze:string, rzf:string, rzg:string, rzh:int, rzi:int,
  rzj:int, rzk:real, rzl:real, rzm:real, rzn:string } = (\args ->
  if args.ra == "PART"
  then if args.rb == 1
    then
      sw_insert_PART {ra:args.rx, rb:args.rr, rc:args.rp, rd:args.rf,
        re:args.rzn, rf:args.rzi, rg:args.rj, rh:args.rzc, ri:args.rh}
    else
      sw_delete_PART {ra:args.rx, rb:args.rr, rc:args.rp, rd:args.rf,
        re:args.rzn, rf:args.rzi, rg:args.rj, rh:args.rzc, ri:args.rh}
  else if args.ra == "LINEITEM"
    then if args.rb == 1
      then
        sw_insert_LINEITEM {ra:args.ru, rb:args.rx, rc:args.rzj, rd:args.rn,
          re:args.rz, rf:args.rm, rg:args.rl, rh:args.rzl, ri:args.rzd,
          rj:args.ro, rk:tpch_date (args.rze), rl:tpch_date (args.ri),
          rm:tpch_date (args.rza), rn:args.rzf, ro:args.rzg, rp:args.rh}
      else
        sw_delete_LINEITEM {ra:args.ru, rb:args.rx, rc:args.rzj, rd:args.rn,
          re:args.rz, rf:args.rm, rg:args.rl, rh:args.rzl, ri:args.rzd,
          rj:args.ro, rk:tpch_date (args.rze), rl:tpch_date (args.ri),
          rm:tpch_date (args.rza), rn:args.rzf, ro:args.rzg, rp:args.rh}
    else if args.ra == ""
      then
        (sw_trig_buf_idx.insert ({i:-1});
         sw_need_vid_cntr = sw_need_vid_cntr + 1)
      else error (print "unidentified trig id"))
trigger sw_driver_trig : () = (\_u ->
  if sw_init and sw_trig_buf_idx.size () > 0
  then case sw_gen_vid () of
    {Some vid -> case (sw_trig_buf_idx.peek ()) of
      {Some trig_id ->
        (sw_trig_buf_idx.erase {i:trig_id.i};
         (if trig_id.i == -1
         then
           (sw_seen_sentry = true;
            (if not sw_sent_done and (sw_trig_buf_idx.size () == 0 and
               (sw_num_ack == sw_num_sent and sw_seen_sentry == true))
            then ((ms_rcv_switch_done, master_addr)<- ();sw_sent_done = true)
            else ()))
         else
           ((if trig_id.i == 3 then sw_delete_LINEITEM_send_fetch vid
            else if trig_id.i == 2 then sw_insert_LINEITEM_send_fetch vid
              else if trig_id.i == 1 then sw_delete_PART_send_fetch vid
                else if trig_id.i == 0 then sw_insert_PART_send_fetch vid
                  else error (print "mismatch on trigger id"));
            (sw_driver_trig, me)<- ())))}{None -> ()}}{None -> ()} else ())
trigger nd_rcv_corr_done : { ra:{ key:int, value:int }, rb:int, rc:int, rd:int
  } = (\b1 -> bind b1 as {ra:vid, rb:stmt_id, rc:hop, rd:count} in 
  ((nd_update_stmt_cntr_corr_map {ra:vid, rb:stmt_id, rc:hop, rd:count,
      re:false, rf:false});
   (case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
   key == {key:vid, value:stmt_id}))).peek ()) of
   {Some lkup -> if 0 == ((lkup.value).value).size ()
     then
       (nd_stmt_cntrs.erase lkup;
        (if nd_rcvd_sys_done
        then if not nd_sent_done and nd_stmt_cntrs.size () == 0
          then ((ms_rcv_node_done, master_addr)<- true;nd_sent_done = true)
          else () else ())) else ()}{None ->
                                      error
                                        (print
                                           "nd_rcv_corr_done: expected stmt_cntr value")})))
  
trigger nd_insert_PART_rcv_put : { ra:address, rb:collection { key:int,
  value:int } @ { Collection }, rc:{ key:int, value:int }, rd:int, re:string,
  rf:string, rg:string, rh:string, ri:int, rj:string, rk:real, rl:string } =
  (\b1 -> bind b1 as {ra:sender_ip, rb:stmt_cnt_list, rc:vid, rd:PART_PARTKEY,
  re:PART_NAME, rf:PART_MFGR, rg:PART_BRAND, rh:PART_TYPE, ri:PART_SIZE,
  rj:PART_CONTAINER, rk:PART_RETAILPRICE, rl:PART_COMMENT} in 
  (stmt_cnt_list.iterate ((\b1 -> bind b1 as {key:stmt_id, value:count} in 
   if nd_check_stmt_cntr_index {ra:vid, rb:stmt_id, rc:count}
   then if stmt_id == 1
     then
       nd_insert_PART_do_complete_s1 {ra:vid, rb:PART_PARTKEY, rc:PART_NAME,
         rd:PART_MFGR, re:PART_BRAND, rf:PART_TYPE, rg:PART_SIZE,
         rh:PART_CONTAINER, ri:PART_RETAILPRICE, rj:PART_COMMENT}
     else if stmt_id == 0
       then
         nd_insert_PART_do_complete_s0 {ra:vid, rb:PART_PARTKEY, rc:PART_NAME,
           rd:PART_MFGR, re:PART_BRAND, rf:PART_TYPE, rg:PART_SIZE,
           rh:PART_CONTAINER, ri:PART_RETAILPRICE, rj:PART_COMMENT} else ()
   else ()));
   (sw_ack_rcv, sender_ip)<- {key:me, value:vid}))
trigger nd_insert_PART_rcv_fetch : { ra:collection { key:int, value:int
  } @ { Collection }, rb:{ key:int, value:int }, rc:int, rd:string, re:string,
  rf:string, rg:string, rh:int, ri:string, rj:real, rk:string } = (\b1 ->
  bind b1 as {ra:stmt_map_ids, rb:vid, rc:PART_PARTKEY, rd:PART_NAME,
  re:PART_MFGR, rf:PART_BRAND, rg:PART_TYPE, rh:PART_SIZE, ri:PART_CONTAINER,
  rj:PART_RETAILPRICE, rk:PART_COMMENT} in 
  ((nd_log_write_insert_PART {ra:vid, rb:PART_PARTKEY, rc:PART_NAME,
      rd:PART_MFGR, re:PART_BRAND, rf:PART_TYPE, rg:PART_SIZE,
      rh:PART_CONTAINER, ri:PART_RETAILPRICE, rj:PART_COMMENT});
   stmt_map_ids.iterate ((\b1 -> bind b1 as {key:stmt_id, value:map_id} in 
   if stmt_id == 0
   then if map_id == 2
     then (nd_insert_PART_send_push_s0_m_REVENUE_mPART1, me)<- {ra:vid,
       rb:PART_PARTKEY, rc:PART_NAME, rd:PART_MFGR, re:PART_BRAND,
       rf:PART_TYPE, rg:PART_SIZE, rh:PART_CONTAINER, ri:PART_RETAILPRICE,
       rj:PART_COMMENT}
     else if map_id == 3
       then (nd_insert_PART_send_push_s0_m_REVENUE_mPART2, me)<- {ra:vid,
         rb:PART_PARTKEY, rc:PART_NAME, rd:PART_MFGR, re:PART_BRAND,
         rf:PART_TYPE, rg:PART_SIZE, rh:PART_CONTAINER, ri:PART_RETAILPRICE,
         rj:PART_COMMENT} else error (print "nd_rcv_fetch: invalid map id")
   else error (print "nd_rcv_fetch: invalid stmt id")))))
trigger nd_insert_PART_send_push_s0_m_REVENUE_mPART1 : { ra:{ key:int,
  value:int }, rb:int, rc:string, rd:string, re:string, rf:string, rg:int,
  rh:string, ri:real, rj:string } = (\b1 -> bind b1 as {ra:vid,
  rb:PART_PARTKEY, rc:PART_NAME, rd:PART_MFGR, re:PART_BRAND, rf:PART_TYPE,
  rg:PART_SIZE, rh:PART_CONTAINER, ri:PART_RETAILPRICE, rj:PART_COMMENT} in 
  bind REVENUE_mPART1 as ind REVENUE_mPART1_deref in
  ((nd_log_master_write {key:vid, value:0});
   (shuffle_REVENUE_mPART1_to_REVENUE {ra:(),
      rb:frontier_float_string_int_string_float {key:vid,
           value:REVENUE_mPART1_deref}, rc:true}).iterate ((\b1 ->
   bind b1 as {key:ip, value:tuples} in 
   (nd_insert_PART_rcv_push_s0_m_REVENUE_mPART1, ip)<- {ra:tuples, rb:vid,
   rc:PART_PARTKEY, rd:PART_NAME, re:PART_MFGR, rf:PART_BRAND, rg:PART_TYPE,
   rh:PART_SIZE, ri:PART_CONTAINER, rj:PART_RETAILPRICE, rk:PART_COMMENT}))))
trigger nd_insert_PART_send_push_s0_m_REVENUE_mPART2 : { ra:{ key:int,
  value:int }, rb:int, rc:string, rd:string, re:string, rf:string, rg:int,
  rh:string, ri:real, rj:string } = (\b1 -> bind b1 as {ra:vid,
  rb:PART_PARTKEY, rc:PART_NAME, rd:PART_MFGR, re:PART_BRAND, rf:PART_TYPE,
  rg:PART_SIZE, rh:PART_CONTAINER, ri:PART_RETAILPRICE, rj:PART_COMMENT} in 
  bind REVENUE_mPART2 as ind REVENUE_mPART2_deref in
  ((nd_log_master_write {key:vid, value:0});
   (shuffle_REVENUE_mPART2_to_REVENUE {ra:(),
      rb:frontier_float_string_int_string_float {key:vid,
           value:REVENUE_mPART2_deref}, rc:true}).iterate ((\b1 ->
   bind b1 as {key:ip, value:tuples} in 
   (nd_insert_PART_rcv_push_s0_m_REVENUE_mPART2, ip)<- {ra:tuples, rb:vid,
   rc:PART_PARTKEY, rd:PART_NAME, re:PART_MFGR, rf:PART_BRAND, rg:PART_TYPE,
   rh:PART_SIZE, ri:PART_CONTAINER, rj:PART_RETAILPRICE, rk:PART_COMMENT}))))
trigger nd_insert_PART_rcv_push_s0_m_REVENUE_mPART1 : { ra:collection { ra:{
  key:int, value:int }, rb:real, rc:string, rd:int, re:string, rf:real
  } @ { Collection }, rb:{ key:int, value:int }, rc:int, rd:string, re:string,
  rf:string, rg:string, rh:int, ri:string, rj:real, rk:string } = (\b1 ->
  bind b1 as {ra:tuples, rb:vid, rc:PART_PARTKEY, rd:PART_NAME, re:PART_MFGR,
  rf:PART_BRAND, rg:PART_TYPE, rh:PART_SIZE, ri:PART_CONTAINER,
  rj:PART_RETAILPRICE, rk:PART_COMMENT} in 
  ((nd_log_write_insert_PART {ra:vid, rb:PART_PARTKEY, rc:PART_NAME,
      rd:PART_MFGR, re:PART_BRAND, rf:PART_TYPE, rg:PART_SIZE,
      rh:PART_CONTAINER, ri:PART_RETAILPRICE, rj:PART_COMMENT});
   tuples.iterate ((\tuple -> bind map_REVENUE_mPART1_s0_buf as ind
   map_REVENUE_mPART1_s0_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2, rd:_tup3, re:_tup4, rf:_tup5}
     in
     case ((map_REVENUE_mPART1_s0_buf_d.filter ((\b1 -> bind b1 as {ra:ra,
       rb:rb, rc:rc, rd:rd, re:re, rf:rf} in (((ra == _tup0 and re == _tup4)
       and rd == _tup3) and rc == _tup2) and rb == _tup1))).peek ()) of
       {Some vals -> map_REVENUE_mPART1_s0_buf_d.update vals tuple}{None ->
                                                                    map_REVENUE_mPART1_s0_buf_d.insert
                                                                    tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:0, rc:-1}
   then
     nd_insert_PART_do_complete_s0 {ra:vid, rb:PART_PARTKEY, rc:PART_NAME,
       rd:PART_MFGR, re:PART_BRAND, rf:PART_TYPE, rg:PART_SIZE,
       rh:PART_CONTAINER, ri:PART_RETAILPRICE, rj:PART_COMMENT} else ())))
trigger nd_insert_PART_rcv_push_s0_m_REVENUE_mPART2 : { ra:collection { ra:{
  key:int, value:int }, rb:real, rc:string, rd:int, re:string, rf:real
  } @ { Collection }, rb:{ key:int, value:int }, rc:int, rd:string, re:string,
  rf:string, rg:string, rh:int, ri:string, rj:real, rk:string } = (\b1 ->
  bind b1 as {ra:tuples, rb:vid, rc:PART_PARTKEY, rd:PART_NAME, re:PART_MFGR,
  rf:PART_BRAND, rg:PART_TYPE, rh:PART_SIZE, ri:PART_CONTAINER,
  rj:PART_RETAILPRICE, rk:PART_COMMENT} in 
  ((nd_log_write_insert_PART {ra:vid, rb:PART_PARTKEY, rc:PART_NAME,
      rd:PART_MFGR, re:PART_BRAND, rf:PART_TYPE, rg:PART_SIZE,
      rh:PART_CONTAINER, ri:PART_RETAILPRICE, rj:PART_COMMENT});
   tuples.iterate ((\tuple -> bind map_REVENUE_mPART2_s0_buf as ind
   map_REVENUE_mPART2_s0_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2, rd:_tup3, re:_tup4, rf:_tup5}
     in
     case ((map_REVENUE_mPART2_s0_buf_d.filter ((\b1 -> bind b1 as {ra:ra,
       rb:rb, rc:rc, rd:rd, re:re, rf:rf} in (((ra == _tup0 and re == _tup4)
       and rd == _tup3) and rc == _tup2) and rb == _tup1))).peek ()) of
       {Some vals -> map_REVENUE_mPART2_s0_buf_d.update vals tuple}{None ->
                                                                    map_REVENUE_mPART2_s0_buf_d.insert
                                                                    tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:0, rc:-1}
   then
     nd_insert_PART_do_complete_s0 {ra:vid, rb:PART_PARTKEY, rc:PART_NAME,
       rd:PART_MFGR, re:PART_BRAND, rf:PART_TYPE, rg:PART_SIZE,
       rh:PART_CONTAINER, ri:PART_RETAILPRICE, rj:PART_COMMENT} else ())))
trigger nd_insert_PART_do_complete_s1_trig : { ra:{ key:int, value:int },
  rb:int, rc:string, rd:string, re:string, rf:string, rg:int, rh:string,
  ri:real, rj:string } = (\b1 -> bind b1 as {ra:vid, rb:PART_PARTKEY,
  rc:PART_NAME, rd:PART_MFGR, re:PART_BRAND, rf:PART_TYPE, rg:PART_SIZE,
  rh:PART_CONTAINER, ri:PART_RETAILPRICE, rj:PART_COMMENT} in 
  nd_insert_PART_do_complete_s1 {ra:vid, rb:PART_PARTKEY, rc:PART_NAME,
    rd:PART_MFGR, re:PART_BRAND, rf:PART_TYPE, rg:PART_SIZE, rh:PART_CONTAINER,
    ri:PART_RETAILPRICE, rj:PART_COMMENT})
trigger insert_PART_rcv_corrective_s0_m_REVENUE_mPART1 : { ra:address, rb:int,
  rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:collection {
  key:int, value:int } @ { Seq }, rg:collection { ra:real, rb:string, rc:int,
  rd:string, re:real } @ { Collection } } = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:compute_vids,
  rg:delta_tuples} in 
  ((nd_add_delta_to_float_string_int_string_float
      {ra:map_REVENUE_mPART1_s0_buf, rb:false, rc:vid, rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:0}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_insert_PART compute_vid as
         {ra:PART_PARTKEY, rb:PART_NAME, rc:PART_MFGR, rd:PART_BRAND, re:PART_TYPE, rf:PART_SIZE, rg:PART_CONTAINER, rh:PART_RETAILPRICE, ri:PART_COMMENT}
         in
         acc_count +
           insert_PART_do_corrective_s0_m_REVENUE_mPART1 {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:compute_vid,
             rf:PART_PARTKEY, rg:PART_NAME, rh:PART_MFGR, ri:PART_BRAND,
             rj:PART_TYPE, rk:PART_SIZE, rl:PART_CONTAINER,
             rm:PART_RETAILPRICE, rn:PART_COMMENT, ro:delta_tuples}
       else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger insert_PART_rcv_corrective_s0_m_REVENUE_mPART2 : { ra:address, rb:int,
  rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:collection {
  key:int, value:int } @ { Seq }, rg:collection { ra:real, rb:string, rc:int,
  rd:string, re:real } @ { Collection } } = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:compute_vids,
  rg:delta_tuples} in 
  ((nd_add_delta_to_float_string_int_string_float
      {ra:map_REVENUE_mPART2_s0_buf, rb:false, rc:vid, rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:0}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_insert_PART compute_vid as
         {ra:PART_PARTKEY, rb:PART_NAME, rc:PART_MFGR, rd:PART_BRAND, re:PART_TYPE, rf:PART_SIZE, rg:PART_CONTAINER, rh:PART_RETAILPRICE, ri:PART_COMMENT}
         in
         acc_count +
           insert_PART_do_corrective_s0_m_REVENUE_mPART2 {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:compute_vid,
             rf:PART_PARTKEY, rg:PART_NAME, rh:PART_MFGR, ri:PART_BRAND,
             rj:PART_TYPE, rk:PART_SIZE, rl:PART_CONTAINER,
             rm:PART_RETAILPRICE, rn:PART_COMMENT, ro:delta_tuples}
       else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger nd_delete_PART_rcv_put : { ra:address, rb:collection { key:int,
  value:int } @ { Collection }, rc:{ key:int, value:int }, rd:int, re:string,
  rf:string, rg:string, rh:string, ri:int, rj:string, rk:real, rl:string } =
  (\b1 -> bind b1 as {ra:sender_ip, rb:stmt_cnt_list, rc:vid, rd:PART_PARTKEY,
  re:PART_NAME, rf:PART_MFGR, rg:PART_BRAND, rh:PART_TYPE, ri:PART_SIZE,
  rj:PART_CONTAINER, rk:PART_RETAILPRICE, rl:PART_COMMENT} in 
  (stmt_cnt_list.iterate ((\b1 -> bind b1 as {key:stmt_id, value:count} in 
   if nd_check_stmt_cntr_index {ra:vid, rb:stmt_id, rc:count}
   then if stmt_id == 3
     then
       nd_delete_PART_do_complete_s3 {ra:vid, rb:PART_PARTKEY, rc:PART_NAME,
         rd:PART_MFGR, re:PART_BRAND, rf:PART_TYPE, rg:PART_SIZE,
         rh:PART_CONTAINER, ri:PART_RETAILPRICE, rj:PART_COMMENT}
     else if stmt_id == 2
       then
         nd_delete_PART_do_complete_s2 {ra:vid, rb:PART_PARTKEY, rc:PART_NAME,
           rd:PART_MFGR, re:PART_BRAND, rf:PART_TYPE, rg:PART_SIZE,
           rh:PART_CONTAINER, ri:PART_RETAILPRICE, rj:PART_COMMENT} else ()
   else ()));
   (sw_ack_rcv, sender_ip)<- {key:me, value:vid}))
trigger nd_delete_PART_rcv_fetch : { ra:collection { key:int, value:int
  } @ { Collection }, rb:{ key:int, value:int }, rc:int, rd:string, re:string,
  rf:string, rg:string, rh:int, ri:string, rj:real, rk:string } = (\b1 ->
  bind b1 as {ra:stmt_map_ids, rb:vid, rc:PART_PARTKEY, rd:PART_NAME,
  re:PART_MFGR, rf:PART_BRAND, rg:PART_TYPE, rh:PART_SIZE, ri:PART_CONTAINER,
  rj:PART_RETAILPRICE, rk:PART_COMMENT} in 
  ((nd_log_write_delete_PART {ra:vid, rb:PART_PARTKEY, rc:PART_NAME,
      rd:PART_MFGR, re:PART_BRAND, rf:PART_TYPE, rg:PART_SIZE,
      rh:PART_CONTAINER, ri:PART_RETAILPRICE, rj:PART_COMMENT});
   stmt_map_ids.iterate ((\b1 -> bind b1 as {key:stmt_id, value:map_id} in 
   if stmt_id == 2
   then if map_id == 2
     then (nd_delete_PART_send_push_s2_m_REVENUE_mPART1, me)<- {ra:vid,
       rb:PART_PARTKEY, rc:PART_NAME, rd:PART_MFGR, re:PART_BRAND,
       rf:PART_TYPE, rg:PART_SIZE, rh:PART_CONTAINER, ri:PART_RETAILPRICE,
       rj:PART_COMMENT}
     else if map_id == 3
       then (nd_delete_PART_send_push_s2_m_REVENUE_mPART2, me)<- {ra:vid,
         rb:PART_PARTKEY, rc:PART_NAME, rd:PART_MFGR, re:PART_BRAND,
         rf:PART_TYPE, rg:PART_SIZE, rh:PART_CONTAINER, ri:PART_RETAILPRICE,
         rj:PART_COMMENT} else error (print "nd_rcv_fetch: invalid map id")
   else error (print "nd_rcv_fetch: invalid stmt id")))))
trigger nd_delete_PART_send_push_s2_m_REVENUE_mPART1 : { ra:{ key:int,
  value:int }, rb:int, rc:string, rd:string, re:string, rf:string, rg:int,
  rh:string, ri:real, rj:string } = (\b1 -> bind b1 as {ra:vid,
  rb:PART_PARTKEY, rc:PART_NAME, rd:PART_MFGR, re:PART_BRAND, rf:PART_TYPE,
  rg:PART_SIZE, rh:PART_CONTAINER, ri:PART_RETAILPRICE, rj:PART_COMMENT} in 
  bind REVENUE_mPART1 as ind REVENUE_mPART1_deref in
  ((nd_log_master_write {key:vid, value:2});
   (shuffle_REVENUE_mPART1_to_REVENUE {ra:(),
      rb:frontier_float_string_int_string_float {key:vid,
           value:REVENUE_mPART1_deref}, rc:true}).iterate ((\b1 ->
   bind b1 as {key:ip, value:tuples} in 
   (nd_delete_PART_rcv_push_s2_m_REVENUE_mPART1, ip)<- {ra:tuples, rb:vid,
   rc:PART_PARTKEY, rd:PART_NAME, re:PART_MFGR, rf:PART_BRAND, rg:PART_TYPE,
   rh:PART_SIZE, ri:PART_CONTAINER, rj:PART_RETAILPRICE, rk:PART_COMMENT}))))
trigger nd_delete_PART_send_push_s2_m_REVENUE_mPART2 : { ra:{ key:int,
  value:int }, rb:int, rc:string, rd:string, re:string, rf:string, rg:int,
  rh:string, ri:real, rj:string } = (\b1 -> bind b1 as {ra:vid,
  rb:PART_PARTKEY, rc:PART_NAME, rd:PART_MFGR, re:PART_BRAND, rf:PART_TYPE,
  rg:PART_SIZE, rh:PART_CONTAINER, ri:PART_RETAILPRICE, rj:PART_COMMENT} in 
  bind REVENUE_mPART2 as ind REVENUE_mPART2_deref in
  ((nd_log_master_write {key:vid, value:2});
   (shuffle_REVENUE_mPART2_to_REVENUE {ra:(),
      rb:frontier_float_string_int_string_float {key:vid,
           value:REVENUE_mPART2_deref}, rc:true}).iterate ((\b1 ->
   bind b1 as {key:ip, value:tuples} in 
   (nd_delete_PART_rcv_push_s2_m_REVENUE_mPART2, ip)<- {ra:tuples, rb:vid,
   rc:PART_PARTKEY, rd:PART_NAME, re:PART_MFGR, rf:PART_BRAND, rg:PART_TYPE,
   rh:PART_SIZE, ri:PART_CONTAINER, rj:PART_RETAILPRICE, rk:PART_COMMENT}))))
trigger nd_delete_PART_rcv_push_s2_m_REVENUE_mPART1 : { ra:collection { ra:{
  key:int, value:int }, rb:real, rc:string, rd:int, re:string, rf:real
  } @ { Collection }, rb:{ key:int, value:int }, rc:int, rd:string, re:string,
  rf:string, rg:string, rh:int, ri:string, rj:real, rk:string } = (\b1 ->
  bind b1 as {ra:tuples, rb:vid, rc:PART_PARTKEY, rd:PART_NAME, re:PART_MFGR,
  rf:PART_BRAND, rg:PART_TYPE, rh:PART_SIZE, ri:PART_CONTAINER,
  rj:PART_RETAILPRICE, rk:PART_COMMENT} in 
  ((nd_log_write_delete_PART {ra:vid, rb:PART_PARTKEY, rc:PART_NAME,
      rd:PART_MFGR, re:PART_BRAND, rf:PART_TYPE, rg:PART_SIZE,
      rh:PART_CONTAINER, ri:PART_RETAILPRICE, rj:PART_COMMENT});
   tuples.iterate ((\tuple -> bind map_REVENUE_mPART1_s2_buf as ind
   map_REVENUE_mPART1_s2_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2, rd:_tup3, re:_tup4, rf:_tup5}
     in
     case ((map_REVENUE_mPART1_s2_buf_d.filter ((\b1 -> bind b1 as {ra:ra,
       rb:rb, rc:rc, rd:rd, re:re, rf:rf} in (((ra == _tup0 and re == _tup4)
       and rd == _tup3) and rc == _tup2) and rb == _tup1))).peek ()) of
       {Some vals -> map_REVENUE_mPART1_s2_buf_d.update vals tuple}{None ->
                                                                    map_REVENUE_mPART1_s2_buf_d.insert
                                                                    tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:2, rc:-1}
   then
     nd_delete_PART_do_complete_s2 {ra:vid, rb:PART_PARTKEY, rc:PART_NAME,
       rd:PART_MFGR, re:PART_BRAND, rf:PART_TYPE, rg:PART_SIZE,
       rh:PART_CONTAINER, ri:PART_RETAILPRICE, rj:PART_COMMENT} else ())))
trigger nd_delete_PART_rcv_push_s2_m_REVENUE_mPART2 : { ra:collection { ra:{
  key:int, value:int }, rb:real, rc:string, rd:int, re:string, rf:real
  } @ { Collection }, rb:{ key:int, value:int }, rc:int, rd:string, re:string,
  rf:string, rg:string, rh:int, ri:string, rj:real, rk:string } = (\b1 ->
  bind b1 as {ra:tuples, rb:vid, rc:PART_PARTKEY, rd:PART_NAME, re:PART_MFGR,
  rf:PART_BRAND, rg:PART_TYPE, rh:PART_SIZE, ri:PART_CONTAINER,
  rj:PART_RETAILPRICE, rk:PART_COMMENT} in 
  ((nd_log_write_delete_PART {ra:vid, rb:PART_PARTKEY, rc:PART_NAME,
      rd:PART_MFGR, re:PART_BRAND, rf:PART_TYPE, rg:PART_SIZE,
      rh:PART_CONTAINER, ri:PART_RETAILPRICE, rj:PART_COMMENT});
   tuples.iterate ((\tuple -> bind map_REVENUE_mPART2_s2_buf as ind
   map_REVENUE_mPART2_s2_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2, rd:_tup3, re:_tup4, rf:_tup5}
     in
     case ((map_REVENUE_mPART2_s2_buf_d.filter ((\b1 -> bind b1 as {ra:ra,
       rb:rb, rc:rc, rd:rd, re:re, rf:rf} in (((ra == _tup0 and re == _tup4)
       and rd == _tup3) and rc == _tup2) and rb == _tup1))).peek ()) of
       {Some vals -> map_REVENUE_mPART2_s2_buf_d.update vals tuple}{None ->
                                                                    map_REVENUE_mPART2_s2_buf_d.insert
                                                                    tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:2, rc:-1}
   then
     nd_delete_PART_do_complete_s2 {ra:vid, rb:PART_PARTKEY, rc:PART_NAME,
       rd:PART_MFGR, re:PART_BRAND, rf:PART_TYPE, rg:PART_SIZE,
       rh:PART_CONTAINER, ri:PART_RETAILPRICE, rj:PART_COMMENT} else ())))
trigger nd_delete_PART_do_complete_s3_trig : { ra:{ key:int, value:int },
  rb:int, rc:string, rd:string, re:string, rf:string, rg:int, rh:string,
  ri:real, rj:string } = (\b1 -> bind b1 as {ra:vid, rb:PART_PARTKEY,
  rc:PART_NAME, rd:PART_MFGR, re:PART_BRAND, rf:PART_TYPE, rg:PART_SIZE,
  rh:PART_CONTAINER, ri:PART_RETAILPRICE, rj:PART_COMMENT} in 
  nd_delete_PART_do_complete_s3 {ra:vid, rb:PART_PARTKEY, rc:PART_NAME,
    rd:PART_MFGR, re:PART_BRAND, rf:PART_TYPE, rg:PART_SIZE, rh:PART_CONTAINER,
    ri:PART_RETAILPRICE, rj:PART_COMMENT})
trigger delete_PART_rcv_corrective_s2_m_REVENUE_mPART1 : { ra:address, rb:int,
  rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:collection {
  key:int, value:int } @ { Seq }, rg:collection { ra:real, rb:string, rc:int,
  rd:string, re:real } @ { Collection } } = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:compute_vids,
  rg:delta_tuples} in 
  ((nd_add_delta_to_float_string_int_string_float
      {ra:map_REVENUE_mPART1_s2_buf, rb:false, rc:vid, rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:2}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_delete_PART compute_vid as
         {ra:PART_PARTKEY, rb:PART_NAME, rc:PART_MFGR, rd:PART_BRAND, re:PART_TYPE, rf:PART_SIZE, rg:PART_CONTAINER, rh:PART_RETAILPRICE, ri:PART_COMMENT}
         in
         acc_count +
           delete_PART_do_corrective_s2_m_REVENUE_mPART1 {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:compute_vid,
             rf:PART_PARTKEY, rg:PART_NAME, rh:PART_MFGR, ri:PART_BRAND,
             rj:PART_TYPE, rk:PART_SIZE, rl:PART_CONTAINER,
             rm:PART_RETAILPRICE, rn:PART_COMMENT, ro:delta_tuples}
       else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger delete_PART_rcv_corrective_s2_m_REVENUE_mPART2 : { ra:address, rb:int,
  rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:collection {
  key:int, value:int } @ { Seq }, rg:collection { ra:real, rb:string, rc:int,
  rd:string, re:real } @ { Collection } } = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:compute_vids,
  rg:delta_tuples} in 
  ((nd_add_delta_to_float_string_int_string_float
      {ra:map_REVENUE_mPART2_s2_buf, rb:false, rc:vid, rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:2}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_delete_PART compute_vid as
         {ra:PART_PARTKEY, rb:PART_NAME, rc:PART_MFGR, rd:PART_BRAND, re:PART_TYPE, rf:PART_SIZE, rg:PART_CONTAINER, rh:PART_RETAILPRICE, ri:PART_COMMENT}
         in
         acc_count +
           delete_PART_do_corrective_s2_m_REVENUE_mPART2 {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:compute_vid,
             rf:PART_PARTKEY, rg:PART_NAME, rh:PART_MFGR, ri:PART_BRAND,
             rj:PART_TYPE, rk:PART_SIZE, rl:PART_CONTAINER,
             rm:PART_RETAILPRICE, rn:PART_COMMENT, ro:delta_tuples}
       else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger nd_insert_LINEITEM_rcv_put : { ra:address, rb:collection { key:int,
  value:int } @ { Collection }, rc:{ key:int, value:int }, rd:int, re:int,
  rf:int, rg:int, rh:real, ri:real, rj:real, rk:real, rl:string, rm:string,
  rn:int, ro:int, rp:int, rq:string, rr:string, rs:string } = (\b1 ->
  bind b1 as {ra:sender_ip, rb:stmt_cnt_list, rc:vid, rd:LINEITEM_ORDERKEY,
  re:LINEITEM_PARTKEY, rf:LINEITEM_SUPPKEY, rg:LINEITEM_LINENUMBER,
  rh:LINEITEM_QUANTITY, ri:LINEITEM_EXTENDEDPRICE, rj:LINEITEM_DISCOUNT,
  rk:LINEITEM_TAX, rl:LINEITEM_RETURNFLAG, rm:LINEITEM_LINESTATUS,
  rn:LINEITEM_SHIPDATE, ro:LINEITEM_COMMITDATE, rp:LINEITEM_RECEIPTDATE,
  rq:LINEITEM_SHIPINSTRUCT, rr:LINEITEM_SHIPMODE, rs:LINEITEM_COMMENT} in 
  (stmt_cnt_list.iterate ((\b1 -> bind b1 as {key:stmt_id, value:count} in 
   if nd_check_stmt_cntr_index {ra:vid, rb:stmt_id, rc:count}
   then if stmt_id == 6
     then
       nd_insert_LINEITEM_do_complete_s6 {ra:vid, rb:LINEITEM_ORDERKEY,
         rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
         rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
         ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
         rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
         ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT}
     else if stmt_id == 5
       then
         nd_insert_LINEITEM_do_complete_s5 {ra:vid, rb:LINEITEM_ORDERKEY,
           rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
           rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE,
           rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG,
           rk:LINEITEM_LINESTATUS, rl:LINEITEM_SHIPDATE,
           rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
           ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT}
       else if stmt_id == 4
         then
           nd_insert_LINEITEM_do_complete_s4 {ra:vid, rb:LINEITEM_ORDERKEY,
             rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
             rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE,
             rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG,
             rk:LINEITEM_LINESTATUS, rl:LINEITEM_SHIPDATE,
             rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
             ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE,
             rq:LINEITEM_COMMENT} else () else ()));
   (sw_ack_rcv, sender_ip)<- {key:me, value:vid}))
trigger nd_insert_LINEITEM_rcv_fetch : { ra:collection { key:int, value:int
  } @ { Collection }, rb:{ key:int, value:int }, rc:int, rd:int, re:int,
  rf:int, rg:real, rh:real, ri:real, rj:real, rk:string, rl:string, rm:int,
  rn:int, ro:int, rp:string, rq:string, rr:string } = (\b1 ->
  bind b1 as {ra:stmt_map_ids, rb:vid, rc:LINEITEM_ORDERKEY,
  rd:LINEITEM_PARTKEY, re:LINEITEM_SUPPKEY, rf:LINEITEM_LINENUMBER,
  rg:LINEITEM_QUANTITY, rh:LINEITEM_EXTENDEDPRICE, ri:LINEITEM_DISCOUNT,
  rj:LINEITEM_TAX, rk:LINEITEM_RETURNFLAG, rl:LINEITEM_LINESTATUS,
  rm:LINEITEM_SHIPDATE, rn:LINEITEM_COMMITDATE, ro:LINEITEM_RECEIPTDATE,
  rp:LINEITEM_SHIPINSTRUCT, rq:LINEITEM_SHIPMODE, rr:LINEITEM_COMMENT} in 
  ((nd_log_write_insert_LINEITEM {ra:vid, rb:LINEITEM_ORDERKEY,
      rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
      rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
      ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
      rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
      ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT});
   stmt_map_ids.iterate ((\b1 -> bind b1 as {key:stmt_id, value:map_id} in 
   if stmt_id == 4
   then if map_id == 4
     then (nd_insert_LINEITEM_send_push_s4_m_REVENUE_mLINEITEM1, me)<- {ra:vid,
       rb:LINEITEM_ORDERKEY, rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY,
       re:LINEITEM_LINENUMBER, rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE,
       rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG,
       rk:LINEITEM_LINESTATUS, rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE,
       rn:LINEITEM_RECEIPTDATE, ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE,
       rq:LINEITEM_COMMENT} else error (print "nd_rcv_fetch: invalid map id")
   else error (print "nd_rcv_fetch: invalid stmt id")))))
trigger nd_insert_LINEITEM_send_push_s4_m_REVENUE_mLINEITEM1 : { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:int, re:int, rf:real, rg:real, rh:real,
  ri:real, rj:string, rk:string, rl:int, rm:int, rn:int, ro:string, rp:string,
  rq:string } = (\b1 -> bind b1 as {ra:vid, rb:LINEITEM_ORDERKEY,
  rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
  rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
  ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
  rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
  ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT} in bind
  REVENUE_mLINEITEM1 as ind REVENUE_mLINEITEM1_deref in
  ((nd_log_master_write {key:vid, value:4});
   (shuffle_REVENUE_mLINEITEM1_to_REVENUE {ra:(),
      rb:frontier_string_int_string_int_int {key:vid,
           value:REVENUE_mLINEITEM1_deref}, rc:true}).iterate ((\b1 ->
   bind b1 as {key:ip, value:tuples} in 
   (nd_insert_LINEITEM_rcv_push_s4_m_REVENUE_mLINEITEM1, ip)<- {ra:tuples,
   rb:vid, rc:LINEITEM_ORDERKEY, rd:LINEITEM_PARTKEY, re:LINEITEM_SUPPKEY,
   rf:LINEITEM_LINENUMBER, rg:LINEITEM_QUANTITY, rh:LINEITEM_EXTENDEDPRICE,
   ri:LINEITEM_DISCOUNT, rj:LINEITEM_TAX, rk:LINEITEM_RETURNFLAG,
   rl:LINEITEM_LINESTATUS, rm:LINEITEM_SHIPDATE, rn:LINEITEM_COMMITDATE,
   ro:LINEITEM_RECEIPTDATE, rp:LINEITEM_SHIPINSTRUCT, rq:LINEITEM_SHIPMODE,
   rr:LINEITEM_COMMENT}))))
trigger nd_insert_LINEITEM_rcv_push_s4_m_REVENUE_mLINEITEM1 : { ra:collection {
  ra:{ key:int, value:int }, rb:string, rc:int, rd:string, re:int, rf:int
  } @ { Collection }, rb:{ key:int, value:int }, rc:int, rd:int, re:int,
  rf:int, rg:real, rh:real, ri:real, rj:real, rk:string, rl:string, rm:int,
  rn:int, ro:int, rp:string, rq:string, rr:string } = (\b1 ->
  bind b1 as {ra:tuples, rb:vid, rc:LINEITEM_ORDERKEY, rd:LINEITEM_PARTKEY,
  re:LINEITEM_SUPPKEY, rf:LINEITEM_LINENUMBER, rg:LINEITEM_QUANTITY,
  rh:LINEITEM_EXTENDEDPRICE, ri:LINEITEM_DISCOUNT, rj:LINEITEM_TAX,
  rk:LINEITEM_RETURNFLAG, rl:LINEITEM_LINESTATUS, rm:LINEITEM_SHIPDATE,
  rn:LINEITEM_COMMITDATE, ro:LINEITEM_RECEIPTDATE, rp:LINEITEM_SHIPINSTRUCT,
  rq:LINEITEM_SHIPMODE, rr:LINEITEM_COMMENT} in 
  ((nd_log_write_insert_LINEITEM {ra:vid, rb:LINEITEM_ORDERKEY,
      rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
      rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
      ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
      rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
      ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT});
   tuples.iterate ((\tuple -> bind map_REVENUE_mLINEITEM1_s4_buf as ind
   map_REVENUE_mLINEITEM1_s4_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2, rd:_tup3, re:_tup4, rf:_tup5}
     in
     case ((map_REVENUE_mLINEITEM1_s4_buf_d.filter ((\b1 -> bind b1 as {ra:ra,
       rb:rb, rc:rc, rd:rd, re:re, rf:rf} in (((ra == _tup0 and re == _tup4)
       and rd == _tup3) and rc == _tup2) and rb == _tup1))).peek ()) of
       {Some vals -> map_REVENUE_mLINEITEM1_s4_buf_d.update vals tuple}
       {None -> map_REVENUE_mLINEITEM1_s4_buf_d.insert tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:4, rc:-1}
   then
     nd_insert_LINEITEM_do_complete_s4 {ra:vid, rb:LINEITEM_ORDERKEY,
       rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
       rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
       ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
       rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
       ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT}
   else ())))
trigger nd_insert_LINEITEM_do_complete_s5_trig : { ra:{ key:int, value:int },
  rb:int, rc:int, rd:int, re:int, rf:real, rg:real, rh:real, ri:real,
  rj:string, rk:string, rl:int, rm:int, rn:int, ro:string, rp:string, rq:string
  } = (\b1 -> bind b1 as {ra:vid, rb:LINEITEM_ORDERKEY, rc:LINEITEM_PARTKEY,
  rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER, rf:LINEITEM_QUANTITY,
  rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX,
  rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS, rl:LINEITEM_SHIPDATE,
  rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE, ro:LINEITEM_SHIPINSTRUCT,
  rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT} in 
  nd_insert_LINEITEM_do_complete_s5 {ra:vid, rb:LINEITEM_ORDERKEY,
    rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
    rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
    ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
    rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
    ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT})
trigger nd_insert_LINEITEM_do_complete_s6_trig : { ra:{ key:int, value:int },
  rb:int, rc:int, rd:int, re:int, rf:real, rg:real, rh:real, ri:real,
  rj:string, rk:string, rl:int, rm:int, rn:int, ro:string, rp:string, rq:string
  } = (\b1 -> bind b1 as {ra:vid, rb:LINEITEM_ORDERKEY, rc:LINEITEM_PARTKEY,
  rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER, rf:LINEITEM_QUANTITY,
  rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX,
  rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS, rl:LINEITEM_SHIPDATE,
  rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE, ro:LINEITEM_SHIPINSTRUCT,
  rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT} in 
  nd_insert_LINEITEM_do_complete_s6 {ra:vid, rb:LINEITEM_ORDERKEY,
    rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
    rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
    ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
    rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
    ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT})
trigger insert_LINEITEM_rcv_corrective_s4_m_REVENUE_mLINEITEM1 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int },
  rf:collection { key:int, value:int } @ { Seq }, rg:collection { ra:string,
  rb:int, rc:string, rd:int, re:int } @ { Collection } } = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid,
  rf:compute_vids, rg:delta_tuples} in 
  ((nd_add_delta_to_string_int_string_int_int
      {ra:map_REVENUE_mLINEITEM1_s4_buf, rb:false, rc:vid, rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:4}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_insert_LINEITEM compute_vid as
         {ra:LINEITEM_ORDERKEY, rb:LINEITEM_PARTKEY, rc:LINEITEM_SUPPKEY, rd:LINEITEM_LINENUMBER, re:LINEITEM_QUANTITY, rf:LINEITEM_EXTENDEDPRICE, rg:LINEITEM_DISCOUNT, rh:LINEITEM_TAX, ri:LINEITEM_RETURNFLAG, rj:LINEITEM_LINESTATUS, rk:LINEITEM_SHIPDATE, rl:LINEITEM_COMMITDATE, rm:LINEITEM_RECEIPTDATE, rn:LINEITEM_SHIPINSTRUCT, ro:LINEITEM_SHIPMODE, rp:LINEITEM_COMMENT}
         in
         acc_count +
           insert_LINEITEM_do_corrective_s4_m_REVENUE_mLINEITEM1 {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:compute_vid,
             rf:LINEITEM_ORDERKEY, rg:LINEITEM_PARTKEY, rh:LINEITEM_SUPPKEY,
             ri:LINEITEM_LINENUMBER, rj:LINEITEM_QUANTITY,
             rk:LINEITEM_EXTENDEDPRICE, rl:LINEITEM_DISCOUNT, rm:LINEITEM_TAX,
             rn:LINEITEM_RETURNFLAG, ro:LINEITEM_LINESTATUS,
             rp:LINEITEM_SHIPDATE, rq:LINEITEM_COMMITDATE,
             rr:LINEITEM_RECEIPTDATE, rs:LINEITEM_SHIPINSTRUCT,
             rt:LINEITEM_SHIPMODE, ru:LINEITEM_COMMENT, rv:delta_tuples}
       else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger nd_delete_LINEITEM_rcv_put : { ra:address, rb:collection { key:int,
  value:int } @ { Collection }, rc:{ key:int, value:int }, rd:int, re:int,
  rf:int, rg:int, rh:real, ri:real, rj:real, rk:real, rl:string, rm:string,
  rn:int, ro:int, rp:int, rq:string, rr:string, rs:string } = (\b1 ->
  bind b1 as {ra:sender_ip, rb:stmt_cnt_list, rc:vid, rd:LINEITEM_ORDERKEY,
  re:LINEITEM_PARTKEY, rf:LINEITEM_SUPPKEY, rg:LINEITEM_LINENUMBER,
  rh:LINEITEM_QUANTITY, ri:LINEITEM_EXTENDEDPRICE, rj:LINEITEM_DISCOUNT,
  rk:LINEITEM_TAX, rl:LINEITEM_RETURNFLAG, rm:LINEITEM_LINESTATUS,
  rn:LINEITEM_SHIPDATE, ro:LINEITEM_COMMITDATE, rp:LINEITEM_RECEIPTDATE,
  rq:LINEITEM_SHIPINSTRUCT, rr:LINEITEM_SHIPMODE, rs:LINEITEM_COMMENT} in 
  (stmt_cnt_list.iterate ((\b1 -> bind b1 as {key:stmt_id, value:count} in 
   if nd_check_stmt_cntr_index {ra:vid, rb:stmt_id, rc:count}
   then if stmt_id == 9
     then
       nd_delete_LINEITEM_do_complete_s9 {ra:vid, rb:LINEITEM_ORDERKEY,
         rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
         rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
         ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
         rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
         ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT}
     else if stmt_id == 8
       then
         nd_delete_LINEITEM_do_complete_s8 {ra:vid, rb:LINEITEM_ORDERKEY,
           rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
           rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE,
           rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG,
           rk:LINEITEM_LINESTATUS, rl:LINEITEM_SHIPDATE,
           rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
           ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT}
       else if stmt_id == 7
         then
           nd_delete_LINEITEM_do_complete_s7 {ra:vid, rb:LINEITEM_ORDERKEY,
             rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
             rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE,
             rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG,
             rk:LINEITEM_LINESTATUS, rl:LINEITEM_SHIPDATE,
             rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
             ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE,
             rq:LINEITEM_COMMENT} else () else ()));
   (sw_ack_rcv, sender_ip)<- {key:me, value:vid}))
trigger nd_delete_LINEITEM_rcv_fetch : { ra:collection { key:int, value:int
  } @ { Collection }, rb:{ key:int, value:int }, rc:int, rd:int, re:int,
  rf:int, rg:real, rh:real, ri:real, rj:real, rk:string, rl:string, rm:int,
  rn:int, ro:int, rp:string, rq:string, rr:string } = (\b1 ->
  bind b1 as {ra:stmt_map_ids, rb:vid, rc:LINEITEM_ORDERKEY,
  rd:LINEITEM_PARTKEY, re:LINEITEM_SUPPKEY, rf:LINEITEM_LINENUMBER,
  rg:LINEITEM_QUANTITY, rh:LINEITEM_EXTENDEDPRICE, ri:LINEITEM_DISCOUNT,
  rj:LINEITEM_TAX, rk:LINEITEM_RETURNFLAG, rl:LINEITEM_LINESTATUS,
  rm:LINEITEM_SHIPDATE, rn:LINEITEM_COMMITDATE, ro:LINEITEM_RECEIPTDATE,
  rp:LINEITEM_SHIPINSTRUCT, rq:LINEITEM_SHIPMODE, rr:LINEITEM_COMMENT} in 
  ((nd_log_write_delete_LINEITEM {ra:vid, rb:LINEITEM_ORDERKEY,
      rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
      rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
      ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
      rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
      ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT});
   stmt_map_ids.iterate ((\b1 -> bind b1 as {key:stmt_id, value:map_id} in 
   if stmt_id == 7
   then if map_id == 4
     then (nd_delete_LINEITEM_send_push_s7_m_REVENUE_mLINEITEM1, me)<- {ra:vid,
       rb:LINEITEM_ORDERKEY, rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY,
       re:LINEITEM_LINENUMBER, rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE,
       rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG,
       rk:LINEITEM_LINESTATUS, rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE,
       rn:LINEITEM_RECEIPTDATE, ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE,
       rq:LINEITEM_COMMENT} else error (print "nd_rcv_fetch: invalid map id")
   else error (print "nd_rcv_fetch: invalid stmt id")))))
trigger nd_delete_LINEITEM_send_push_s7_m_REVENUE_mLINEITEM1 : { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:int, re:int, rf:real, rg:real, rh:real,
  ri:real, rj:string, rk:string, rl:int, rm:int, rn:int, ro:string, rp:string,
  rq:string } = (\b1 -> bind b1 as {ra:vid, rb:LINEITEM_ORDERKEY,
  rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
  rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
  ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
  rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
  ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT} in bind
  REVENUE_mLINEITEM1 as ind REVENUE_mLINEITEM1_deref in
  ((nd_log_master_write {key:vid, value:7});
   (shuffle_REVENUE_mLINEITEM1_to_REVENUE {ra:(),
      rb:frontier_string_int_string_int_int {key:vid,
           value:REVENUE_mLINEITEM1_deref}, rc:true}).iterate ((\b1 ->
   bind b1 as {key:ip, value:tuples} in 
   (nd_delete_LINEITEM_rcv_push_s7_m_REVENUE_mLINEITEM1, ip)<- {ra:tuples,
   rb:vid, rc:LINEITEM_ORDERKEY, rd:LINEITEM_PARTKEY, re:LINEITEM_SUPPKEY,
   rf:LINEITEM_LINENUMBER, rg:LINEITEM_QUANTITY, rh:LINEITEM_EXTENDEDPRICE,
   ri:LINEITEM_DISCOUNT, rj:LINEITEM_TAX, rk:LINEITEM_RETURNFLAG,
   rl:LINEITEM_LINESTATUS, rm:LINEITEM_SHIPDATE, rn:LINEITEM_COMMITDATE,
   ro:LINEITEM_RECEIPTDATE, rp:LINEITEM_SHIPINSTRUCT, rq:LINEITEM_SHIPMODE,
   rr:LINEITEM_COMMENT}))))
trigger nd_delete_LINEITEM_rcv_push_s7_m_REVENUE_mLINEITEM1 : { ra:collection {
  ra:{ key:int, value:int }, rb:string, rc:int, rd:string, re:int, rf:int
  } @ { Collection }, rb:{ key:int, value:int }, rc:int, rd:int, re:int,
  rf:int, rg:real, rh:real, ri:real, rj:real, rk:string, rl:string, rm:int,
  rn:int, ro:int, rp:string, rq:string, rr:string } = (\b1 ->
  bind b1 as {ra:tuples, rb:vid, rc:LINEITEM_ORDERKEY, rd:LINEITEM_PARTKEY,
  re:LINEITEM_SUPPKEY, rf:LINEITEM_LINENUMBER, rg:LINEITEM_QUANTITY,
  rh:LINEITEM_EXTENDEDPRICE, ri:LINEITEM_DISCOUNT, rj:LINEITEM_TAX,
  rk:LINEITEM_RETURNFLAG, rl:LINEITEM_LINESTATUS, rm:LINEITEM_SHIPDATE,
  rn:LINEITEM_COMMITDATE, ro:LINEITEM_RECEIPTDATE, rp:LINEITEM_SHIPINSTRUCT,
  rq:LINEITEM_SHIPMODE, rr:LINEITEM_COMMENT} in 
  ((nd_log_write_delete_LINEITEM {ra:vid, rb:LINEITEM_ORDERKEY,
      rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
      rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
      ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
      rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
      ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT});
   tuples.iterate ((\tuple -> bind map_REVENUE_mLINEITEM1_s7_buf as ind
   map_REVENUE_mLINEITEM1_s7_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2, rd:_tup3, re:_tup4, rf:_tup5}
     in
     case ((map_REVENUE_mLINEITEM1_s7_buf_d.filter ((\b1 -> bind b1 as {ra:ra,
       rb:rb, rc:rc, rd:rd, re:re, rf:rf} in (((ra == _tup0 and re == _tup4)
       and rd == _tup3) and rc == _tup2) and rb == _tup1))).peek ()) of
       {Some vals -> map_REVENUE_mLINEITEM1_s7_buf_d.update vals tuple}
       {None -> map_REVENUE_mLINEITEM1_s7_buf_d.insert tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:7, rc:-1}
   then
     nd_delete_LINEITEM_do_complete_s7 {ra:vid, rb:LINEITEM_ORDERKEY,
       rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
       rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
       ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
       rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
       ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT}
   else ())))
trigger nd_delete_LINEITEM_do_complete_s8_trig : { ra:{ key:int, value:int },
  rb:int, rc:int, rd:int, re:int, rf:real, rg:real, rh:real, ri:real,
  rj:string, rk:string, rl:int, rm:int, rn:int, ro:string, rp:string, rq:string
  } = (\b1 -> bind b1 as {ra:vid, rb:LINEITEM_ORDERKEY, rc:LINEITEM_PARTKEY,
  rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER, rf:LINEITEM_QUANTITY,
  rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX,
  rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS, rl:LINEITEM_SHIPDATE,
  rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE, ro:LINEITEM_SHIPINSTRUCT,
  rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT} in 
  nd_delete_LINEITEM_do_complete_s8 {ra:vid, rb:LINEITEM_ORDERKEY,
    rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
    rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
    ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
    rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
    ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT})
trigger nd_delete_LINEITEM_do_complete_s9_trig : { ra:{ key:int, value:int },
  rb:int, rc:int, rd:int, re:int, rf:real, rg:real, rh:real, ri:real,
  rj:string, rk:string, rl:int, rm:int, rn:int, ro:string, rp:string, rq:string
  } = (\b1 -> bind b1 as {ra:vid, rb:LINEITEM_ORDERKEY, rc:LINEITEM_PARTKEY,
  rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER, rf:LINEITEM_QUANTITY,
  rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX,
  rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS, rl:LINEITEM_SHIPDATE,
  rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE, ro:LINEITEM_SHIPINSTRUCT,
  rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT} in 
  nd_delete_LINEITEM_do_complete_s9 {ra:vid, rb:LINEITEM_ORDERKEY,
    rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
    rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
    ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
    rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
    ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT})
trigger delete_LINEITEM_rcv_corrective_s7_m_REVENUE_mLINEITEM1 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int },
  rf:collection { key:int, value:int } @ { Seq }, rg:collection { ra:string,
  rb:int, rc:string, rd:int, re:int } @ { Collection } } = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid,
  rf:compute_vids, rg:delta_tuples} in 
  ((nd_add_delta_to_string_int_string_int_int
      {ra:map_REVENUE_mLINEITEM1_s7_buf, rb:false, rc:vid, rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:7}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_delete_LINEITEM compute_vid as
         {ra:LINEITEM_ORDERKEY, rb:LINEITEM_PARTKEY, rc:LINEITEM_SUPPKEY, rd:LINEITEM_LINENUMBER, re:LINEITEM_QUANTITY, rf:LINEITEM_EXTENDEDPRICE, rg:LINEITEM_DISCOUNT, rh:LINEITEM_TAX, ri:LINEITEM_RETURNFLAG, rj:LINEITEM_LINESTATUS, rk:LINEITEM_SHIPDATE, rl:LINEITEM_COMMITDATE, rm:LINEITEM_RECEIPTDATE, rn:LINEITEM_SHIPINSTRUCT, ro:LINEITEM_SHIPMODE, rp:LINEITEM_COMMENT}
         in
         acc_count +
           delete_LINEITEM_do_corrective_s7_m_REVENUE_mLINEITEM1 {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:compute_vid,
             rf:LINEITEM_ORDERKEY, rg:LINEITEM_PARTKEY, rh:LINEITEM_SUPPKEY,
             ri:LINEITEM_LINENUMBER, rj:LINEITEM_QUANTITY,
             rk:LINEITEM_EXTENDEDPRICE, rl:LINEITEM_DISCOUNT, rm:LINEITEM_TAX,
             rn:LINEITEM_RETURNFLAG, ro:LINEITEM_LINESTATUS,
             rp:LINEITEM_SHIPDATE, rq:LINEITEM_COMMITDATE,
             rr:LINEITEM_RECEIPTDATE, rs:LINEITEM_SHIPINSTRUCT,
             rt:LINEITEM_SHIPMODE, ru:LINEITEM_COMMENT, rv:delta_tuples}
       else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))


source master : () = value(())feed master |> ms_send_addr_self


source switch : { ra:string, rb:int, rc:real, rd:string, re:int, rf:string,
rg:string, rh:string, ri:string, rj:string, rk:int, rl:real, rm:real, rn:int,
ro:string, rp:string, rq:string, rr:string, rs:int, rt:string, ru:int,
rv:string, rw:string, rx:int, ry:string, rz:real, rza:string, rzb:int,
rzc:real, rzd:string, rze:string, rzf:string, rzg:string, rzh:int, rzi:int,
rzj:int, rzk:real, rzl:real, rzm:real, rzn:string
} = file "/k3/K3/temp/tpch19.csv" psvfeed switch |> sw_demux








