include "Core/Builtins.k3"
include "Annotation/Map.k3"
include "Annotation/Set.k3"
include "Annotation/Seq.k3"

declare g_min_vid : { key:int, value:int } = {key:0, value:0}

declare frontier_int_int : { key:{ key:int, value:int }, value:collection {
  r1:{ key:int, value:int }, r2:int, r3:int } @ { Collection }
  } -> collection { r1:{ key:int, value:int }, r2:int, r3:int
  } @ { Collection } = 
  (\b1 -> bind b1 as {key:vid, value:input_map} in 
  (input_map.groupBy 
    ((\b1 -> bind b1 as {r1:map_vid, r2:__map_0, r3:__map_val} in __map_0)) 
    ((\b2 -> (\b5 -> 
    bind b5 as {r1:map_vid, r2:__map_0, r3:__map_val} in 
  if map_vid < vid
  then if map_vid == b2.value
    then
      ((b2.key).insert {r1:map_vid, r2:__map_0, r3:__map_val};
       {key:b2.key, value:b2.value})
    else if map_vid > b2.value
      then {key:{| r1:{ key:int, value:int }, r2:int, r3:int | {r1:map_vid,
        r2:__map_0, r3:__map_val}|} @ { Collection }, value:map_vid}
      else {key:b2.key, value:b2.value} else {key:b2.key, value:b2.value})))
  {key:empty { r1:{ key:int, value:int }, r2:int, r3:int } @ { Collection },
  value:g_min_vid}).fold ((\__acc_ext -> (\b3 -> bind b3 as {value:b4} in 
  bind b4 as {key:project} in __acc_ext.combine project))) empty { r1:{
  key:int, value:int }, r2:int, r3:int } @ { Collection })

trigger dummy : () = (\_ -> ())

source master : () = value(())
feed master |> dummy
