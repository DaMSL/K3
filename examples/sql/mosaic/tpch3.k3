include "Core/Builtins.k3"
include "Annotation/Map.k3"
include "Annotation/Set.k3"
include "Annotation/Seq.k3"
declare my_peers : collection { i:address } @ {Collection} =
  peers.fold (\acc -> (\x -> (acc.insert {i:x.addr}; acc))) empty { i:address} @ Collection
declare switch_path : string = "agenda.csv"


declare nd_sent_done : mut bool = false


declare sw_sent_done : mut bool = false


declare ms_rcv_sw_init_ack_cnt : mut int = 0


declare ms_rcv_jobs_ack_cnt : mut int = 0


declare ms_rcv_job_cnt : mut int = 0


declare ms_rcv_node_done_cnt : mut int = 0


declare ms_rcv_switch_done_cnt : mut int = 0


declare g_init_vid : { key:int, value:int } = {key:0, value:0}


declare g_min_vid : { key:int, value:int } = {key:0, value:0}


declare g_max_vid : { key:int, value:int } = {key:get_max_int (),
  value:get_max_int ()}


declare g_start_vid : { key:int, value:int } = {key:0, value:1}


declare job_master : int = 0


declare job_switch : int = 1


declare job_node : int = 2


declare job_timer : int = 3


declare job : mut int = if role == "master" then job_master
  else if role == "switch" then job_switch
    else if role == "node" then job_node
      else if role == "timer" then job_timer
        else error (print "failed to find proper role")


declare jobs : mut collection { key:address, value:int } @ { Map }


declare master_addr : mut address


declare timer_addr : mut address


declare nodes : mut collection {i:address} @ { Collection }


declare switches : mut collection {i:address} @ { Collection }


declare num_peers : mut int = my_peers.size ()


declare num_switches : mut int = 0


declare num_nodes : mut int = 0


declare map_ids : collection { ra:int, rb:string, rc:int } @ { Collection } =
  {| ra:int, rb:string, rc:int | {ra:1, rb:"QUERY3", rc:4}, {ra:2,
  rb:"QUERY3_mLINEITEM1", rc:4}, {ra:3, rb:"QUERY3_mLINEITEM1_mCUSTOMER2",
  rc:5}, {ra:4, rb:"QUERY3_mORDERS1", rc:2}, {ra:5, rb:"QUERY3_mORDERS3",
  rc:2}, {ra:6, rb:"QUERY3_mORDERS6", rc:2}, {ra:7, rb:"QUERY3_mCUSTOMER2",
  rc:5}, {ra:8, rb:"QUERY3_mCUSTOMER4", rc:5}|} @ { Collection }


declare nd_stmt_cntrs : collection { key:{ key:{ key:int, value:int },
  value:int }, value:{ key:int, value:collection { key:int, value:int
  } @ { Map } } } @ { Map }


declare nd_log_master : collection { key:{ key:int, value:int }, value:int
  } @ { Set }


declare nd_rcvd_sys_done : mut bool = false


declare sw_init : mut bool = false


declare sw_seen_sentry : mut bool = false


declare sw_trig_buf_idx : collection {i:int} @ { Seq }


declare ms_start_time : mut int = 0


declare ms_end_time : mut int = 0


declare sw_buf_insert_CUSTOMER : collection { ra:int, rb:string, rc:string,
  rd:int, re:string, rf:real, rg:string, rh:string } @ { Seq }


declare sw_buf_delete_CUSTOMER : collection { ra:int, rb:string, rc:string,
  rd:int, re:string, rf:real, rg:string, rh:string } @ { Seq }


declare sw_buf_insert_ORDERS : collection { ra:int, rb:int, rc:string, rd:real,
  re:int, rf:string, rg:string, rh:int, ri:string } @ { Seq }


declare sw_buf_delete_ORDERS : collection { ra:int, rb:int, rc:string, rd:real,
  re:int, rf:string, rg:string, rh:int, ri:string } @ { Seq }


declare sw_buf_insert_LINEITEM : collection { ra:int, rb:int, rc:int, rd:int,
  re:real, rf:real, rg:real, rh:real, ri:string, rj:string, rk:int, rl:int,
  rm:int, rn:string, ro:string, rp:string } @ { Seq }


declare sw_buf_delete_LINEITEM : collection { ra:int, rb:int, rc:int, rd:int,
  re:real, rf:real, rg:real, rh:real, ri:string, rj:string, rk:int, rl:int,
  rm:int, rn:string, ro:string, rp:string } @ { Seq }


declare nd_log_insert_CUSTOMER : collection { key:{ key:int, value:int },
  value:{ ra:int, rb:string, rc:string, rd:int, re:string, rf:real, rg:string,
  rh:string } } @ { Map }


declare nd_log_delete_CUSTOMER : collection { key:{ key:int, value:int },
  value:{ ra:int, rb:string, rc:string, rd:int, re:string, rf:real, rg:string,
  rh:string } } @ { Map }


declare nd_log_insert_ORDERS : collection { key:{ key:int, value:int }, value:{
  ra:int, rb:int, rc:string, rd:real, re:int, rf:string, rg:string, rh:int,
  ri:string } } @ { Map }


declare nd_log_delete_ORDERS : collection { key:{ key:int, value:int }, value:{
  ra:int, rb:int, rc:string, rd:real, re:int, rf:string, rg:string, rh:int,
  ri:string } } @ { Map }


declare nd_log_insert_LINEITEM : collection { key:{ key:int, value:int },
  value:{ ra:int, rb:int, rc:int, rd:int, re:real, rf:real, rg:real, rh:real,
  ri:string, rj:string, rk:int, rl:int, rm:int, rn:string, ro:string, rp:string
  } } @ { Map }


declare nd_log_delete_LINEITEM : collection { key:{ key:int, value:int },
  value:{ ra:int, rb:int, rc:int, rd:int, re:real, rf:real, rg:real, rh:real,
  ri:string, rj:string, rk:int, rl:int, rm:int, rn:string, ro:string, rp:string
  } } @ { Map }


declare QUERY3 : ind collection { ra:{ key:int, value:int }, rb:int, rc:int,
  rd:int, re:real } @ { Set } = ind empty { ra:{ key:int, value:int }, rb:int,
  rc:int, rd:int, re:real } @ { Set }


declare QUERY3_mLINEITEM1 : ind collection { ra:{ key:int, value:int }, rb:int,
  rc:int, rd:int, re:int } @ { Set } = ind empty { ra:{ key:int, value:int },
  rb:int, rc:int, rd:int, re:int } @ { Set }


declare QUERY3_mLINEITEM1_mCUSTOMER2 : ind collection { ra:{ key:int, value:int
  }, rb:int, rc:int, rd:int, re:int, rf:int } @ { Set } = ind empty { ra:{
  key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:int } @ { Set }


declare QUERY3_mORDERS1 : ind collection { ra:{ key:int, value:int }, rb:int,
  rc:int } @ { Set } = ind empty { ra:{ key:int, value:int }, rb:int, rc:int
  } @ { Set }


declare QUERY3_mORDERS3 : ind collection { ra:{ key:int, value:int }, rb:int,
  rc:real } @ { Set } = ind empty { ra:{ key:int, value:int }, rb:int, rc:real
  } @ { Set }


declare QUERY3_mORDERS6 : ind collection { ra:{ key:int, value:int }, rb:int,
  rc:real } @ { Set } = ind empty { ra:{ key:int, value:int }, rb:int, rc:real
  } @ { Set }


declare QUERY3_mCUSTOMER2 : ind collection { ra:{ key:int, value:int }, rb:int,
  rc:int, rd:int, re:int, rf:real } @ { Set } = ind empty { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:int, re:int, rf:real } @ { Set }


declare QUERY3_mCUSTOMER4 : ind collection { ra:{ key:int, value:int }, rb:int,
  rc:int, rd:int, re:int, rf:real } @ { Set } = ind empty { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:int, re:int, rf:real } @ { Set }


declare map_QUERY3_mCUSTOMER2_s0_buf : ind collection { ra:{ key:int, value:int
  }, rb:int, rc:int, rd:int, re:int, rf:real } @ { Set } = ind empty { ra:{
  key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:real } @ { Set }


declare map_QUERY3_mCUSTOMER4_s0_buf : ind collection { ra:{ key:int, value:int
  }, rb:int, rc:int, rd:int, re:int, rf:real } @ { Set } = ind empty { ra:{
  key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:real } @ { Set }


declare map_QUERY3_mLINEITEM1_mCUSTOMER2_s1_buf : ind collection { ra:{
  key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:int } @ { Set } =
  ind empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:int
  } @ { Set }


declare map_QUERY3_mCUSTOMER2_s3_buf : ind collection { ra:{ key:int, value:int
  }, rb:int, rc:int, rd:int, re:int, rf:real } @ { Set } = ind empty { ra:{
  key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:real } @ { Set }


declare map_QUERY3_mCUSTOMER4_s3_buf : ind collection { ra:{ key:int, value:int
  }, rb:int, rc:int, rd:int, re:int, rf:real } @ { Set } = ind empty { ra:{
  key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:real } @ { Set }


declare map_QUERY3_mLINEITEM1_mCUSTOMER2_s4_buf : ind collection { ra:{
  key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:int } @ { Set } =
  ind empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:int
  } @ { Set }


declare map_QUERY3_mORDERS1_s6_buf : ind collection { ra:{ key:int, value:int
  }, rb:int, rc:int } @ { Set } = ind empty { ra:{ key:int, value:int },
  rb:int, rc:int } @ { Set }


declare map_QUERY3_mORDERS3_s6_buf : ind collection { ra:{ key:int, value:int
  }, rb:int, rc:real } @ { Set } = ind empty { ra:{ key:int, value:int },
  rb:int, rc:real } @ { Set }


declare map_QUERY3_mORDERS6_s6_buf : ind collection { ra:{ key:int, value:int
  }, rb:int, rc:real } @ { Set } = ind empty { ra:{ key:int, value:int },
  rb:int, rc:real } @ { Set }


declare map_QUERY3_mORDERS1_s7_buf : ind collection { ra:{ key:int, value:int
  }, rb:int, rc:int } @ { Set } = ind empty { ra:{ key:int, value:int },
  rb:int, rc:int } @ { Set }


declare map_QUERY3_mORDERS3_s9_buf : ind collection { ra:{ key:int, value:int
  }, rb:int, rc:real } @ { Set } = ind empty { ra:{ key:int, value:int },
  rb:int, rc:real } @ { Set }


declare map_QUERY3_mORDERS6_s10_buf : ind collection { ra:{ key:int, value:int
  }, rb:int, rc:real } @ { Set } = ind empty { ra:{ key:int, value:int },
  rb:int, rc:real } @ { Set }


declare map_QUERY3_mORDERS1_s11_buf : ind collection { ra:{ key:int, value:int
  }, rb:int, rc:int } @ { Set } = ind empty { ra:{ key:int, value:int },
  rb:int, rc:int } @ { Set }


declare map_QUERY3_mORDERS3_s11_buf : ind collection { ra:{ key:int, value:int
  }, rb:int, rc:real } @ { Set } = ind empty { ra:{ key:int, value:int },
  rb:int, rc:real } @ { Set }


declare map_QUERY3_mORDERS6_s11_buf : ind collection { ra:{ key:int, value:int
  }, rb:int, rc:real } @ { Set } = ind empty { ra:{ key:int, value:int },
  rb:int, rc:real } @ { Set }


declare map_QUERY3_mORDERS1_s12_buf : ind collection { ra:{ key:int, value:int
  }, rb:int, rc:int } @ { Set } = ind empty { ra:{ key:int, value:int },
  rb:int, rc:int } @ { Set }


declare map_QUERY3_mORDERS3_s14_buf : ind collection { ra:{ key:int, value:int
  }, rb:int, rc:real } @ { Set } = ind empty { ra:{ key:int, value:int },
  rb:int, rc:real } @ { Set }


declare map_QUERY3_mORDERS6_s15_buf : ind collection { ra:{ key:int, value:int
  }, rb:int, rc:real } @ { Set } = ind empty { ra:{ key:int, value:int },
  rb:int, rc:real } @ { Set }


declare map_QUERY3_mLINEITEM1_s16_buf : ind collection { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:int, re:int } @ { Set } = ind empty { ra:{
  key:int, value:int }, rb:int, rc:int, rd:int, re:int } @ { Set }


declare map_QUERY3_mLINEITEM1_mCUSTOMER2_s19_buf : ind collection { ra:{
  key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:int } @ { Set } =
  ind empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:int
  } @ { Set }


declare map_QUERY3_mLINEITEM1_mCUSTOMER2_s20_buf : ind collection { ra:{
  key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:int } @ { Set } =
  ind empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:int
  } @ { Set }


declare map_QUERY3_mLINEITEM1_s21_buf : ind collection { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:int, re:int } @ { Set } = ind empty { ra:{
  key:int, value:int }, rb:int, rc:int, rd:int, re:int } @ { Set }


declare map_QUERY3_mLINEITEM1_mCUSTOMER2_s24_buf : ind collection { ra:{
  key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:int } @ { Set } =
  ind empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:int
  } @ { Set }


declare map_QUERY3_mLINEITEM1_mCUSTOMER2_s25_buf : ind collection { ra:{
  key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:int } @ { Set } =
  ind empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:int
  } @ { Set }


declare map_QUERY3_mORDERS3_s36_buf : ind collection { ra:{ key:int, value:int
  }, rb:int, rc:real } @ { Set } = ind empty { ra:{ key:int, value:int },
  rb:int, rc:real } @ { Set }


declare map_QUERY3_mORDERS6_s36_buf : ind collection { ra:{ key:int, value:int
  }, rb:int, rc:real } @ { Set } = ind empty { ra:{ key:int, value:int },
  rb:int, rc:real } @ { Set }


declare map_QUERY3_mORDERS3_s38_buf : ind collection { ra:{ key:int, value:int
  }, rb:int, rc:real } @ { Set } = ind empty { ra:{ key:int, value:int },
  rb:int, rc:real } @ { Set }


declare map_QUERY3_mORDERS6_s38_buf : ind collection { ra:{ key:int, value:int
  }, rb:int, rc:real } @ { Set } = ind empty { ra:{ key:int, value:int },
  rb:int, rc:real } @ { Set }


declare map_QUERY3_mORDERS1_s40_buf : ind collection { ra:{ key:int, value:int
  }, rb:int, rc:int } @ { Set } = ind empty { ra:{ key:int, value:int },
  rb:int, rc:int } @ { Set }


declare map_QUERY3_mORDERS1_s42_buf : ind collection { ra:{ key:int, value:int
  }, rb:int, rc:int } @ { Set } = ind empty { ra:{ key:int, value:int },
  rb:int, rc:int } @ { Set }


declare map_QUERY3_mORDERS1_s44_buf : ind collection { ra:{ key:int, value:int
  }, rb:int, rc:int } @ { Set } = ind empty { ra:{ key:int, value:int },
  rb:int, rc:int } @ { Set }


declare map_QUERY3_mORDERS1_s46_buf : ind collection { ra:{ key:int, value:int
  }, rb:int, rc:int } @ { Set } = ind empty { ra:{ key:int, value:int },
  rb:int, rc:int } @ { Set }


declare map_QUERY3_mORDERS3_s48_buf : ind collection { ra:{ key:int, value:int
  }, rb:int, rc:real } @ { Set } = ind empty { ra:{ key:int, value:int },
  rb:int, rc:real } @ { Set }


declare map_QUERY3_mORDERS6_s48_buf : ind collection { ra:{ key:int, value:int
  }, rb:int, rc:real } @ { Set } = ind empty { ra:{ key:int, value:int },
  rb:int, rc:real } @ { Set }


declare map_QUERY3_mORDERS3_s50_buf : ind collection { ra:{ key:int, value:int
  }, rb:int, rc:real } @ { Set } = ind empty { ra:{ key:int, value:int },
  rb:int, rc:real } @ { Set }


declare map_QUERY3_mORDERS6_s50_buf : ind collection { ra:{ key:int, value:int
  }, rb:int, rc:real } @ { Set } = ind empty { ra:{ key:int, value:int },
  rb:int, rc:real } @ { Set }


declare map_QUERY3_mORDERS1_s52_buf : ind collection { ra:{ key:int, value:int
  }, rb:int, rc:int } @ { Set } = ind empty { ra:{ key:int, value:int },
  rb:int, rc:int } @ { Set }


declare map_QUERY3_mORDERS1_s54_buf : ind collection { ra:{ key:int, value:int
  }, rb:int, rc:int } @ { Set } = ind empty { ra:{ key:int, value:int },
  rb:int, rc:int } @ { Set }


declare map_QUERY3_mORDERS1_s56_buf : ind collection { ra:{ key:int, value:int
  }, rb:int, rc:int } @ { Set } = ind empty { ra:{ key:int, value:int },
  rb:int, rc:int } @ { Set }


declare map_QUERY3_mORDERS1_s58_buf : ind collection { ra:{ key:int, value:int
  }, rb:int, rc:int } @ { Set } = ind empty { ra:{ key:int, value:int },
  rb:int, rc:int } @ { Set }


declare tm_timer_list : mut collection { ra:int, rb:int, rc:address } @ { Seq }


declare sw_next_switch_addr : mut address


declare sw_need_vid_cntr : mut int = 0


declare sw_token_vid_list : collection { key:{ key:int, value:int }, value:int
  } @ { Seq }


declare sw_highest_vid : mut { key:int, value:int }


declare node_ring : mut collection { key:address, value:int } @ { Seq }


declare replicas : mut int = 8


declare pmap_input : collection { key:string, value:collection { key:int,
  value:int } @ { Seq } } @ { Seq } = {| key:string, value:collection {
  key:int, value:int } @ { Seq } | {key:"QUERY3", value:{| key:int, value:int |
  {key:0, value:4}, {key:1, value:2}, {key:2, value:2}|} @ { Seq }},
  {key:"QUERY3_mLINEITEM1", value:{| key:int, value:int | {key:0, value:4},
  {key:1, value:2}, {key:2, value:2}|} @ { Seq }},
  {key:"QUERY3_mLINEITEM1_mCUSTOMER2", value:{| key:int, value:int | {key:0,
  value:2}, {key:1, value:2}, {key:2, value:2}, {key:3, value:2}|} @ { Seq }},
  {key:"QUERY3_mORDERS1", value:{| key:int, value:int | {key:0,
  value:16}|} @ { Seq }}, {key:"QUERY3_mORDERS3", value:{| key:int, value:int |
  {key:0, value:16}|} @ { Seq }}, {key:"QUERY3_mORDERS6", value:{| key:int,
  value:int | {key:0, value:16}|} @ { Seq }}, {key:"QUERY3_mCUSTOMER2",
  value:{| key:int, value:int | {key:0, value:2}, {key:1, value:2}, {key:2,
  value:2}, {key:3, value:2}|} @ { Seq }}, {key:"QUERY3_mCUSTOMER4", value:{|
  key:int, value:int | {key:0, value:2}, {key:1, value:2}, {key:2, value:2},
  {key:3, value:2}|} @ { Seq }}|} @ { Seq }


declare pmap_data : collection { key:int, value:collection { key:int, value:int
  } @ { Seq } } @ { Seq } = pmap_input.fold ((\_accmap -> (\b3 ->
  bind b3 as {key:map_name, value:map_types} in 
  (_accmap.insert {key:(case ((map_ids.filter ((\b1 -> bind b1 as {ra:ra,
   rb:rb, rc:rc} in rb == map_name))).peek ()) of
   {Some x -> x}{None -> error (print "can't find map in map_ids")}).ra,
   value:map_types};
   _accmap)))) empty { key:int, value:collection { key:int, value:int
  } @ { Seq } } @ { Seq }


declare sw_num_ack : mut int = 0


declare sw_num_sent : mut int = 0


declare sw_ack_log : collection { key:{ key:int, value:int }, value:int
  } @ { Map }


declare ms_gc_interval : mut int = 20000


declare ms_gc_vid_map : mut collection { key:address, value:{ key:int,
  value:int } } @ { Map }


declare ms_gc_vid_ctr : mut int = 0


declare ms_num_gc_expected : mut int = my_peers.size ()


declare nd_log_master_write : { key:{ key:int, value:int }, value:int } -> () =
  (\b1 -> bind b1 as {key:vid, value:stmt_id} in nd_log_master.insert {key:vid,
  value:stmt_id})


declare nd_log_write_insert_CUSTOMER : { ra:{ key:int, value:int }, rb:int,
  rc:string, rd:string, re:int, rf:string, rg:real, rh:string, ri:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:CUSTOMER_CUSTKEY, rc:CUSTOMER_NAME,
  rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY, rf:CUSTOMER_PHONE,
  rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT, ri:CUSTOMER_COMMENT} in 
  nd_log_insert_CUSTOMER.insert {key:vid, value:{ra:CUSTOMER_CUSTKEY,
  rb:CUSTOMER_NAME, rc:CUSTOMER_ADDRESS, rd:CUSTOMER_NATIONKEY,
  re:CUSTOMER_PHONE, rf:CUSTOMER_ACCTBAL, rg:CUSTOMER_MKTSEGMENT,
  rh:CUSTOMER_COMMENT}})


declare nd_log_write_delete_CUSTOMER : { ra:{ key:int, value:int }, rb:int,
  rc:string, rd:string, re:int, rf:string, rg:real, rh:string, ri:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:CUSTOMER_CUSTKEY, rc:CUSTOMER_NAME,
  rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY, rf:CUSTOMER_PHONE,
  rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT, ri:CUSTOMER_COMMENT} in 
  nd_log_delete_CUSTOMER.insert {key:vid, value:{ra:CUSTOMER_CUSTKEY,
  rb:CUSTOMER_NAME, rc:CUSTOMER_ADDRESS, rd:CUSTOMER_NATIONKEY,
  re:CUSTOMER_PHONE, rf:CUSTOMER_ACCTBAL, rg:CUSTOMER_MKTSEGMENT,
  rh:CUSTOMER_COMMENT}})


declare nd_log_write_insert_ORDERS : { ra:{ key:int, value:int }, rb:int,
  rc:int, rd:string, re:real, rf:int, rg:string, rh:string, ri:int, rj:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
  rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
  rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
  rj:ORDERS_COMMENT} in nd_log_insert_ORDERS.insert {key:vid,
  value:{ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS,
  rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY,
  rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}})


declare nd_log_write_delete_ORDERS : { ra:{ key:int, value:int }, rb:int,
  rc:int, rd:string, re:real, rf:int, rg:string, rh:string, ri:int, rj:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
  rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
  rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
  rj:ORDERS_COMMENT} in nd_log_delete_ORDERS.insert {key:vid,
  value:{ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS,
  rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY,
  rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}})


declare nd_log_write_insert_LINEITEM : { ra:{ key:int, value:int }, rb:int,
  rc:int, rd:int, re:int, rf:real, rg:real, rh:real, ri:real, rj:string,
  rk:string, rl:int, rm:int, rn:int, ro:string, rp:string, rq:string } -> () =
  (\b1 -> bind b1 as {ra:vid, rb:LINEITEM_ORDERKEY, rc:LINEITEM_PARTKEY,
  rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER, rf:LINEITEM_QUANTITY,
  rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX,
  rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS, rl:LINEITEM_SHIPDATE,
  rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE, ro:LINEITEM_SHIPINSTRUCT,
  rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT} in nd_log_insert_LINEITEM.insert
  {key:vid, value:{ra:LINEITEM_ORDERKEY, rb:LINEITEM_PARTKEY,
  rc:LINEITEM_SUPPKEY, rd:LINEITEM_LINENUMBER, re:LINEITEM_QUANTITY,
  rf:LINEITEM_EXTENDEDPRICE, rg:LINEITEM_DISCOUNT, rh:LINEITEM_TAX,
  ri:LINEITEM_RETURNFLAG, rj:LINEITEM_LINESTATUS, rk:LINEITEM_SHIPDATE,
  rl:LINEITEM_COMMITDATE, rm:LINEITEM_RECEIPTDATE, rn:LINEITEM_SHIPINSTRUCT,
  ro:LINEITEM_SHIPMODE, rp:LINEITEM_COMMENT}})


declare nd_log_write_delete_LINEITEM : { ra:{ key:int, value:int }, rb:int,
  rc:int, rd:int, re:int, rf:real, rg:real, rh:real, ri:real, rj:string,
  rk:string, rl:int, rm:int, rn:int, ro:string, rp:string, rq:string } -> () =
  (\b1 -> bind b1 as {ra:vid, rb:LINEITEM_ORDERKEY, rc:LINEITEM_PARTKEY,
  rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER, rf:LINEITEM_QUANTITY,
  rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX,
  rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS, rl:LINEITEM_SHIPDATE,
  rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE, ro:LINEITEM_SHIPINSTRUCT,
  rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT} in nd_log_delete_LINEITEM.insert
  {key:vid, value:{ra:LINEITEM_ORDERKEY, rb:LINEITEM_PARTKEY,
  rc:LINEITEM_SUPPKEY, rd:LINEITEM_LINENUMBER, re:LINEITEM_QUANTITY,
  rf:LINEITEM_EXTENDEDPRICE, rg:LINEITEM_DISCOUNT, rh:LINEITEM_TAX,
  ri:LINEITEM_RETURNFLAG, rj:LINEITEM_LINESTATUS, rk:LINEITEM_SHIPDATE,
  rl:LINEITEM_COMMITDATE, rm:LINEITEM_RECEIPTDATE, rn:LINEITEM_SHIPINSTRUCT,
  ro:LINEITEM_SHIPMODE, rp:LINEITEM_COMMENT}})


declare nd_log_get_bound_insert_CUSTOMER : { key:int, value:int } -> { ra:int,
  rb:string, rc:string, rd:int, re:string, rf:real, rg:string, rh:string } =
  (\vid -> (case ((nd_log_insert_CUSTOMER.filter ((\b1 -> bind b1 as {key:key,
  value:value} in key == vid))).peek ()) of
  {Some x -> x}{None -> error (print "failed to find log")}).value)


declare nd_log_get_bound_delete_CUSTOMER : { key:int, value:int } -> { ra:int,
  rb:string, rc:string, rd:int, re:string, rf:real, rg:string, rh:string } =
  (\vid -> (case ((nd_log_delete_CUSTOMER.filter ((\b1 -> bind b1 as {key:key,
  value:value} in key == vid))).peek ()) of
  {Some x -> x}{None -> error (print "failed to find log")}).value)


declare nd_log_get_bound_insert_ORDERS : { key:int, value:int } -> { ra:int,
  rb:int, rc:string, rd:real, re:int, rf:string, rg:string, rh:int, ri:string
  } = (\vid -> (case ((nd_log_insert_ORDERS.filter ((\b1 ->
  bind b1 as {key:key, value:value} in key == vid))).peek ()) of
  {Some x -> x}{None -> error (print "failed to find log")}).value)


declare nd_log_get_bound_delete_ORDERS : { key:int, value:int } -> { ra:int,
  rb:int, rc:string, rd:real, re:int, rf:string, rg:string, rh:int, ri:string
  } = (\vid -> (case ((nd_log_delete_ORDERS.filter ((\b1 ->
  bind b1 as {key:key, value:value} in key == vid))).peek ()) of
  {Some x -> x}{None -> error (print "failed to find log")}).value)


declare nd_log_get_bound_insert_LINEITEM : { key:int, value:int } -> { ra:int,
  rb:int, rc:int, rd:int, re:real, rf:real, rg:real, rh:real, ri:string,
  rj:string, rk:int, rl:int, rm:int, rn:string, ro:string, rp:string } =
  (\vid -> (case ((nd_log_insert_LINEITEM.filter ((\b1 -> bind b1 as {key:key,
  value:value} in key == vid))).peek ()) of
  {Some x -> x}{None -> error (print "failed to find log")}).value)


declare nd_log_get_bound_delete_LINEITEM : { key:int, value:int } -> { ra:int,
  rb:int, rc:int, rd:int, re:real, rf:real, rg:real, rh:real, ri:string,
  rj:string, rk:int, rl:int, rm:int, rn:string, ro:string, rp:string } =
  (\vid -> (case ((nd_log_delete_LINEITEM.filter ((\b1 -> bind b1 as {key:key,
  value:value} in key == vid))).peek ()) of
  {Some x -> x}{None -> error (print "failed to find log")}).value)


declare nd_log_read_geq : { key:int, value:int } -> collection { key:{ key:int,
  value:int }, value:int } @ { Set } = (\vid2 -> nd_log_master.filter ((\b1 ->
  bind b1 as {key:vid, value:stmt_id} in vid >= vid2)))


declare nd_check_stmt_cntr_index : { ra:{ key:int, value:int }, rb:int, rc:int
  } -> bool = (\b1 -> bind b1 as {ra:vid, rb:stmt_id, rc:add_to_count} in case
  ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in key ==
  {key:vid, value:stmt_id}))).peek ()) of
  {Some lookup_value -> let new_count = add_to_count + (lookup_value.value).key
    in
    (nd_stmt_cntrs.update lookup_value {key:{key:vid, value:stmt_id},
     value:{key:new_count, value:(lookup_value.value).value}};
     0 == new_count)}{None ->
                       (nd_stmt_cntrs.insert {key:{key:vid, value:stmt_id},
                        value:{key:add_to_count, value:empty { key:int,
                        value:int } @ { Map }}};
                        false)})


declare nd_complete_stmt_cntr_check : { key:{ key:int, value:int }, value:int
  } -> () = (\b1 -> bind b1 as {key:vid, value:stmt_id} in 
  ((case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
   key == {key:vid, value:stmt_id}))).peek ()) of
   {Some lookup_data -> nd_stmt_cntrs.erase lookup_data}{None -> ()});
   (if nd_rcvd_sys_done
   then if not nd_sent_done and nd_stmt_cntrs.size () == 0
     then ((ms_rcv_node_done, master_addr)<- true;nd_sent_done = true) 
     else () else ())))


declare nd_update_stmt_cntr_corr_map : { ra:{ key:int, value:int }, rb:int,
  rc:int, rd:int, re:bool, rf:bool } -> () = (\b1 -> bind b1 as {ra:vid,
  rb:stmt_id, rc:hop, rd:count, re:root, rf:create} in 
  ((if create
   then nd_stmt_cntrs.insert {key:{key:vid, value:stmt_id}, value:{key:0,
     value:empty { key:int, value:int } @ { Map }}} else ());
   (case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
   key == {key:vid, value:stmt_id}))).peek ()) of
   {Some lkup -> nd_stmt_cntrs.update lkup {key:{key:vid, value:stmt_id},
     value:let sc_corr_map = (lkup.value).value in
     ((case ((sc_corr_map.filter ((\b1 -> bind b1 as {key:key, value:value} in 
      key == hop))).peek ()) of
      {Some lkup2 -> sc_corr_map.update lkup2 {key:hop, value:lkup2.value +
        count}}{None -> sc_corr_map.insert {key:hop, value:count}});
      (if root then ()
      else case ((sc_corr_map.filter ((\b1 -> bind b1 as {key:key,
        value:value} in key == hop))).peek ()) of
        {Some lkup2 -> let new_corr_cnt = lkup2.value - 1 in
          if new_corr_cnt == 0 then sc_corr_map.erase lkup2
            else sc_corr_map.update lkup2 {key:hop, value:new_corr_cnt}}
        {None -> sc_corr_map.insert {key:hop, value:-1}});
      {key:(lkup.value).key, value:sc_corr_map})}}{None ->
                                                    error
                                                      (print
                                                         "nd_update_stmt_cntr_corr_map: missing stmt_cntrs value")})))


declare nd_filter_corrective_list : { key:{ key:int, value:int },
  value:collection { key:int, value:int } @ { Collection } } -> collection {
  key:int, value:collection { key:int, value:int } @ { Seq }
  } @ { Collection } = (\b1 -> bind b1 as {key:request_vid,
  value:trig_stmt_list} in ((((nd_log_read_geq request_vid).fold ((\acc_conv ->
  (\x -> (acc_conv.insert x;acc_conv)))) empty { key:{ key:int, value:int },
  value:int } @ { Seq }).sort ((\b2 -> (\b5 -> bind b2 as {key:vid1,
  value:stmt1} in bind b5 as {key:vid2, value:stmt2} in if vid1 < vid2 
  then -1 else 1)))).groupBy ((\b1 -> bind b1 as {value:stmt_id} in stmt_id))
  ((\vid_list -> (\b3 -> bind b3 as {key:vid} in 
  (vid_list.insert vid;vid_list)))) empty { key:int, value:int
  } @ { Seq }).fold ((\acc_conv -> (\x -> (acc_conv.insert x;acc_conv))))
  empty { key:int, value:collection { key:int, value:int } @ { Seq }
  } @ { Collection })


declare add_node : address -> () = (\addr -> let rng = range replicas in
  let new_elems =
    rng.fold ((\_accmap -> (\b3 -> bind b3 as {i:i} in 
      (_accmap.insert {key:addr, value:abs (hash ((i * 2683) + hash addr))};
       _accmap)))) empty { key:address, value:int } @ { Seq } in
    (node_ring = node_ring.combine new_elems;
     node_ring = node_ring.sort ((\b2 -> (\b5 -> bind b2 as {key:addr,
     value:hash1} in bind b5 as {key:addr, value:hash2} in if hash1 < hash2
     then -1 else 1)))))


declare get_ring_node : { key:int, value:int } -> address = (\b1 ->
  bind b1 as {key:data, value:max_val} in let scaled =
  truncate (real_of_int (get_max_int ()) * (real_of_int data /
    real_of_int max_val)) in
  let results =
    node_ring.filter ((\b1 -> bind b1 as {key:addr, value:hash} in hash >=
      scaled)) in
    bind
      case (results.peek ()) of
        {Some x -> x}{None -> case (node_ring.peek ()) of
                       {Some x -> x}{None -> error (print "empty node ring")}}
      as {key:addr, value:_} in addr)


declare frontier_int_int : { key:{ key:int, value:int }, value:collection {
  ra:{ key:int, value:int }, rb:int, rc:int } @ { Set } } -> collection { ra:{
  key:int, value:int }, rb:int, rc:int } @ { Collection } = (\b1 ->
  bind b1 as {key:vid, value:input_map} in (input_map.groupBy ((\b1 ->
  bind b1 as {ra:map_vid, rb:map_0, rc:map_val} in map_0)) ((\b2 -> (\b5 ->
  bind b2 as {key:acc, value:max_vid} in bind b5 as {ra:map_vid, rb:map_0,
  rc:map_val} in if map_vid < vid
  then if map_vid == max_vid
    then
      (acc.insert {ra:map_vid, rb:map_0, rc:map_val};{key:acc, value:max_vid})
    else if map_vid > max_vid
      then {key:{| ra:{ key:int, value:int }, rb:int, rc:int | {ra:map_vid,
        rb:map_0, rc:map_val}|} @ { Collection }, value:map_vid}
      else {key:acc, value:max_vid} else {key:acc, value:max_vid})))
  {key:empty { ra:{ key:int, value:int }, rb:int, rc:int } @ { Collection },
  value:g_min_vid}).fold ((\_accext -> (\b3 -> bind b3 as {value:b4} in 
  bind b4 as {key:project} in _accext.combine project))) empty { ra:{ key:int,
  value:int }, rb:int, rc:int } @ { Collection })


declare frontier_int_date_int_float : { key:{ key:int, value:int },
  value:collection { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:real
  } @ { Set } } -> collection { ra:{ key:int, value:int }, rb:int, rc:int,
  rd:int, re:real } @ { Collection } = (\b1 -> bind b1 as {key:vid,
  value:input_map} in (input_map.groupBy ((\b1 -> bind b1 as {ra:map_vid,
  rb:map_0, rc:map_1, rd:map_2, re:map_val} in {ra:map_0, rb:map_1, rc:map_2}))
  ((\b2 -> (\b5 -> bind b2 as {key:acc, value:max_vid} in 
  bind b5 as {ra:map_vid, rb:map_0, rc:map_1, rd:map_2, re:map_val} in 
  if map_vid < vid
  then if map_vid == max_vid
    then
      (acc.insert {ra:map_vid, rb:map_0, rc:map_1, rd:map_2, re:map_val};
       {key:acc, value:max_vid})
    else if map_vid > max_vid
      then {key:{| ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:real |
        {ra:map_vid, rb:map_0, rc:map_1, rd:map_2,
        re:map_val}|} @ { Collection }, value:map_vid}
      else {key:acc, value:max_vid} else {key:acc, value:max_vid})))
  {key:empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:real
  } @ { Collection }, value:g_min_vid}).fold ((\_accext -> (\b3 ->
  bind b3 as {value:b4} in bind b4 as {key:project} in _accext.combine
  project))) empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:real
  } @ { Collection })


declare frontier_int_date_int_int : { key:{ key:int, value:int },
  value:collection { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int
  } @ { Set } } -> collection { ra:{ key:int, value:int }, rb:int, rc:int,
  rd:int, re:int } @ { Collection } = (\b1 -> bind b1 as {key:vid,
  value:input_map} in (input_map.groupBy ((\b1 -> bind b1 as {ra:map_vid,
  rb:map_0, rc:map_1, rd:map_2, re:map_val} in {ra:map_0, rb:map_1, rc:map_2}))
  ((\b2 -> (\b5 -> bind b2 as {key:acc, value:max_vid} in 
  bind b5 as {ra:map_vid, rb:map_0, rc:map_1, rd:map_2, re:map_val} in 
  if map_vid < vid
  then if map_vid == max_vid
    then
      (acc.insert {ra:map_vid, rb:map_0, rc:map_1, rd:map_2, re:map_val};
       {key:acc, value:max_vid})
    else if map_vid > max_vid
      then {key:{| ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int |
        {ra:map_vid, rb:map_0, rc:map_1, rd:map_2,
        re:map_val}|} @ { Collection }, value:map_vid}
      else {key:acc, value:max_vid} else {key:acc, value:max_vid})))
  {key:empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int
  } @ { Collection }, value:g_min_vid}).fold ((\_accext -> (\b3 ->
  bind b3 as {value:b4} in bind b4 as {key:project} in _accext.combine
  project))) empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int
  } @ { Collection })


declare frontier_int_float : { key:{ key:int, value:int }, value:collection {
  ra:{ key:int, value:int }, rb:int, rc:real } @ { Set } } -> collection { ra:{
  key:int, value:int }, rb:int, rc:real } @ { Collection } = (\b1 ->
  bind b1 as {key:vid, value:input_map} in (input_map.groupBy ((\b1 ->
  bind b1 as {ra:map_vid, rb:map_0, rc:map_val} in map_0)) ((\b2 -> (\b5 ->
  bind b2 as {key:acc, value:max_vid} in bind b5 as {ra:map_vid, rb:map_0,
  rc:map_val} in if map_vid < vid
  then if map_vid == max_vid
    then
      (acc.insert {ra:map_vid, rb:map_0, rc:map_val};{key:acc, value:max_vid})
    else if map_vid > max_vid
      then {key:{| ra:{ key:int, value:int }, rb:int, rc:real | {ra:map_vid,
        rb:map_0, rc:map_val}|} @ { Collection }, value:map_vid}
      else {key:acc, value:max_vid} else {key:acc, value:max_vid})))
  {key:empty { ra:{ key:int, value:int }, rb:int, rc:real } @ { Collection },
  value:g_min_vid}).fold ((\_accext -> (\b3 -> bind b3 as {value:b4} in 
  bind b4 as {key:project} in _accext.combine project))) empty { ra:{ key:int,
  value:int }, rb:int, rc:real } @ { Collection })


declare frontier_int_date_int_int_int : { key:{ key:int, value:int },
  value:collection { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int,
  rf:int } @ { Set } } -> collection { ra:{ key:int, value:int }, rb:int,
  rc:int, rd:int, re:int, rf:int } @ { Collection } = (\b1 ->
  bind b1 as {key:vid, value:input_map} in (input_map.groupBy ((\b1 ->
  bind b1 as {ra:map_vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
  rf:map_val} in {ra:map_0, rb:map_1, rc:map_2, rd:map_3})) ((\b2 -> (\b5 ->
  bind b2 as {key:acc, value:max_vid} in bind b5 as {ra:map_vid, rb:map_0,
  rc:map_1, rd:map_2, re:map_3, rf:map_val} in if map_vid < vid
  then if map_vid == max_vid
    then
      (acc.insert {ra:map_vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
       rf:map_val};
       {key:acc, value:max_vid})
    else if map_vid > max_vid
      then {key:{| ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int,
        rf:int | {ra:map_vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
        rf:map_val}|} @ { Collection }, value:map_vid}
      else {key:acc, value:max_vid} else {key:acc, value:max_vid})))
  {key:empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int,
  rf:int } @ { Collection }, value:g_min_vid}).fold ((\_accext -> (\b3 ->
  bind b3 as {value:b4} in bind b4 as {key:project} in _accext.combine
  project))) empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int,
  rf:int } @ { Collection })


declare frontier_int_date_int_int_float : { key:{ key:int, value:int },
  value:collection { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int,
  rf:real } @ { Set } } -> collection { ra:{ key:int, value:int }, rb:int,
  rc:int, rd:int, re:int, rf:real } @ { Collection } = (\b1 ->
  bind b1 as {key:vid, value:input_map} in (input_map.groupBy ((\b1 ->
  bind b1 as {ra:map_vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
  rf:map_val} in {ra:map_0, rb:map_1, rc:map_2, rd:map_3})) ((\b2 -> (\b5 ->
  bind b2 as {key:acc, value:max_vid} in bind b5 as {ra:map_vid, rb:map_0,
  rc:map_1, rd:map_2, re:map_3, rf:map_val} in if map_vid < vid
  then if map_vid == max_vid
    then
      (acc.insert {ra:map_vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
       rf:map_val};
       {key:acc, value:max_vid})
    else if map_vid > max_vid
      then {key:{| ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int,
        rf:real | {ra:map_vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
        rf:map_val}|} @ { Collection }, value:map_vid}
      else {key:acc, value:max_vid} else {key:acc, value:max_vid})))
  {key:empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int,
  rf:real } @ { Collection }, value:g_min_vid}).fold ((\_accext -> (\b3 ->
  bind b3 as {value:b4} in bind b4 as {key:project} in _accext.combine
  project))) empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int,
  rf:real } @ { Collection })


declare nd_add_delta_to_int_int : { ra:ind collection { ra:{ key:int, value:int
  }, rb:int, rc:int } @ { Set }, rb:bool, rc:{ key:int, value:int },
  rd:collection { key:int, value:int } @ { Collection } } -> () = (\b1 ->
  bind b1 as {ra:target_map, rb:corrective, rc:min_vid, rd:delta_tuples} in 
  (delta_tuples.iterate ((\b1 -> bind b1 as {key:map_0, value:map_val} in bind
   target_map as ind target_map_d in
   let lookup_value =
     if corrective
       then target_map_d.filter ((\b1 -> bind b1 as {ra:ra, rb:rb, rc:rc} in ra
         == min_vid and rb == map_0))
       else empty { ra:{ key:int, value:int }, rb:int, rc:int } @ { Set } in
     case (lookup_value.peek ()) of
       {Some val -> let update_value = map_val + val.rc in
         target_map_d.update val {ra:min_vid, rb:map_0, rc:update_value}}
       {None -> let lookup_value =
         frontier_int_int {key:min_vid, value:target_map_d.filter ((\b1 ->
           bind b1 as {ra:ra, rb:rb, rc:rc} in rb == map_0))} in
         let update_value =
           map_val + case (lookup_value.peek ()) of
             {Some val -> val.rc}{None -> 0} in
           target_map_d.insert {ra:min_vid, rb:map_0, rc:update_value}}));
   delta_tuples.iterate ((\b1 -> bind b1 as {key:map_0_delta,
   value:map_val_delta} in let filtered =
   bind target_map as ind target_map_d in
     (target_map_d.filter ((\b1 -> bind b1 as {ra:ra, rb:rb, rc:rc} in rb ==
       map_0_delta))).filter ((\b1 -> bind b1 as {ra:vid, rb:map_0,
       rc:map_val} in vid > min_vid)) in
   filtered.iterate ((\b1 -> bind b1 as {ra:vid, rb:map_0, rc:map_val} in bind
     target_map as ind target_map_d in
     target_map_d.update {ra:vid, rb:map_0, rc:map_val} {ra:vid, rb:map_0,
       rc:map_val + map_val_delta}))))))


declare nd_add_delta_to_int_date_int_float : { ra:ind collection { ra:{
  key:int, value:int }, rb:int, rc:int, rd:int, re:real } @ { Set }, rb:bool,
  rc:{ key:int, value:int }, rd:collection { ra:int, rb:int, rc:int, rd:real
  } @ { Collection } } -> () = (\b1 -> bind b1 as {ra:target_map,
  rb:corrective, rc:min_vid, rd:delta_tuples} in 
  (delta_tuples.iterate ((\b1 -> bind b1 as {ra:map_0, rb:map_1, rc:map_2,
   rd:map_val} in bind target_map as ind target_map_d in
   let lookup_value =
     if corrective
       then target_map_d.filter ((\b1 -> bind b1 as {ra:ra, rb:rb, rc:rc,
         rd:rd, re:re} in ((ra == min_vid and rd == map_2) and rc == map_1) and
         rb == map_0))
       else empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:real
         } @ { Set } in
     case (lookup_value.peek ()) of
       {Some val -> let update_value = map_val + val.re in
         target_map_d.update val {ra:min_vid, rb:map_0, rc:map_1, rd:map_2,
           re:update_value}}{None -> let lookup_value =
                              frontier_int_date_int_float {key:min_vid,
                                value:target_map_d.filter ((\b1 ->
                                bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd,
                                re:re} in (rb == map_0 and rd == map_2) and rc
                                == map_1))} in
                              let update_value =
                                map_val + case (lookup_value.peek ()) of
                                  {Some val -> val.re}{None -> 0} in
                                target_map_d.insert {ra:min_vid, rb:map_0,
                                  rc:map_1, rd:map_2, re:update_value}}));
   delta_tuples.iterate ((\b1 -> bind b1 as {ra:map_0_delta, rb:map_1_delta,
   rc:map_2_delta, rd:map_val_delta} in let filtered =
   bind target_map as ind target_map_d in
     (target_map_d.filter ((\b1 -> bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd,
       re:re} in (rb == map_0_delta and rd == map_2_delta) and rc ==
       map_1_delta))).filter ((\b1 -> bind b1 as {ra:vid, rb:map_0, rc:map_1,
       rd:map_2, re:map_val} in vid > min_vid)) in
   filtered.iterate ((\b1 -> bind b1 as {ra:vid, rb:map_0, rc:map_1, rd:map_2,
     re:map_val} in bind target_map as ind target_map_d in
     target_map_d.update {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val}
       {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val + map_val_delta}))))))


declare nd_add_delta_to_int_date_int_int : { ra:ind collection { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:int, re:int } @ { Set }, rb:bool, rc:{
  key:int, value:int }, rd:collection { ra:int, rb:int, rc:int, rd:int
  } @ { Collection } } -> () = (\b1 -> bind b1 as {ra:target_map,
  rb:corrective, rc:min_vid, rd:delta_tuples} in 
  (delta_tuples.iterate ((\b1 -> bind b1 as {ra:map_0, rb:map_1, rc:map_2,
   rd:map_val} in bind target_map as ind target_map_d in
   let lookup_value =
     if corrective
       then target_map_d.filter ((\b1 -> bind b1 as {ra:ra, rb:rb, rc:rc,
         rd:rd, re:re} in ((ra == min_vid and rd == map_2) and rc == map_1) and
         rb == map_0))
       else empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int
         } @ { Set } in
     case (lookup_value.peek ()) of
       {Some val -> let update_value = map_val + val.re in
         target_map_d.update val {ra:min_vid, rb:map_0, rc:map_1, rd:map_2,
           re:update_value}}{None -> let lookup_value =
                              frontier_int_date_int_int {key:min_vid,
                                value:target_map_d.filter ((\b1 ->
                                bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd,
                                re:re} in (rb == map_0 and rd == map_2) and rc
                                == map_1))} in
                              let update_value =
                                map_val + case (lookup_value.peek ()) of
                                  {Some val -> val.re}{None -> 0} in
                                target_map_d.insert {ra:min_vid, rb:map_0,
                                  rc:map_1, rd:map_2, re:update_value}}));
   delta_tuples.iterate ((\b1 -> bind b1 as {ra:map_0_delta, rb:map_1_delta,
   rc:map_2_delta, rd:map_val_delta} in let filtered =
   bind target_map as ind target_map_d in
     (target_map_d.filter ((\b1 -> bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd,
       re:re} in (rb == map_0_delta and rd == map_2_delta) and rc ==
       map_1_delta))).filter ((\b1 -> bind b1 as {ra:vid, rb:map_0, rc:map_1,
       rd:map_2, re:map_val} in vid > min_vid)) in
   filtered.iterate ((\b1 -> bind b1 as {ra:vid, rb:map_0, rc:map_1, rd:map_2,
     re:map_val} in bind target_map as ind target_map_d in
     target_map_d.update {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val}
       {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val + map_val_delta}))))))


declare nd_add_delta_to_int_float : { ra:ind collection { ra:{ key:int,
  value:int }, rb:int, rc:real } @ { Set }, rb:bool, rc:{ key:int, value:int },
  rd:collection { key:int, value:real } @ { Collection } } -> () = (\b1 ->
  bind b1 as {ra:target_map, rb:corrective, rc:min_vid, rd:delta_tuples} in 
  (delta_tuples.iterate ((\b1 -> bind b1 as {key:map_0, value:map_val} in bind
   target_map as ind target_map_d in
   let lookup_value =
     if corrective
       then target_map_d.filter ((\b1 -> bind b1 as {ra:ra, rb:rb, rc:rc} in ra
         == min_vid and rb == map_0))
       else empty { ra:{ key:int, value:int }, rb:int, rc:real } @ { Set } in
     case (lookup_value.peek ()) of
       {Some val -> let update_value = map_val + val.rc in
         target_map_d.update val {ra:min_vid, rb:map_0, rc:update_value}}
       {None -> let lookup_value =
         frontier_int_float {key:min_vid, value:target_map_d.filter ((\b1 ->
           bind b1 as {ra:ra, rb:rb, rc:rc} in rb == map_0))} in
         let update_value =
           map_val + case (lookup_value.peek ()) of
             {Some val -> val.rc}{None -> 0} in
           target_map_d.insert {ra:min_vid, rb:map_0, rc:update_value}}));
   delta_tuples.iterate ((\b1 -> bind b1 as {key:map_0_delta,
   value:map_val_delta} in let filtered =
   bind target_map as ind target_map_d in
     (target_map_d.filter ((\b1 -> bind b1 as {ra:ra, rb:rb, rc:rc} in rb ==
       map_0_delta))).filter ((\b1 -> bind b1 as {ra:vid, rb:map_0,
       rc:map_val} in vid > min_vid)) in
   filtered.iterate ((\b1 -> bind b1 as {ra:vid, rb:map_0, rc:map_val} in bind
     target_map as ind target_map_d in
     target_map_d.update {ra:vid, rb:map_0, rc:map_val} {ra:vid, rb:map_0,
       rc:map_val + map_val_delta}))))))


declare nd_add_delta_to_int_date_int_int_int : { ra:ind collection { ra:{
  key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:int } @ { Set },
  rb:bool, rc:{ key:int, value:int }, rd:collection { ra:int, rb:int, rc:int,
  rd:int, re:int } @ { Collection } } -> () = (\b1 ->
  bind b1 as {ra:target_map, rb:corrective, rc:min_vid, rd:delta_tuples} in 
  (delta_tuples.iterate ((\b1 -> bind b1 as {ra:map_0, rb:map_1, rc:map_2,
   rd:map_3, re:map_val} in bind target_map as ind target_map_d in
   let lookup_value =
     if corrective
       then target_map_d.filter ((\b1 -> bind b1 as {ra:ra, rb:rb, rc:rc,
         rd:rd, re:re, rf:rf} in (((ra == min_vid and re == map_3) and rd ==
         map_2) and rc == map_1) and rb == map_0))
       else empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int,
         rf:int } @ { Set } in
     case (lookup_value.peek ()) of
       {Some val -> let update_value = map_val + val.rf in
         target_map_d.update val {ra:min_vid, rb:map_0, rc:map_1, rd:map_2,
           re:map_3, rf:update_value}}{None -> let lookup_value =
                                        frontier_int_date_int_int_int
                                          {key:min_vid,
                                          value:target_map_d.filter ((\b1 ->
                                          bind b1 as {ra:ra, rb:rb, rc:rc,
                                          rd:rd, re:re, rf:rf} in ((rb == map_0
                                          and re == map_3) and rd == map_2) and
                                          rc == map_1))} in
                                        let update_value =
                                          map_val + case (lookup_value.peek ())
                                            of {Some val -> val.rf}{None -> 0}
                                          in
                                          target_map_d.insert {ra:min_vid,
                                            rb:map_0, rc:map_1, rd:map_2,
                                            re:map_3, rf:update_value}}));
   delta_tuples.iterate ((\b1 -> bind b1 as {ra:map_0_delta, rb:map_1_delta,
   rc:map_2_delta, rd:map_3_delta, re:map_val_delta} in let filtered =
   bind target_map as ind target_map_d in
     (target_map_d.filter ((\b1 -> bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd,
       re:re, rf:rf} in ((rb == map_0_delta and re == map_3_delta) and rd ==
       map_2_delta) and rc == map_1_delta))).filter ((\b1 ->
       bind b1 as {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
       rf:map_val} in vid > min_vid)) in
   filtered.iterate ((\b1 -> bind b1 as {ra:vid, rb:map_0, rc:map_1, rd:map_2,
     re:map_3, rf:map_val} in bind target_map as ind target_map_d in
     target_map_d.update {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
       rf:map_val} {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3, rf:map_val
       + map_val_delta}))))))


declare nd_add_delta_to_int_date_int_int_float : { ra:ind collection { ra:{
  key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:real } @ { Set },
  rb:bool, rc:{ key:int, value:int }, rd:collection { ra:int, rb:int, rc:int,
  rd:int, re:real } @ { Collection } } -> () = (\b1 ->
  bind b1 as {ra:target_map, rb:corrective, rc:min_vid, rd:delta_tuples} in 
  (delta_tuples.iterate ((\b1 -> bind b1 as {ra:map_0, rb:map_1, rc:map_2,
   rd:map_3, re:map_val} in bind target_map as ind target_map_d in
   let lookup_value =
     if corrective
       then target_map_d.filter ((\b1 -> bind b1 as {ra:ra, rb:rb, rc:rc,
         rd:rd, re:re, rf:rf} in (((ra == min_vid and re == map_3) and rd ==
         map_2) and rc == map_1) and rb == map_0))
       else empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int,
         rf:real } @ { Set } in
     case (lookup_value.peek ()) of
       {Some val -> let update_value = map_val + val.rf in
         target_map_d.update val {ra:min_vid, rb:map_0, rc:map_1, rd:map_2,
           re:map_3, rf:update_value}}{None -> let lookup_value =
                                        frontier_int_date_int_int_float
                                          {key:min_vid,
                                          value:target_map_d.filter ((\b1 ->
                                          bind b1 as {ra:ra, rb:rb, rc:rc,
                                          rd:rd, re:re, rf:rf} in ((rb == map_0
                                          and re == map_3) and rd == map_2) and
                                          rc == map_1))} in
                                        let update_value =
                                          map_val + case (lookup_value.peek ())
                                            of {Some val -> val.rf}{None -> 0}
                                          in
                                          target_map_d.insert {ra:min_vid,
                                            rb:map_0, rc:map_1, rd:map_2,
                                            re:map_3, rf:update_value}}));
   delta_tuples.iterate ((\b1 -> bind b1 as {ra:map_0_delta, rb:map_1_delta,
   rc:map_2_delta, rd:map_3_delta, re:map_val_delta} in let filtered =
   bind target_map as ind target_map_d in
     (target_map_d.filter ((\b1 -> bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd,
       re:re, rf:rf} in ((rb == map_0_delta and re == map_3_delta) and rd ==
       map_2_delta) and rc == map_1_delta))).filter ((\b1 ->
       bind b1 as {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
       rf:map_val} in vid > min_vid)) in
   filtered.iterate ((\b1 -> bind b1 as {ra:vid, rb:map_0, rc:map_1, rd:map_2,
     re:map_3, rf:map_val} in bind target_map as ind target_map_d in
     target_map_d.update {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
       rf:map_val} {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3, rf:map_val
       + map_val_delta}))))))


declare sw_gen_vid : () -> option { key:int, value:int } = (\_ -> case
  (sw_token_vid_list.peek ()) of
  {Some vid_num -> let num_new = vid_num.value - 1 in
    let vid_new = {key:(vid_num.key).key, value:(vid_num.key).value + 1} in
      ((if num_new <= 0 then sw_token_vid_list.erase vid_num
       else sw_token_vid_list.update vid_num {key:vid_new, value:num_new});
       Some (vid_num.key))}{None -> None immut})


declare calc_dim_bounds : collection { key:int, value:int } @ { Seq } -> {
  key:collection { key:int, value:int } @ { Seq }, value:int } = (\pmap ->
  pmap.fold ((\b2 -> (\b5 -> bind b2 as {key:xs, value:acc_size} in 
  bind b5 as {key:pos, value:bin_size} in {key:xs.combine ({| key:int,
  value:int | {key:pos, value:acc_size}|} @ { Seq }), value:bin_size *
  acc_size}))) {key:empty { key:int, value:int } @ { Seq }, value:1})


declare route_to_int_date_int_int : { ra:int, rb:option int, rc:option int,
  rd:option int, re:option int } -> collection {i:address} @ { Collection } =
  (\b1 -> bind b1 as {ra:map_id, rb:key_0, rc:key_1, rd:key_2, re:key_3} in let
  pmap =
  (case ((pmap_data.filter ((\b1 -> bind b1 as {key:key, value:value} in key ==
    map_id))).peek ()) of
    {Some x -> x}{None -> error (print "can't find map_id in pmap_data")}).value
  in
  case (pmap.peek ()) of
    {Some _ -> bind calc_dim_bounds pmap as {key:dim_bounds, value:max_val} in
      let bound_bucket =
        case key_3 of
          {Some key_3_unwrap -> let pmap_slice =
            pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key ==
              3)) in
            case (pmap_slice.peek ()) of
              {Some peek_slice -> let value =
                abs (hash key_3_unwrap) % peek_slice.value in
                value * (case ((dim_bounds.filter ((\b1 -> bind b1 as {key:key,
                  value:value} in key == 3))).peek ()) of
                  {Some x -> x}{None ->
                                 error (print "can't find 3 in dim_bounds")}).value}
              {None -> 0}}{None -> 0} + (case key_2 of
          {Some key_2_unwrap -> let pmap_slice =
            pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key ==
              2)) in
            case (pmap_slice.peek ()) of
              {Some peek_slice -> let value =
                abs (hash key_2_unwrap) % peek_slice.value in
                value * (case ((dim_bounds.filter ((\b1 -> bind b1 as {key:key,
                  value:value} in key == 2))).peek ()) of
                  {Some x -> x}{None ->
                                 error (print "can't find 2 in dim_bounds")}).value}
              {None -> 0}}{None -> 0} + (case key_1 of
          {Some key_1_unwrap -> let pmap_slice =
            pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key ==
              1)) in
            case (pmap_slice.peek ()) of
              {Some peek_slice -> let value =
                abs (hash key_1_unwrap) % peek_slice.value in
                value * (case ((dim_bounds.filter ((\b1 -> bind b1 as {key:key,
                  value:value} in key == 1))).peek ()) of
                  {Some x -> x}{None ->
                                 error (print "can't find 1 in dim_bounds")}).value}
              {None -> 0}}{None -> 0} + (case key_0 of
          {Some key_0_unwrap -> let pmap_slice =
            pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key ==
              0)) in
            case (pmap_slice.peek ()) of
              {Some peek_slice -> let value =
                abs (hash key_0_unwrap) % peek_slice.value in
                value * (case ((dim_bounds.filter ((\b1 -> bind b1 as {key:key,
                  value:value} in key == 0))).peek ()) of
                  {Some x -> x}{None ->
                                 error (print "can't find 0 in dim_bounds")}).value}
              {None -> 0}}{None -> 0} + 0))) in
        let free_dims =
          (if key_3 != None immut then empty { key:int, value:int } @ { Seq }
            else pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key
              == 3))).combine ((if key_2 != None immut
            then empty { key:int, value:int } @ { Seq }
            else pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key
              == 2))).combine ((if key_1 != None immut
            then empty { key:int, value:int } @ { Seq }
            else pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key
              == 1))).combine ((if key_0 != None immut
            then empty { key:int, value:int } @ { Seq }
            else pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key
              == 0))).combine empty { key:int, value:int } @ { Seq }))) in
          let free_domains =
            free_dims.fold ((\_accmap -> (\b3 -> bind b3 as {key:i,
              value:b_i} in 
              (_accmap.insert {key:i, value:range b_i};_accmap)))) empty {
              key:int, value:collection {i:int} @ { Seq } } @ { Seq } in
            let free_cart_prod =
              free_domains.fold ((\prev_cart_prod -> (\b3 -> bind b3 as {key:i,
                value:domain} in domain.fold ((\_accext -> (\b3 ->
                bind b3 as {i:domain_element} in _accext.combine
                (if 0 == prev_cart_prod.size ()
                then {|i:collection { key:int, value:int } @ { Seq }| {|
                  key:int, value:int | {key:i,
                  value:domain_element}|} @ { Seq }|} @ { Seq }
                else prev_cart_prod.fold ((\_accmap -> (\b3 ->
                  bind b3 as {i:rest_tup} in 
                  (_accmap.insert ({i:rest_tup.combine ({| key:int, value:int |
                   {key:i, value:domain_element}|} @ { Seq })});
                   _accmap)))) empty {i:collection { key:int, value:int
                  } @ { Seq }} @ { Seq })))) empty {i:collection { key:int,
                value:int } @ { Seq }} @ { Seq }))) empty {i:collection {
                key:int, value:int } @ { Seq }} @ { Seq } in
              let sorted_ip_list =
                (free_cart_prod.fold ((\acc_ips -> (\b3 ->
                  bind b3 as {i:free_bucket} in acc_ips.combine ({|i:address|
                  get_ring_node {key:free_bucket.fold ((\acc -> (\b3 ->
                    bind b3 as {key:i, value:val} in acc + (val * (case
                    ((dim_bounds.filter ((\b1 -> bind b1 as {key:key,
                    value:value} in key == i))).peek ()) of
                    {Some x -> x}{None ->
                                   error (print "can't find i in dim_bounds")}).value))))
                    bound_bucket, value:max_val}|} @ { Collection }))))
                  empty {i:address} @ { Collection }).groupBy ((\b1 ->
                  bind b1 as {i:ip} in ip)) ((\_ -> (\_ -> ()))) () in
                if 0 == sorted_ip_list.size ()
                  then {|i:address|
                    get_ring_node {key:bound_bucket, value:max_val}|} @ { Collection }
                  else sorted_ip_list.fold ((\_accmap -> (\x ->
                    (_accmap.insert ({i:x.key});_accmap))))
                    empty {i:address} @ { Collection }}{None -> nodes})


declare route_to_int : { key:int, value:option int
  } -> collection {i:address} @ { Collection } = (\b1 ->
  bind b1 as {key:map_id, value:key_0} in let pmap =
  (case ((pmap_data.filter ((\b1 -> bind b1 as {key:key, value:value} in key ==
    map_id))).peek ()) of
    {Some x -> x}{None -> error (print "can't find map_id in pmap_data")}).value
  in
  case (pmap.peek ()) of
    {Some _ -> bind calc_dim_bounds pmap as {key:dim_bounds, value:max_val} in
      let bound_bucket =
        case key_0 of
          {Some key_0_unwrap -> let pmap_slice =
            pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key ==
              0)) in
            case (pmap_slice.peek ()) of
              {Some peek_slice -> let value =
                abs (hash key_0_unwrap) % peek_slice.value in
                value * (case ((dim_bounds.filter ((\b1 -> bind b1 as {key:key,
                  value:value} in key == 0))).peek ()) of
                  {Some x -> x}{None ->
                                 error (print "can't find 0 in dim_bounds")}).value}
              {None -> 0}}{None -> 0} + 0 in
        let free_dims =
          (if key_0 != None immut then empty { key:int, value:int } @ { Seq }
            else pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key
              == 0))).combine empty { key:int, value:int } @ { Seq } in
          let free_domains =
            free_dims.fold ((\_accmap -> (\b3 -> bind b3 as {key:i,
              value:b_i} in 
              (_accmap.insert {key:i, value:range b_i};_accmap)))) empty {
              key:int, value:collection {i:int} @ { Seq } } @ { Seq } in
            let free_cart_prod =
              free_domains.fold ((\prev_cart_prod -> (\b3 -> bind b3 as {key:i,
                value:domain} in domain.fold ((\_accext -> (\b3 ->
                bind b3 as {i:domain_element} in _accext.combine
                (if 0 == prev_cart_prod.size ()
                then {|i:collection { key:int, value:int } @ { Seq }| {|
                  key:int, value:int | {key:i,
                  value:domain_element}|} @ { Seq }|} @ { Seq }
                else prev_cart_prod.fold ((\_accmap -> (\b3 ->
                  bind b3 as {i:rest_tup} in 
                  (_accmap.insert ({i:rest_tup.combine ({| key:int, value:int |
                   {key:i, value:domain_element}|} @ { Seq })});
                   _accmap)))) empty {i:collection { key:int, value:int
                  } @ { Seq }} @ { Seq })))) empty {i:collection { key:int,
                value:int } @ { Seq }} @ { Seq }))) empty {i:collection {
                key:int, value:int } @ { Seq }} @ { Seq } in
              let sorted_ip_list =
                (free_cart_prod.fold ((\acc_ips -> (\b3 ->
                  bind b3 as {i:free_bucket} in acc_ips.combine ({|i:address|
                  get_ring_node {key:free_bucket.fold ((\acc -> (\b3 ->
                    bind b3 as {key:i, value:val} in acc + (val * (case
                    ((dim_bounds.filter ((\b1 -> bind b1 as {key:key,
                    value:value} in key == i))).peek ()) of
                    {Some x -> x}{None ->
                                   error (print "can't find i in dim_bounds")}).value))))
                    bound_bucket, value:max_val}|} @ { Collection }))))
                  empty {i:address} @ { Collection }).groupBy ((\b1 ->
                  bind b1 as {i:ip} in ip)) ((\_ -> (\_ -> ()))) () in
                if 0 == sorted_ip_list.size ()
                  then {|i:address|
                    get_ring_node {key:bound_bucket, value:max_val}|} @ { Collection }
                  else sorted_ip_list.fold ((\_accmap -> (\x ->
                    (_accmap.insert ({i:x.key});_accmap))))
                    empty {i:address} @ { Collection }}{None -> nodes})


declare route_to_int_date_int : { ra:int, rb:option int, rc:option int,
  rd:option int } -> collection {i:address} @ { Collection } = (\b1 ->
  bind b1 as {ra:map_id, rb:key_0, rc:key_1, rd:key_2} in let pmap =
  (case ((pmap_data.filter ((\b1 -> bind b1 as {key:key, value:value} in key ==
    map_id))).peek ()) of
    {Some x -> x}{None -> error (print "can't find map_id in pmap_data")}).value
  in
  case (pmap.peek ()) of
    {Some _ -> bind calc_dim_bounds pmap as {key:dim_bounds, value:max_val} in
      let bound_bucket =
        case key_2 of
          {Some key_2_unwrap -> let pmap_slice =
            pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key ==
              2)) in
            case (pmap_slice.peek ()) of
              {Some peek_slice -> let value =
                abs (hash key_2_unwrap) % peek_slice.value in
                value * (case ((dim_bounds.filter ((\b1 -> bind b1 as {key:key,
                  value:value} in key == 2))).peek ()) of
                  {Some x -> x}{None ->
                                 error (print "can't find 2 in dim_bounds")}).value}
              {None -> 0}}{None -> 0} + (case key_1 of
          {Some key_1_unwrap -> let pmap_slice =
            pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key ==
              1)) in
            case (pmap_slice.peek ()) of
              {Some peek_slice -> let value =
                abs (hash key_1_unwrap) % peek_slice.value in
                value * (case ((dim_bounds.filter ((\b1 -> bind b1 as {key:key,
                  value:value} in key == 1))).peek ()) of
                  {Some x -> x}{None ->
                                 error (print "can't find 1 in dim_bounds")}).value}
              {None -> 0}}{None -> 0} + (case key_0 of
          {Some key_0_unwrap -> let pmap_slice =
            pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key ==
              0)) in
            case (pmap_slice.peek ()) of
              {Some peek_slice -> let value =
                abs (hash key_0_unwrap) % peek_slice.value in
                value * (case ((dim_bounds.filter ((\b1 -> bind b1 as {key:key,
                  value:value} in key == 0))).peek ()) of
                  {Some x -> x}{None ->
                                 error (print "can't find 0 in dim_bounds")}).value}
              {None -> 0}}{None -> 0} + 0)) in
        let free_dims =
          (if key_2 != None immut then empty { key:int, value:int } @ { Seq }
            else pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key
              == 2))).combine ((if key_1 != None immut
            then empty { key:int, value:int } @ { Seq }
            else pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key
              == 1))).combine ((if key_0 != None immut
            then empty { key:int, value:int } @ { Seq }
            else pmap.filter ((\b1 -> bind b1 as {key:key, value:value} in key
              == 0))).combine empty { key:int, value:int } @ { Seq })) in
          let free_domains =
            free_dims.fold ((\_accmap -> (\b3 -> bind b3 as {key:i,
              value:b_i} in 
              (_accmap.insert {key:i, value:range b_i};_accmap)))) empty {
              key:int, value:collection {i:int} @ { Seq } } @ { Seq } in
            let free_cart_prod =
              free_domains.fold ((\prev_cart_prod -> (\b3 -> bind b3 as {key:i,
                value:domain} in domain.fold ((\_accext -> (\b3 ->
                bind b3 as {i:domain_element} in _accext.combine
                (if 0 == prev_cart_prod.size ()
                then {|i:collection { key:int, value:int } @ { Seq }| {|
                  key:int, value:int | {key:i,
                  value:domain_element}|} @ { Seq }|} @ { Seq }
                else prev_cart_prod.fold ((\_accmap -> (\b3 ->
                  bind b3 as {i:rest_tup} in 
                  (_accmap.insert ({i:rest_tup.combine ({| key:int, value:int |
                   {key:i, value:domain_element}|} @ { Seq })});
                   _accmap)))) empty {i:collection { key:int, value:int
                  } @ { Seq }} @ { Seq })))) empty {i:collection { key:int,
                value:int } @ { Seq }} @ { Seq }))) empty {i:collection {
                key:int, value:int } @ { Seq }} @ { Seq } in
              let sorted_ip_list =
                (free_cart_prod.fold ((\acc_ips -> (\b3 ->
                  bind b3 as {i:free_bucket} in acc_ips.combine ({|i:address|
                  get_ring_node {key:free_bucket.fold ((\acc -> (\b3 ->
                    bind b3 as {key:i, value:val} in acc + (val * (case
                    ((dim_bounds.filter ((\b1 -> bind b1 as {key:key,
                    value:value} in key == i))).peek ()) of
                    {Some x -> x}{None ->
                                   error (print "can't find i in dim_bounds")}).value))))
                    bound_bucket, value:max_val}|} @ { Collection }))))
                  empty {i:address} @ { Collection }).groupBy ((\b1 ->
                  bind b1 as {i:ip} in ip)) ((\_ -> (\_ -> ()))) () in
                if 0 == sorted_ip_list.size ()
                  then {|i:address|
                    get_ring_node {key:bound_bucket, value:max_val}|} @ { Collection }
                  else sorted_ip_list.fold ((\_accmap -> (\x ->
                    (_accmap.insert ({i:x.key});_accmap))))
                    empty {i:address} @ { Collection }}{None -> nodes})


declare shuffle_QUERY3_mLINEITEM1_mCUSTOMER2_to_QUERY3_mCUSTOMER4_bind_0t0_1t1_2t2_3t3 :
  { ra:option int, rb:option int, rc:option int, rd:option int, re:collection {
  ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:int
  } @ { Collection }, rf:bool } -> collection { key:address, value:collection {
  ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:int
  } @ { Collection } } @ { Collection } = (\b1 -> bind b1 as {ra:lkey_0,
  rb:lkey_1, rc:lkey_2, rd:lkey_3, re:tuples, rf:shuffle_on_empty} in let
  all_targets =
  if shuffle_on_empty == true
    then
      (route_to_int_date_int_int {ra:8, rb:lkey_0, rc:lkey_1, rd:lkey_2,
         re:lkey_3}).fold ((\_accmap -> (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {key:ip, value:empty { ra:{ key:int, value:int }, rb:int,
       rc:int, rd:int, re:int, rf:int } @ { Collection }};
       _accmap)))) empty { key:address, value:collection { ra:{ key:int,
      value:int }, rb:int, rc:int, rd:int, re:int, rf:int } @ { Collection }
      } @ { Collection }
    else empty { key:address, value:collection { ra:{ key:int, value:int },
      rb:int, rc:int, rd:int, re:int, rf:int } @ { Collection }
      } @ { Collection } in
  (all_targets.combine (tuples.fold ((\_accext -> (\r_tuple -> _accext.combine
    (bind r_tuple as
    {ra:rkey_0, rb:rkey_1, rc:rkey_2, rd:rkey_3, re:rkey_4, rf:rkey_5} in
    (route_to_int_date_int_int {ra:8, rb:Some rkey_1, rc:Some rkey_2,
       rd:Some rkey_3, re:Some rkey_4}).fold ((\_accmap -> (\b3 ->
      bind b3 as {i:ip} in 
      (_accmap.insert {key:ip, value:{| ra:{ key:int, value:int }, rb:int,
       rc:int, rd:int, re:int, rf:int | r_tuple|} @ { Collection }};
       _accmap)))) empty { key:address, value:collection { ra:{ key:int,
      value:int }, rb:int, rc:int, rd:int, re:int, rf:int } @ { Collection }
      } @ { Collection })))) empty { key:address, value:collection { ra:{
    key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:int
    } @ { Collection } } @ { Collection })).groupBy ((\b1 ->
    bind b1 as {key:ip, value:tuple} in ip)) ((\acc -> (\b3 ->
    bind b3 as {key:ip, value:tuple} in tuple.combine acc))) empty { ra:{
    key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:int
    } @ { Collection })


declare shuffle_QUERY3_mLINEITEM1_mCUSTOMER2_to_QUERY3_mCUSTOMER2_bind_0t0_1t1_2t2_3t3 :
  { ra:option int, rb:option int, rc:option int, rd:option int, re:collection {
  ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:int
  } @ { Collection }, rf:bool } -> collection { key:address, value:collection {
  ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:int
  } @ { Collection } } @ { Collection } = (\b1 -> bind b1 as {ra:lkey_0,
  rb:lkey_1, rc:lkey_2, rd:lkey_3, re:tuples, rf:shuffle_on_empty} in let
  all_targets =
  if shuffle_on_empty == true
    then
      (route_to_int_date_int_int {ra:7, rb:lkey_0, rc:lkey_1, rd:lkey_2,
         re:lkey_3}).fold ((\_accmap -> (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {key:ip, value:empty { ra:{ key:int, value:int }, rb:int,
       rc:int, rd:int, re:int, rf:int } @ { Collection }};
       _accmap)))) empty { key:address, value:collection { ra:{ key:int,
      value:int }, rb:int, rc:int, rd:int, re:int, rf:int } @ { Collection }
      } @ { Collection }
    else empty { key:address, value:collection { ra:{ key:int, value:int },
      rb:int, rc:int, rd:int, re:int, rf:int } @ { Collection }
      } @ { Collection } in
  (all_targets.combine (tuples.fold ((\_accext -> (\r_tuple -> _accext.combine
    (bind r_tuple as
    {ra:rkey_0, rb:rkey_1, rc:rkey_2, rd:rkey_3, re:rkey_4, rf:rkey_5} in
    (route_to_int_date_int_int {ra:7, rb:Some rkey_1, rc:Some rkey_2,
       rd:Some rkey_3, re:Some rkey_4}).fold ((\_accmap -> (\b3 ->
      bind b3 as {i:ip} in 
      (_accmap.insert {key:ip, value:{| ra:{ key:int, value:int }, rb:int,
       rc:int, rd:int, re:int, rf:int | r_tuple|} @ { Collection }};
       _accmap)))) empty { key:address, value:collection { ra:{ key:int,
      value:int }, rb:int, rc:int, rd:int, re:int, rf:int } @ { Collection }
      } @ { Collection })))) empty { key:address, value:collection { ra:{
    key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:int
    } @ { Collection } } @ { Collection })).groupBy ((\b1 ->
    bind b1 as {key:ip, value:tuple} in ip)) ((\acc -> (\b3 ->
    bind b3 as {key:ip, value:tuple} in tuple.combine acc))) empty { ra:{
    key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:int
    } @ { Collection })


declare shuffle_QUERY3_mLINEITEM1_to_QUERY3_bind_0t0_1t1_2t2 : { ra:option int,
  rb:option int, rc:option int, rd:collection { ra:{ key:int, value:int },
  rb:int, rc:int, rd:int, re:int } @ { Collection }, re:bool } -> collection {
  key:address, value:collection { ra:{ key:int, value:int }, rb:int, rc:int,
  rd:int, re:int } @ { Collection } } @ { Collection } = (\b1 ->
  bind b1 as {ra:lkey_0, rb:lkey_1, rc:lkey_2, rd:tuples,
  re:shuffle_on_empty} in let all_targets =
  if shuffle_on_empty == true
    then (route_to_int_date_int {ra:1, rb:lkey_0, rc:lkey_1, rd:lkey_2}).fold
      ((\_accmap -> (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {key:ip, value:empty { ra:{ key:int, value:int }, rb:int,
       rc:int, rd:int, re:int } @ { Collection }};
       _accmap)))) empty { key:address, value:collection { ra:{ key:int,
      value:int }, rb:int, rc:int, rd:int, re:int } @ { Collection }
      } @ { Collection }
    else empty { key:address, value:collection { ra:{ key:int, value:int },
      rb:int, rc:int, rd:int, re:int } @ { Collection } } @ { Collection } in
  (all_targets.combine (tuples.fold ((\_accext -> (\r_tuple -> _accext.combine
    (bind r_tuple as {ra:rkey_0, rb:rkey_1, rc:rkey_2, rd:rkey_3, re:rkey_4} in
    (route_to_int_date_int {ra:1, rb:Some rkey_1, rc:Some rkey_2,
       rd:Some rkey_3}).fold ((\_accmap -> (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {key:ip, value:{| ra:{ key:int, value:int }, rb:int,
       rc:int, rd:int, re:int | r_tuple|} @ { Collection }};
       _accmap)))) empty { key:address, value:collection { ra:{ key:int,
      value:int }, rb:int, rc:int, rd:int, re:int } @ { Collection }
      } @ { Collection })))) empty { key:address, value:collection { ra:{
    key:int, value:int }, rb:int, rc:int, rd:int, re:int } @ { Collection }
    } @ { Collection })).groupBy ((\b1 -> bind b1 as {key:ip, value:tuple} in 
    ip)) ((\acc -> (\b3 -> bind b3 as {key:ip, value:tuple} in tuple.combine
    acc))) empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int
    } @ { Collection })


declare shuffle_QUERY3_mORDERS6_to_QUERY3_mCUSTOMER4_bind_0t0 : {
  ra:option int, rb:option int, rc:option int, rd:option int, re:collection {
  ra:{ key:int, value:int }, rb:int, rc:real } @ { Collection }, rf:bool
  } -> collection { key:address, value:collection { ra:{ key:int, value:int },
  rb:int, rc:real } @ { Collection } } @ { Collection } = (\b1 ->
  bind b1 as {ra:lkey_0, rb:lkey_1, rc:lkey_2, rd:lkey_3, re:tuples,
  rf:shuffle_on_empty} in let all_targets =
  if shuffle_on_empty == true
    then
      (route_to_int_date_int_int {ra:8, rb:lkey_0, rc:lkey_1, rd:lkey_2,
         re:lkey_3}).fold ((\_accmap -> (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {key:ip, value:empty { ra:{ key:int, value:int }, rb:int,
       rc:real } @ { Collection }};
       _accmap)))) empty { key:address, value:collection { ra:{ key:int,
      value:int }, rb:int, rc:real } @ { Collection } } @ { Collection }
    else empty { key:address, value:collection { ra:{ key:int, value:int },
      rb:int, rc:real } @ { Collection } } @ { Collection } in
  (all_targets.combine (tuples.fold ((\_accext -> (\r_tuple -> _accext.combine
    (bind r_tuple as {ra:rkey_0, rb:rkey_1, rc:rkey_2} in
    (route_to_int_date_int_int {ra:8, rb:Some rkey_1, rc:lkey_1, rd:lkey_2,
       re:lkey_3}).fold ((\_accmap -> (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {key:ip, value:{| ra:{ key:int, value:int }, rb:int,
       rc:real | r_tuple|} @ { Collection }};
       _accmap)))) empty { key:address, value:collection { ra:{ key:int,
      value:int }, rb:int, rc:real } @ { Collection } } @ { Collection }))))
    empty { key:address, value:collection { ra:{ key:int, value:int }, rb:int,
    rc:real } @ { Collection } } @ { Collection })).groupBy ((\b1 ->
    bind b1 as {key:ip, value:tuple} in ip)) ((\acc -> (\b3 ->
    bind b3 as {key:ip, value:tuple} in tuple.combine acc))) empty { ra:{
    key:int, value:int }, rb:int, rc:real } @ { Collection })


declare shuffle_QUERY3_mORDERS3_to_QUERY3_mCUSTOMER2_bind_0t0 : {
  ra:option int, rb:option int, rc:option int, rd:option int, re:collection {
  ra:{ key:int, value:int }, rb:int, rc:real } @ { Collection }, rf:bool
  } -> collection { key:address, value:collection { ra:{ key:int, value:int },
  rb:int, rc:real } @ { Collection } } @ { Collection } = (\b1 ->
  bind b1 as {ra:lkey_0, rb:lkey_1, rc:lkey_2, rd:lkey_3, re:tuples,
  rf:shuffle_on_empty} in let all_targets =
  if shuffle_on_empty == true
    then
      (route_to_int_date_int_int {ra:7, rb:lkey_0, rc:lkey_1, rd:lkey_2,
         re:lkey_3}).fold ((\_accmap -> (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {key:ip, value:empty { ra:{ key:int, value:int }, rb:int,
       rc:real } @ { Collection }};
       _accmap)))) empty { key:address, value:collection { ra:{ key:int,
      value:int }, rb:int, rc:real } @ { Collection } } @ { Collection }
    else empty { key:address, value:collection { ra:{ key:int, value:int },
      rb:int, rc:real } @ { Collection } } @ { Collection } in
  (all_targets.combine (tuples.fold ((\_accext -> (\r_tuple -> _accext.combine
    (bind r_tuple as {ra:rkey_0, rb:rkey_1, rc:rkey_2} in
    (route_to_int_date_int_int {ra:7, rb:Some rkey_1, rc:lkey_1, rd:lkey_2,
       re:lkey_3}).fold ((\_accmap -> (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {key:ip, value:{| ra:{ key:int, value:int }, rb:int,
       rc:real | r_tuple|} @ { Collection }};
       _accmap)))) empty { key:address, value:collection { ra:{ key:int,
      value:int }, rb:int, rc:real } @ { Collection } } @ { Collection }))))
    empty { key:address, value:collection { ra:{ key:int, value:int }, rb:int,
    rc:real } @ { Collection } } @ { Collection })).groupBy ((\b1 ->
    bind b1 as {key:ip, value:tuple} in ip)) ((\acc -> (\b3 ->
    bind b3 as {key:ip, value:tuple} in tuple.combine acc))) empty { ra:{
    key:int, value:int }, rb:int, rc:real } @ { Collection })


declare shuffle_QUERY3_mORDERS1_to_QUERY3_mLINEITEM1 : { ra:option int,
  rb:option int, rc:option int, rd:collection { ra:{ key:int, value:int },
  rb:int, rc:int } @ { Collection }, re:bool } -> collection { key:address,
  value:collection { ra:{ key:int, value:int }, rb:int, rc:int
  } @ { Collection } } @ { Collection } = (\b1 -> bind b1 as {ra:lkey_0,
  rb:lkey_1, rc:lkey_2, rd:tuples, re:shuffle_on_empty} in let all_targets =
  if shuffle_on_empty == true
    then (route_to_int_date_int {ra:2, rb:lkey_0, rc:lkey_1, rd:lkey_2}).fold
      ((\_accmap -> (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {key:ip, value:empty { ra:{ key:int, value:int }, rb:int,
       rc:int } @ { Collection }};
       _accmap)))) empty { key:address, value:collection { ra:{ key:int,
      value:int }, rb:int, rc:int } @ { Collection } } @ { Collection }
    else empty { key:address, value:collection { ra:{ key:int, value:int },
      rb:int, rc:int } @ { Collection } } @ { Collection } in
  (all_targets.combine (tuples.fold ((\_accext -> (\r_tuple -> _accext.combine
    (bind r_tuple as {ra:rkey_0, rb:rkey_1, rc:rkey_2} in
    (route_to_int_date_int {ra:2, rb:lkey_0, rc:lkey_1, rd:lkey_2}).fold
      ((\_accmap -> (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {key:ip, value:{| ra:{ key:int, value:int }, rb:int,
       rc:int | r_tuple|} @ { Collection }};
       _accmap)))) empty { key:address, value:collection { ra:{ key:int,
      value:int }, rb:int, rc:int } @ { Collection } } @ { Collection }))))
    empty { key:address, value:collection { ra:{ key:int, value:int }, rb:int,
    rc:int } @ { Collection } } @ { Collection })).groupBy ((\b1 ->
    bind b1 as {key:ip, value:tuple} in ip)) ((\acc -> (\b3 ->
    bind b3 as {key:ip, value:tuple} in tuple.combine acc))) empty { ra:{
    key:int, value:int }, rb:int, rc:int } @ { Collection })


declare shuffle_QUERY3_mORDERS6_to_QUERY3_bind_0t0 : { ra:option int,
  rb:option int, rc:option int, rd:collection { ra:{ key:int, value:int },
  rb:int, rc:real } @ { Collection }, re:bool } -> collection { key:address,
  value:collection { ra:{ key:int, value:int }, rb:int, rc:real
  } @ { Collection } } @ { Collection } = (\b1 -> bind b1 as {ra:lkey_0,
  rb:lkey_1, rc:lkey_2, rd:tuples, re:shuffle_on_empty} in let all_targets =
  if shuffle_on_empty == true
    then (route_to_int_date_int {ra:1, rb:lkey_0, rc:lkey_1, rd:lkey_2}).fold
      ((\_accmap -> (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {key:ip, value:empty { ra:{ key:int, value:int }, rb:int,
       rc:real } @ { Collection }};
       _accmap)))) empty { key:address, value:collection { ra:{ key:int,
      value:int }, rb:int, rc:real } @ { Collection } } @ { Collection }
    else empty { key:address, value:collection { ra:{ key:int, value:int },
      rb:int, rc:real } @ { Collection } } @ { Collection } in
  (all_targets.combine (tuples.fold ((\_accext -> (\r_tuple -> _accext.combine
    (bind r_tuple as {ra:rkey_0, rb:rkey_1, rc:rkey_2} in
    (route_to_int_date_int {ra:1, rb:Some rkey_1, rc:lkey_1, rd:lkey_2}).fold
      ((\_accmap -> (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {key:ip, value:{| ra:{ key:int, value:int }, rb:int,
       rc:real | r_tuple|} @ { Collection }};
       _accmap)))) empty { key:address, value:collection { ra:{ key:int,
      value:int }, rb:int, rc:real } @ { Collection } } @ { Collection }))))
    empty { key:address, value:collection { ra:{ key:int, value:int }, rb:int,
    rc:real } @ { Collection } } @ { Collection })).groupBy ((\b1 ->
    bind b1 as {key:ip, value:tuple} in ip)) ((\acc -> (\b3 ->
    bind b3 as {key:ip, value:tuple} in tuple.combine acc))) empty { ra:{
    key:int, value:int }, rb:int, rc:real } @ { Collection })


declare shuffle_QUERY3_mORDERS3_to_QUERY3_bind_0t0 : { ra:option int,
  rb:option int, rc:option int, rd:collection { ra:{ key:int, value:int },
  rb:int, rc:real } @ { Collection }, re:bool } -> collection { key:address,
  value:collection { ra:{ key:int, value:int }, rb:int, rc:real
  } @ { Collection } } @ { Collection } = (\b1 -> bind b1 as {ra:lkey_0,
  rb:lkey_1, rc:lkey_2, rd:tuples, re:shuffle_on_empty} in let all_targets =
  if shuffle_on_empty == true
    then (route_to_int_date_int {ra:1, rb:lkey_0, rc:lkey_1, rd:lkey_2}).fold
      ((\_accmap -> (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {key:ip, value:empty { ra:{ key:int, value:int }, rb:int,
       rc:real } @ { Collection }};
       _accmap)))) empty { key:address, value:collection { ra:{ key:int,
      value:int }, rb:int, rc:real } @ { Collection } } @ { Collection }
    else empty { key:address, value:collection { ra:{ key:int, value:int },
      rb:int, rc:real } @ { Collection } } @ { Collection } in
  (all_targets.combine (tuples.fold ((\_accext -> (\r_tuple -> _accext.combine
    (bind r_tuple as {ra:rkey_0, rb:rkey_1, rc:rkey_2} in
    (route_to_int_date_int {ra:1, rb:Some rkey_1, rc:lkey_1, rd:lkey_2}).fold
      ((\_accmap -> (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {key:ip, value:{| ra:{ key:int, value:int }, rb:int,
       rc:real | r_tuple|} @ { Collection }};
       _accmap)))) empty { key:address, value:collection { ra:{ key:int,
      value:int }, rb:int, rc:real } @ { Collection } } @ { Collection }))))
    empty { key:address, value:collection { ra:{ key:int, value:int }, rb:int,
    rc:real } @ { Collection } } @ { Collection })).groupBy ((\b1 ->
    bind b1 as {key:ip, value:tuple} in ip)) ((\acc -> (\b3 ->
    bind b3 as {key:ip, value:tuple} in tuple.combine acc))) empty { ra:{
    key:int, value:int }, rb:int, rc:real } @ { Collection })


declare shuffle_QUERY3_mORDERS1_to_QUERY3 : { ra:option int, rb:option int,
  rc:option int, rd:collection { ra:{ key:int, value:int }, rb:int, rc:int
  } @ { Collection }, re:bool } -> collection { key:address, value:collection {
  ra:{ key:int, value:int }, rb:int, rc:int } @ { Collection }
  } @ { Collection } = (\b1 -> bind b1 as {ra:lkey_0, rb:lkey_1, rc:lkey_2,
  rd:tuples, re:shuffle_on_empty} in let all_targets =
  if shuffle_on_empty == true
    then (route_to_int_date_int {ra:1, rb:lkey_0, rc:lkey_1, rd:lkey_2}).fold
      ((\_accmap -> (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {key:ip, value:empty { ra:{ key:int, value:int }, rb:int,
       rc:int } @ { Collection }};
       _accmap)))) empty { key:address, value:collection { ra:{ key:int,
      value:int }, rb:int, rc:int } @ { Collection } } @ { Collection }
    else empty { key:address, value:collection { ra:{ key:int, value:int },
      rb:int, rc:int } @ { Collection } } @ { Collection } in
  (all_targets.combine (tuples.fold ((\_accext -> (\r_tuple -> _accext.combine
    (bind r_tuple as {ra:rkey_0, rb:rkey_1, rc:rkey_2} in
    (route_to_int_date_int {ra:1, rb:lkey_0, rc:lkey_1, rd:lkey_2}).fold
      ((\_accmap -> (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {key:ip, value:{| ra:{ key:int, value:int }, rb:int,
       rc:int | r_tuple|} @ { Collection }};
       _accmap)))) empty { key:address, value:collection { ra:{ key:int,
      value:int }, rb:int, rc:int } @ { Collection } } @ { Collection }))))
    empty { key:address, value:collection { ra:{ key:int, value:int }, rb:int,
    rc:int } @ { Collection } } @ { Collection })).groupBy ((\b1 ->
    bind b1 as {key:ip, value:tuple} in ip)) ((\acc -> (\b3 ->
    bind b3 as {key:ip, value:tuple} in tuple.combine acc))) empty { ra:{
    key:int, value:int }, rb:int, rc:int } @ { Collection })


declare shuffle_QUERY3_mLINEITEM1_mCUSTOMER2_to_QUERY3_mLINEITEM1_bind_0t0_1t1_2t2 :
  { ra:option int, rb:option int, rc:option int, rd:collection { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:int, re:int, rf:int } @ { Collection },
  re:bool } -> collection { key:address, value:collection { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:int, re:int, rf:int } @ { Collection }
  } @ { Collection } = (\b1 -> bind b1 as {ra:lkey_0, rb:lkey_1, rc:lkey_2,
  rd:tuples, re:shuffle_on_empty} in let all_targets =
  if shuffle_on_empty == true
    then (route_to_int_date_int {ra:2, rb:lkey_0, rc:lkey_1, rd:lkey_2}).fold
      ((\_accmap -> (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {key:ip, value:empty { ra:{ key:int, value:int }, rb:int,
       rc:int, rd:int, re:int, rf:int } @ { Collection }};
       _accmap)))) empty { key:address, value:collection { ra:{ key:int,
      value:int }, rb:int, rc:int, rd:int, re:int, rf:int } @ { Collection }
      } @ { Collection }
    else empty { key:address, value:collection { ra:{ key:int, value:int },
      rb:int, rc:int, rd:int, re:int, rf:int } @ { Collection }
      } @ { Collection } in
  (all_targets.combine (tuples.fold ((\_accext -> (\r_tuple -> _accext.combine
    (bind r_tuple as
    {ra:rkey_0, rb:rkey_1, rc:rkey_2, rd:rkey_3, re:rkey_4, rf:rkey_5} in
    (route_to_int_date_int {ra:2, rb:Some rkey_1, rc:Some rkey_2,
       rd:Some rkey_3}).fold ((\_accmap -> (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {key:ip, value:{| ra:{ key:int, value:int }, rb:int,
       rc:int, rd:int, re:int, rf:int | r_tuple|} @ { Collection }};
       _accmap)))) empty { key:address, value:collection { ra:{ key:int,
      value:int }, rb:int, rc:int, rd:int, re:int, rf:int } @ { Collection }
      } @ { Collection })))) empty { key:address, value:collection { ra:{
    key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:int
    } @ { Collection } } @ { Collection })).groupBy ((\b1 ->
    bind b1 as {key:ip, value:tuple} in ip)) ((\acc -> (\b3 ->
    bind b3 as {key:ip, value:tuple} in tuple.combine acc))) empty { ra:{
    key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:int
    } @ { Collection })


declare shuffle_QUERY3_mCUSTOMER4_to_QUERY3_bind_0t0_1t1_2t2 : { ra:option int,
  rb:option int, rc:option int, rd:collection { ra:{ key:int, value:int },
  rb:int, rc:int, rd:int, re:int, rf:real } @ { Collection }, re:bool
  } -> collection { key:address, value:collection { ra:{ key:int, value:int },
  rb:int, rc:int, rd:int, re:int, rf:real } @ { Collection }
  } @ { Collection } = (\b1 -> bind b1 as {ra:lkey_0, rb:lkey_1, rc:lkey_2,
  rd:tuples, re:shuffle_on_empty} in let all_targets =
  if shuffle_on_empty == true
    then (route_to_int_date_int {ra:1, rb:lkey_0, rc:lkey_1, rd:lkey_2}).fold
      ((\_accmap -> (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {key:ip, value:empty { ra:{ key:int, value:int }, rb:int,
       rc:int, rd:int, re:int, rf:real } @ { Collection }};
       _accmap)))) empty { key:address, value:collection { ra:{ key:int,
      value:int }, rb:int, rc:int, rd:int, re:int, rf:real } @ { Collection }
      } @ { Collection }
    else empty { key:address, value:collection { ra:{ key:int, value:int },
      rb:int, rc:int, rd:int, re:int, rf:real } @ { Collection }
      } @ { Collection } in
  (all_targets.combine (tuples.fold ((\_accext -> (\r_tuple -> _accext.combine
    (bind r_tuple as
    {ra:rkey_0, rb:rkey_1, rc:rkey_2, rd:rkey_3, re:rkey_4, rf:rkey_5} in
    (route_to_int_date_int {ra:1, rb:Some rkey_1, rc:Some rkey_2,
       rd:Some rkey_3}).fold ((\_accmap -> (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {key:ip, value:{| ra:{ key:int, value:int }, rb:int,
       rc:int, rd:int, re:int, rf:real | r_tuple|} @ { Collection }};
       _accmap)))) empty { key:address, value:collection { ra:{ key:int,
      value:int }, rb:int, rc:int, rd:int, re:int, rf:real } @ { Collection }
      } @ { Collection })))) empty { key:address, value:collection { ra:{
    key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:real
    } @ { Collection } } @ { Collection })).groupBy ((\b1 ->
    bind b1 as {key:ip, value:tuple} in ip)) ((\acc -> (\b3 ->
    bind b3 as {key:ip, value:tuple} in tuple.combine acc))) empty { ra:{
    key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:real
    } @ { Collection })


declare shuffle_QUERY3_mCUSTOMER2_to_QUERY3_bind_0t0_1t1_2t2 : { ra:option int,
  rb:option int, rc:option int, rd:collection { ra:{ key:int, value:int },
  rb:int, rc:int, rd:int, re:int, rf:real } @ { Collection }, re:bool
  } -> collection { key:address, value:collection { ra:{ key:int, value:int },
  rb:int, rc:int, rd:int, re:int, rf:real } @ { Collection }
  } @ { Collection } = (\b1 -> bind b1 as {ra:lkey_0, rb:lkey_1, rc:lkey_2,
  rd:tuples, re:shuffle_on_empty} in let all_targets =
  if shuffle_on_empty == true
    then (route_to_int_date_int {ra:1, rb:lkey_0, rc:lkey_1, rd:lkey_2}).fold
      ((\_accmap -> (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {key:ip, value:empty { ra:{ key:int, value:int }, rb:int,
       rc:int, rd:int, re:int, rf:real } @ { Collection }};
       _accmap)))) empty { key:address, value:collection { ra:{ key:int,
      value:int }, rb:int, rc:int, rd:int, re:int, rf:real } @ { Collection }
      } @ { Collection }
    else empty { key:address, value:collection { ra:{ key:int, value:int },
      rb:int, rc:int, rd:int, re:int, rf:real } @ { Collection }
      } @ { Collection } in
  (all_targets.combine (tuples.fold ((\_accext -> (\r_tuple -> _accext.combine
    (bind r_tuple as
    {ra:rkey_0, rb:rkey_1, rc:rkey_2, rd:rkey_3, re:rkey_4, rf:rkey_5} in
    (route_to_int_date_int {ra:1, rb:Some rkey_1, rc:Some rkey_2,
       rd:Some rkey_3}).fold ((\_accmap -> (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {key:ip, value:{| ra:{ key:int, value:int }, rb:int,
       rc:int, rd:int, re:int, rf:real | r_tuple|} @ { Collection }};
       _accmap)))) empty { key:address, value:collection { ra:{ key:int,
      value:int }, rb:int, rc:int, rd:int, re:int, rf:real } @ { Collection }
      } @ { Collection })))) empty { key:address, value:collection { ra:{
    key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:real
    } @ { Collection } } @ { Collection })).groupBy ((\b1 ->
    bind b1 as {key:ip, value:tuple} in ip)) ((\acc -> (\b3 ->
    bind b3 as {key:ip, value:tuple} in tuple.combine acc))) empty { ra:{
    key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:real
    } @ { Collection })


declare do_gc_nd_log_master : { key:int, value:int } -> () = (\min_gc_vid ->
  let temp = empty { key:{ key:int, value:int }, value:int } @ { Set } in
  (nd_log_master.iterate ((\b1 -> bind b1 as {key:vid, value:stmt_id} in 
   if vid < min_gc_vid then temp.insert {key:vid, value:stmt_id} else ()));
   temp.iterate ((\val -> nd_log_master.erase val))))


declare do_gc_nd_log_insert_CUSTOMER : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { key:{ key:int, value:int }, value:{ ra:int, rb:string, rc:string,
    rd:int, re:string, rf:real, rg:string, rh:string } } @ { Map } in
  (nd_log_insert_CUSTOMER.iterate ((\b1 -> bind b1 as {key:vid, value:args} in 
   if vid < min_gc_vid then temp.insert {key:vid, value:args} else ()));
   temp.iterate ((\val -> nd_log_insert_CUSTOMER.erase val))))


declare do_gc_nd_log_delete_CUSTOMER : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { key:{ key:int, value:int }, value:{ ra:int, rb:string, rc:string,
    rd:int, re:string, rf:real, rg:string, rh:string } } @ { Map } in
  (nd_log_delete_CUSTOMER.iterate ((\b1 -> bind b1 as {key:vid, value:args} in 
   if vid < min_gc_vid then temp.insert {key:vid, value:args} else ()));
   temp.iterate ((\val -> nd_log_delete_CUSTOMER.erase val))))


declare do_gc_nd_log_insert_ORDERS : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { key:{ key:int, value:int }, value:{ ra:int, rb:int, rc:string,
    rd:real, re:int, rf:string, rg:string, rh:int, ri:string } } @ { Map } in
  (nd_log_insert_ORDERS.iterate ((\b1 -> bind b1 as {key:vid, value:args} in 
   if vid < min_gc_vid then temp.insert {key:vid, value:args} else ()));
   temp.iterate ((\val -> nd_log_insert_ORDERS.erase val))))


declare do_gc_nd_log_delete_ORDERS : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { key:{ key:int, value:int }, value:{ ra:int, rb:int, rc:string,
    rd:real, re:int, rf:string, rg:string, rh:int, ri:string } } @ { Map } in
  (nd_log_delete_ORDERS.iterate ((\b1 -> bind b1 as {key:vid, value:args} in 
   if vid < min_gc_vid then temp.insert {key:vid, value:args} else ()));
   temp.iterate ((\val -> nd_log_delete_ORDERS.erase val))))


declare do_gc_nd_log_insert_LINEITEM : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { key:{ key:int, value:int }, value:{ ra:int, rb:int, rc:int, rd:int,
    re:real, rf:real, rg:real, rh:real, ri:string, rj:string, rk:int, rl:int,
    rm:int, rn:string, ro:string, rp:string } } @ { Map } in
  (nd_log_insert_LINEITEM.iterate ((\b1 -> bind b1 as {key:vid, value:args} in 
   if vid < min_gc_vid then temp.insert {key:vid, value:args} else ()));
   temp.iterate ((\val -> nd_log_insert_LINEITEM.erase val))))


declare do_gc_nd_log_delete_LINEITEM : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { key:{ key:int, value:int }, value:{ ra:int, rb:int, rc:int, rd:int,
    re:real, rf:real, rg:real, rh:real, ri:string, rj:string, rk:int, rl:int,
    rm:int, rn:string, ro:string, rp:string } } @ { Map } in
  (nd_log_delete_LINEITEM.iterate ((\b1 -> bind b1 as {key:vid, value:args} in 
   if vid < min_gc_vid then temp.insert {key:vid, value:args} else ()));
   temp.iterate ((\val -> nd_log_delete_LINEITEM.erase val))))


declare do_gc_map_QUERY3_mCUSTOMER2_s0_buf : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:real
    } @ { Set } in
  bind map_QUERY3_mCUSTOMER2_s0_buf as ind map_QUERY3_mCUSTOMER2_s0_buf_unwrap
    in
    let frontier =
      frontier_int_date_int_int_float {key:min_gc_vid,
        value:map_QUERY3_mCUSTOMER2_s0_buf_unwrap} in
      (map_QUERY3_mCUSTOMER2_s0_buf_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
       rb:map_0, rc:map_1, rd:map_2, re:map_3, rf:map_val} in 
       if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
         rf:map_val} else ()));
       temp.iterate ((\val -> map_QUERY3_mCUSTOMER2_s0_buf_unwrap.erase val));
       frontier.iterate ((\val -> map_QUERY3_mCUSTOMER2_s0_buf_unwrap.insert
       val))))


declare do_gc_map_QUERY3_mCUSTOMER4_s0_buf : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:real
    } @ { Set } in
  bind map_QUERY3_mCUSTOMER4_s0_buf as ind map_QUERY3_mCUSTOMER4_s0_buf_unwrap
    in
    let frontier =
      frontier_int_date_int_int_float {key:min_gc_vid,
        value:map_QUERY3_mCUSTOMER4_s0_buf_unwrap} in
      (map_QUERY3_mCUSTOMER4_s0_buf_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
       rb:map_0, rc:map_1, rd:map_2, re:map_3, rf:map_val} in 
       if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
         rf:map_val} else ()));
       temp.iterate ((\val -> map_QUERY3_mCUSTOMER4_s0_buf_unwrap.erase val));
       frontier.iterate ((\val -> map_QUERY3_mCUSTOMER4_s0_buf_unwrap.insert
       val))))


declare do_gc_map_QUERY3_mLINEITEM1_mCUSTOMER2_s1_buf : { key:int, value:int
  } -> () = (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:int
    } @ { Set } in
  bind map_QUERY3_mLINEITEM1_mCUSTOMER2_s1_buf as ind
    map_QUERY3_mLINEITEM1_mCUSTOMER2_s1_buf_unwrap in
    let frontier =
      frontier_int_date_int_int_int {key:min_gc_vid,
        value:map_QUERY3_mLINEITEM1_mCUSTOMER2_s1_buf_unwrap} in
      (map_QUERY3_mLINEITEM1_mCUSTOMER2_s1_buf_unwrap.iterate ((\b1 ->
       bind b1 as {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
       rf:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
         rf:map_val} else ()));
       temp.iterate ((\val ->
       map_QUERY3_mLINEITEM1_mCUSTOMER2_s1_buf_unwrap.erase val));
       frontier.iterate ((\val ->
       map_QUERY3_mLINEITEM1_mCUSTOMER2_s1_buf_unwrap.insert val))))


declare do_gc_map_QUERY3_mCUSTOMER2_s3_buf : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:real
    } @ { Set } in
  bind map_QUERY3_mCUSTOMER2_s3_buf as ind map_QUERY3_mCUSTOMER2_s3_buf_unwrap
    in
    let frontier =
      frontier_int_date_int_int_float {key:min_gc_vid,
        value:map_QUERY3_mCUSTOMER2_s3_buf_unwrap} in
      (map_QUERY3_mCUSTOMER2_s3_buf_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
       rb:map_0, rc:map_1, rd:map_2, re:map_3, rf:map_val} in 
       if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
         rf:map_val} else ()));
       temp.iterate ((\val -> map_QUERY3_mCUSTOMER2_s3_buf_unwrap.erase val));
       frontier.iterate ((\val -> map_QUERY3_mCUSTOMER2_s3_buf_unwrap.insert
       val))))


declare do_gc_map_QUERY3_mCUSTOMER4_s3_buf : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:real
    } @ { Set } in
  bind map_QUERY3_mCUSTOMER4_s3_buf as ind map_QUERY3_mCUSTOMER4_s3_buf_unwrap
    in
    let frontier =
      frontier_int_date_int_int_float {key:min_gc_vid,
        value:map_QUERY3_mCUSTOMER4_s3_buf_unwrap} in
      (map_QUERY3_mCUSTOMER4_s3_buf_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
       rb:map_0, rc:map_1, rd:map_2, re:map_3, rf:map_val} in 
       if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
         rf:map_val} else ()));
       temp.iterate ((\val -> map_QUERY3_mCUSTOMER4_s3_buf_unwrap.erase val));
       frontier.iterate ((\val -> map_QUERY3_mCUSTOMER4_s3_buf_unwrap.insert
       val))))


declare do_gc_map_QUERY3_mLINEITEM1_mCUSTOMER2_s4_buf : { key:int, value:int
  } -> () = (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:int
    } @ { Set } in
  bind map_QUERY3_mLINEITEM1_mCUSTOMER2_s4_buf as ind
    map_QUERY3_mLINEITEM1_mCUSTOMER2_s4_buf_unwrap in
    let frontier =
      frontier_int_date_int_int_int {key:min_gc_vid,
        value:map_QUERY3_mLINEITEM1_mCUSTOMER2_s4_buf_unwrap} in
      (map_QUERY3_mLINEITEM1_mCUSTOMER2_s4_buf_unwrap.iterate ((\b1 ->
       bind b1 as {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
       rf:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
         rf:map_val} else ()));
       temp.iterate ((\val ->
       map_QUERY3_mLINEITEM1_mCUSTOMER2_s4_buf_unwrap.erase val));
       frontier.iterate ((\val ->
       map_QUERY3_mLINEITEM1_mCUSTOMER2_s4_buf_unwrap.insert val))))


declare do_gc_map_QUERY3_mORDERS1_s6_buf : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:int } @ { Set } in
  bind map_QUERY3_mORDERS1_s6_buf as ind map_QUERY3_mORDERS1_s6_buf_unwrap in
    let frontier =
      frontier_int_int {key:min_gc_vid,
        value:map_QUERY3_mORDERS1_s6_buf_unwrap} in
      (map_QUERY3_mORDERS1_s6_buf_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
       rb:map_0, rc:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
       temp.iterate ((\val -> map_QUERY3_mORDERS1_s6_buf_unwrap.erase val));
       frontier.iterate ((\val -> map_QUERY3_mORDERS1_s6_buf_unwrap.insert
       val))))


declare do_gc_map_QUERY3_mORDERS3_s6_buf : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:real } @ { Set } in
  bind map_QUERY3_mORDERS3_s6_buf as ind map_QUERY3_mORDERS3_s6_buf_unwrap in
    let frontier =
      frontier_int_float {key:min_gc_vid,
        value:map_QUERY3_mORDERS3_s6_buf_unwrap} in
      (map_QUERY3_mORDERS3_s6_buf_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
       rb:map_0, rc:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
       temp.iterate ((\val -> map_QUERY3_mORDERS3_s6_buf_unwrap.erase val));
       frontier.iterate ((\val -> map_QUERY3_mORDERS3_s6_buf_unwrap.insert
       val))))


declare do_gc_map_QUERY3_mORDERS6_s6_buf : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:real } @ { Set } in
  bind map_QUERY3_mORDERS6_s6_buf as ind map_QUERY3_mORDERS6_s6_buf_unwrap in
    let frontier =
      frontier_int_float {key:min_gc_vid,
        value:map_QUERY3_mORDERS6_s6_buf_unwrap} in
      (map_QUERY3_mORDERS6_s6_buf_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
       rb:map_0, rc:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
       temp.iterate ((\val -> map_QUERY3_mORDERS6_s6_buf_unwrap.erase val));
       frontier.iterate ((\val -> map_QUERY3_mORDERS6_s6_buf_unwrap.insert
       val))))


declare do_gc_map_QUERY3_mORDERS1_s7_buf : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:int } @ { Set } in
  bind map_QUERY3_mORDERS1_s7_buf as ind map_QUERY3_mORDERS1_s7_buf_unwrap in
    let frontier =
      frontier_int_int {key:min_gc_vid,
        value:map_QUERY3_mORDERS1_s7_buf_unwrap} in
      (map_QUERY3_mORDERS1_s7_buf_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
       rb:map_0, rc:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
       temp.iterate ((\val -> map_QUERY3_mORDERS1_s7_buf_unwrap.erase val));
       frontier.iterate ((\val -> map_QUERY3_mORDERS1_s7_buf_unwrap.insert
       val))))


declare do_gc_map_QUERY3_mORDERS3_s9_buf : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:real } @ { Set } in
  bind map_QUERY3_mORDERS3_s9_buf as ind map_QUERY3_mORDERS3_s9_buf_unwrap in
    let frontier =
      frontier_int_float {key:min_gc_vid,
        value:map_QUERY3_mORDERS3_s9_buf_unwrap} in
      (map_QUERY3_mORDERS3_s9_buf_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
       rb:map_0, rc:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
       temp.iterate ((\val -> map_QUERY3_mORDERS3_s9_buf_unwrap.erase val));
       frontier.iterate ((\val -> map_QUERY3_mORDERS3_s9_buf_unwrap.insert
       val))))


declare do_gc_map_QUERY3_mORDERS6_s10_buf : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:real } @ { Set } in
  bind map_QUERY3_mORDERS6_s10_buf as ind map_QUERY3_mORDERS6_s10_buf_unwrap in
    let frontier =
      frontier_int_float {key:min_gc_vid,
        value:map_QUERY3_mORDERS6_s10_buf_unwrap} in
      (map_QUERY3_mORDERS6_s10_buf_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
       rb:map_0, rc:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
       temp.iterate ((\val -> map_QUERY3_mORDERS6_s10_buf_unwrap.erase val));
       frontier.iterate ((\val -> map_QUERY3_mORDERS6_s10_buf_unwrap.insert
       val))))


declare do_gc_map_QUERY3_mORDERS1_s11_buf : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:int } @ { Set } in
  bind map_QUERY3_mORDERS1_s11_buf as ind map_QUERY3_mORDERS1_s11_buf_unwrap in
    let frontier =
      frontier_int_int {key:min_gc_vid,
        value:map_QUERY3_mORDERS1_s11_buf_unwrap} in
      (map_QUERY3_mORDERS1_s11_buf_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
       rb:map_0, rc:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
       temp.iterate ((\val -> map_QUERY3_mORDERS1_s11_buf_unwrap.erase val));
       frontier.iterate ((\val -> map_QUERY3_mORDERS1_s11_buf_unwrap.insert
       val))))


declare do_gc_map_QUERY3_mORDERS3_s11_buf : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:real } @ { Set } in
  bind map_QUERY3_mORDERS3_s11_buf as ind map_QUERY3_mORDERS3_s11_buf_unwrap in
    let frontier =
      frontier_int_float {key:min_gc_vid,
        value:map_QUERY3_mORDERS3_s11_buf_unwrap} in
      (map_QUERY3_mORDERS3_s11_buf_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
       rb:map_0, rc:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
       temp.iterate ((\val -> map_QUERY3_mORDERS3_s11_buf_unwrap.erase val));
       frontier.iterate ((\val -> map_QUERY3_mORDERS3_s11_buf_unwrap.insert
       val))))


declare do_gc_map_QUERY3_mORDERS6_s11_buf : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:real } @ { Set } in
  bind map_QUERY3_mORDERS6_s11_buf as ind map_QUERY3_mORDERS6_s11_buf_unwrap in
    let frontier =
      frontier_int_float {key:min_gc_vid,
        value:map_QUERY3_mORDERS6_s11_buf_unwrap} in
      (map_QUERY3_mORDERS6_s11_buf_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
       rb:map_0, rc:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
       temp.iterate ((\val -> map_QUERY3_mORDERS6_s11_buf_unwrap.erase val));
       frontier.iterate ((\val -> map_QUERY3_mORDERS6_s11_buf_unwrap.insert
       val))))


declare do_gc_map_QUERY3_mORDERS1_s12_buf : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:int } @ { Set } in
  bind map_QUERY3_mORDERS1_s12_buf as ind map_QUERY3_mORDERS1_s12_buf_unwrap in
    let frontier =
      frontier_int_int {key:min_gc_vid,
        value:map_QUERY3_mORDERS1_s12_buf_unwrap} in
      (map_QUERY3_mORDERS1_s12_buf_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
       rb:map_0, rc:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
       temp.iterate ((\val -> map_QUERY3_mORDERS1_s12_buf_unwrap.erase val));
       frontier.iterate ((\val -> map_QUERY3_mORDERS1_s12_buf_unwrap.insert
       val))))


declare do_gc_map_QUERY3_mORDERS3_s14_buf : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:real } @ { Set } in
  bind map_QUERY3_mORDERS3_s14_buf as ind map_QUERY3_mORDERS3_s14_buf_unwrap in
    let frontier =
      frontier_int_float {key:min_gc_vid,
        value:map_QUERY3_mORDERS3_s14_buf_unwrap} in
      (map_QUERY3_mORDERS3_s14_buf_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
       rb:map_0, rc:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
       temp.iterate ((\val -> map_QUERY3_mORDERS3_s14_buf_unwrap.erase val));
       frontier.iterate ((\val -> map_QUERY3_mORDERS3_s14_buf_unwrap.insert
       val))))


declare do_gc_map_QUERY3_mORDERS6_s15_buf : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:real } @ { Set } in
  bind map_QUERY3_mORDERS6_s15_buf as ind map_QUERY3_mORDERS6_s15_buf_unwrap in
    let frontier =
      frontier_int_float {key:min_gc_vid,
        value:map_QUERY3_mORDERS6_s15_buf_unwrap} in
      (map_QUERY3_mORDERS6_s15_buf_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
       rb:map_0, rc:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
       temp.iterate ((\val -> map_QUERY3_mORDERS6_s15_buf_unwrap.erase val));
       frontier.iterate ((\val -> map_QUERY3_mORDERS6_s15_buf_unwrap.insert
       val))))


declare do_gc_map_QUERY3_mLINEITEM1_s16_buf : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int } @ { Set }
  in
  bind map_QUERY3_mLINEITEM1_s16_buf as ind
    map_QUERY3_mLINEITEM1_s16_buf_unwrap in
    let frontier =
      frontier_int_date_int_int {key:min_gc_vid,
        value:map_QUERY3_mLINEITEM1_s16_buf_unwrap} in
      (map_QUERY3_mLINEITEM1_s16_buf_unwrap.iterate ((\b1 ->
       bind b1 as {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val} in 
       if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val}
       else ()));
       temp.iterate ((\val -> map_QUERY3_mLINEITEM1_s16_buf_unwrap.erase val));
       frontier.iterate ((\val -> map_QUERY3_mLINEITEM1_s16_buf_unwrap.insert
       val))))


declare do_gc_map_QUERY3_mLINEITEM1_mCUSTOMER2_s19_buf : { key:int, value:int
  } -> () = (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:int
    } @ { Set } in
  bind map_QUERY3_mLINEITEM1_mCUSTOMER2_s19_buf as ind
    map_QUERY3_mLINEITEM1_mCUSTOMER2_s19_buf_unwrap in
    let frontier =
      frontier_int_date_int_int_int {key:min_gc_vid,
        value:map_QUERY3_mLINEITEM1_mCUSTOMER2_s19_buf_unwrap} in
      (map_QUERY3_mLINEITEM1_mCUSTOMER2_s19_buf_unwrap.iterate ((\b1 ->
       bind b1 as {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
       rf:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
         rf:map_val} else ()));
       temp.iterate ((\val ->
       map_QUERY3_mLINEITEM1_mCUSTOMER2_s19_buf_unwrap.erase val));
       frontier.iterate ((\val ->
       map_QUERY3_mLINEITEM1_mCUSTOMER2_s19_buf_unwrap.insert val))))


declare do_gc_map_QUERY3_mLINEITEM1_mCUSTOMER2_s20_buf : { key:int, value:int
  } -> () = (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:int
    } @ { Set } in
  bind map_QUERY3_mLINEITEM1_mCUSTOMER2_s20_buf as ind
    map_QUERY3_mLINEITEM1_mCUSTOMER2_s20_buf_unwrap in
    let frontier =
      frontier_int_date_int_int_int {key:min_gc_vid,
        value:map_QUERY3_mLINEITEM1_mCUSTOMER2_s20_buf_unwrap} in
      (map_QUERY3_mLINEITEM1_mCUSTOMER2_s20_buf_unwrap.iterate ((\b1 ->
       bind b1 as {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
       rf:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
         rf:map_val} else ()));
       temp.iterate ((\val ->
       map_QUERY3_mLINEITEM1_mCUSTOMER2_s20_buf_unwrap.erase val));
       frontier.iterate ((\val ->
       map_QUERY3_mLINEITEM1_mCUSTOMER2_s20_buf_unwrap.insert val))))


declare do_gc_map_QUERY3_mLINEITEM1_s21_buf : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int } @ { Set }
  in
  bind map_QUERY3_mLINEITEM1_s21_buf as ind
    map_QUERY3_mLINEITEM1_s21_buf_unwrap in
    let frontier =
      frontier_int_date_int_int {key:min_gc_vid,
        value:map_QUERY3_mLINEITEM1_s21_buf_unwrap} in
      (map_QUERY3_mLINEITEM1_s21_buf_unwrap.iterate ((\b1 ->
       bind b1 as {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val} in 
       if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val}
       else ()));
       temp.iterate ((\val -> map_QUERY3_mLINEITEM1_s21_buf_unwrap.erase val));
       frontier.iterate ((\val -> map_QUERY3_mLINEITEM1_s21_buf_unwrap.insert
       val))))


declare do_gc_map_QUERY3_mLINEITEM1_mCUSTOMER2_s24_buf : { key:int, value:int
  } -> () = (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:int
    } @ { Set } in
  bind map_QUERY3_mLINEITEM1_mCUSTOMER2_s24_buf as ind
    map_QUERY3_mLINEITEM1_mCUSTOMER2_s24_buf_unwrap in
    let frontier =
      frontier_int_date_int_int_int {key:min_gc_vid,
        value:map_QUERY3_mLINEITEM1_mCUSTOMER2_s24_buf_unwrap} in
      (map_QUERY3_mLINEITEM1_mCUSTOMER2_s24_buf_unwrap.iterate ((\b1 ->
       bind b1 as {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
       rf:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
         rf:map_val} else ()));
       temp.iterate ((\val ->
       map_QUERY3_mLINEITEM1_mCUSTOMER2_s24_buf_unwrap.erase val));
       frontier.iterate ((\val ->
       map_QUERY3_mLINEITEM1_mCUSTOMER2_s24_buf_unwrap.insert val))))


declare do_gc_map_QUERY3_mLINEITEM1_mCUSTOMER2_s25_buf : { key:int, value:int
  } -> () = (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:int
    } @ { Set } in
  bind map_QUERY3_mLINEITEM1_mCUSTOMER2_s25_buf as ind
    map_QUERY3_mLINEITEM1_mCUSTOMER2_s25_buf_unwrap in
    let frontier =
      frontier_int_date_int_int_int {key:min_gc_vid,
        value:map_QUERY3_mLINEITEM1_mCUSTOMER2_s25_buf_unwrap} in
      (map_QUERY3_mLINEITEM1_mCUSTOMER2_s25_buf_unwrap.iterate ((\b1 ->
       bind b1 as {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
       rf:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
         rf:map_val} else ()));
       temp.iterate ((\val ->
       map_QUERY3_mLINEITEM1_mCUSTOMER2_s25_buf_unwrap.erase val));
       frontier.iterate ((\val ->
       map_QUERY3_mLINEITEM1_mCUSTOMER2_s25_buf_unwrap.insert val))))


declare do_gc_map_QUERY3_mORDERS3_s36_buf : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:real } @ { Set } in
  bind map_QUERY3_mORDERS3_s36_buf as ind map_QUERY3_mORDERS3_s36_buf_unwrap in
    let frontier =
      frontier_int_float {key:min_gc_vid,
        value:map_QUERY3_mORDERS3_s36_buf_unwrap} in
      (map_QUERY3_mORDERS3_s36_buf_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
       rb:map_0, rc:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
       temp.iterate ((\val -> map_QUERY3_mORDERS3_s36_buf_unwrap.erase val));
       frontier.iterate ((\val -> map_QUERY3_mORDERS3_s36_buf_unwrap.insert
       val))))


declare do_gc_map_QUERY3_mORDERS6_s36_buf : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:real } @ { Set } in
  bind map_QUERY3_mORDERS6_s36_buf as ind map_QUERY3_mORDERS6_s36_buf_unwrap in
    let frontier =
      frontier_int_float {key:min_gc_vid,
        value:map_QUERY3_mORDERS6_s36_buf_unwrap} in
      (map_QUERY3_mORDERS6_s36_buf_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
       rb:map_0, rc:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
       temp.iterate ((\val -> map_QUERY3_mORDERS6_s36_buf_unwrap.erase val));
       frontier.iterate ((\val -> map_QUERY3_mORDERS6_s36_buf_unwrap.insert
       val))))


declare do_gc_map_QUERY3_mORDERS3_s38_buf : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:real } @ { Set } in
  bind map_QUERY3_mORDERS3_s38_buf as ind map_QUERY3_mORDERS3_s38_buf_unwrap in
    let frontier =
      frontier_int_float {key:min_gc_vid,
        value:map_QUERY3_mORDERS3_s38_buf_unwrap} in
      (map_QUERY3_mORDERS3_s38_buf_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
       rb:map_0, rc:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
       temp.iterate ((\val -> map_QUERY3_mORDERS3_s38_buf_unwrap.erase val));
       frontier.iterate ((\val -> map_QUERY3_mORDERS3_s38_buf_unwrap.insert
       val))))


declare do_gc_map_QUERY3_mORDERS6_s38_buf : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:real } @ { Set } in
  bind map_QUERY3_mORDERS6_s38_buf as ind map_QUERY3_mORDERS6_s38_buf_unwrap in
    let frontier =
      frontier_int_float {key:min_gc_vid,
        value:map_QUERY3_mORDERS6_s38_buf_unwrap} in
      (map_QUERY3_mORDERS6_s38_buf_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
       rb:map_0, rc:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
       temp.iterate ((\val -> map_QUERY3_mORDERS6_s38_buf_unwrap.erase val));
       frontier.iterate ((\val -> map_QUERY3_mORDERS6_s38_buf_unwrap.insert
       val))))


declare do_gc_map_QUERY3_mORDERS1_s40_buf : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:int } @ { Set } in
  bind map_QUERY3_mORDERS1_s40_buf as ind map_QUERY3_mORDERS1_s40_buf_unwrap in
    let frontier =
      frontier_int_int {key:min_gc_vid,
        value:map_QUERY3_mORDERS1_s40_buf_unwrap} in
      (map_QUERY3_mORDERS1_s40_buf_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
       rb:map_0, rc:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
       temp.iterate ((\val -> map_QUERY3_mORDERS1_s40_buf_unwrap.erase val));
       frontier.iterate ((\val -> map_QUERY3_mORDERS1_s40_buf_unwrap.insert
       val))))


declare do_gc_map_QUERY3_mORDERS1_s42_buf : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:int } @ { Set } in
  bind map_QUERY3_mORDERS1_s42_buf as ind map_QUERY3_mORDERS1_s42_buf_unwrap in
    let frontier =
      frontier_int_int {key:min_gc_vid,
        value:map_QUERY3_mORDERS1_s42_buf_unwrap} in
      (map_QUERY3_mORDERS1_s42_buf_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
       rb:map_0, rc:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
       temp.iterate ((\val -> map_QUERY3_mORDERS1_s42_buf_unwrap.erase val));
       frontier.iterate ((\val -> map_QUERY3_mORDERS1_s42_buf_unwrap.insert
       val))))


declare do_gc_map_QUERY3_mORDERS1_s44_buf : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:int } @ { Set } in
  bind map_QUERY3_mORDERS1_s44_buf as ind map_QUERY3_mORDERS1_s44_buf_unwrap in
    let frontier =
      frontier_int_int {key:min_gc_vid,
        value:map_QUERY3_mORDERS1_s44_buf_unwrap} in
      (map_QUERY3_mORDERS1_s44_buf_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
       rb:map_0, rc:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
       temp.iterate ((\val -> map_QUERY3_mORDERS1_s44_buf_unwrap.erase val));
       frontier.iterate ((\val -> map_QUERY3_mORDERS1_s44_buf_unwrap.insert
       val))))


declare do_gc_map_QUERY3_mORDERS1_s46_buf : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:int } @ { Set } in
  bind map_QUERY3_mORDERS1_s46_buf as ind map_QUERY3_mORDERS1_s46_buf_unwrap in
    let frontier =
      frontier_int_int {key:min_gc_vid,
        value:map_QUERY3_mORDERS1_s46_buf_unwrap} in
      (map_QUERY3_mORDERS1_s46_buf_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
       rb:map_0, rc:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
       temp.iterate ((\val -> map_QUERY3_mORDERS1_s46_buf_unwrap.erase val));
       frontier.iterate ((\val -> map_QUERY3_mORDERS1_s46_buf_unwrap.insert
       val))))


declare do_gc_map_QUERY3_mORDERS3_s48_buf : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:real } @ { Set } in
  bind map_QUERY3_mORDERS3_s48_buf as ind map_QUERY3_mORDERS3_s48_buf_unwrap in
    let frontier =
      frontier_int_float {key:min_gc_vid,
        value:map_QUERY3_mORDERS3_s48_buf_unwrap} in
      (map_QUERY3_mORDERS3_s48_buf_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
       rb:map_0, rc:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
       temp.iterate ((\val -> map_QUERY3_mORDERS3_s48_buf_unwrap.erase val));
       frontier.iterate ((\val -> map_QUERY3_mORDERS3_s48_buf_unwrap.insert
       val))))


declare do_gc_map_QUERY3_mORDERS6_s48_buf : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:real } @ { Set } in
  bind map_QUERY3_mORDERS6_s48_buf as ind map_QUERY3_mORDERS6_s48_buf_unwrap in
    let frontier =
      frontier_int_float {key:min_gc_vid,
        value:map_QUERY3_mORDERS6_s48_buf_unwrap} in
      (map_QUERY3_mORDERS6_s48_buf_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
       rb:map_0, rc:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
       temp.iterate ((\val -> map_QUERY3_mORDERS6_s48_buf_unwrap.erase val));
       frontier.iterate ((\val -> map_QUERY3_mORDERS6_s48_buf_unwrap.insert
       val))))


declare do_gc_map_QUERY3_mORDERS3_s50_buf : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:real } @ { Set } in
  bind map_QUERY3_mORDERS3_s50_buf as ind map_QUERY3_mORDERS3_s50_buf_unwrap in
    let frontier =
      frontier_int_float {key:min_gc_vid,
        value:map_QUERY3_mORDERS3_s50_buf_unwrap} in
      (map_QUERY3_mORDERS3_s50_buf_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
       rb:map_0, rc:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
       temp.iterate ((\val -> map_QUERY3_mORDERS3_s50_buf_unwrap.erase val));
       frontier.iterate ((\val -> map_QUERY3_mORDERS3_s50_buf_unwrap.insert
       val))))


declare do_gc_map_QUERY3_mORDERS6_s50_buf : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:real } @ { Set } in
  bind map_QUERY3_mORDERS6_s50_buf as ind map_QUERY3_mORDERS6_s50_buf_unwrap in
    let frontier =
      frontier_int_float {key:min_gc_vid,
        value:map_QUERY3_mORDERS6_s50_buf_unwrap} in
      (map_QUERY3_mORDERS6_s50_buf_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
       rb:map_0, rc:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
       temp.iterate ((\val -> map_QUERY3_mORDERS6_s50_buf_unwrap.erase val));
       frontier.iterate ((\val -> map_QUERY3_mORDERS6_s50_buf_unwrap.insert
       val))))


declare do_gc_map_QUERY3_mORDERS1_s52_buf : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:int } @ { Set } in
  bind map_QUERY3_mORDERS1_s52_buf as ind map_QUERY3_mORDERS1_s52_buf_unwrap in
    let frontier =
      frontier_int_int {key:min_gc_vid,
        value:map_QUERY3_mORDERS1_s52_buf_unwrap} in
      (map_QUERY3_mORDERS1_s52_buf_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
       rb:map_0, rc:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
       temp.iterate ((\val -> map_QUERY3_mORDERS1_s52_buf_unwrap.erase val));
       frontier.iterate ((\val -> map_QUERY3_mORDERS1_s52_buf_unwrap.insert
       val))))


declare do_gc_map_QUERY3_mORDERS1_s54_buf : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:int } @ { Set } in
  bind map_QUERY3_mORDERS1_s54_buf as ind map_QUERY3_mORDERS1_s54_buf_unwrap in
    let frontier =
      frontier_int_int {key:min_gc_vid,
        value:map_QUERY3_mORDERS1_s54_buf_unwrap} in
      (map_QUERY3_mORDERS1_s54_buf_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
       rb:map_0, rc:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
       temp.iterate ((\val -> map_QUERY3_mORDERS1_s54_buf_unwrap.erase val));
       frontier.iterate ((\val -> map_QUERY3_mORDERS1_s54_buf_unwrap.insert
       val))))


declare do_gc_map_QUERY3_mORDERS1_s56_buf : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:int } @ { Set } in
  bind map_QUERY3_mORDERS1_s56_buf as ind map_QUERY3_mORDERS1_s56_buf_unwrap in
    let frontier =
      frontier_int_int {key:min_gc_vid,
        value:map_QUERY3_mORDERS1_s56_buf_unwrap} in
      (map_QUERY3_mORDERS1_s56_buf_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
       rb:map_0, rc:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
       temp.iterate ((\val -> map_QUERY3_mORDERS1_s56_buf_unwrap.erase val));
       frontier.iterate ((\val -> map_QUERY3_mORDERS1_s56_buf_unwrap.insert
       val))))


declare do_gc_map_QUERY3_mORDERS1_s58_buf : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:int } @ { Set } in
  bind map_QUERY3_mORDERS1_s58_buf as ind map_QUERY3_mORDERS1_s58_buf_unwrap in
    let frontier =
      frontier_int_int {key:min_gc_vid,
        value:map_QUERY3_mORDERS1_s58_buf_unwrap} in
      (map_QUERY3_mORDERS1_s58_buf_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
       rb:map_0, rc:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
       temp.iterate ((\val -> map_QUERY3_mORDERS1_s58_buf_unwrap.erase val));
       frontier.iterate ((\val -> map_QUERY3_mORDERS1_s58_buf_unwrap.insert
       val))))


declare do_gc_QUERY3 : { key:int, value:int } -> () = (\min_gc_vid -> let temp
  =
  empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:real
    } @ { Set } in
  bind QUERY3 as ind QUERY3_unwrap in
    let frontier =
      frontier_int_date_int_float {key:min_gc_vid, value:QUERY3_unwrap} in
      (QUERY3_unwrap.iterate ((\b1 -> bind b1 as {ra:vid, rb:map_0, rc:map_1,
       rd:map_2, re:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val}
       else ()));
       temp.iterate ((\val -> QUERY3_unwrap.erase val));
       frontier.iterate ((\val -> QUERY3_unwrap.insert val))))


declare do_gc_QUERY3_mLINEITEM1 : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int } @ { Set }
  in
  bind QUERY3_mLINEITEM1 as ind QUERY3_mLINEITEM1_unwrap in
    let frontier =
      frontier_int_date_int_int {key:min_gc_vid,
        value:QUERY3_mLINEITEM1_unwrap} in
      (QUERY3_mLINEITEM1_unwrap.iterate ((\b1 -> bind b1 as {ra:vid, rb:map_0,
       rc:map_1, rd:map_2, re:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_val}
       else ()));
       temp.iterate ((\val -> QUERY3_mLINEITEM1_unwrap.erase val));
       frontier.iterate ((\val -> QUERY3_mLINEITEM1_unwrap.insert val))))


declare do_gc_QUERY3_mLINEITEM1_mCUSTOMER2 : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:int
    } @ { Set } in
  bind QUERY3_mLINEITEM1_mCUSTOMER2 as ind QUERY3_mLINEITEM1_mCUSTOMER2_unwrap
    in
    let frontier =
      frontier_int_date_int_int_int {key:min_gc_vid,
        value:QUERY3_mLINEITEM1_mCUSTOMER2_unwrap} in
      (QUERY3_mLINEITEM1_mCUSTOMER2_unwrap.iterate ((\b1 -> bind b1 as {ra:vid,
       rb:map_0, rc:map_1, rd:map_2, re:map_3, rf:map_val} in 
       if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
         rf:map_val} else ()));
       temp.iterate ((\val -> QUERY3_mLINEITEM1_mCUSTOMER2_unwrap.erase val));
       frontier.iterate ((\val -> QUERY3_mLINEITEM1_mCUSTOMER2_unwrap.insert
       val))))


declare do_gc_QUERY3_mORDERS1 : { key:int, value:int } -> () = (\min_gc_vid ->
  let temp = empty { ra:{ key:int, value:int }, rb:int, rc:int } @ { Set } in
  bind QUERY3_mORDERS1 as ind QUERY3_mORDERS1_unwrap in
    let frontier =
      frontier_int_int {key:min_gc_vid, value:QUERY3_mORDERS1_unwrap} in
      (QUERY3_mORDERS1_unwrap.iterate ((\b1 -> bind b1 as {ra:vid, rb:map_0,
       rc:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
       temp.iterate ((\val -> QUERY3_mORDERS1_unwrap.erase val));
       frontier.iterate ((\val -> QUERY3_mORDERS1_unwrap.insert val))))


declare do_gc_QUERY3_mORDERS3 : { key:int, value:int } -> () = (\min_gc_vid ->
  let temp = empty { ra:{ key:int, value:int }, rb:int, rc:real } @ { Set } in
  bind QUERY3_mORDERS3 as ind QUERY3_mORDERS3_unwrap in
    let frontier =
      frontier_int_float {key:min_gc_vid, value:QUERY3_mORDERS3_unwrap} in
      (QUERY3_mORDERS3_unwrap.iterate ((\b1 -> bind b1 as {ra:vid, rb:map_0,
       rc:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
       temp.iterate ((\val -> QUERY3_mORDERS3_unwrap.erase val));
       frontier.iterate ((\val -> QUERY3_mORDERS3_unwrap.insert val))))


declare do_gc_QUERY3_mORDERS6 : { key:int, value:int } -> () = (\min_gc_vid ->
  let temp = empty { ra:{ key:int, value:int }, rb:int, rc:real } @ { Set } in
  bind QUERY3_mORDERS6 as ind QUERY3_mORDERS6_unwrap in
    let frontier =
      frontier_int_float {key:min_gc_vid, value:QUERY3_mORDERS6_unwrap} in
      (QUERY3_mORDERS6_unwrap.iterate ((\b1 -> bind b1 as {ra:vid, rb:map_0,
       rc:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_val} else ()));
       temp.iterate ((\val -> QUERY3_mORDERS6_unwrap.erase val));
       frontier.iterate ((\val -> QUERY3_mORDERS6_unwrap.insert val))))


declare do_gc_QUERY3_mCUSTOMER2 : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:real
    } @ { Set } in
  bind QUERY3_mCUSTOMER2 as ind QUERY3_mCUSTOMER2_unwrap in
    let frontier =
      frontier_int_date_int_int_float {key:min_gc_vid,
        value:QUERY3_mCUSTOMER2_unwrap} in
      (QUERY3_mCUSTOMER2_unwrap.iterate ((\b1 -> bind b1 as {ra:vid, rb:map_0,
       rc:map_1, rd:map_2, re:map_3, rf:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
         rf:map_val} else ()));
       temp.iterate ((\val -> QUERY3_mCUSTOMER2_unwrap.erase val));
       frontier.iterate ((\val -> QUERY3_mCUSTOMER2_unwrap.insert val))))


declare do_gc_QUERY3_mCUSTOMER4 : { key:int, value:int } -> () =
  (\min_gc_vid -> let temp =
  empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:real
    } @ { Set } in
  bind QUERY3_mCUSTOMER4 as ind QUERY3_mCUSTOMER4_unwrap in
    let frontier =
      frontier_int_date_int_int_float {key:min_gc_vid,
        value:QUERY3_mCUSTOMER4_unwrap} in
      (QUERY3_mCUSTOMER4_unwrap.iterate ((\b1 -> bind b1 as {ra:vid, rb:map_0,
       rc:map_1, rd:map_2, re:map_3, rf:map_val} in if vid < min_gc_vid
       then temp.insert {ra:vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
         rf:map_val} else ()));
       temp.iterate ((\val -> QUERY3_mCUSTOMER4_unwrap.erase val));
       frontier.iterate ((\val -> QUERY3_mCUSTOMER4_unwrap.insert val))))


declare nd_QUERY3_mORDERS6_send_correctives : { ra:address, rb:int, rc:{
  key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:collection {
  key:int, value:real } @ { Collection } } -> int = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
  re:corrective_vid, rf:delta_tuples} in let corrective_list =
  nd_filter_corrective_list {key:corrective_vid, value:{| key:int, value:int |
    {key:2, value:6}, {key:2, value:10}, {key:3, value:11}, {key:3,
    value:15}|} @ { Collection }} in
  if 0 == corrective_list.size () then 0
    else let delta_tuples2 =
      delta_tuples.fold ((\_accmap -> (\b3 -> bind b3 as {key:map_0,
        value:map_val} in 
        (_accmap.insert {ra:g_min_vid, rb:map_0, rc:map_val};_accmap))))
        empty { ra:{ key:int, value:int }, rb:int, rc:real } @ { Collection }
      in
      corrective_list.fold ((\acc_count -> (\b3 -> bind b3 as {key:stmt_id,
        value:vid_list} in if stmt_id == 15
        then let ips_vids =
          (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
            nd_log_get_bound_delete_ORDERS vid as
            {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
            in
            (shuffle_QUERY3_mORDERS6_to_QUERY3_mCUSTOMER4_bind_0t0
               {ra:Some ORDERS_ORDERKEY, rb:Some ORDERS_ORDERDATE,
               rc:Some ORDERS_SHIPPRIORITY, rd:Some ORDERS_CUSTKEY,
               re:delta_tuples2, rf:false}).fold ((\_accmap -> (\b3 ->
              bind b3 as {key:ip, value:tuples} in 
              (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold ((\_accmap ->
               (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
               (_accmap.insert {key:map_0, value:map_val};_accmap)))) empty {
               key:int, value:real } @ { Collection }};
               _accmap)))) empty { ra:address, rb:{ key:int, value:int },
              rc:collection { key:int, value:real } @ { Collection }
              } @ { Collection })))) empty { ra:address, rb:{ key:int,
            value:int }, rc:collection { key:int, value:real } @ { Collection }
            } @ { Collection }).groupBy ((\b1 -> bind b1 as {ra:ip, rb:vid,
            rc:tuples} in ip)) ((\b2 -> (\b5 -> bind b2 as {key:acc_vid,
            value:acc_tuples} in bind b5 as {ra:ip, rb:vid, rc:tuples} in 
            (acc_vid.insert vid;
             {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
             ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold ((\_accmap ->
             (\x -> (_accmap.insert (x.key);_accmap)))) empty { key:int,
             value:real } @ { Collection }})))) {key:empty { key:int, value:int
            } @ { Seq }, value:empty { key:int, value:real } @ { Collection }}
          in
          ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
            value:vid_send_list_tup} in 
            ((delete_ORDERS_rcv_corrective_s15_m_QUERY3_mORDERS6, ip)<- {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:corrective_vid,
             rf:vid_send_list_tup.key, rg:vid_send_list_tup.value};
             acc_count + 1)))) acc_count
        else if stmt_id == 11
          then let ips_vids =
            (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
              nd_log_get_bound_delete_ORDERS vid as
              {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
              in
              (shuffle_QUERY3_mORDERS6_to_QUERY3_bind_0t0
                 {ra:Some ORDERS_ORDERKEY, rb:Some ORDERS_ORDERDATE,
                 rc:Some ORDERS_SHIPPRIORITY, rd:delta_tuples2, re:false}).fold
                ((\_accmap -> (\b3 -> bind b3 as {key:ip, value:tuples} in 
                (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold ((\_accmap ->
                 (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
                 (_accmap.insert {key:map_0, value:map_val};_accmap)))) empty {
                 key:int, value:real } @ { Collection }};
                 _accmap)))) empty { ra:address, rb:{ key:int, value:int },
                rc:collection { key:int, value:real } @ { Collection }
                } @ { Collection })))) empty { ra:address, rb:{ key:int,
              value:int }, rc:collection { key:int, value:real
              } @ { Collection } } @ { Collection }).groupBy ((\b1 ->
              bind b1 as {ra:ip, rb:vid, rc:tuples} in ip)) ((\b2 -> (\b5 ->
              bind b2 as {key:acc_vid, value:acc_tuples} in bind b5 as {ra:ip,
              rb:vid, rc:tuples} in 
              (acc_vid.insert vid;
               {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
               ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold ((\_accmap ->
               (\x -> (_accmap.insert (x.key);_accmap)))) empty { key:int,
               value:real } @ { Collection }})))) {key:empty { key:int,
              value:int } @ { Seq }, value:empty { key:int, value:real
              } @ { Collection }} in
            ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
              value:vid_send_list_tup} in 
              ((delete_ORDERS_rcv_corrective_s11_m_QUERY3_mORDERS6, ip)<- {ra:orig_addr,
               rb:orig_stmt_id, rc:orig_vid, rd:hop, re:corrective_vid,
               rf:vid_send_list_tup.key, rg:vid_send_list_tup.value};
               acc_count + 1)))) acc_count
          else if stmt_id == 10
            then let ips_vids =
              (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
                nd_log_get_bound_insert_ORDERS vid as
                {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
                in
                (shuffle_QUERY3_mORDERS6_to_QUERY3_mCUSTOMER4_bind_0t0
                   {ra:Some ORDERS_ORDERKEY, rb:Some ORDERS_ORDERDATE,
                   rc:Some ORDERS_SHIPPRIORITY, rd:Some ORDERS_CUSTKEY,
                   re:delta_tuples2, rf:false}).fold ((\_accmap -> (\b3 ->
                  bind b3 as {key:ip, value:tuples} in 
                  (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold ((\_accmap ->
                   (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
                   (_accmap.insert {key:map_0, value:map_val};_accmap))))
                   empty { key:int, value:real } @ { Collection }};
                   _accmap)))) empty { ra:address, rb:{ key:int, value:int },
                  rc:collection { key:int, value:real } @ { Collection }
                  } @ { Collection })))) empty { ra:address, rb:{ key:int,
                value:int }, rc:collection { key:int, value:real
                } @ { Collection } } @ { Collection }).groupBy ((\b1 ->
                bind b1 as {ra:ip, rb:vid, rc:tuples} in ip)) ((\b2 -> (\b5 ->
                bind b2 as {key:acc_vid, value:acc_tuples} in 
                bind b5 as {ra:ip, rb:vid, rc:tuples} in 
                (acc_vid.insert vid;
                 {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
                 ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold
                 ((\_accmap -> (\x -> (_accmap.insert (x.key);_accmap))))
                 empty { key:int, value:real } @ { Collection }}))))
                {key:empty { key:int, value:int } @ { Seq }, value:empty {
                key:int, value:real } @ { Collection }} in
              ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
                value:vid_send_list_tup} in 
                ((insert_ORDERS_rcv_corrective_s10_m_QUERY3_mORDERS6, ip)<- {ra:orig_addr,
                 rb:orig_stmt_id, rc:orig_vid, rd:hop, re:corrective_vid,
                 rf:vid_send_list_tup.key, rg:vid_send_list_tup.value};
                 acc_count + 1)))) acc_count
            else if stmt_id == 6
              then let ips_vids =
                (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
                  nd_log_get_bound_insert_ORDERS vid as
                  {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
                  in
                  (shuffle_QUERY3_mORDERS6_to_QUERY3_bind_0t0
                     {ra:Some ORDERS_ORDERKEY, rb:Some ORDERS_ORDERDATE,
                     rc:Some ORDERS_SHIPPRIORITY, rd:delta_tuples2, re:false}).fold
                    ((\_accmap -> (\b3 -> bind b3 as {key:ip, value:tuples} in 
                    (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold
                     ((\_accmap -> (\b3 -> bind b3 as {ra:vid, rb:map_0,
                     rc:map_val} in 
                     (_accmap.insert {key:map_0, value:map_val};_accmap))))
                     empty { key:int, value:real } @ { Collection }};
                     _accmap)))) empty { ra:address, rb:{ key:int, value:int },
                    rc:collection { key:int, value:real } @ { Collection }
                    } @ { Collection })))) empty { ra:address, rb:{ key:int,
                  value:int }, rc:collection { key:int, value:real
                  } @ { Collection } } @ { Collection }).groupBy ((\b1 ->
                  bind b1 as {ra:ip, rb:vid, rc:tuples} in ip)) ((\b2 ->
                  (\b5 -> bind b2 as {key:acc_vid, value:acc_tuples} in 
                  bind b5 as {ra:ip, rb:vid, rc:tuples} in 
                  (acc_vid.insert vid;
                   {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
                   ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold
                   ((\_accmap -> (\x -> (_accmap.insert (x.key);_accmap))))
                   empty { key:int, value:real } @ { Collection }}))))
                  {key:empty { key:int, value:int } @ { Seq }, value:empty {
                  key:int, value:real } @ { Collection }} in
                ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
                  value:vid_send_list_tup} in 
                  ((insert_ORDERS_rcv_corrective_s6_m_QUERY3_mORDERS6, ip)<- {ra:orig_addr,
                   rb:orig_stmt_id, rc:orig_vid, rd:hop, re:corrective_vid,
                   rf:vid_send_list_tup.key, rg:vid_send_list_tup.value};
                   acc_count + 1)))) acc_count else acc_count))) 0)


declare nd_QUERY3_mORDERS3_send_correctives : { ra:address, rb:int, rc:{
  key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:collection {
  key:int, value:real } @ { Collection } } -> int = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
  re:corrective_vid, rf:delta_tuples} in let corrective_list =
  nd_filter_corrective_list {key:corrective_vid, value:{| key:int, value:int |
    {key:2, value:6}, {key:2, value:9}, {key:3, value:11}, {key:3,
    value:14}|} @ { Collection }} in
  if 0 == corrective_list.size () then 0
    else let delta_tuples2 =
      delta_tuples.fold ((\_accmap -> (\b3 -> bind b3 as {key:map_0,
        value:map_val} in 
        (_accmap.insert {ra:g_min_vid, rb:map_0, rc:map_val};_accmap))))
        empty { ra:{ key:int, value:int }, rb:int, rc:real } @ { Collection }
      in
      corrective_list.fold ((\acc_count -> (\b3 -> bind b3 as {key:stmt_id,
        value:vid_list} in if stmt_id == 14
        then let ips_vids =
          (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
            nd_log_get_bound_delete_ORDERS vid as
            {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
            in
            (shuffle_QUERY3_mORDERS3_to_QUERY3_mCUSTOMER2_bind_0t0
               {ra:Some ORDERS_ORDERKEY, rb:Some ORDERS_ORDERDATE,
               rc:Some ORDERS_SHIPPRIORITY, rd:Some ORDERS_CUSTKEY,
               re:delta_tuples2, rf:false}).fold ((\_accmap -> (\b3 ->
              bind b3 as {key:ip, value:tuples} in 
              (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold ((\_accmap ->
               (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
               (_accmap.insert {key:map_0, value:map_val};_accmap)))) empty {
               key:int, value:real } @ { Collection }};
               _accmap)))) empty { ra:address, rb:{ key:int, value:int },
              rc:collection { key:int, value:real } @ { Collection }
              } @ { Collection })))) empty { ra:address, rb:{ key:int,
            value:int }, rc:collection { key:int, value:real } @ { Collection }
            } @ { Collection }).groupBy ((\b1 -> bind b1 as {ra:ip, rb:vid,
            rc:tuples} in ip)) ((\b2 -> (\b5 -> bind b2 as {key:acc_vid,
            value:acc_tuples} in bind b5 as {ra:ip, rb:vid, rc:tuples} in 
            (acc_vid.insert vid;
             {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
             ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold ((\_accmap ->
             (\x -> (_accmap.insert (x.key);_accmap)))) empty { key:int,
             value:real } @ { Collection }})))) {key:empty { key:int, value:int
            } @ { Seq }, value:empty { key:int, value:real } @ { Collection }}
          in
          ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
            value:vid_send_list_tup} in 
            ((delete_ORDERS_rcv_corrective_s14_m_QUERY3_mORDERS3, ip)<- {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:corrective_vid,
             rf:vid_send_list_tup.key, rg:vid_send_list_tup.value};
             acc_count + 1)))) acc_count
        else if stmt_id == 11
          then let ips_vids =
            (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
              nd_log_get_bound_delete_ORDERS vid as
              {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
              in
              (shuffle_QUERY3_mORDERS3_to_QUERY3_bind_0t0
                 {ra:Some ORDERS_ORDERKEY, rb:Some ORDERS_ORDERDATE,
                 rc:Some ORDERS_SHIPPRIORITY, rd:delta_tuples2, re:false}).fold
                ((\_accmap -> (\b3 -> bind b3 as {key:ip, value:tuples} in 
                (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold ((\_accmap ->
                 (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
                 (_accmap.insert {key:map_0, value:map_val};_accmap)))) empty {
                 key:int, value:real } @ { Collection }};
                 _accmap)))) empty { ra:address, rb:{ key:int, value:int },
                rc:collection { key:int, value:real } @ { Collection }
                } @ { Collection })))) empty { ra:address, rb:{ key:int,
              value:int }, rc:collection { key:int, value:real
              } @ { Collection } } @ { Collection }).groupBy ((\b1 ->
              bind b1 as {ra:ip, rb:vid, rc:tuples} in ip)) ((\b2 -> (\b5 ->
              bind b2 as {key:acc_vid, value:acc_tuples} in bind b5 as {ra:ip,
              rb:vid, rc:tuples} in 
              (acc_vid.insert vid;
               {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
               ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold ((\_accmap ->
               (\x -> (_accmap.insert (x.key);_accmap)))) empty { key:int,
               value:real } @ { Collection }})))) {key:empty { key:int,
              value:int } @ { Seq }, value:empty { key:int, value:real
              } @ { Collection }} in
            ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
              value:vid_send_list_tup} in 
              ((delete_ORDERS_rcv_corrective_s11_m_QUERY3_mORDERS3, ip)<- {ra:orig_addr,
               rb:orig_stmt_id, rc:orig_vid, rd:hop, re:corrective_vid,
               rf:vid_send_list_tup.key, rg:vid_send_list_tup.value};
               acc_count + 1)))) acc_count
          else if stmt_id == 9
            then let ips_vids =
              (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
                nd_log_get_bound_insert_ORDERS vid as
                {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
                in
                (shuffle_QUERY3_mORDERS3_to_QUERY3_mCUSTOMER2_bind_0t0
                   {ra:Some ORDERS_ORDERKEY, rb:Some ORDERS_ORDERDATE,
                   rc:Some ORDERS_SHIPPRIORITY, rd:Some ORDERS_CUSTKEY,
                   re:delta_tuples2, rf:false}).fold ((\_accmap -> (\b3 ->
                  bind b3 as {key:ip, value:tuples} in 
                  (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold ((\_accmap ->
                   (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
                   (_accmap.insert {key:map_0, value:map_val};_accmap))))
                   empty { key:int, value:real } @ { Collection }};
                   _accmap)))) empty { ra:address, rb:{ key:int, value:int },
                  rc:collection { key:int, value:real } @ { Collection }
                  } @ { Collection })))) empty { ra:address, rb:{ key:int,
                value:int }, rc:collection { key:int, value:real
                } @ { Collection } } @ { Collection }).groupBy ((\b1 ->
                bind b1 as {ra:ip, rb:vid, rc:tuples} in ip)) ((\b2 -> (\b5 ->
                bind b2 as {key:acc_vid, value:acc_tuples} in 
                bind b5 as {ra:ip, rb:vid, rc:tuples} in 
                (acc_vid.insert vid;
                 {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
                 ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold
                 ((\_accmap -> (\x -> (_accmap.insert (x.key);_accmap))))
                 empty { key:int, value:real } @ { Collection }}))))
                {key:empty { key:int, value:int } @ { Seq }, value:empty {
                key:int, value:real } @ { Collection }} in
              ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
                value:vid_send_list_tup} in 
                ((insert_ORDERS_rcv_corrective_s9_m_QUERY3_mORDERS3, ip)<- {ra:orig_addr,
                 rb:orig_stmt_id, rc:orig_vid, rd:hop, re:corrective_vid,
                 rf:vid_send_list_tup.key, rg:vid_send_list_tup.value};
                 acc_count + 1)))) acc_count
            else if stmt_id == 6
              then let ips_vids =
                (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
                  nd_log_get_bound_insert_ORDERS vid as
                  {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
                  in
                  (shuffle_QUERY3_mORDERS3_to_QUERY3_bind_0t0
                     {ra:Some ORDERS_ORDERKEY, rb:Some ORDERS_ORDERDATE,
                     rc:Some ORDERS_SHIPPRIORITY, rd:delta_tuples2, re:false}).fold
                    ((\_accmap -> (\b3 -> bind b3 as {key:ip, value:tuples} in 
                    (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold
                     ((\_accmap -> (\b3 -> bind b3 as {ra:vid, rb:map_0,
                     rc:map_val} in 
                     (_accmap.insert {key:map_0, value:map_val};_accmap))))
                     empty { key:int, value:real } @ { Collection }};
                     _accmap)))) empty { ra:address, rb:{ key:int, value:int },
                    rc:collection { key:int, value:real } @ { Collection }
                    } @ { Collection })))) empty { ra:address, rb:{ key:int,
                  value:int }, rc:collection { key:int, value:real
                  } @ { Collection } } @ { Collection }).groupBy ((\b1 ->
                  bind b1 as {ra:ip, rb:vid, rc:tuples} in ip)) ((\b2 ->
                  (\b5 -> bind b2 as {key:acc_vid, value:acc_tuples} in 
                  bind b5 as {ra:ip, rb:vid, rc:tuples} in 
                  (acc_vid.insert vid;
                   {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
                   ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold
                   ((\_accmap -> (\x -> (_accmap.insert (x.key);_accmap))))
                   empty { key:int, value:real } @ { Collection }}))))
                  {key:empty { key:int, value:int } @ { Seq }, value:empty {
                  key:int, value:real } @ { Collection }} in
                ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
                  value:vid_send_list_tup} in 
                  ((insert_ORDERS_rcv_corrective_s6_m_QUERY3_mORDERS3, ip)<- {ra:orig_addr,
                   rb:orig_stmt_id, rc:orig_vid, rd:hop, re:corrective_vid,
                   rf:vid_send_list_tup.key, rg:vid_send_list_tup.value};
                   acc_count + 1)))) acc_count else acc_count))) 0)


declare nd_QUERY3_mCUSTOMER4_send_correctives : { ra:address, rb:int, rc:{
  key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:collection {
  ra:int, rb:int, rc:int, rd:int, re:real } @ { Collection } } -> int = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
  re:corrective_vid, rf:delta_tuples} in let corrective_list =
  nd_filter_corrective_list {key:corrective_vid, value:{| key:int, value:int |
    {key:0, value:0}, {key:1, value:3}|} @ { Collection }} in
  if 0 == corrective_list.size () then 0
    else let delta_tuples2 =
      delta_tuples.fold ((\_accmap -> (\b3 -> bind b3 as {ra:map_0, rb:map_1,
        rc:map_2, rd:map_3, re:map_val} in 
        (_accmap.insert {ra:g_min_vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
         rf:map_val};
         _accmap)))) empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int,
        re:int, rf:real } @ { Collection } in
      corrective_list.fold ((\acc_count -> (\b3 -> bind b3 as {key:stmt_id,
        value:vid_list} in if stmt_id == 3
        then let ips_vids =
          (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
            nd_log_get_bound_delete_CUSTOMER vid as
            {ra:CUSTOMER_CUSTKEY, rb:CUSTOMER_NAME, rc:CUSTOMER_ADDRESS, rd:CUSTOMER_NATIONKEY, re:CUSTOMER_PHONE, rf:CUSTOMER_ACCTBAL, rg:CUSTOMER_MKTSEGMENT, rh:CUSTOMER_COMMENT}
            in
            (shuffle_QUERY3_mCUSTOMER4_to_QUERY3_bind_0t0_1t1_2t2
               {ra:None immut, rb:None immut, rc:None immut, rd:delta_tuples2,
               re:false}).fold ((\_accmap -> (\b3 -> bind b3 as {key:ip,
              value:tuples} in 
              (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold ((\_accmap ->
               (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_1, rd:map_2,
               re:map_3, rf:map_val} in 
               (_accmap.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_3,
                re:map_val};
                _accmap)))) empty { ra:int, rb:int, rc:int, rd:int, re:real
               } @ { Collection }};
               _accmap)))) empty { ra:address, rb:{ key:int, value:int },
              rc:collection { ra:int, rb:int, rc:int, rd:int, re:real
              } @ { Collection } } @ { Collection })))) empty { ra:address,
            rb:{ key:int, value:int }, rc:collection { ra:int, rb:int, rc:int,
            rd:int, re:real } @ { Collection } } @ { Collection }).groupBy
            ((\b1 -> bind b1 as {ra:ip, rb:vid, rc:tuples} in ip)) ((\b2 ->
            (\b5 -> bind b2 as {key:acc_vid, value:acc_tuples} in 
            bind b5 as {ra:ip, rb:vid, rc:tuples} in 
            (acc_vid.insert vid;
             {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
             ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold ((\_accmap ->
             (\x -> (_accmap.insert (x.key);_accmap)))) empty { ra:int, rb:int,
             rc:int, rd:int, re:real } @ { Collection }})))) {key:empty {
            key:int, value:int } @ { Seq }, value:empty { ra:int, rb:int,
            rc:int, rd:int, re:real } @ { Collection }} in
          ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
            value:vid_send_list_tup} in 
            ((delete_CUSTOMER_rcv_corrective_s3_m_QUERY3_mCUSTOMER4, ip)<- {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:corrective_vid,
             rf:vid_send_list_tup.key, rg:vid_send_list_tup.value};
             acc_count + 1)))) acc_count
        else if stmt_id == 0
          then let ips_vids =
            (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
              nd_log_get_bound_insert_CUSTOMER vid as
              {ra:CUSTOMER_CUSTKEY, rb:CUSTOMER_NAME, rc:CUSTOMER_ADDRESS, rd:CUSTOMER_NATIONKEY, re:CUSTOMER_PHONE, rf:CUSTOMER_ACCTBAL, rg:CUSTOMER_MKTSEGMENT, rh:CUSTOMER_COMMENT}
              in
              (shuffle_QUERY3_mCUSTOMER4_to_QUERY3_bind_0t0_1t1_2t2
                 {ra:None immut, rb:None immut, rc:None immut,
                 rd:delta_tuples2, re:false}).fold ((\_accmap -> (\b3 ->
                bind b3 as {key:ip, value:tuples} in 
                (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold ((\_accmap ->
                 (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_1, rd:map_2,
                 re:map_3, rf:map_val} in 
                 (_accmap.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_3,
                  re:map_val};
                  _accmap)))) empty { ra:int, rb:int, rc:int, rd:int, re:real
                 } @ { Collection }};
                 _accmap)))) empty { ra:address, rb:{ key:int, value:int },
                rc:collection { ra:int, rb:int, rc:int, rd:int, re:real
                } @ { Collection } } @ { Collection })))) empty { ra:address,
              rb:{ key:int, value:int }, rc:collection { ra:int, rb:int,
              rc:int, rd:int, re:real } @ { Collection }
              } @ { Collection }).groupBy ((\b1 -> bind b1 as {ra:ip, rb:vid,
              rc:tuples} in ip)) ((\b2 -> (\b5 -> bind b2 as {key:acc_vid,
              value:acc_tuples} in bind b5 as {ra:ip, rb:vid, rc:tuples} in 
              (acc_vid.insert vid;
               {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
               ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold ((\_accmap ->
               (\x -> (_accmap.insert (x.key);_accmap)))) empty { ra:int,
               rb:int, rc:int, rd:int, re:real } @ { Collection }}))))
              {key:empty { key:int, value:int } @ { Seq }, value:empty {
              ra:int, rb:int, rc:int, rd:int, re:real } @ { Collection }} in
            ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
              value:vid_send_list_tup} in 
              ((insert_CUSTOMER_rcv_corrective_s0_m_QUERY3_mCUSTOMER4, ip)<- {ra:orig_addr,
               rb:orig_stmt_id, rc:orig_vid, rd:hop, re:corrective_vid,
               rf:vid_send_list_tup.key, rg:vid_send_list_tup.value};
               acc_count + 1)))) acc_count else acc_count))) 0)


declare nd_QUERY3_mCUSTOMER2_send_correctives : { ra:address, rb:int, rc:{
  key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:collection {
  ra:int, rb:int, rc:int, rd:int, re:real } @ { Collection } } -> int = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
  re:corrective_vid, rf:delta_tuples} in let corrective_list =
  nd_filter_corrective_list {key:corrective_vid, value:{| key:int, value:int |
    {key:0, value:0}, {key:1, value:3}|} @ { Collection }} in
  if 0 == corrective_list.size () then 0
    else let delta_tuples2 =
      delta_tuples.fold ((\_accmap -> (\b3 -> bind b3 as {ra:map_0, rb:map_1,
        rc:map_2, rd:map_3, re:map_val} in 
        (_accmap.insert {ra:g_min_vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
         rf:map_val};
         _accmap)))) empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int,
        re:int, rf:real } @ { Collection } in
      corrective_list.fold ((\acc_count -> (\b3 -> bind b3 as {key:stmt_id,
        value:vid_list} in if stmt_id == 3
        then let ips_vids =
          (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
            nd_log_get_bound_delete_CUSTOMER vid as
            {ra:CUSTOMER_CUSTKEY, rb:CUSTOMER_NAME, rc:CUSTOMER_ADDRESS, rd:CUSTOMER_NATIONKEY, re:CUSTOMER_PHONE, rf:CUSTOMER_ACCTBAL, rg:CUSTOMER_MKTSEGMENT, rh:CUSTOMER_COMMENT}
            in
            (shuffle_QUERY3_mCUSTOMER2_to_QUERY3_bind_0t0_1t1_2t2
               {ra:None immut, rb:None immut, rc:None immut, rd:delta_tuples2,
               re:false}).fold ((\_accmap -> (\b3 -> bind b3 as {key:ip,
              value:tuples} in 
              (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold ((\_accmap ->
               (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_1, rd:map_2,
               re:map_3, rf:map_val} in 
               (_accmap.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_3,
                re:map_val};
                _accmap)))) empty { ra:int, rb:int, rc:int, rd:int, re:real
               } @ { Collection }};
               _accmap)))) empty { ra:address, rb:{ key:int, value:int },
              rc:collection { ra:int, rb:int, rc:int, rd:int, re:real
              } @ { Collection } } @ { Collection })))) empty { ra:address,
            rb:{ key:int, value:int }, rc:collection { ra:int, rb:int, rc:int,
            rd:int, re:real } @ { Collection } } @ { Collection }).groupBy
            ((\b1 -> bind b1 as {ra:ip, rb:vid, rc:tuples} in ip)) ((\b2 ->
            (\b5 -> bind b2 as {key:acc_vid, value:acc_tuples} in 
            bind b5 as {ra:ip, rb:vid, rc:tuples} in 
            (acc_vid.insert vid;
             {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
             ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold ((\_accmap ->
             (\x -> (_accmap.insert (x.key);_accmap)))) empty { ra:int, rb:int,
             rc:int, rd:int, re:real } @ { Collection }})))) {key:empty {
            key:int, value:int } @ { Seq }, value:empty { ra:int, rb:int,
            rc:int, rd:int, re:real } @ { Collection }} in
          ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
            value:vid_send_list_tup} in 
            ((delete_CUSTOMER_rcv_corrective_s3_m_QUERY3_mCUSTOMER2, ip)<- {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:corrective_vid,
             rf:vid_send_list_tup.key, rg:vid_send_list_tup.value};
             acc_count + 1)))) acc_count
        else if stmt_id == 0
          then let ips_vids =
            (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
              nd_log_get_bound_insert_CUSTOMER vid as
              {ra:CUSTOMER_CUSTKEY, rb:CUSTOMER_NAME, rc:CUSTOMER_ADDRESS, rd:CUSTOMER_NATIONKEY, re:CUSTOMER_PHONE, rf:CUSTOMER_ACCTBAL, rg:CUSTOMER_MKTSEGMENT, rh:CUSTOMER_COMMENT}
              in
              (shuffle_QUERY3_mCUSTOMER2_to_QUERY3_bind_0t0_1t1_2t2
                 {ra:None immut, rb:None immut, rc:None immut,
                 rd:delta_tuples2, re:false}).fold ((\_accmap -> (\b3 ->
                bind b3 as {key:ip, value:tuples} in 
                (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold ((\_accmap ->
                 (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_1, rd:map_2,
                 re:map_3, rf:map_val} in 
                 (_accmap.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_3,
                  re:map_val};
                  _accmap)))) empty { ra:int, rb:int, rc:int, rd:int, re:real
                 } @ { Collection }};
                 _accmap)))) empty { ra:address, rb:{ key:int, value:int },
                rc:collection { ra:int, rb:int, rc:int, rd:int, re:real
                } @ { Collection } } @ { Collection })))) empty { ra:address,
              rb:{ key:int, value:int }, rc:collection { ra:int, rb:int,
              rc:int, rd:int, re:real } @ { Collection }
              } @ { Collection }).groupBy ((\b1 -> bind b1 as {ra:ip, rb:vid,
              rc:tuples} in ip)) ((\b2 -> (\b5 -> bind b2 as {key:acc_vid,
              value:acc_tuples} in bind b5 as {ra:ip, rb:vid, rc:tuples} in 
              (acc_vid.insert vid;
               {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
               ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold ((\_accmap ->
               (\x -> (_accmap.insert (x.key);_accmap)))) empty { ra:int,
               rb:int, rc:int, rd:int, re:real } @ { Collection }}))))
              {key:empty { key:int, value:int } @ { Seq }, value:empty {
              ra:int, rb:int, rc:int, rd:int, re:real } @ { Collection }} in
            ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
              value:vid_send_list_tup} in 
              ((insert_CUSTOMER_rcv_corrective_s0_m_QUERY3_mCUSTOMER2, ip)<- {ra:orig_addr,
               rb:orig_stmt_id, rc:orig_vid, rd:hop, re:corrective_vid,
               rf:vid_send_list_tup.key, rg:vid_send_list_tup.value};
               acc_count + 1)))) acc_count else acc_count))) 0)


declare nd_QUERY3_mLINEITEM1_mCUSTOMER2_send_correctives : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int },
  rf:collection { ra:int, rb:int, rc:int, rd:int, re:int } @ { Collection }
  } -> int = (\b1 -> bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid,
  rd:hop, re:corrective_vid, rf:delta_tuples} in let corrective_list =
  nd_filter_corrective_list {key:corrective_vid, value:{| key:int, value:int |
    {key:0, value:1}, {key:1, value:4}, {key:4, value:19}, {key:4, value:20},
    {key:5, value:24}, {key:5, value:25}|} @ { Collection }} in
  if 0 == corrective_list.size () then 0
    else let delta_tuples2 =
      delta_tuples.fold ((\_accmap -> (\b3 -> bind b3 as {ra:map_0, rb:map_1,
        rc:map_2, rd:map_3, re:map_val} in 
        (_accmap.insert {ra:g_min_vid, rb:map_0, rc:map_1, rd:map_2, re:map_3,
         rf:map_val};
         _accmap)))) empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int,
        re:int, rf:int } @ { Collection } in
      corrective_list.fold ((\acc_count -> (\b3 -> bind b3 as {key:stmt_id,
        value:vid_list} in if stmt_id == 25
        then let ips_vids =
          (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
            nd_log_get_bound_delete_LINEITEM vid as
            {ra:LINEITEM_ORDERKEY, rb:LINEITEM_PARTKEY, rc:LINEITEM_SUPPKEY, rd:LINEITEM_LINENUMBER, re:LINEITEM_QUANTITY, rf:LINEITEM_EXTENDEDPRICE, rg:LINEITEM_DISCOUNT, rh:LINEITEM_TAX, ri:LINEITEM_RETURNFLAG, rj:LINEITEM_LINESTATUS, rk:LINEITEM_SHIPDATE, rl:LINEITEM_COMMITDATE, rm:LINEITEM_RECEIPTDATE, rn:LINEITEM_SHIPINSTRUCT, ro:LINEITEM_SHIPMODE, rp:LINEITEM_COMMENT}
            in
            (shuffle_QUERY3_mLINEITEM1_mCUSTOMER2_to_QUERY3_mCUSTOMER4_bind_0t0_1t1_2t2_3t3
               {ra:Some LINEITEM_ORDERKEY, rb:None immut, rc:None immut,
               rd:None immut, re:delta_tuples2, rf:false}).fold ((\_accmap ->
              (\b3 -> bind b3 as {key:ip, value:tuples} in 
              (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold ((\_accmap ->
               (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_1, rd:map_2,
               re:map_3, rf:map_val} in 
               (_accmap.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_3,
                re:map_val};
                _accmap)))) empty { ra:int, rb:int, rc:int, rd:int, re:int
               } @ { Collection }};
               _accmap)))) empty { ra:address, rb:{ key:int, value:int },
              rc:collection { ra:int, rb:int, rc:int, rd:int, re:int
              } @ { Collection } } @ { Collection })))) empty { ra:address,
            rb:{ key:int, value:int }, rc:collection { ra:int, rb:int, rc:int,
            rd:int, re:int } @ { Collection } } @ { Collection }).groupBy
            ((\b1 -> bind b1 as {ra:ip, rb:vid, rc:tuples} in ip)) ((\b2 ->
            (\b5 -> bind b2 as {key:acc_vid, value:acc_tuples} in 
            bind b5 as {ra:ip, rb:vid, rc:tuples} in 
            (acc_vid.insert vid;
             {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
             ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold ((\_accmap ->
             (\x -> (_accmap.insert (x.key);_accmap)))) empty { ra:int, rb:int,
             rc:int, rd:int, re:int } @ { Collection }})))) {key:empty {
            key:int, value:int } @ { Seq }, value:empty { ra:int, rb:int,
            rc:int, rd:int, re:int } @ { Collection }} in
          ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
            value:vid_send_list_tup} in 
            ((delete_LINEITEM_rcv_corrective_s25_m_QUERY3_mLINEITEM1_mCUSTOMER2,
               ip)<- {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
             re:corrective_vid, rf:vid_send_list_tup.key,
             rg:vid_send_list_tup.value};
             acc_count + 1)))) acc_count
        else if stmt_id == 24
          then let ips_vids =
            (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
              nd_log_get_bound_delete_LINEITEM vid as
              {ra:LINEITEM_ORDERKEY, rb:LINEITEM_PARTKEY, rc:LINEITEM_SUPPKEY, rd:LINEITEM_LINENUMBER, re:LINEITEM_QUANTITY, rf:LINEITEM_EXTENDEDPRICE, rg:LINEITEM_DISCOUNT, rh:LINEITEM_TAX, ri:LINEITEM_RETURNFLAG, rj:LINEITEM_LINESTATUS, rk:LINEITEM_SHIPDATE, rl:LINEITEM_COMMITDATE, rm:LINEITEM_RECEIPTDATE, rn:LINEITEM_SHIPINSTRUCT, ro:LINEITEM_SHIPMODE, rp:LINEITEM_COMMENT}
              in
              (shuffle_QUERY3_mLINEITEM1_mCUSTOMER2_to_QUERY3_mCUSTOMER2_bind_0t0_1t1_2t2_3t3
                 {ra:Some LINEITEM_ORDERKEY, rb:None immut, rc:None immut,
                 rd:None immut, re:delta_tuples2, rf:false}).fold ((\_accmap ->
                (\b3 -> bind b3 as {key:ip, value:tuples} in 
                (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold ((\_accmap ->
                 (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_1, rd:map_2,
                 re:map_3, rf:map_val} in 
                 (_accmap.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_3,
                  re:map_val};
                  _accmap)))) empty { ra:int, rb:int, rc:int, rd:int, re:int
                 } @ { Collection }};
                 _accmap)))) empty { ra:address, rb:{ key:int, value:int },
                rc:collection { ra:int, rb:int, rc:int, rd:int, re:int
                } @ { Collection } } @ { Collection })))) empty { ra:address,
              rb:{ key:int, value:int }, rc:collection { ra:int, rb:int,
              rc:int, rd:int, re:int } @ { Collection }
              } @ { Collection }).groupBy ((\b1 -> bind b1 as {ra:ip, rb:vid,
              rc:tuples} in ip)) ((\b2 -> (\b5 -> bind b2 as {key:acc_vid,
              value:acc_tuples} in bind b5 as {ra:ip, rb:vid, rc:tuples} in 
              (acc_vid.insert vid;
               {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
               ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold ((\_accmap ->
               (\x -> (_accmap.insert (x.key);_accmap)))) empty { ra:int,
               rb:int, rc:int, rd:int, re:int } @ { Collection }}))))
              {key:empty { key:int, value:int } @ { Seq }, value:empty {
              ra:int, rb:int, rc:int, rd:int, re:int } @ { Collection }} in
            ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
              value:vid_send_list_tup} in 
              ((delete_LINEITEM_rcv_corrective_s24_m_QUERY3_mLINEITEM1_mCUSTOMER2,
                 ip)<- {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
               re:corrective_vid, rf:vid_send_list_tup.key,
               rg:vid_send_list_tup.value};
               acc_count + 1)))) acc_count
          else if stmt_id == 20
            then let ips_vids =
              (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
                nd_log_get_bound_insert_LINEITEM vid as
                {ra:LINEITEM_ORDERKEY, rb:LINEITEM_PARTKEY, rc:LINEITEM_SUPPKEY, rd:LINEITEM_LINENUMBER, re:LINEITEM_QUANTITY, rf:LINEITEM_EXTENDEDPRICE, rg:LINEITEM_DISCOUNT, rh:LINEITEM_TAX, ri:LINEITEM_RETURNFLAG, rj:LINEITEM_LINESTATUS, rk:LINEITEM_SHIPDATE, rl:LINEITEM_COMMITDATE, rm:LINEITEM_RECEIPTDATE, rn:LINEITEM_SHIPINSTRUCT, ro:LINEITEM_SHIPMODE, rp:LINEITEM_COMMENT}
                in
                (shuffle_QUERY3_mLINEITEM1_mCUSTOMER2_to_QUERY3_mCUSTOMER4_bind_0t0_1t1_2t2_3t3
                   {ra:Some LINEITEM_ORDERKEY, rb:None immut, rc:None immut,
                   rd:None immut, re:delta_tuples2, rf:false}).fold
                  ((\_accmap -> (\b3 -> bind b3 as {key:ip, value:tuples} in 
                  (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold ((\_accmap ->
                   (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_1, rd:map_2,
                   re:map_3, rf:map_val} in 
                   (_accmap.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_3,
                    re:map_val};
                    _accmap)))) empty { ra:int, rb:int, rc:int, rd:int, re:int
                   } @ { Collection }};
                   _accmap)))) empty { ra:address, rb:{ key:int, value:int },
                  rc:collection { ra:int, rb:int, rc:int, rd:int, re:int
                  } @ { Collection } } @ { Collection })))) empty { ra:address,
                rb:{ key:int, value:int }, rc:collection { ra:int, rb:int,
                rc:int, rd:int, re:int } @ { Collection }
                } @ { Collection }).groupBy ((\b1 -> bind b1 as {ra:ip, rb:vid,
                rc:tuples} in ip)) ((\b2 -> (\b5 -> bind b2 as {key:acc_vid,
                value:acc_tuples} in bind b5 as {ra:ip, rb:vid, rc:tuples} in 
                (acc_vid.insert vid;
                 {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
                 ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold
                 ((\_accmap -> (\x -> (_accmap.insert (x.key);_accmap))))
                 empty { ra:int, rb:int, rc:int, rd:int, re:int
                 } @ { Collection }})))) {key:empty { key:int, value:int
                } @ { Seq }, value:empty { ra:int, rb:int, rc:int, rd:int,
                re:int } @ { Collection }} in
              ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
                value:vid_send_list_tup} in 
                ((insert_LINEITEM_rcv_corrective_s20_m_QUERY3_mLINEITEM1_mCUSTOMER2,
                   ip)<- {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
                 re:corrective_vid, rf:vid_send_list_tup.key,
                 rg:vid_send_list_tup.value};
                 acc_count + 1)))) acc_count
            else if stmt_id == 19
              then let ips_vids =
                (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
                  nd_log_get_bound_insert_LINEITEM vid as
                  {ra:LINEITEM_ORDERKEY, rb:LINEITEM_PARTKEY, rc:LINEITEM_SUPPKEY, rd:LINEITEM_LINENUMBER, re:LINEITEM_QUANTITY, rf:LINEITEM_EXTENDEDPRICE, rg:LINEITEM_DISCOUNT, rh:LINEITEM_TAX, ri:LINEITEM_RETURNFLAG, rj:LINEITEM_LINESTATUS, rk:LINEITEM_SHIPDATE, rl:LINEITEM_COMMITDATE, rm:LINEITEM_RECEIPTDATE, rn:LINEITEM_SHIPINSTRUCT, ro:LINEITEM_SHIPMODE, rp:LINEITEM_COMMENT}
                  in
                  (shuffle_QUERY3_mLINEITEM1_mCUSTOMER2_to_QUERY3_mCUSTOMER2_bind_0t0_1t1_2t2_3t3
                     {ra:Some LINEITEM_ORDERKEY, rb:None immut, rc:None immut,
                     rd:None immut, re:delta_tuples2, rf:false}).fold
                    ((\_accmap -> (\b3 -> bind b3 as {key:ip, value:tuples} in 
                    (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold
                     ((\_accmap -> (\b3 -> bind b3 as {ra:vid, rb:map_0,
                     rc:map_1, rd:map_2, re:map_3, rf:map_val} in 
                     (_accmap.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_3,
                      re:map_val};
                      _accmap)))) empty { ra:int, rb:int, rc:int, rd:int,
                     re:int } @ { Collection }};
                     _accmap)))) empty { ra:address, rb:{ key:int, value:int },
                    rc:collection { ra:int, rb:int, rc:int, rd:int, re:int
                    } @ { Collection } } @ { Collection })))) empty {
                  ra:address, rb:{ key:int, value:int }, rc:collection {
                  ra:int, rb:int, rc:int, rd:int, re:int } @ { Collection }
                  } @ { Collection }).groupBy ((\b1 -> bind b1 as {ra:ip,
                  rb:vid, rc:tuples} in ip)) ((\b2 -> (\b5 ->
                  bind b2 as {key:acc_vid, value:acc_tuples} in 
                  bind b5 as {ra:ip, rb:vid, rc:tuples} in 
                  (acc_vid.insert vid;
                   {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
                   ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold
                   ((\_accmap -> (\x -> (_accmap.insert (x.key);_accmap))))
                   empty { ra:int, rb:int, rc:int, rd:int, re:int
                   } @ { Collection }})))) {key:empty { key:int, value:int
                  } @ { Seq }, value:empty { ra:int, rb:int, rc:int, rd:int,
                  re:int } @ { Collection }} in
                ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
                  value:vid_send_list_tup} in 
                  ((insert_LINEITEM_rcv_corrective_s19_m_QUERY3_mLINEITEM1_mCUSTOMER2,
                     ip)<- {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
                   re:corrective_vid, rf:vid_send_list_tup.key,
                   rg:vid_send_list_tup.value};
                   acc_count + 1)))) acc_count
              else if stmt_id == 4
                then let ips_vids =
                  (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
                    nd_log_get_bound_delete_CUSTOMER vid as
                    {ra:CUSTOMER_CUSTKEY, rb:CUSTOMER_NAME, rc:CUSTOMER_ADDRESS, rd:CUSTOMER_NATIONKEY, re:CUSTOMER_PHONE, rf:CUSTOMER_ACCTBAL, rg:CUSTOMER_MKTSEGMENT, rh:CUSTOMER_COMMENT}
                    in
                    (shuffle_QUERY3_mLINEITEM1_mCUSTOMER2_to_QUERY3_mLINEITEM1_bind_0t0_1t1_2t2
                       {ra:None immut, rb:None immut, rc:None immut,
                       rd:delta_tuples2, re:false}).fold ((\_accmap -> (\b3 ->
                      bind b3 as {key:ip, value:tuples} in 
                      (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold
                       ((\_accmap -> (\b3 -> bind b3 as {ra:vid, rb:map_0,
                       rc:map_1, rd:map_2, re:map_3, rf:map_val} in 
                       (_accmap.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_3,
                        re:map_val};
                        _accmap)))) empty { ra:int, rb:int, rc:int, rd:int,
                       re:int } @ { Collection }};
                       _accmap)))) empty { ra:address, rb:{ key:int, value:int
                      }, rc:collection { ra:int, rb:int, rc:int, rd:int, re:int
                      } @ { Collection } } @ { Collection })))) empty {
                    ra:address, rb:{ key:int, value:int }, rc:collection {
                    ra:int, rb:int, rc:int, rd:int, re:int } @ { Collection }
                    } @ { Collection }).groupBy ((\b1 -> bind b1 as {ra:ip,
                    rb:vid, rc:tuples} in ip)) ((\b2 -> (\b5 ->
                    bind b2 as {key:acc_vid, value:acc_tuples} in 
                    bind b5 as {ra:ip, rb:vid, rc:tuples} in 
                    (acc_vid.insert vid;
                     {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
                     ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold
                     ((\_accmap -> (\x -> (_accmap.insert (x.key);_accmap))))
                     empty { ra:int, rb:int, rc:int, rd:int, re:int
                     } @ { Collection }})))) {key:empty { key:int, value:int
                    } @ { Seq }, value:empty { ra:int, rb:int, rc:int, rd:int,
                    re:int } @ { Collection }} in
                  ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
                    value:vid_send_list_tup} in 
                    ((delete_CUSTOMER_rcv_corrective_s4_m_QUERY3_mLINEITEM1_mCUSTOMER2,
                       ip)<- {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid,
                     rd:hop, re:corrective_vid, rf:vid_send_list_tup.key,
                     rg:vid_send_list_tup.value};
                     acc_count + 1)))) acc_count
                else if stmt_id == 1
                  then let ips_vids =
                    (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
                      nd_log_get_bound_insert_CUSTOMER vid as
                      {ra:CUSTOMER_CUSTKEY, rb:CUSTOMER_NAME, rc:CUSTOMER_ADDRESS, rd:CUSTOMER_NATIONKEY, re:CUSTOMER_PHONE, rf:CUSTOMER_ACCTBAL, rg:CUSTOMER_MKTSEGMENT, rh:CUSTOMER_COMMENT}
                      in
                      (shuffle_QUERY3_mLINEITEM1_mCUSTOMER2_to_QUERY3_mLINEITEM1_bind_0t0_1t1_2t2
                         {ra:None immut, rb:None immut, rc:None immut,
                         rd:delta_tuples2, re:false}).fold ((\_accmap ->
                        (\b3 -> bind b3 as {key:ip, value:tuples} in 
                        (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold
                         ((\_accmap -> (\b3 -> bind b3 as {ra:vid, rb:map_0,
                         rc:map_1, rd:map_2, re:map_3, rf:map_val} in 
                         (_accmap.insert {ra:map_0, rb:map_1, rc:map_2,
                          rd:map_3, re:map_val};
                          _accmap)))) empty { ra:int, rb:int, rc:int, rd:int,
                         re:int } @ { Collection }};
                         _accmap)))) empty { ra:address, rb:{ key:int,
                        value:int }, rc:collection { ra:int, rb:int, rc:int,
                        rd:int, re:int } @ { Collection } } @ { Collection }))))
                      empty { ra:address, rb:{ key:int, value:int },
                      rc:collection { ra:int, rb:int, rc:int, rd:int, re:int
                      } @ { Collection } } @ { Collection }).groupBy ((\b1 ->
                      bind b1 as {ra:ip, rb:vid, rc:tuples} in ip)) ((\b2 ->
                      (\b5 -> bind b2 as {key:acc_vid, value:acc_tuples} in 
                      bind b5 as {ra:ip, rb:vid, rc:tuples} in 
                      (acc_vid.insert vid;
                       {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
                       ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold
                       ((\_accmap -> (\x -> (_accmap.insert (x.key);_accmap))))
                       empty { ra:int, rb:int, rc:int, rd:int, re:int
                       } @ { Collection }})))) {key:empty { key:int, value:int
                      } @ { Seq }, value:empty { ra:int, rb:int, rc:int,
                      rd:int, re:int } @ { Collection }} in
                    ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
                      value:vid_send_list_tup} in 
                      ((insert_CUSTOMER_rcv_corrective_s1_m_QUERY3_mLINEITEM1_mCUSTOMER2,
                         ip)<- {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid,
                       rd:hop, re:corrective_vid, rf:vid_send_list_tup.key,
                       rg:vid_send_list_tup.value};
                       acc_count + 1)))) acc_count else acc_count))) 0)


declare nd_QUERY3_mORDERS1_send_correctives : { ra:address, rb:int, rc:{
  key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:collection {
  key:int, value:int } @ { Collection } } -> int = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
  re:corrective_vid, rf:delta_tuples} in let corrective_list =
  nd_filter_corrective_list {key:corrective_vid, value:{| key:int, value:int |
    {key:2, value:6}, {key:2, value:7}, {key:3, value:11}, {key:3,
    value:12}|} @ { Collection }} in
  if 0 == corrective_list.size () then 0
    else let delta_tuples2 =
      delta_tuples.fold ((\_accmap -> (\b3 -> bind b3 as {key:map_0,
        value:map_val} in 
        (_accmap.insert {ra:g_min_vid, rb:map_0, rc:map_val};_accmap))))
        empty { ra:{ key:int, value:int }, rb:int, rc:int } @ { Collection } in
      corrective_list.fold ((\acc_count -> (\b3 -> bind b3 as {key:stmt_id,
        value:vid_list} in if stmt_id == 12
        then let ips_vids =
          (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
            nd_log_get_bound_delete_ORDERS vid as
            {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
            in
            (shuffle_QUERY3_mORDERS1_to_QUERY3_mLINEITEM1
               {ra:Some ORDERS_ORDERKEY, rb:Some ORDERS_ORDERDATE,
               rc:Some ORDERS_SHIPPRIORITY, rd:delta_tuples2, re:false}).fold
              ((\_accmap -> (\b3 -> bind b3 as {key:ip, value:tuples} in 
              (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold ((\_accmap ->
               (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
               (_accmap.insert {key:map_0, value:map_val};_accmap)))) empty {
               key:int, value:int } @ { Collection }};
               _accmap)))) empty { ra:address, rb:{ key:int, value:int },
              rc:collection { key:int, value:int } @ { Collection }
              } @ { Collection })))) empty { ra:address, rb:{ key:int,
            value:int }, rc:collection { key:int, value:int } @ { Collection }
            } @ { Collection }).groupBy ((\b1 -> bind b1 as {ra:ip, rb:vid,
            rc:tuples} in ip)) ((\b2 -> (\b5 -> bind b2 as {key:acc_vid,
            value:acc_tuples} in bind b5 as {ra:ip, rb:vid, rc:tuples} in 
            (acc_vid.insert vid;
             {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
             ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold ((\_accmap ->
             (\x -> (_accmap.insert (x.key);_accmap)))) empty { key:int,
             value:int } @ { Collection }})))) {key:empty { key:int, value:int
            } @ { Seq }, value:empty { key:int, value:int } @ { Collection }}
          in
          ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
            value:vid_send_list_tup} in 
            ((delete_ORDERS_rcv_corrective_s12_m_QUERY3_mORDERS1, ip)<- {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:corrective_vid,
             rf:vid_send_list_tup.key, rg:vid_send_list_tup.value};
             acc_count + 1)))) acc_count
        else if stmt_id == 11
          then let ips_vids =
            (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
              nd_log_get_bound_delete_ORDERS vid as
              {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
              in
              (shuffle_QUERY3_mORDERS1_to_QUERY3 {ra:Some ORDERS_ORDERKEY,
                 rb:Some ORDERS_ORDERDATE, rc:Some ORDERS_SHIPPRIORITY,
                 rd:delta_tuples2, re:false}).fold ((\_accmap -> (\b3 ->
                bind b3 as {key:ip, value:tuples} in 
                (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold ((\_accmap ->
                 (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
                 (_accmap.insert {key:map_0, value:map_val};_accmap)))) empty {
                 key:int, value:int } @ { Collection }};
                 _accmap)))) empty { ra:address, rb:{ key:int, value:int },
                rc:collection { key:int, value:int } @ { Collection }
                } @ { Collection })))) empty { ra:address, rb:{ key:int,
              value:int }, rc:collection { key:int, value:int
              } @ { Collection } } @ { Collection }).groupBy ((\b1 ->
              bind b1 as {ra:ip, rb:vid, rc:tuples} in ip)) ((\b2 -> (\b5 ->
              bind b2 as {key:acc_vid, value:acc_tuples} in bind b5 as {ra:ip,
              rb:vid, rc:tuples} in 
              (acc_vid.insert vid;
               {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
               ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold ((\_accmap ->
               (\x -> (_accmap.insert (x.key);_accmap)))) empty { key:int,
               value:int } @ { Collection }})))) {key:empty { key:int,
              value:int } @ { Seq }, value:empty { key:int, value:int
              } @ { Collection }} in
            ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
              value:vid_send_list_tup} in 
              ((delete_ORDERS_rcv_corrective_s11_m_QUERY3_mORDERS1, ip)<- {ra:orig_addr,
               rb:orig_stmt_id, rc:orig_vid, rd:hop, re:corrective_vid,
               rf:vid_send_list_tup.key, rg:vid_send_list_tup.value};
               acc_count + 1)))) acc_count
          else if stmt_id == 7
            then let ips_vids =
              (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
                nd_log_get_bound_insert_ORDERS vid as
                {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
                in
                (shuffle_QUERY3_mORDERS1_to_QUERY3_mLINEITEM1
                   {ra:Some ORDERS_ORDERKEY, rb:Some ORDERS_ORDERDATE,
                   rc:Some ORDERS_SHIPPRIORITY, rd:delta_tuples2, re:false}).fold
                  ((\_accmap -> (\b3 -> bind b3 as {key:ip, value:tuples} in 
                  (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold ((\_accmap ->
                   (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
                   (_accmap.insert {key:map_0, value:map_val};_accmap))))
                   empty { key:int, value:int } @ { Collection }};
                   _accmap)))) empty { ra:address, rb:{ key:int, value:int },
                  rc:collection { key:int, value:int } @ { Collection }
                  } @ { Collection })))) empty { ra:address, rb:{ key:int,
                value:int }, rc:collection { key:int, value:int
                } @ { Collection } } @ { Collection }).groupBy ((\b1 ->
                bind b1 as {ra:ip, rb:vid, rc:tuples} in ip)) ((\b2 -> (\b5 ->
                bind b2 as {key:acc_vid, value:acc_tuples} in 
                bind b5 as {ra:ip, rb:vid, rc:tuples} in 
                (acc_vid.insert vid;
                 {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
                 ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold
                 ((\_accmap -> (\x -> (_accmap.insert (x.key);_accmap))))
                 empty { key:int, value:int } @ { Collection }}))))
                {key:empty { key:int, value:int } @ { Seq }, value:empty {
                key:int, value:int } @ { Collection }} in
              ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
                value:vid_send_list_tup} in 
                ((insert_ORDERS_rcv_corrective_s7_m_QUERY3_mORDERS1, ip)<- {ra:orig_addr,
                 rb:orig_stmt_id, rc:orig_vid, rd:hop, re:corrective_vid,
                 rf:vid_send_list_tup.key, rg:vid_send_list_tup.value};
                 acc_count + 1)))) acc_count
            else if stmt_id == 6
              then let ips_vids =
                (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
                  nd_log_get_bound_insert_ORDERS vid as
                  {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
                  in
                  (shuffle_QUERY3_mORDERS1_to_QUERY3 {ra:Some ORDERS_ORDERKEY,
                     rb:Some ORDERS_ORDERDATE, rc:Some ORDERS_SHIPPRIORITY,
                     rd:delta_tuples2, re:false}).fold ((\_accmap -> (\b3 ->
                    bind b3 as {key:ip, value:tuples} in 
                    (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold
                     ((\_accmap -> (\b3 -> bind b3 as {ra:vid, rb:map_0,
                     rc:map_val} in 
                     (_accmap.insert {key:map_0, value:map_val};_accmap))))
                     empty { key:int, value:int } @ { Collection }};
                     _accmap)))) empty { ra:address, rb:{ key:int, value:int },
                    rc:collection { key:int, value:int } @ { Collection }
                    } @ { Collection })))) empty { ra:address, rb:{ key:int,
                  value:int }, rc:collection { key:int, value:int
                  } @ { Collection } } @ { Collection }).groupBy ((\b1 ->
                  bind b1 as {ra:ip, rb:vid, rc:tuples} in ip)) ((\b2 ->
                  (\b5 -> bind b2 as {key:acc_vid, value:acc_tuples} in 
                  bind b5 as {ra:ip, rb:vid, rc:tuples} in 
                  (acc_vid.insert vid;
                   {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
                   ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold
                   ((\_accmap -> (\x -> (_accmap.insert (x.key);_accmap))))
                   empty { key:int, value:int } @ { Collection }}))))
                  {key:empty { key:int, value:int } @ { Seq }, value:empty {
                  key:int, value:int } @ { Collection }} in
                ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
                  value:vid_send_list_tup} in 
                  ((insert_ORDERS_rcv_corrective_s6_m_QUERY3_mORDERS1, ip)<- {ra:orig_addr,
                   rb:orig_stmt_id, rc:orig_vid, rd:hop, re:corrective_vid,
                   rf:vid_send_list_tup.key, rg:vid_send_list_tup.value};
                   acc_count + 1)))) acc_count else acc_count))) 0)


declare nd_QUERY3_mLINEITEM1_send_correctives : { ra:address, rb:int, rc:{
  key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:collection {
  ra:int, rb:int, rc:int, rd:int } @ { Collection } } -> int = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
  re:corrective_vid, rf:delta_tuples} in let corrective_list =
  nd_filter_corrective_list {key:corrective_vid, value:{| key:int, value:int |
    {key:4, value:16}, {key:5, value:21}|} @ { Collection }} in
  if 0 == corrective_list.size () then 0
    else let delta_tuples2 =
      delta_tuples.fold ((\_accmap -> (\b3 -> bind b3 as {ra:map_0, rb:map_1,
        rc:map_2, rd:map_val} in 
        (_accmap.insert {ra:g_min_vid, rb:map_0, rc:map_1, rd:map_2,
         re:map_val};
         _accmap)))) empty { ra:{ key:int, value:int }, rb:int, rc:int, rd:int,
        re:int } @ { Collection } in
      corrective_list.fold ((\acc_count -> (\b3 -> bind b3 as {key:stmt_id,
        value:vid_list} in if stmt_id == 21
        then let ips_vids =
          (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
            nd_log_get_bound_delete_LINEITEM vid as
            {ra:LINEITEM_ORDERKEY, rb:LINEITEM_PARTKEY, rc:LINEITEM_SUPPKEY, rd:LINEITEM_LINENUMBER, re:LINEITEM_QUANTITY, rf:LINEITEM_EXTENDEDPRICE, rg:LINEITEM_DISCOUNT, rh:LINEITEM_TAX, ri:LINEITEM_RETURNFLAG, rj:LINEITEM_LINESTATUS, rk:LINEITEM_SHIPDATE, rl:LINEITEM_COMMITDATE, rm:LINEITEM_RECEIPTDATE, rn:LINEITEM_SHIPINSTRUCT, ro:LINEITEM_SHIPMODE, rp:LINEITEM_COMMENT}
            in
            (shuffle_QUERY3_mLINEITEM1_to_QUERY3_bind_0t0_1t1_2t2
               {ra:Some LINEITEM_ORDERKEY, rb:None immut, rc:None immut,
               rd:delta_tuples2, re:false}).fold ((\_accmap -> (\b3 ->
              bind b3 as {key:ip, value:tuples} in 
              (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold ((\_accmap ->
               (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_1, rd:map_2,
               re:map_val} in 
               (_accmap.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_val};
                _accmap)))) empty { ra:int, rb:int, rc:int, rd:int
               } @ { Collection }};
               _accmap)))) empty { ra:address, rb:{ key:int, value:int },
              rc:collection { ra:int, rb:int, rc:int, rd:int } @ { Collection }
              } @ { Collection })))) empty { ra:address, rb:{ key:int,
            value:int }, rc:collection { ra:int, rb:int, rc:int, rd:int
            } @ { Collection } } @ { Collection }).groupBy ((\b1 ->
            bind b1 as {ra:ip, rb:vid, rc:tuples} in ip)) ((\b2 -> (\b5 ->
            bind b2 as {key:acc_vid, value:acc_tuples} in bind b5 as {ra:ip,
            rb:vid, rc:tuples} in 
            (acc_vid.insert vid;
             {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
             ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold ((\_accmap ->
             (\x -> (_accmap.insert (x.key);_accmap)))) empty { ra:int, rb:int,
             rc:int, rd:int } @ { Collection }})))) {key:empty { key:int,
            value:int } @ { Seq }, value:empty { ra:int, rb:int, rc:int, rd:int
            } @ { Collection }} in
          ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
            value:vid_send_list_tup} in 
            ((delete_LINEITEM_rcv_corrective_s21_m_QUERY3_mLINEITEM1, ip)<- {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:corrective_vid,
             rf:vid_send_list_tup.key, rg:vid_send_list_tup.value};
             acc_count + 1)))) acc_count
        else if stmt_id == 16
          then let ips_vids =
            (vid_list.fold ((\_accext -> (\vid -> _accext.combine (bind
              nd_log_get_bound_insert_LINEITEM vid as
              {ra:LINEITEM_ORDERKEY, rb:LINEITEM_PARTKEY, rc:LINEITEM_SUPPKEY, rd:LINEITEM_LINENUMBER, re:LINEITEM_QUANTITY, rf:LINEITEM_EXTENDEDPRICE, rg:LINEITEM_DISCOUNT, rh:LINEITEM_TAX, ri:LINEITEM_RETURNFLAG, rj:LINEITEM_LINESTATUS, rk:LINEITEM_SHIPDATE, rl:LINEITEM_COMMITDATE, rm:LINEITEM_RECEIPTDATE, rn:LINEITEM_SHIPINSTRUCT, ro:LINEITEM_SHIPMODE, rp:LINEITEM_COMMENT}
              in
              (shuffle_QUERY3_mLINEITEM1_to_QUERY3_bind_0t0_1t1_2t2
                 {ra:Some LINEITEM_ORDERKEY, rb:None immut, rc:None immut,
                 rd:delta_tuples2, re:false}).fold ((\_accmap -> (\b3 ->
                bind b3 as {key:ip, value:tuples} in 
                (_accmap.insert {ra:ip, rb:vid, rc:tuples.fold ((\_accmap ->
                 (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_1, rd:map_2,
                 re:map_val} in 
                 (_accmap.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_val};
                  _accmap)))) empty { ra:int, rb:int, rc:int, rd:int
                 } @ { Collection }};
                 _accmap)))) empty { ra:address, rb:{ key:int, value:int },
                rc:collection { ra:int, rb:int, rc:int, rd:int
                } @ { Collection } } @ { Collection })))) empty { ra:address,
              rb:{ key:int, value:int }, rc:collection { ra:int, rb:int,
              rc:int, rd:int } @ { Collection } } @ { Collection }).groupBy
              ((\b1 -> bind b1 as {ra:ip, rb:vid, rc:tuples} in ip)) ((\b2 ->
              (\b5 -> bind b2 as {key:acc_vid, value:acc_tuples} in 
              bind b5 as {ra:ip, rb:vid, rc:tuples} in 
              (acc_vid.insert vid;
               {key:acc_vid, value:((acc_tuples.combine tuples).groupBy
               ((\tuple -> tuple)) ((\_ -> (\_ -> ()))) ()).fold ((\_accmap ->
               (\x -> (_accmap.insert (x.key);_accmap)))) empty { ra:int,
               rb:int, rc:int, rd:int } @ { Collection }})))) {key:empty {
              key:int, value:int } @ { Seq }, value:empty { ra:int, rb:int,
              rc:int, rd:int } @ { Collection }} in
            ips_vids.fold ((\acc_count -> (\b3 -> bind b3 as {key:ip,
              value:vid_send_list_tup} in 
              ((insert_LINEITEM_rcv_corrective_s16_m_QUERY3_mLINEITEM1, ip)<- {ra:orig_addr,
               rb:orig_stmt_id, rc:orig_vid, rd:hop, re:corrective_vid,
               rf:vid_send_list_tup.key, rg:vid_send_list_tup.value};
               acc_count + 1)))) acc_count else acc_count))) 0)


declare sw_insert_CUSTOMER : { ra:int, rb:string, rc:string, rd:int, re:string,
  rf:real, rg:string, rh:string } -> () = (\args ->
  (sw_buf_insert_CUSTOMER.insert args;
   sw_trig_buf_idx.insert {i:0};
   sw_need_vid_cntr = sw_need_vid_cntr + 1))


declare sw_insert_CUSTOMER_send_fetch : { key:int, value:int } -> () = (\vid ->
  case (sw_buf_insert_CUSTOMER.peek ()) of
  {Some args ->
    (sw_buf_insert_CUSTOMER.erase args;
     bind args as
     {ra:CUSTOMER_CUSTKEY, rb:CUSTOMER_NAME, rc:CUSTOMER_ADDRESS, rd:CUSTOMER_NATIONKEY, re:CUSTOMER_PHONE, rf:CUSTOMER_ACCTBAL, rg:CUSTOMER_MKTSEGMENT, rh:CUSTOMER_COMMENT}
     in
     ((route_to_int {key:4, value:Some CUSTOMER_CUSTKEY}).iterate ((\b1 ->
      bind b1 as {i:ip} in 
      (nd_insert_CUSTOMER_do_complete_s2_trig, ip)<- {ra:vid,
      rb:CUSTOMER_CUSTKEY, rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS,
      re:CUSTOMER_NATIONKEY, rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL,
      rh:CUSTOMER_MKTSEGMENT, ri:CUSTOMER_COMMENT}));
      ((((empty { ra:address, rb:int, rc:int } @ { Collection }).combine (let
      sender_count =
      (route_to_int_date_int_int {ra:7, rb:None immut, rc:None immut,
         rd:None immut, re:Some CUSTOMER_CUSTKEY}).fold ((\count -> (\b3 ->
        bind b3 as {i:ip} in count + 1))) 0 in
      ((shuffle_QUERY3_mCUSTOMER2_to_QUERY3_bind_0t0_1t1_2t2 {ra:None immut,
          rb:None immut, rc:None immut, rd:empty { ra:{ key:int, value:int },
          rb:int, rc:int, rd:int, re:int, rf:real } @ { Collection }, re:true}).fold
        ((\_accmap -> (\b3 -> bind b3 as {key:ip, value:tuples} in 
        (_accmap.insert {ra:ip, rb:0, rc:sender_count};_accmap)))) empty {
        ra:address, rb:int, rc:int } @ { Collection }).combine (let
        sender_count =
        (route_to_int_date_int_int {ra:8, rb:None immut, rc:None immut,
           rd:None immut, re:Some CUSTOMER_CUSTKEY}).fold ((\count -> (\b3 ->
          bind b3 as {i:ip} in count + 1))) 0 in
        ((shuffle_QUERY3_mCUSTOMER4_to_QUERY3_bind_0t0_1t1_2t2 {ra:None immut,
            rb:None immut, rc:None immut, rd:empty { ra:{ key:int, value:int },
            rb:int, rc:int, rd:int, re:int, rf:real } @ { Collection },
            re:true}).fold ((\_accmap -> (\b3 -> bind b3 as {key:ip,
          value:tuples} in 
          (_accmap.insert {ra:ip, rb:0, rc:sender_count};_accmap)))) empty {
          ra:address, rb:int, rc:int } @ { Collection }).combine (let
          sender_count =
          (route_to_int_date_int_int {ra:3, rb:None immut, rc:None immut,
             rd:None immut, re:Some CUSTOMER_CUSTKEY}).fold ((\count -> (\b3 ->
            bind b3 as {i:ip} in count + 1))) 0 in
          (shuffle_QUERY3_mLINEITEM1_mCUSTOMER2_to_QUERY3_mLINEITEM1_bind_0t0_1t1_2t2
             {ra:None immut, rb:None immut, rc:None immut, rd:empty { ra:{
             key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:int
             } @ { Collection }, re:true}).fold ((\_accmap -> (\b3 ->
            bind b3 as {key:ip, value:tuples} in 
            (_accmap.insert {ra:ip, rb:1, rc:sender_count};_accmap)))) empty {
            ra:address, rb:int, rc:int } @ { Collection })))).groupBy ((\b1 ->
      bind b1 as {ra:ip, rb:stmt_id, rc:count} in {key:ip, value:stmt_id}))
      ((\acc -> (\b3 -> bind b3 as {ra:ip, rb:stmt_id, rc:count} in acc +
      count))) 0).groupBy ((\b1 -> bind b1 as {key:b2, value:count} in 
      bind b2 as {key:ip, value:stmt_id} in ip)) ((\acc -> (\b3 ->
      bind b3 as {key:ip_and_stmt_id, value:count} in bind ip_and_stmt_id as
      {key:ip, value:stmt_id} in
      acc.combine ({| key:int, value:int | {key:stmt_id,
        value:count}|} @ { Collection })))) empty { key:int, value:int
      } @ { Collection }).iterate ((\b1 -> bind b1 as {key:addr,
      value:stmt_cnt_list} in 
      ((nd_insert_CUSTOMER_rcv_put, addr)<- {ra:me, rb:stmt_cnt_list, rc:vid,
       rd:CUSTOMER_CUSTKEY, re:CUSTOMER_NAME, rf:CUSTOMER_ADDRESS,
       rg:CUSTOMER_NATIONKEY, rh:CUSTOMER_PHONE, ri:CUSTOMER_ACCTBAL,
       rj:CUSTOMER_MKTSEGMENT, rk:CUSTOMER_COMMENT};
       (sw_num_sent = sw_num_sent + 1;
        (case ((sw_ack_log.filter ((\b1 -> bind b1 as {key:key,
        value:value} in key == vid))).peek ()) of
        {Some x -> sw_ack_log.update x {key:vid, value:x.value + 1}}{None ->
                                                                    sw_ack_log.insert
                                                                    {key:vid,
                                                                    value:1}})))));
      ((((route_to_int_date_int_int {ra:3, rb:None immut, rc:None immut,
            rd:None immut, re:Some CUSTOMER_CUSTKEY}).fold ((\_accmap ->
      (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {ra:1, rb:3, rc:ip};_accmap)))) empty { ra:int, rb:int,
      rc:address } @ { Collection }).combine
      (((route_to_int_date_int_int {ra:8, rb:None immut, rc:None immut,
           rd:None immut, re:Some CUSTOMER_CUSTKEY}).fold ((\_accmap -> (\b3 ->
      bind b3 as {i:ip} in (_accmap.insert {ra:0, rb:8, rc:ip};_accmap))))
      empty { ra:int, rb:int, rc:address } @ { Collection }).combine
      (((route_to_int_date_int_int {ra:7, rb:None immut, rc:None immut,
           rd:None immut, re:Some CUSTOMER_CUSTKEY}).fold ((\_accmap -> (\b3 ->
      bind b3 as {i:ip} in (_accmap.insert {ra:0, rb:7, rc:ip};_accmap))))
      empty { ra:int, rb:int, rc:address } @ { Collection }).combine empty {
      ra:int, rb:int, rc:address } @ { Collection }))).groupBy ((\b1 ->
      bind b1 as {ra:stmt_id, rb:map_id, rc:ip} in ip)) ((\acc -> (\b3 ->
      bind b3 as {ra:stmt_id, rb:map_id, rc:ip} in 
      (acc.insert {key:stmt_id, value:map_id};acc)))) empty { key:int,
      value:int } @ { Collection }).iterate ((\b1 -> bind b1 as {key:ip,
      value:stmt_map_ids} in 
      (nd_insert_CUSTOMER_rcv_fetch, ip)<- {ra:stmt_map_ids, rb:vid,
      rc:CUSTOMER_CUSTKEY, rd:CUSTOMER_NAME, re:CUSTOMER_ADDRESS,
      rf:CUSTOMER_NATIONKEY, rg:CUSTOMER_PHONE, rh:CUSTOMER_ACCTBAL,
      ri:CUSTOMER_MKTSEGMENT, rj:CUSTOMER_COMMENT}))))}{None ->
                                                         error
                                                           (print
                                                              "unexpected missing arguments in sw_buf_insert_CUSTOMER")})


declare nd_insert_CUSTOMER_do_complete_s0 : { ra:{ key:int, value:int },
  rb:int, rc:string, rd:string, re:int, rf:string, rg:real, rh:string,
  ri:string } -> () = (\b1 -> bind b1 as {ra:vid, rb:CUSTOMER_CUSTKEY,
  rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
  rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
  ri:CUSTOMER_COMMENT} in let delta_values =
  (((((((bind map_QUERY3_mCUSTOMER2_s0_buf as ind __x in
    (frontier_int_date_int_int_float {key:vid, value:__x.filter ((\b1 ->
       bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd, re:re, rf:rf} in re ==
       CUSTOMER_CUSTKEY))}).fold ((\acc -> (\b3 -> bind b3 as {ra:vid,
      rb:map_0, rc:map_1, rd:map_2, re:map_3, rf:map_val} in 
      (acc.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_3, re:map_val};acc))))
      empty { ra:int, rb:int, rc:int, rd:int, re:real } @ { Collection }).fold
    ((\_accmap -> (\b3 -> bind b3 as {ra:ORDERS_ORDERKEY, rb:ORDERS_ORDERDATE,
    rc:ORDERS_SHIPPRIORITY, rd:CUSTOMER_CUSTKEY, re:__map_ret__1} in 
    (_accmap.insert {ra:ORDERS_ORDERKEY, rb:ORDERS_ORDERDATE,
     rc:ORDERS_SHIPPRIORITY, rd:__map_ret__1};
     _accmap)))) empty { ra:int, rb:int, rc:int, rd:real
    } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:ORDERS_ORDERKEY, rb:ORDERS_ORDERDATE,
    rc:ORDERS_SHIPPRIORITY, rd:__map_ret__1} in 
    (_accmap.insert {ra:ORDERS_ORDERKEY, rb:ORDERS_ORDERDATE,
     rc:ORDERS_SHIPPRIORITY, rd:__map_ret__1 * -1};
     _accmap)))) empty { ra:int, rb:int, rc:int, rd:real
    } @ { Collection }).combine ((bind map_QUERY3_mCUSTOMER4_s0_buf as ind __x
    in
    (frontier_int_date_int_int_float {key:vid, value:__x.filter ((\b1 ->
       bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd, re:re, rf:rf} in re ==
       CUSTOMER_CUSTKEY))}).fold ((\acc -> (\b3 -> bind b3 as {ra:vid,
      rb:map_0, rc:map_1, rd:map_2, re:map_3, rf:map_val} in 
      (acc.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_3, re:map_val};acc))))
      empty { ra:int, rb:int, rc:int, rd:int, re:real } @ { Collection }).fold
    ((\_accmap -> (\b3 -> bind b3 as {ra:ORDERS_ORDERKEY, rb:ORDERS_ORDERDATE,
    rc:ORDERS_SHIPPRIORITY, rd:CUSTOMER_CUSTKEY, re:__map_ret__2} in 
    (_accmap.insert {ra:ORDERS_ORDERKEY, rb:ORDERS_ORDERDATE,
     rc:ORDERS_SHIPPRIORITY, rd:__map_ret__2};
     _accmap)))) empty { ra:int, rb:int, rc:int, rd:real
    } @ { Collection })).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:ORDERS_ORDERKEY, rb:ORDERS_ORDERDATE,
    rc:ORDERS_SHIPPRIORITY, rd:__sum_ret__1} in 
    (_accmap.insert {ra:ORDERS_ORDERKEY, rb:ORDERS_ORDERDATE,
     rc:ORDERS_SHIPPRIORITY, rd:__sum_ret__1 *
     if CUSTOMER_MKTSEGMENT == "BUILDING" then 1 else 0};
     _accmap)))) empty { ra:int, rb:int, rc:int, rd:real
    } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:ORDERS_ORDERKEY, rb:ORDERS_ORDERDATE,
    rc:ORDERS_SHIPPRIORITY, rd:__prod_ret__2} in 
    (_accmap.insert {ra:ORDERS_ORDERKEY, rb:ORDERS_ORDERDATE,
     rc:ORDERS_SHIPPRIORITY, rd:__prod_ret__2};
     _accmap)))) empty { ra:int, rb:int, rc:int, rd:real
    } @ { Collection }).groupBy ((\b1 -> bind b1 as {ra:map_0, rb:map_1,
    rc:map_2, rd:map_val} in {ra:map_0, rb:map_1, rc:map_2})) ((\acc -> (\b3 ->
    bind b3 as {ra:map_0, rb:map_1, rc:map_2, rd:map_val} in acc + map_val)))
    0).fold ((\acc -> (\b3 -> bind b3 as {key:g, value:val} in 
    (acc.insert {ra:g.ra, rb:g.rb, rc:g.rc, rd:val};acc)))) empty { ra:int,
    rb:int, rc:int, rd:real } @ { Collection } in
  ((nd_add_delta_to_int_date_int_float {ra:QUERY3, rb:false, rc:vid,
      rd:delta_values});
   (nd_complete_stmt_cntr_check {key:vid, value:0})))


declare nd_insert_CUSTOMER_do_complete_s1 : { ra:{ key:int, value:int },
  rb:int, rc:string, rd:string, re:int, rf:string, rg:real, rh:string,
  ri:string } -> () = (\b1 -> bind b1 as {ra:vid, rb:CUSTOMER_CUSTKEY,
  rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
  rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
  ri:CUSTOMER_COMMENT} in let delta_values =
  (((bind map_QUERY3_mLINEITEM1_mCUSTOMER2_s1_buf as ind __x in
    (frontier_int_date_int_int_int {key:vid, value:__x.filter ((\b1 ->
       bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd, re:re, rf:rf} in re ==
       CUSTOMER_CUSTKEY))}).fold ((\acc -> (\b3 -> bind b3 as {ra:vid,
      rb:map_0, rc:map_1, rd:map_2, re:map_3, rf:map_val} in 
      (acc.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_3, re:map_val};acc))))
      empty { ra:int, rb:int, rc:int, rd:int, re:int } @ { Collection }).fold
    ((\_accmap -> (\b3 -> bind b3 as {ra:QUERY3_mLINEITEMLINEITEM_ORDERKEY,
    rb:ORDERS_ORDERDATE, rc:ORDERS_SHIPPRIORITY, rd:CUSTOMER_CUSTKEY,
    re:__map_ret__3} in 
    (_accmap.insert {ra:QUERY3_mLINEITEMLINEITEM_ORDERKEY, rb:ORDERS_ORDERDATE,
     rc:ORDERS_SHIPPRIORITY, rd:__map_ret__3};
     _accmap)))) empty { ra:int, rb:int, rc:int, rd:int
    } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:QUERY3_mLINEITEMLINEITEM_ORDERKEY, rb:ORDERS_ORDERDATE,
    rc:ORDERS_SHIPPRIORITY, rd:__map_ret__3} in 
    (_accmap.insert {ra:QUERY3_mLINEITEMLINEITEM_ORDERKEY, rb:ORDERS_ORDERDATE,
     rc:ORDERS_SHIPPRIORITY, rd:__map_ret__3 *
     if CUSTOMER_MKTSEGMENT == "BUILDING" then 1 else 0};
     _accmap)))) empty { ra:int, rb:int, rc:int, rd:int
    } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:QUERY3_mLINEITEMLINEITEM_ORDERKEY, rb:ORDERS_ORDERDATE,
    rc:ORDERS_SHIPPRIORITY, rd:__prod_ret__3} in 
    (_accmap.insert {ra:QUERY3_mLINEITEMLINEITEM_ORDERKEY, rb:ORDERS_ORDERDATE,
     rc:ORDERS_SHIPPRIORITY, rd:__prod_ret__3};
     _accmap)))) empty { ra:int, rb:int, rc:int, rd:int } @ { Collection } in
  ((nd_add_delta_to_int_date_int_int {ra:QUERY3_mLINEITEM1, rb:false, rc:vid,
      rd:delta_values});
   let sent_msgs =
   nd_QUERY3_mLINEITEM1_send_correctives {ra:me, rb:1, rc:vid, rd:1, re:vid,
     rf:delta_values} in
   if sent_msgs == 0 then nd_complete_stmt_cntr_check {key:vid, value:1}
     else
       nd_update_stmt_cntr_corr_map {ra:vid, rb:1, rc:1, rd:sent_msgs, re:true,
         rf:false}))


declare nd_insert_CUSTOMER_do_complete_s2 : { ra:{ key:int, value:int },
  rb:int, rc:string, rd:string, re:int, rf:string, rg:real, rh:string,
  ri:string } -> () = (\b1 -> bind b1 as {ra:vid, rb:CUSTOMER_CUSTKEY,
  rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
  rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
  ri:CUSTOMER_COMMENT} in let __cmp_ret__3 =
  if CUSTOMER_MKTSEGMENT == "BUILDING" then 1 else 0 in
  ((nd_add_delta_to_int_int {ra:QUERY3_mORDERS1, rb:false, rc:vid, rd:{|
      key:int, value:int | {key:CUSTOMER_CUSTKEY,
      value:__cmp_ret__3}|} @ { Collection }});
   let sent_msgs =
   nd_QUERY3_mORDERS1_send_correctives {ra:me, rb:2, rc:vid, rd:1, re:vid,
     rf:{| key:int, value:int | {key:CUSTOMER_CUSTKEY,
     value:__cmp_ret__3}|} @ { Collection }} in
   if sent_msgs == 0 then ()
     else
       nd_update_stmt_cntr_corr_map {ra:vid, rb:2, rc:1, rd:sent_msgs, re:true,
         rf:true}))


declare insert_CUSTOMER_do_corrective_s0_m_QUERY3_mCUSTOMER2 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:int,
  rg:string, rh:string, ri:int, rj:string, rk:real, rl:string, rm:string,
  rn:collection { ra:int, rb:int, rc:int, rd:int, re:real } @ { Collection }
  } -> int = (\b1 -> bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid,
  rd:hop, re:vid, rf:CUSTOMER_CUSTKEY, rg:CUSTOMER_NAME, rh:CUSTOMER_ADDRESS,
  ri:CUSTOMER_NATIONKEY, rj:CUSTOMER_PHONE, rk:CUSTOMER_ACCTBAL,
  rl:CUSTOMER_MKTSEGMENT, rm:CUSTOMER_COMMENT, rn:delta_tuples} in let
  new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 ->
    bind b3 as {ra:delta_ORDERS_ORDERKEY, rb:delta_ORDERS_ORDERDATE,
    rc:delta_ORDERS_SHIPPRIORITY, rd:delta_QUERY3_mCUSTOMERCUSTOMER_CUSTKEY,
    re:delta_QUERY3_mCUSTOMER2} in _accext.combine (let __prod_ret__169 =
    ((if CUSTOMER_CUSTKEY == delta_QUERY3_mCUSTOMERCUSTOMER_CUSTKEY then 1
      else 0) * if CUSTOMER_MKTSEGMENT == "BUILDING" then 1 else 0) *
      -delta_QUERY3_mCUSTOMER2 in
    {| ra:int, rb:int, rc:int, rd:real | {ra:delta_ORDERS_ORDERKEY,
      rb:delta_ORDERS_ORDERDATE, rc:delta_ORDERS_SHIPPRIORITY,
      rd:__prod_ret__169}|} @ { Collection })))) empty { ra:int, rb:int,
    rc:int, rd:real } @ { Collection }).filter ((\b1 -> bind b1 as {ra:map_0,
    rb:map_1, rc:map_2, rd:map_val} in 0 != map_val)) in
  ((nd_add_delta_to_int_date_int_float {ra:QUERY3, rb:true, rc:vid,
      rd:new_tuples});
   0))


declare insert_CUSTOMER_do_corrective_s0_m_QUERY3_mCUSTOMER4 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:int,
  rg:string, rh:string, ri:int, rj:string, rk:real, rl:string, rm:string,
  rn:collection { ra:int, rb:int, rc:int, rd:int, re:real } @ { Collection }
  } -> int = (\b1 -> bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid,
  rd:hop, re:vid, rf:CUSTOMER_CUSTKEY, rg:CUSTOMER_NAME, rh:CUSTOMER_ADDRESS,
  ri:CUSTOMER_NATIONKEY, rj:CUSTOMER_PHONE, rk:CUSTOMER_ACCTBAL,
  rl:CUSTOMER_MKTSEGMENT, rm:CUSTOMER_COMMENT, rn:delta_tuples} in let
  new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 ->
    bind b3 as {ra:delta_ORDERS_ORDERKEY, rb:delta_ORDERS_ORDERDATE,
    rc:delta_ORDERS_SHIPPRIORITY, rd:delta_QUERY3_mCUSTOMERCUSTOMER_CUSTKEY,
    re:delta_QUERY3_mCUSTOMER4} in _accext.combine (let __prod_ret__171 =
    ((if CUSTOMER_CUSTKEY == delta_QUERY3_mCUSTOMERCUSTOMER_CUSTKEY then 1
      else 0) * if CUSTOMER_MKTSEGMENT == "BUILDING" then 1 else 0) *
      delta_QUERY3_mCUSTOMER4 in
    {| ra:int, rb:int, rc:int, rd:real | {ra:delta_ORDERS_ORDERKEY,
      rb:delta_ORDERS_ORDERDATE, rc:delta_ORDERS_SHIPPRIORITY,
      rd:__prod_ret__171}|} @ { Collection })))) empty { ra:int, rb:int,
    rc:int, rd:real } @ { Collection }).filter ((\b1 -> bind b1 as {ra:map_0,
    rb:map_1, rc:map_2, rd:map_val} in 0 != map_val)) in
  ((nd_add_delta_to_int_date_int_float {ra:QUERY3, rb:true, rc:vid,
      rd:new_tuples});
   0))


declare insert_CUSTOMER_do_corrective_s1_m_QUERY3_mLINEITEM1_mCUSTOMER2 : {
  ra:address, rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int,
  value:int }, rf:int, rg:string, rh:string, ri:int, rj:string, rk:real,
  rl:string, rm:string, rn:collection { ra:int, rb:int, rc:int, rd:int, re:int
  } @ { Collection } } -> int = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:CUSTOMER_CUSTKEY,
  rg:CUSTOMER_NAME, rh:CUSTOMER_ADDRESS, ri:CUSTOMER_NATIONKEY,
  rj:CUSTOMER_PHONE, rk:CUSTOMER_ACCTBAL, rl:CUSTOMER_MKTSEGMENT,
  rm:CUSTOMER_COMMENT, rn:delta_tuples} in let new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 ->
    bind b3 as {ra:delta_QUERY3_mLINEITEMLINEITEM_ORDERKEY,
    rb:delta_ORDERS_ORDERDATE, rc:delta_ORDERS_SHIPPRIORITY,
    rd:delta_QUERY3_mLINEITEM1_mCUSTOMERCUSTOMER_CUSTKEY,
    re:delta_QUERY3_mLINEITEM1_mCUSTOMER2} in _accext.combine (let
    __prod_ret__173 =
    ((if CUSTOMER_CUSTKEY == delta_QUERY3_mLINEITEM1_mCUSTOMERCUSTOMER_CUSTKEY
      then 1 else 0) * if CUSTOMER_MKTSEGMENT == "BUILDING" then 1 else 0) *
      delta_QUERY3_mLINEITEM1_mCUSTOMER2 in
    {| ra:int, rb:int, rc:int, rd:int |
      {ra:delta_QUERY3_mLINEITEMLINEITEM_ORDERKEY, rb:delta_ORDERS_ORDERDATE,
      rc:delta_ORDERS_SHIPPRIORITY, rd:__prod_ret__173}|} @ { Collection }))))
    empty { ra:int, rb:int, rc:int, rd:int } @ { Collection }).filter ((\b1 ->
    bind b1 as {ra:map_0, rb:map_1, rc:map_2, rd:map_val} in 0 != map_val)) in
  ((nd_add_delta_to_int_date_int_int {ra:QUERY3_mLINEITEM1, rb:true, rc:vid,
      rd:new_tuples});
   (nd_QUERY3_mLINEITEM1_send_correctives {ra:orig_addr, rb:orig_stmt_id,
      rc:orig_vid, rd:1 + hop, re:vid, rf:new_tuples})))


declare sw_delete_CUSTOMER : { ra:int, rb:string, rc:string, rd:int, re:string,
  rf:real, rg:string, rh:string } -> () = (\args ->
  (sw_buf_delete_CUSTOMER.insert args;
   sw_trig_buf_idx.insert {i:1};
   sw_need_vid_cntr = sw_need_vid_cntr + 1))


declare sw_delete_CUSTOMER_send_fetch : { key:int, value:int } -> () = (\vid ->
  case (sw_buf_delete_CUSTOMER.peek ()) of
  {Some args ->
    (sw_buf_delete_CUSTOMER.erase args;
     bind args as
     {ra:CUSTOMER_CUSTKEY, rb:CUSTOMER_NAME, rc:CUSTOMER_ADDRESS, rd:CUSTOMER_NATIONKEY, re:CUSTOMER_PHONE, rf:CUSTOMER_ACCTBAL, rg:CUSTOMER_MKTSEGMENT, rh:CUSTOMER_COMMENT}
     in
     ((route_to_int {key:4, value:Some CUSTOMER_CUSTKEY}).iterate ((\b1 ->
      bind b1 as {i:ip} in 
      (nd_delete_CUSTOMER_do_complete_s5_trig, ip)<- {ra:vid,
      rb:CUSTOMER_CUSTKEY, rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS,
      re:CUSTOMER_NATIONKEY, rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL,
      rh:CUSTOMER_MKTSEGMENT, ri:CUSTOMER_COMMENT}));
      ((((empty { ra:address, rb:int, rc:int } @ { Collection }).combine (let
      sender_count =
      (route_to_int_date_int_int {ra:7, rb:None immut, rc:None immut,
         rd:None immut, re:Some CUSTOMER_CUSTKEY}).fold ((\count -> (\b3 ->
        bind b3 as {i:ip} in count + 1))) 0 in
      ((shuffle_QUERY3_mCUSTOMER2_to_QUERY3_bind_0t0_1t1_2t2 {ra:None immut,
          rb:None immut, rc:None immut, rd:empty { ra:{ key:int, value:int },
          rb:int, rc:int, rd:int, re:int, rf:real } @ { Collection }, re:true}).fold
        ((\_accmap -> (\b3 -> bind b3 as {key:ip, value:tuples} in 
        (_accmap.insert {ra:ip, rb:3, rc:sender_count};_accmap)))) empty {
        ra:address, rb:int, rc:int } @ { Collection }).combine (let
        sender_count =
        (route_to_int_date_int_int {ra:8, rb:None immut, rc:None immut,
           rd:None immut, re:Some CUSTOMER_CUSTKEY}).fold ((\count -> (\b3 ->
          bind b3 as {i:ip} in count + 1))) 0 in
        ((shuffle_QUERY3_mCUSTOMER4_to_QUERY3_bind_0t0_1t1_2t2 {ra:None immut,
            rb:None immut, rc:None immut, rd:empty { ra:{ key:int, value:int },
            rb:int, rc:int, rd:int, re:int, rf:real } @ { Collection },
            re:true}).fold ((\_accmap -> (\b3 -> bind b3 as {key:ip,
          value:tuples} in 
          (_accmap.insert {ra:ip, rb:3, rc:sender_count};_accmap)))) empty {
          ra:address, rb:int, rc:int } @ { Collection }).combine (let
          sender_count =
          (route_to_int_date_int_int {ra:3, rb:None immut, rc:None immut,
             rd:None immut, re:Some CUSTOMER_CUSTKEY}).fold ((\count -> (\b3 ->
            bind b3 as {i:ip} in count + 1))) 0 in
          (shuffle_QUERY3_mLINEITEM1_mCUSTOMER2_to_QUERY3_mLINEITEM1_bind_0t0_1t1_2t2
             {ra:None immut, rb:None immut, rc:None immut, rd:empty { ra:{
             key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:int
             } @ { Collection }, re:true}).fold ((\_accmap -> (\b3 ->
            bind b3 as {key:ip, value:tuples} in 
            (_accmap.insert {ra:ip, rb:4, rc:sender_count};_accmap)))) empty {
            ra:address, rb:int, rc:int } @ { Collection })))).groupBy ((\b1 ->
      bind b1 as {ra:ip, rb:stmt_id, rc:count} in {key:ip, value:stmt_id}))
      ((\acc -> (\b3 -> bind b3 as {ra:ip, rb:stmt_id, rc:count} in acc +
      count))) 0).groupBy ((\b1 -> bind b1 as {key:b2, value:count} in 
      bind b2 as {key:ip, value:stmt_id} in ip)) ((\acc -> (\b3 ->
      bind b3 as {key:ip_and_stmt_id, value:count} in bind ip_and_stmt_id as
      {key:ip, value:stmt_id} in
      acc.combine ({| key:int, value:int | {key:stmt_id,
        value:count}|} @ { Collection })))) empty { key:int, value:int
      } @ { Collection }).iterate ((\b1 -> bind b1 as {key:addr,
      value:stmt_cnt_list} in 
      ((nd_delete_CUSTOMER_rcv_put, addr)<- {ra:me, rb:stmt_cnt_list, rc:vid,
       rd:CUSTOMER_CUSTKEY, re:CUSTOMER_NAME, rf:CUSTOMER_ADDRESS,
       rg:CUSTOMER_NATIONKEY, rh:CUSTOMER_PHONE, ri:CUSTOMER_ACCTBAL,
       rj:CUSTOMER_MKTSEGMENT, rk:CUSTOMER_COMMENT};
       (sw_num_sent = sw_num_sent + 1;
        (case ((sw_ack_log.filter ((\b1 -> bind b1 as {key:key,
        value:value} in key == vid))).peek ()) of
        {Some x -> sw_ack_log.update x {key:vid, value:x.value + 1}}{None ->
                                                                    sw_ack_log.insert
                                                                    {key:vid,
                                                                    value:1}})))));
      ((((route_to_int_date_int_int {ra:3, rb:None immut, rc:None immut,
            rd:None immut, re:Some CUSTOMER_CUSTKEY}).fold ((\_accmap ->
      (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {ra:4, rb:3, rc:ip};_accmap)))) empty { ra:int, rb:int,
      rc:address } @ { Collection }).combine
      (((route_to_int_date_int_int {ra:8, rb:None immut, rc:None immut,
           rd:None immut, re:Some CUSTOMER_CUSTKEY}).fold ((\_accmap -> (\b3 ->
      bind b3 as {i:ip} in (_accmap.insert {ra:3, rb:8, rc:ip};_accmap))))
      empty { ra:int, rb:int, rc:address } @ { Collection }).combine
      (((route_to_int_date_int_int {ra:7, rb:None immut, rc:None immut,
           rd:None immut, re:Some CUSTOMER_CUSTKEY}).fold ((\_accmap -> (\b3 ->
      bind b3 as {i:ip} in (_accmap.insert {ra:3, rb:7, rc:ip};_accmap))))
      empty { ra:int, rb:int, rc:address } @ { Collection }).combine empty {
      ra:int, rb:int, rc:address } @ { Collection }))).groupBy ((\b1 ->
      bind b1 as {ra:stmt_id, rb:map_id, rc:ip} in ip)) ((\acc -> (\b3 ->
      bind b3 as {ra:stmt_id, rb:map_id, rc:ip} in 
      (acc.insert {key:stmt_id, value:map_id};acc)))) empty { key:int,
      value:int } @ { Collection }).iterate ((\b1 -> bind b1 as {key:ip,
      value:stmt_map_ids} in 
      (nd_delete_CUSTOMER_rcv_fetch, ip)<- {ra:stmt_map_ids, rb:vid,
      rc:CUSTOMER_CUSTKEY, rd:CUSTOMER_NAME, re:CUSTOMER_ADDRESS,
      rf:CUSTOMER_NATIONKEY, rg:CUSTOMER_PHONE, rh:CUSTOMER_ACCTBAL,
      ri:CUSTOMER_MKTSEGMENT, rj:CUSTOMER_COMMENT}))))}{None ->
                                                         error
                                                           (print
                                                              "unexpected missing arguments in sw_buf_delete_CUSTOMER")})


declare nd_delete_CUSTOMER_do_complete_s3 : { ra:{ key:int, value:int },
  rb:int, rc:string, rd:string, re:int, rf:string, rg:real, rh:string,
  ri:string } -> () = (\b1 -> bind b1 as {ra:vid, rb:CUSTOMER_CUSTKEY,
  rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
  rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
  ri:CUSTOMER_COMMENT} in let delta_values =
  ((((((bind map_QUERY3_mCUSTOMER2_s3_buf as ind __x in
    (frontier_int_date_int_int_float {key:vid, value:__x.filter ((\b1 ->
       bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd, re:re, rf:rf} in re ==
       CUSTOMER_CUSTKEY))}).fold ((\acc -> (\b3 -> bind b3 as {ra:vid,
      rb:map_0, rc:map_1, rd:map_2, re:map_3, rf:map_val} in 
      (acc.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_3, re:map_val};acc))))
      empty { ra:int, rb:int, rc:int, rd:int, re:real } @ { Collection }).fold
    ((\_accmap -> (\b3 -> bind b3 as {ra:ORDERS_ORDERKEY, rb:ORDERS_ORDERDATE,
    rc:ORDERS_SHIPPRIORITY, rd:CUSTOMER_CUSTKEY, re:__map_ret__4} in 
    (_accmap.insert {ra:ORDERS_ORDERKEY, rb:ORDERS_ORDERDATE,
     rc:ORDERS_SHIPPRIORITY, rd:__map_ret__4};
     _accmap)))) empty { ra:int, rb:int, rc:int, rd:real
    } @ { Collection }).combine (((bind map_QUERY3_mCUSTOMER4_s3_buf as ind __x
    in
    (frontier_int_date_int_int_float {key:vid, value:__x.filter ((\b1 ->
       bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd, re:re, rf:rf} in re ==
       CUSTOMER_CUSTKEY))}).fold ((\acc -> (\b3 -> bind b3 as {ra:vid,
      rb:map_0, rc:map_1, rd:map_2, re:map_3, rf:map_val} in 
      (acc.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_3, re:map_val};acc))))
      empty { ra:int, rb:int, rc:int, rd:int, re:real } @ { Collection }).fold
    ((\_accmap -> (\b3 -> bind b3 as {ra:ORDERS_ORDERKEY, rb:ORDERS_ORDERDATE,
    rc:ORDERS_SHIPPRIORITY, rd:CUSTOMER_CUSTKEY, re:__map_ret__5} in 
    (_accmap.insert {ra:ORDERS_ORDERKEY, rb:ORDERS_ORDERDATE,
     rc:ORDERS_SHIPPRIORITY, rd:__map_ret__5};
     _accmap)))) empty { ra:int, rb:int, rc:int, rd:real
    } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:ORDERS_ORDERKEY, rb:ORDERS_ORDERDATE,
    rc:ORDERS_SHIPPRIORITY, rd:__map_ret__5} in 
    (_accmap.insert {ra:ORDERS_ORDERKEY, rb:ORDERS_ORDERDATE,
     rc:ORDERS_SHIPPRIORITY, rd:__map_ret__5 * -1};
     _accmap)))) empty { ra:int, rb:int, rc:int, rd:real
    } @ { Collection })).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:ORDERS_ORDERKEY, rb:ORDERS_ORDERDATE,
    rc:ORDERS_SHIPPRIORITY, rd:__sum_ret__2} in 
    (_accmap.insert {ra:ORDERS_ORDERKEY, rb:ORDERS_ORDERDATE,
     rc:ORDERS_SHIPPRIORITY, rd:__sum_ret__2 *
     if CUSTOMER_MKTSEGMENT == "BUILDING" then 1 else 0};
     _accmap)))) empty { ra:int, rb:int, rc:int, rd:real
    } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:ORDERS_ORDERKEY, rb:ORDERS_ORDERDATE,
    rc:ORDERS_SHIPPRIORITY, rd:__prod_ret__5} in 
    (_accmap.insert {ra:ORDERS_ORDERKEY, rb:ORDERS_ORDERDATE,
     rc:ORDERS_SHIPPRIORITY, rd:__prod_ret__5};
     _accmap)))) empty { ra:int, rb:int, rc:int, rd:real
    } @ { Collection }).groupBy ((\b1 -> bind b1 as {ra:map_0, rb:map_1,
    rc:map_2, rd:map_val} in {ra:map_0, rb:map_1, rc:map_2})) ((\acc -> (\b3 ->
    bind b3 as {ra:map_0, rb:map_1, rc:map_2, rd:map_val} in acc + map_val)))
    0).fold ((\acc -> (\b3 -> bind b3 as {key:g, value:val} in 
    (acc.insert {ra:g.ra, rb:g.rb, rc:g.rc, rd:val};acc)))) empty { ra:int,
    rb:int, rc:int, rd:real } @ { Collection } in
  ((nd_add_delta_to_int_date_int_float {ra:QUERY3, rb:false, rc:vid,
      rd:delta_values});
   (nd_complete_stmt_cntr_check {key:vid, value:3})))


declare nd_delete_CUSTOMER_do_complete_s4 : { ra:{ key:int, value:int },
  rb:int, rc:string, rd:string, re:int, rf:string, rg:real, rh:string,
  ri:string } -> () = (\b1 -> bind b1 as {ra:vid, rb:CUSTOMER_CUSTKEY,
  rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
  rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
  ri:CUSTOMER_COMMENT} in let delta_values =
  ((((bind map_QUERY3_mLINEITEM1_mCUSTOMER2_s4_buf as ind __x in
    (frontier_int_date_int_int_int {key:vid, value:__x.filter ((\b1 ->
       bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd, re:re, rf:rf} in re ==
       CUSTOMER_CUSTKEY))}).fold ((\acc -> (\b3 -> bind b3 as {ra:vid,
      rb:map_0, rc:map_1, rd:map_2, re:map_3, rf:map_val} in 
      (acc.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_3, re:map_val};acc))))
      empty { ra:int, rb:int, rc:int, rd:int, re:int } @ { Collection }).fold
    ((\_accmap -> (\b3 -> bind b3 as {ra:QUERY3_mLINEITEMLINEITEM_ORDERKEY,
    rb:ORDERS_ORDERDATE, rc:ORDERS_SHIPPRIORITY, rd:CUSTOMER_CUSTKEY,
    re:__map_ret__6} in 
    (_accmap.insert {ra:QUERY3_mLINEITEMLINEITEM_ORDERKEY, rb:ORDERS_ORDERDATE,
     rc:ORDERS_SHIPPRIORITY, rd:__map_ret__6};
     _accmap)))) empty { ra:int, rb:int, rc:int, rd:int
    } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:QUERY3_mLINEITEMLINEITEM_ORDERKEY, rb:ORDERS_ORDERDATE,
    rc:ORDERS_SHIPPRIORITY, rd:__map_ret__6} in 
    (_accmap.insert {ra:QUERY3_mLINEITEMLINEITEM_ORDERKEY, rb:ORDERS_ORDERDATE,
     rc:ORDERS_SHIPPRIORITY, rd:__map_ret__6 *
     if CUSTOMER_MKTSEGMENT == "BUILDING" then 1 else 0};
     _accmap)))) empty { ra:int, rb:int, rc:int, rd:int
    } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:QUERY3_mLINEITEMLINEITEM_ORDERKEY, rb:ORDERS_ORDERDATE,
    rc:ORDERS_SHIPPRIORITY, rd:__prod_ret__6} in 
    (_accmap.insert {ra:QUERY3_mLINEITEMLINEITEM_ORDERKEY, rb:ORDERS_ORDERDATE,
     rc:ORDERS_SHIPPRIORITY, rd:__prod_ret__6 * -1};
     _accmap)))) empty { ra:int, rb:int, rc:int, rd:int
    } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:QUERY3_mLINEITEMLINEITEM_ORDERKEY, rb:ORDERS_ORDERDATE,
    rc:ORDERS_SHIPPRIORITY, rd:__prod_ret__7} in 
    (_accmap.insert {ra:QUERY3_mLINEITEMLINEITEM_ORDERKEY, rb:ORDERS_ORDERDATE,
     rc:ORDERS_SHIPPRIORITY, rd:__prod_ret__7};
     _accmap)))) empty { ra:int, rb:int, rc:int, rd:int } @ { Collection } in
  ((nd_add_delta_to_int_date_int_int {ra:QUERY3_mLINEITEM1, rb:false, rc:vid,
      rd:delta_values});
   let sent_msgs =
   nd_QUERY3_mLINEITEM1_send_correctives {ra:me, rb:4, rc:vid, rd:1, re:vid,
     rf:delta_values} in
   if sent_msgs == 0 then nd_complete_stmt_cntr_check {key:vid, value:4}
     else
       nd_update_stmt_cntr_corr_map {ra:vid, rb:4, rc:1, rd:sent_msgs, re:true,
         rf:false}))


declare nd_delete_CUSTOMER_do_complete_s5 : { ra:{ key:int, value:int },
  rb:int, rc:string, rd:string, re:int, rf:string, rg:real, rh:string,
  ri:string } -> () = (\b1 -> bind b1 as {ra:vid, rb:CUSTOMER_CUSTKEY,
  rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
  rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
  ri:CUSTOMER_COMMENT} in let __prod_ret__8 =
  (if CUSTOMER_MKTSEGMENT == "BUILDING" then 1 else 0) * -1 in
  ((nd_add_delta_to_int_int {ra:QUERY3_mORDERS1, rb:false, rc:vid, rd:{|
      key:int, value:int | {key:CUSTOMER_CUSTKEY,
      value:__prod_ret__8}|} @ { Collection }});
   let sent_msgs =
   nd_QUERY3_mORDERS1_send_correctives {ra:me, rb:5, rc:vid, rd:1, re:vid,
     rf:{| key:int, value:int | {key:CUSTOMER_CUSTKEY,
     value:__prod_ret__8}|} @ { Collection }} in
   if sent_msgs == 0 then ()
     else
       nd_update_stmt_cntr_corr_map {ra:vid, rb:5, rc:1, rd:sent_msgs, re:true,
         rf:true}))


declare delete_CUSTOMER_do_corrective_s3_m_QUERY3_mCUSTOMER2 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:int,
  rg:string, rh:string, ri:int, rj:string, rk:real, rl:string, rm:string,
  rn:collection { ra:int, rb:int, rc:int, rd:int, re:real } @ { Collection }
  } -> int = (\b1 -> bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid,
  rd:hop, re:vid, rf:CUSTOMER_CUSTKEY, rg:CUSTOMER_NAME, rh:CUSTOMER_ADDRESS,
  ri:CUSTOMER_NATIONKEY, rj:CUSTOMER_PHONE, rk:CUSTOMER_ACCTBAL,
  rl:CUSTOMER_MKTSEGMENT, rm:CUSTOMER_COMMENT, rn:delta_tuples} in let
  new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 ->
    bind b3 as {ra:delta_ORDERS_ORDERKEY, rb:delta_ORDERS_ORDERDATE,
    rc:delta_ORDERS_SHIPPRIORITY, rd:delta_QUERY3_mCUSTOMERCUSTOMER_CUSTKEY,
    re:delta_QUERY3_mCUSTOMER2} in _accext.combine (let __prod_ret__175 =
    ((if CUSTOMER_CUSTKEY == delta_QUERY3_mCUSTOMERCUSTOMER_CUSTKEY then 1
      else 0) * if CUSTOMER_MKTSEGMENT == "BUILDING" then 1 else 0) *
      delta_QUERY3_mCUSTOMER2 in
    {| ra:int, rb:int, rc:int, rd:real | {ra:delta_ORDERS_ORDERKEY,
      rb:delta_ORDERS_ORDERDATE, rc:delta_ORDERS_SHIPPRIORITY,
      rd:__prod_ret__175}|} @ { Collection })))) empty { ra:int, rb:int,
    rc:int, rd:real } @ { Collection }).filter ((\b1 -> bind b1 as {ra:map_0,
    rb:map_1, rc:map_2, rd:map_val} in 0 != map_val)) in
  ((nd_add_delta_to_int_date_int_float {ra:QUERY3, rb:true, rc:vid,
      rd:new_tuples});
   0))


declare delete_CUSTOMER_do_corrective_s3_m_QUERY3_mCUSTOMER4 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:int,
  rg:string, rh:string, ri:int, rj:string, rk:real, rl:string, rm:string,
  rn:collection { ra:int, rb:int, rc:int, rd:int, re:real } @ { Collection }
  } -> int = (\b1 -> bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid,
  rd:hop, re:vid, rf:CUSTOMER_CUSTKEY, rg:CUSTOMER_NAME, rh:CUSTOMER_ADDRESS,
  ri:CUSTOMER_NATIONKEY, rj:CUSTOMER_PHONE, rk:CUSTOMER_ACCTBAL,
  rl:CUSTOMER_MKTSEGMENT, rm:CUSTOMER_COMMENT, rn:delta_tuples} in let
  new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 ->
    bind b3 as {ra:delta_ORDERS_ORDERKEY, rb:delta_ORDERS_ORDERDATE,
    rc:delta_ORDERS_SHIPPRIORITY, rd:delta_QUERY3_mCUSTOMERCUSTOMER_CUSTKEY,
    re:delta_QUERY3_mCUSTOMER4} in _accext.combine (let __prod_ret__178 =
    ((if CUSTOMER_CUSTKEY == delta_QUERY3_mCUSTOMERCUSTOMER_CUSTKEY then 1
      else 0) * if CUSTOMER_MKTSEGMENT == "BUILDING" then 1 else 0) *
      -delta_QUERY3_mCUSTOMER4 in
    {| ra:int, rb:int, rc:int, rd:real | {ra:delta_ORDERS_ORDERKEY,
      rb:delta_ORDERS_ORDERDATE, rc:delta_ORDERS_SHIPPRIORITY,
      rd:__prod_ret__178}|} @ { Collection })))) empty { ra:int, rb:int,
    rc:int, rd:real } @ { Collection }).filter ((\b1 -> bind b1 as {ra:map_0,
    rb:map_1, rc:map_2, rd:map_val} in 0 != map_val)) in
  ((nd_add_delta_to_int_date_int_float {ra:QUERY3, rb:true, rc:vid,
      rd:new_tuples});
   0))


declare delete_CUSTOMER_do_corrective_s4_m_QUERY3_mLINEITEM1_mCUSTOMER2 : {
  ra:address, rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int,
  value:int }, rf:int, rg:string, rh:string, ri:int, rj:string, rk:real,
  rl:string, rm:string, rn:collection { ra:int, rb:int, rc:int, rd:int, re:int
  } @ { Collection } } -> int = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:CUSTOMER_CUSTKEY,
  rg:CUSTOMER_NAME, rh:CUSTOMER_ADDRESS, ri:CUSTOMER_NATIONKEY,
  rj:CUSTOMER_PHONE, rk:CUSTOMER_ACCTBAL, rl:CUSTOMER_MKTSEGMENT,
  rm:CUSTOMER_COMMENT, rn:delta_tuples} in let new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 ->
    bind b3 as {ra:delta_QUERY3_mLINEITEMLINEITEM_ORDERKEY,
    rb:delta_ORDERS_ORDERDATE, rc:delta_ORDERS_SHIPPRIORITY,
    rd:delta_QUERY3_mLINEITEM1_mCUSTOMERCUSTOMER_CUSTKEY,
    re:delta_QUERY3_mLINEITEM1_mCUSTOMER2} in _accext.combine (let
    __prod_ret__181 =
    ((if CUSTOMER_CUSTKEY == delta_QUERY3_mLINEITEM1_mCUSTOMERCUSTOMER_CUSTKEY
      then 1 else 0) * if CUSTOMER_MKTSEGMENT == "BUILDING" then 1 else 0) *
      -delta_QUERY3_mLINEITEM1_mCUSTOMER2 in
    {| ra:int, rb:int, rc:int, rd:int |
      {ra:delta_QUERY3_mLINEITEMLINEITEM_ORDERKEY, rb:delta_ORDERS_ORDERDATE,
      rc:delta_ORDERS_SHIPPRIORITY, rd:__prod_ret__181}|} @ { Collection }))))
    empty { ra:int, rb:int, rc:int, rd:int } @ { Collection }).filter ((\b1 ->
    bind b1 as {ra:map_0, rb:map_1, rc:map_2, rd:map_val} in 0 != map_val)) in
  ((nd_add_delta_to_int_date_int_int {ra:QUERY3_mLINEITEM1, rb:true, rc:vid,
      rd:new_tuples});
   (nd_QUERY3_mLINEITEM1_send_correctives {ra:orig_addr, rb:orig_stmt_id,
      rc:orig_vid, rd:1 + hop, re:vid, rf:new_tuples})))


declare sw_insert_ORDERS : { ra:int, rb:int, rc:string, rd:real, re:int,
  rf:string, rg:string, rh:int, ri:string } -> () = (\args ->
  (sw_buf_insert_ORDERS.insert args;
   sw_trig_buf_idx.insert {i:2};
   sw_need_vid_cntr = sw_need_vid_cntr + 1))


declare sw_insert_ORDERS_send_fetch : { key:int, value:int } -> () = (\vid ->
  case (sw_buf_insert_ORDERS.peek ()) of
  {Some args ->
    (sw_buf_insert_ORDERS.erase args;
     bind args as
     {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
     in
     ((route_to_int_date_int_int {ra:3, rb:Some ORDERS_ORDERKEY,
         rc:Some ORDERS_ORDERDATE, rd:Some ORDERS_SHIPPRIORITY,
         re:Some ORDERS_CUSTKEY}).iterate ((\b1 -> bind b1 as {i:ip} in 
      (nd_insert_ORDERS_do_complete_s8_trig, ip)<- {ra:vid, rb:ORDERS_ORDERKEY,
      rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
      rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
      ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT}));
      ((((empty { ra:address, rb:int, rc:int } @ { Collection }).combine (let
      sender_count =
      (route_to_int {key:4, value:Some ORDERS_CUSTKEY}).fold ((\count ->
        (\b3 -> bind b3 as {i:ip} in count + 1))) 0 in
      ((shuffle_QUERY3_mORDERS1_to_QUERY3 {ra:Some ORDERS_ORDERKEY,
          rb:Some ORDERS_ORDERDATE, rc:Some ORDERS_SHIPPRIORITY, rd:empty {
          ra:{ key:int, value:int }, rb:int, rc:int } @ { Collection },
          re:true}).fold ((\_accmap -> (\b3 -> bind b3 as {key:ip,
        value:tuples} in 
        (_accmap.insert {ra:ip, rb:6, rc:sender_count};_accmap)))) empty {
        ra:address, rb:int, rc:int } @ { Collection }).combine (let
        sender_count =
        (route_to_int {key:5, value:Some ORDERS_ORDERKEY}).fold ((\count ->
          (\b3 -> bind b3 as {i:ip} in count + 1))) 0 in
        ((shuffle_QUERY3_mORDERS3_to_QUERY3_bind_0t0 {ra:Some ORDERS_ORDERKEY,
            rb:Some ORDERS_ORDERDATE, rc:Some ORDERS_SHIPPRIORITY, rd:empty {
            ra:{ key:int, value:int }, rb:int, rc:real } @ { Collection },
            re:true}).fold ((\_accmap -> (\b3 -> bind b3 as {key:ip,
          value:tuples} in 
          (_accmap.insert {ra:ip, rb:6, rc:sender_count};_accmap)))) empty {
          ra:address, rb:int, rc:int } @ { Collection }).combine (let
          sender_count =
          (route_to_int {key:6, value:Some ORDERS_ORDERKEY}).fold ((\count ->
            (\b3 -> bind b3 as {i:ip} in count + 1))) 0 in
          ((shuffle_QUERY3_mORDERS6_to_QUERY3_bind_0t0
              {ra:Some ORDERS_ORDERKEY, rb:Some ORDERS_ORDERDATE,
              rc:Some ORDERS_SHIPPRIORITY, rd:empty { ra:{ key:int, value:int
              }, rb:int, rc:real } @ { Collection }, re:true}).fold
            ((\_accmap -> (\b3 -> bind b3 as {key:ip, value:tuples} in 
            (_accmap.insert {ra:ip, rb:6, rc:sender_count};_accmap)))) empty {
            ra:address, rb:int, rc:int } @ { Collection }).combine (let
            sender_count =
            (route_to_int {key:4, value:Some ORDERS_CUSTKEY}).fold ((\count ->
              (\b3 -> bind b3 as {i:ip} in count + 1))) 0 in
            ((shuffle_QUERY3_mORDERS1_to_QUERY3_mLINEITEM1
                {ra:Some ORDERS_ORDERKEY, rb:Some ORDERS_ORDERDATE,
                rc:Some ORDERS_SHIPPRIORITY, rd:empty { ra:{ key:int, value:int
                }, rb:int, rc:int } @ { Collection }, re:true}).fold
              ((\_accmap -> (\b3 -> bind b3 as {key:ip, value:tuples} in 
              (_accmap.insert {ra:ip, rb:7, rc:sender_count};_accmap))))
              empty { ra:address, rb:int, rc:int } @ { Collection }).combine
              (let sender_count =
              (route_to_int {key:5, value:Some ORDERS_ORDERKEY}).fold
                ((\count -> (\b3 -> bind b3 as {i:ip} in count + 1))) 0 in
              ((shuffle_QUERY3_mORDERS3_to_QUERY3_mCUSTOMER2_bind_0t0
                  {ra:Some ORDERS_ORDERKEY, rb:Some ORDERS_ORDERDATE,
                  rc:Some ORDERS_SHIPPRIORITY, rd:Some ORDERS_CUSTKEY,
                  re:empty { ra:{ key:int, value:int }, rb:int, rc:real
                  } @ { Collection }, rf:true}).fold ((\_accmap -> (\b3 ->
                bind b3 as {key:ip, value:tuples} in 
                (_accmap.insert {ra:ip, rb:9, rc:sender_count};_accmap))))
                empty { ra:address, rb:int, rc:int } @ { Collection }).combine
                (let sender_count =
                (route_to_int {key:6, value:Some ORDERS_ORDERKEY}).fold
                  ((\count -> (\b3 -> bind b3 as {i:ip} in count + 1))) 0 in
                (shuffle_QUERY3_mORDERS6_to_QUERY3_mCUSTOMER4_bind_0t0
                   {ra:Some ORDERS_ORDERKEY, rb:Some ORDERS_ORDERDATE,
                   rc:Some ORDERS_SHIPPRIORITY, rd:Some ORDERS_CUSTKEY,
                   re:empty { ra:{ key:int, value:int }, rb:int, rc:real
                   } @ { Collection }, rf:true}).fold ((\_accmap -> (\b3 ->
                  bind b3 as {key:ip, value:tuples} in 
                  (_accmap.insert {ra:ip, rb:10, rc:sender_count};_accmap))))
                  empty { ra:address, rb:int, rc:int } @ { Collection }))))))).groupBy
      ((\b1 -> bind b1 as {ra:ip, rb:stmt_id, rc:count} in {key:ip,
      value:stmt_id})) ((\acc -> (\b3 -> bind b3 as {ra:ip, rb:stmt_id,
      rc:count} in acc + count))) 0).groupBy ((\b1 -> bind b1 as {key:b2,
      value:count} in bind b2 as {key:ip, value:stmt_id} in ip)) ((\acc ->
      (\b3 -> bind b3 as {key:ip_and_stmt_id, value:count} in bind
      ip_and_stmt_id as {key:ip, value:stmt_id} in
      acc.combine ({| key:int, value:int | {key:stmt_id,
        value:count}|} @ { Collection })))) empty { key:int, value:int
      } @ { Collection }).iterate ((\b1 -> bind b1 as {key:addr,
      value:stmt_cnt_list} in 
      ((nd_insert_ORDERS_rcv_put, addr)<- {ra:me, rb:stmt_cnt_list, rc:vid,
       rd:ORDERS_ORDERKEY, re:ORDERS_CUSTKEY, rf:ORDERS_ORDERSTATUS,
       rg:ORDERS_TOTALPRICE, rh:ORDERS_ORDERDATE, ri:ORDERS_ORDERPRIORITY,
       rj:ORDERS_CLERK, rk:ORDERS_SHIPPRIORITY, rl:ORDERS_COMMENT};
       (sw_num_sent = sw_num_sent + 1;
        (case ((sw_ack_log.filter ((\b1 -> bind b1 as {key:key,
        value:value} in key == vid))).peek ()) of
        {Some x -> sw_ack_log.update x {key:vid, value:x.value + 1}}{None ->
                                                                    sw_ack_log.insert
                                                                    {key:vid,
                                                                    value:1}})))));
      ((((route_to_int {key:6, value:Some ORDERS_ORDERKEY}).fold ((\_accmap ->
      (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {ra:10, rb:6, rc:ip};_accmap)))) empty { ra:int, rb:int,
      rc:address } @ { Collection }).combine
      (((route_to_int {key:5, value:Some ORDERS_ORDERKEY}).fold ((\_accmap ->
      (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {ra:9, rb:5, rc:ip};_accmap)))) empty { ra:int, rb:int,
      rc:address } @ { Collection }).combine
      (((route_to_int {key:4, value:Some ORDERS_CUSTKEY}).fold ((\_accmap ->
      (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {ra:7, rb:4, rc:ip};_accmap)))) empty { ra:int, rb:int,
      rc:address } @ { Collection }).combine
      (((route_to_int {key:6, value:Some ORDERS_ORDERKEY}).fold ((\_accmap ->
      (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {ra:6, rb:6, rc:ip};_accmap)))) empty { ra:int, rb:int,
      rc:address } @ { Collection }).combine
      (((route_to_int {key:5, value:Some ORDERS_ORDERKEY}).fold ((\_accmap ->
      (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {ra:6, rb:5, rc:ip};_accmap)))) empty { ra:int, rb:int,
      rc:address } @ { Collection }).combine
      (((route_to_int {key:4, value:Some ORDERS_CUSTKEY}).fold ((\_accmap ->
      (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {ra:6, rb:4, rc:ip};_accmap)))) empty { ra:int, rb:int,
      rc:address } @ { Collection }).combine empty { ra:int, rb:int, rc:address
      } @ { Collection })))))).groupBy ((\b1 -> bind b1 as {ra:stmt_id,
      rb:map_id, rc:ip} in ip)) ((\acc -> (\b3 -> bind b3 as {ra:stmt_id,
      rb:map_id, rc:ip} in (acc.insert {key:stmt_id, value:map_id};acc))))
      empty { key:int, value:int } @ { Collection }).iterate ((\b1 ->
      bind b1 as {key:ip, value:stmt_map_ids} in 
      (nd_insert_ORDERS_rcv_fetch, ip)<- {ra:stmt_map_ids, rb:vid,
      rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
      rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
      ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT}))))}
  {None ->
    error (print "unexpected missing arguments in sw_buf_insert_ORDERS")})


declare nd_insert_ORDERS_do_complete_s6 : { ra:{ key:int, value:int }, rb:int,
  rc:int, rd:string, re:real, rf:int, rg:string, rh:string, ri:int, rj:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
  rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
  rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
  rj:ORDERS_COMMENT} in let __prod_ret__11 =
  ((if ORDERS_ORDERDATE < 19950315 then 1 else 0) * let wrapped_lookup_value =
    bind map_QUERY3_mORDERS1_s6_buf as ind __x in
      (frontier_int_int {key:vid, value:__x.filter ((\b1 -> bind b1 as {ra:ra,
         rb:rb, rc:rc} in rb == ORDERS_CUSTKEY))}).fold ((\acc -> (\b3 ->
        bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
        (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
        value:int } @ { Collection } in
    case (wrapped_lookup_value.peek ()) of
      {Some unwrapped_value -> bind unwrapped_value as
        {key:_, value:projected_field} in projected_field}{None -> 0}) * (((let
    wrapped_lookup_value =
    bind map_QUERY3_mORDERS3_s6_buf as ind __x in
      (frontier_int_float {key:vid, value:__x.filter ((\b1 ->
         bind b1 as {ra:ra, rb:rb, rc:rc} in rb == ORDERS_ORDERKEY))}).fold
        ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
        (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
        value:real } @ { Collection } in
    case (wrapped_lookup_value.peek ()) of
      {Some unwrapped_value -> bind unwrapped_value as
        {key:_, value:projected_field} in projected_field}{None -> 0}) * -1) +
    let wrapped_lookup_value =
    bind map_QUERY3_mORDERS6_s6_buf as ind __x in
      (frontier_int_float {key:vid, value:__x.filter ((\b1 ->
         bind b1 as {ra:ra, rb:rb, rc:rc} in rb == ORDERS_ORDERKEY))}).fold
        ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
        (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
        value:real } @ { Collection } in
    case (wrapped_lookup_value.peek ()) of
      {Some unwrapped_value -> bind unwrapped_value as
        {key:_, value:projected_field} in projected_field}{None -> 0}) in
  ((nd_add_delta_to_int_date_int_float {ra:QUERY3, rb:false, rc:vid, rd:{|
      ra:int, rb:int, rc:int, rd:real | {ra:ORDERS_ORDERKEY,
      rb:ORDERS_ORDERDATE, rc:ORDERS_SHIPPRIORITY,
      rd:__prod_ret__11}|} @ { Collection }});
   (nd_complete_stmt_cntr_check {key:vid, value:6})))


declare nd_insert_ORDERS_do_complete_s7 : { ra:{ key:int, value:int }, rb:int,
  rc:int, rd:string, re:real, rf:int, rg:string, rh:string, ri:int, rj:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
  rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
  rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
  rj:ORDERS_COMMENT} in let __prod_ret__12 =
  (let wrapped_lookup_value =
    bind map_QUERY3_mORDERS1_s7_buf as ind __x in
      (frontier_int_int {key:vid, value:__x.filter ((\b1 -> bind b1 as {ra:ra,
         rb:rb, rc:rc} in rb == ORDERS_CUSTKEY))}).fold ((\acc -> (\b3 ->
        bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
        (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
        value:int } @ { Collection } in
    case (wrapped_lookup_value.peek ()) of
      {Some unwrapped_value -> bind unwrapped_value as
        {key:_, value:projected_field} in projected_field}{None -> 0}) *
    if ORDERS_ORDERDATE < 19950315 then 1 else 0 in
  ((nd_add_delta_to_int_date_int_int {ra:QUERY3_mLINEITEM1, rb:false, rc:vid,
      rd:{| ra:int, rb:int, rc:int, rd:int | {ra:ORDERS_ORDERKEY,
      rb:ORDERS_ORDERDATE, rc:ORDERS_SHIPPRIORITY,
      rd:__prod_ret__12}|} @ { Collection }});
   let sent_msgs =
   nd_QUERY3_mLINEITEM1_send_correctives {ra:me, rb:7, rc:vid, rd:1, re:vid,
     rf:{| ra:int, rb:int, rc:int, rd:int | {ra:ORDERS_ORDERKEY,
     rb:ORDERS_ORDERDATE, rc:ORDERS_SHIPPRIORITY,
     rd:__prod_ret__12}|} @ { Collection }} in
   if sent_msgs == 0 then nd_complete_stmt_cntr_check {key:vid, value:7}
     else
       nd_update_stmt_cntr_corr_map {ra:vid, rb:7, rc:1, rd:sent_msgs, re:true,
         rf:false}))


declare nd_insert_ORDERS_do_complete_s9 : { ra:{ key:int, value:int }, rb:int,
  rc:int, rd:string, re:real, rf:int, rg:string, rh:string, ri:int, rj:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
  rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
  rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
  rj:ORDERS_COMMENT} in let __prod_ret__13 =
  (if ORDERS_ORDERDATE < 19950315 then 1 else 0) * let wrapped_lookup_value =
    bind map_QUERY3_mORDERS3_s9_buf as ind __x in
      (frontier_int_float {key:vid, value:__x.filter ((\b1 ->
         bind b1 as {ra:ra, rb:rb, rc:rc} in rb == ORDERS_ORDERKEY))}).fold
        ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
        (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
        value:real } @ { Collection } in
    case (wrapped_lookup_value.peek ()) of
      {Some unwrapped_value -> bind unwrapped_value as
        {key:_, value:projected_field} in projected_field}{None -> 0} in
  ((nd_add_delta_to_int_date_int_int_float {ra:QUERY3_mCUSTOMER2, rb:false,
      rc:vid, rd:{| ra:int, rb:int, rc:int, rd:int, re:real |
      {ra:ORDERS_ORDERKEY, rb:ORDERS_ORDERDATE, rc:ORDERS_SHIPPRIORITY,
      rd:ORDERS_CUSTKEY, re:__prod_ret__13}|} @ { Collection }});
   let sent_msgs =
   nd_QUERY3_mCUSTOMER2_send_correctives {ra:me, rb:9, rc:vid, rd:1, re:vid,
     rf:{| ra:int, rb:int, rc:int, rd:int, re:real | {ra:ORDERS_ORDERKEY,
     rb:ORDERS_ORDERDATE, rc:ORDERS_SHIPPRIORITY, rd:ORDERS_CUSTKEY,
     re:__prod_ret__13}|} @ { Collection }} in
   if sent_msgs == 0 then nd_complete_stmt_cntr_check {key:vid, value:9}
     else
       nd_update_stmt_cntr_corr_map {ra:vid, rb:9, rc:1, rd:sent_msgs, re:true,
         rf:false}))


declare nd_insert_ORDERS_do_complete_s10 : { ra:{ key:int, value:int }, rb:int,
  rc:int, rd:string, re:real, rf:int, rg:string, rh:string, ri:int, rj:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
  rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
  rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
  rj:ORDERS_COMMENT} in let __prod_ret__14 =
  (if ORDERS_ORDERDATE < 19950315 then 1 else 0) * let wrapped_lookup_value =
    bind map_QUERY3_mORDERS6_s10_buf as ind __x in
      (frontier_int_float {key:vid, value:__x.filter ((\b1 ->
         bind b1 as {ra:ra, rb:rb, rc:rc} in rb == ORDERS_ORDERKEY))}).fold
        ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
        (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
        value:real } @ { Collection } in
    case (wrapped_lookup_value.peek ()) of
      {Some unwrapped_value -> bind unwrapped_value as
        {key:_, value:projected_field} in projected_field}{None -> 0} in
  ((nd_add_delta_to_int_date_int_int_float {ra:QUERY3_mCUSTOMER4, rb:false,
      rc:vid, rd:{| ra:int, rb:int, rc:int, rd:int, re:real |
      {ra:ORDERS_ORDERKEY, rb:ORDERS_ORDERDATE, rc:ORDERS_SHIPPRIORITY,
      rd:ORDERS_CUSTKEY, re:__prod_ret__14}|} @ { Collection }});
   let sent_msgs =
   nd_QUERY3_mCUSTOMER4_send_correctives {ra:me, rb:10, rc:vid, rd:1, re:vid,
     rf:{| ra:int, rb:int, rc:int, rd:int, re:real | {ra:ORDERS_ORDERKEY,
     rb:ORDERS_ORDERDATE, rc:ORDERS_SHIPPRIORITY, rd:ORDERS_CUSTKEY,
     re:__prod_ret__14}|} @ { Collection }} in
   if sent_msgs == 0 then nd_complete_stmt_cntr_check {key:vid, value:10}
     else
       nd_update_stmt_cntr_corr_map {ra:vid, rb:10, rc:1, rd:sent_msgs,
         re:true, rf:false}))


declare nd_insert_ORDERS_do_complete_s8 : { ra:{ key:int, value:int }, rb:int,
  rc:int, rd:string, re:real, rf:int, rg:string, rh:string, ri:int, rj:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
  rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
  rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
  rj:ORDERS_COMMENT} in let __cmp_ret__9 =
  if ORDERS_ORDERDATE < 19950315 then 1 else 0 in
  ((nd_add_delta_to_int_date_int_int_int {ra:QUERY3_mLINEITEM1_mCUSTOMER2,
      rb:false, rc:vid, rd:{| ra:int, rb:int, rc:int, rd:int, re:int |
      {ra:ORDERS_ORDERKEY, rb:ORDERS_ORDERDATE, rc:ORDERS_SHIPPRIORITY,
      rd:ORDERS_CUSTKEY, re:__cmp_ret__9}|} @ { Collection }});
   let sent_msgs =
   nd_QUERY3_mLINEITEM1_mCUSTOMER2_send_correctives {ra:me, rb:8, rc:vid, rd:1,
     re:vid, rf:{| ra:int, rb:int, rc:int, rd:int, re:int |
     {ra:ORDERS_ORDERKEY, rb:ORDERS_ORDERDATE, rc:ORDERS_SHIPPRIORITY,
     rd:ORDERS_CUSTKEY, re:__cmp_ret__9}|} @ { Collection }} in
   if sent_msgs == 0 then ()
     else
       nd_update_stmt_cntr_corr_map {ra:vid, rb:8, rc:1, rd:sent_msgs, re:true,
         rf:true}))


declare insert_ORDERS_do_corrective_s6_m_QUERY3_mORDERS1 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:int,
  rg:int, rh:string, ri:real, rj:int, rk:string, rl:string, rm:int, rn:string,
  ro:collection { key:int, value:int } @ { Collection } } -> int = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid,
  rf:ORDERS_ORDERKEY, rg:ORDERS_CUSTKEY, rh:ORDERS_ORDERSTATUS,
  ri:ORDERS_TOTALPRICE, rj:ORDERS_ORDERDATE, rk:ORDERS_ORDERPRIORITY,
  rl:ORDERS_CLERK, rm:ORDERS_SHIPPRIORITY, rn:ORDERS_COMMENT,
  ro:delta_tuples} in let new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 ->
    bind b3 as {key:delta_QUERY3_mORDERSORDERS_CUSTKEY,
    value:delta_QUERY3_mORDERS1} in _accext.combine (let __prod_ret__96 =
    (((if ORDERS_CUSTKEY == delta_QUERY3_mORDERSORDERS_CUSTKEY then 1 
      else 0) * if ORDERS_ORDERDATE < 19950315 then 1 else 0) * (((let
      wrapped_lookup_value =
      bind map_QUERY3_mORDERS3_s6_buf as ind __x in
        (frontier_int_float {key:vid, value:__x.filter ((\b1 ->
           bind b1 as {ra:ra, rb:rb, rc:rc} in rb == ORDERS_ORDERKEY))}).fold
          ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
          (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
          value:real } @ { Collection } in
      case (wrapped_lookup_value.peek ()) of
        {Some unwrapped_value -> bind unwrapped_value as
          {key:_, value:projected_field} in projected_field}{None -> 0}) * -1)
      + let wrapped_lookup_value =
      bind map_QUERY3_mORDERS6_s6_buf as ind __x in
        (frontier_int_float {key:vid, value:__x.filter ((\b1 ->
           bind b1 as {ra:ra, rb:rb, rc:rc} in rb == ORDERS_ORDERKEY))}).fold
          ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
          (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
          value:real } @ { Collection } in
      case (wrapped_lookup_value.peek ()) of
        {Some unwrapped_value -> bind unwrapped_value as
          {key:_, value:projected_field} in projected_field}{None -> 0})) *
      delta_QUERY3_mORDERS1 in
    {| ra:int, rb:int, rc:int, rd:real | {ra:ORDERS_ORDERKEY,
      rb:ORDERS_ORDERDATE, rc:ORDERS_SHIPPRIORITY,
      rd:__prod_ret__96}|} @ { Collection })))) empty { ra:int, rb:int, rc:int,
    rd:real } @ { Collection }).filter ((\b1 -> bind b1 as {ra:map_0, rb:map_1,
    rc:map_2, rd:map_val} in 0 != map_val)) in
  ((nd_add_delta_to_int_date_int_float {ra:QUERY3, rb:true, rc:vid,
      rd:new_tuples});
   0))


declare insert_ORDERS_do_corrective_s6_m_QUERY3_mORDERS3 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:int,
  rg:int, rh:string, ri:real, rj:int, rk:string, rl:string, rm:int, rn:string,
  ro:collection { key:int, value:real } @ { Collection } } -> int = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid,
  rf:ORDERS_ORDERKEY, rg:ORDERS_CUSTKEY, rh:ORDERS_ORDERSTATUS,
  ri:ORDERS_TOTALPRICE, rj:ORDERS_ORDERDATE, rk:ORDERS_ORDERPRIORITY,
  rl:ORDERS_CLERK, rm:ORDERS_SHIPPRIORITY, rn:ORDERS_COMMENT,
  ro:delta_tuples} in let new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 ->
    bind b3 as {key:delta_QUERY3_mORDERSORDERS_ORDERKEY,
    value:delta_QUERY3_mORDERS3} in _accext.combine (let __prod_ret__108 =
    (((if ORDERS_ORDERKEY == delta_QUERY3_mORDERSORDERS_ORDERKEY then 1 
      else 0) * if ORDERS_ORDERDATE < 19950315 then 1 else 0) * let
      wrapped_lookup_value =
      bind map_QUERY3_mORDERS1_s6_buf as ind __x in
        (frontier_int_int {key:vid, value:__x.filter ((\b1 ->
           bind b1 as {ra:ra, rb:rb, rc:rc} in rb == ORDERS_CUSTKEY))}).fold
          ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
          (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
          value:int } @ { Collection } in
      case (wrapped_lookup_value.peek ()) of
        {Some unwrapped_value -> bind unwrapped_value as
          {key:_, value:projected_field} in projected_field}{None -> 0}) *
      -delta_QUERY3_mORDERS3 in
    {| ra:int, rb:int, rc:int, rd:real | {ra:ORDERS_ORDERKEY,
      rb:ORDERS_ORDERDATE, rc:ORDERS_SHIPPRIORITY,
      rd:__prod_ret__108}|} @ { Collection })))) empty { ra:int, rb:int,
    rc:int, rd:real } @ { Collection }).filter ((\b1 -> bind b1 as {ra:map_0,
    rb:map_1, rc:map_2, rd:map_val} in 0 != map_val)) in
  ((nd_add_delta_to_int_date_int_float {ra:QUERY3, rb:true, rc:vid,
      rd:new_tuples});
   0))


declare insert_ORDERS_do_corrective_s6_m_QUERY3_mORDERS6 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:int,
  rg:int, rh:string, ri:real, rj:int, rk:string, rl:string, rm:int, rn:string,
  ro:collection { key:int, value:real } @ { Collection } } -> int = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid,
  rf:ORDERS_ORDERKEY, rg:ORDERS_CUSTKEY, rh:ORDERS_ORDERSTATUS,
  ri:ORDERS_TOTALPRICE, rj:ORDERS_ORDERDATE, rk:ORDERS_ORDERPRIORITY,
  rl:ORDERS_CLERK, rm:ORDERS_SHIPPRIORITY, rn:ORDERS_COMMENT,
  ro:delta_tuples} in let new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 ->
    bind b3 as {key:delta_QUERY3_mORDERSORDERS_ORDERKEY,
    value:delta_QUERY3_mORDERS6} in _accext.combine (let __prod_ret__119 =
    (((if ORDERS_ORDERKEY == delta_QUERY3_mORDERSORDERS_ORDERKEY then 1 
      else 0) * if ORDERS_ORDERDATE < 19950315 then 1 else 0) * let
      wrapped_lookup_value =
      bind map_QUERY3_mORDERS1_s6_buf as ind __x in
        (frontier_int_int {key:vid, value:__x.filter ((\b1 ->
           bind b1 as {ra:ra, rb:rb, rc:rc} in rb == ORDERS_CUSTKEY))}).fold
          ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
          (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
          value:int } @ { Collection } in
      case (wrapped_lookup_value.peek ()) of
        {Some unwrapped_value -> bind unwrapped_value as
          {key:_, value:projected_field} in projected_field}{None -> 0}) *
      delta_QUERY3_mORDERS6 in
    {| ra:int, rb:int, rc:int, rd:real | {ra:ORDERS_ORDERKEY,
      rb:ORDERS_ORDERDATE, rc:ORDERS_SHIPPRIORITY,
      rd:__prod_ret__119}|} @ { Collection })))) empty { ra:int, rb:int,
    rc:int, rd:real } @ { Collection }).filter ((\b1 -> bind b1 as {ra:map_0,
    rb:map_1, rc:map_2, rd:map_val} in 0 != map_val)) in
  ((nd_add_delta_to_int_date_int_float {ra:QUERY3, rb:true, rc:vid,
      rd:new_tuples});
   0))


declare insert_ORDERS_do_corrective_s7_m_QUERY3_mORDERS1 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:int,
  rg:int, rh:string, ri:real, rj:int, rk:string, rl:string, rm:int, rn:string,
  ro:collection { key:int, value:int } @ { Collection } } -> int = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid,
  rf:ORDERS_ORDERKEY, rg:ORDERS_CUSTKEY, rh:ORDERS_ORDERSTATUS,
  ri:ORDERS_TOTALPRICE, rj:ORDERS_ORDERDATE, rk:ORDERS_ORDERPRIORITY,
  rl:ORDERS_CLERK, rm:ORDERS_SHIPPRIORITY, rn:ORDERS_COMMENT,
  ro:delta_tuples} in let new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 ->
    bind b3 as {key:delta_QUERY3_mORDERSORDERS_CUSTKEY,
    value:delta_QUERY3_mORDERS1} in _accext.combine (let __prod_ret__98 =
    ((if ORDERS_CUSTKEY == delta_QUERY3_mORDERSORDERS_CUSTKEY then 1 
      else 0) * if ORDERS_ORDERDATE < 19950315 then 1 else 0) *
      delta_QUERY3_mORDERS1 in
    {| ra:int, rb:int, rc:int, rd:int | {ra:ORDERS_ORDERKEY,
      rb:ORDERS_ORDERDATE, rc:ORDERS_SHIPPRIORITY,
      rd:__prod_ret__98}|} @ { Collection })))) empty { ra:int, rb:int, rc:int,
    rd:int } @ { Collection }).filter ((\b1 -> bind b1 as {ra:map_0, rb:map_1,
    rc:map_2, rd:map_val} in 0 != map_val)) in
  ((nd_add_delta_to_int_date_int_int {ra:QUERY3_mLINEITEM1, rb:true, rc:vid,
      rd:new_tuples});
   (nd_QUERY3_mLINEITEM1_send_correctives {ra:orig_addr, rb:orig_stmt_id,
      rc:orig_vid, rd:1 + hop, re:vid, rf:new_tuples})))


declare insert_ORDERS_do_corrective_s9_m_QUERY3_mORDERS3 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:int,
  rg:int, rh:string, ri:real, rj:int, rk:string, rl:string, rm:int, rn:string,
  ro:collection { key:int, value:real } @ { Collection } } -> int = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid,
  rf:ORDERS_ORDERKEY, rg:ORDERS_CUSTKEY, rh:ORDERS_ORDERSTATUS,
  ri:ORDERS_TOTALPRICE, rj:ORDERS_ORDERDATE, rk:ORDERS_ORDERPRIORITY,
  rl:ORDERS_CLERK, rm:ORDERS_SHIPPRIORITY, rn:ORDERS_COMMENT,
  ro:delta_tuples} in let new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 ->
    bind b3 as {key:delta_QUERY3_mORDERSORDERS_ORDERKEY,
    value:delta_QUERY3_mORDERS3} in _accext.combine (let __prod_ret__110 =
    ((if ORDERS_ORDERKEY == delta_QUERY3_mORDERSORDERS_ORDERKEY then 1 
      else 0) * if ORDERS_ORDERDATE < 19950315 then 1 else 0) *
      delta_QUERY3_mORDERS3 in
    {| ra:int, rb:int, rc:int, rd:int, re:real | {ra:ORDERS_ORDERKEY,
      rb:ORDERS_ORDERDATE, rc:ORDERS_SHIPPRIORITY, rd:ORDERS_CUSTKEY,
      re:__prod_ret__110}|} @ { Collection })))) empty { ra:int, rb:int,
    rc:int, rd:int, re:real } @ { Collection }).filter ((\b1 ->
    bind b1 as {ra:map_0, rb:map_1, rc:map_2, rd:map_3, re:map_val} in 0 !=
    map_val)) in
  ((nd_add_delta_to_int_date_int_int_float {ra:QUERY3_mCUSTOMER2, rb:true,
      rc:vid, rd:new_tuples});
   (nd_QUERY3_mCUSTOMER2_send_correctives {ra:orig_addr, rb:orig_stmt_id,
      rc:orig_vid, rd:1 + hop, re:vid, rf:new_tuples})))


declare insert_ORDERS_do_corrective_s10_m_QUERY3_mORDERS6 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:int,
  rg:int, rh:string, ri:real, rj:int, rk:string, rl:string, rm:int, rn:string,
  ro:collection { key:int, value:real } @ { Collection } } -> int = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid,
  rf:ORDERS_ORDERKEY, rg:ORDERS_CUSTKEY, rh:ORDERS_ORDERSTATUS,
  ri:ORDERS_TOTALPRICE, rj:ORDERS_ORDERDATE, rk:ORDERS_ORDERPRIORITY,
  rl:ORDERS_CLERK, rm:ORDERS_SHIPPRIORITY, rn:ORDERS_COMMENT,
  ro:delta_tuples} in let new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 ->
    bind b3 as {key:delta_QUERY3_mORDERSORDERS_ORDERKEY,
    value:delta_QUERY3_mORDERS6} in _accext.combine (let __prod_ret__121 =
    ((if ORDERS_ORDERKEY == delta_QUERY3_mORDERSORDERS_ORDERKEY then 1 
      else 0) * if ORDERS_ORDERDATE < 19950315 then 1 else 0) *
      delta_QUERY3_mORDERS6 in
    {| ra:int, rb:int, rc:int, rd:int, re:real | {ra:ORDERS_ORDERKEY,
      rb:ORDERS_ORDERDATE, rc:ORDERS_SHIPPRIORITY, rd:ORDERS_CUSTKEY,
      re:__prod_ret__121}|} @ { Collection })))) empty { ra:int, rb:int,
    rc:int, rd:int, re:real } @ { Collection }).filter ((\b1 ->
    bind b1 as {ra:map_0, rb:map_1, rc:map_2, rd:map_3, re:map_val} in 0 !=
    map_val)) in
  ((nd_add_delta_to_int_date_int_int_float {ra:QUERY3_mCUSTOMER4, rb:true,
      rc:vid, rd:new_tuples});
   (nd_QUERY3_mCUSTOMER4_send_correctives {ra:orig_addr, rb:orig_stmt_id,
      rc:orig_vid, rd:1 + hop, re:vid, rf:new_tuples})))


declare sw_delete_ORDERS : { ra:int, rb:int, rc:string, rd:real, re:int,
  rf:string, rg:string, rh:int, ri:string } -> () = (\args ->
  (sw_buf_delete_ORDERS.insert args;
   sw_trig_buf_idx.insert {i:3};
   sw_need_vid_cntr = sw_need_vid_cntr + 1))


declare sw_delete_ORDERS_send_fetch : { key:int, value:int } -> () = (\vid ->
  case (sw_buf_delete_ORDERS.peek ()) of
  {Some args ->
    (sw_buf_delete_ORDERS.erase args;
     bind args as
     {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
     in
     ((route_to_int_date_int_int {ra:3, rb:Some ORDERS_ORDERKEY,
         rc:Some ORDERS_ORDERDATE, rd:Some ORDERS_SHIPPRIORITY,
         re:Some ORDERS_CUSTKEY}).iterate ((\b1 -> bind b1 as {i:ip} in 
      (nd_delete_ORDERS_do_complete_s13_trig, ip)<- {ra:vid,
      rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
      re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY,
      rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT}));
      ((((empty { ra:address, rb:int, rc:int } @ { Collection }).combine (let
      sender_count =
      (route_to_int {key:4, value:Some ORDERS_CUSTKEY}).fold ((\count ->
        (\b3 -> bind b3 as {i:ip} in count + 1))) 0 in
      ((shuffle_QUERY3_mORDERS1_to_QUERY3 {ra:Some ORDERS_ORDERKEY,
          rb:Some ORDERS_ORDERDATE, rc:Some ORDERS_SHIPPRIORITY, rd:empty {
          ra:{ key:int, value:int }, rb:int, rc:int } @ { Collection },
          re:true}).fold ((\_accmap -> (\b3 -> bind b3 as {key:ip,
        value:tuples} in 
        (_accmap.insert {ra:ip, rb:11, rc:sender_count};_accmap)))) empty {
        ra:address, rb:int, rc:int } @ { Collection }).combine (let
        sender_count =
        (route_to_int {key:5, value:Some ORDERS_ORDERKEY}).fold ((\count ->
          (\b3 -> bind b3 as {i:ip} in count + 1))) 0 in
        ((shuffle_QUERY3_mORDERS3_to_QUERY3_bind_0t0 {ra:Some ORDERS_ORDERKEY,
            rb:Some ORDERS_ORDERDATE, rc:Some ORDERS_SHIPPRIORITY, rd:empty {
            ra:{ key:int, value:int }, rb:int, rc:real } @ { Collection },
            re:true}).fold ((\_accmap -> (\b3 -> bind b3 as {key:ip,
          value:tuples} in 
          (_accmap.insert {ra:ip, rb:11, rc:sender_count};_accmap)))) empty {
          ra:address, rb:int, rc:int } @ { Collection }).combine (let
          sender_count =
          (route_to_int {key:6, value:Some ORDERS_ORDERKEY}).fold ((\count ->
            (\b3 -> bind b3 as {i:ip} in count + 1))) 0 in
          ((shuffle_QUERY3_mORDERS6_to_QUERY3_bind_0t0
              {ra:Some ORDERS_ORDERKEY, rb:Some ORDERS_ORDERDATE,
              rc:Some ORDERS_SHIPPRIORITY, rd:empty { ra:{ key:int, value:int
              }, rb:int, rc:real } @ { Collection }, re:true}).fold
            ((\_accmap -> (\b3 -> bind b3 as {key:ip, value:tuples} in 
            (_accmap.insert {ra:ip, rb:11, rc:sender_count};_accmap)))) empty {
            ra:address, rb:int, rc:int } @ { Collection }).combine (let
            sender_count =
            (route_to_int {key:4, value:Some ORDERS_CUSTKEY}).fold ((\count ->
              (\b3 -> bind b3 as {i:ip} in count + 1))) 0 in
            ((shuffle_QUERY3_mORDERS1_to_QUERY3_mLINEITEM1
                {ra:Some ORDERS_ORDERKEY, rb:Some ORDERS_ORDERDATE,
                rc:Some ORDERS_SHIPPRIORITY, rd:empty { ra:{ key:int, value:int
                }, rb:int, rc:int } @ { Collection }, re:true}).fold
              ((\_accmap -> (\b3 -> bind b3 as {key:ip, value:tuples} in 
              (_accmap.insert {ra:ip, rb:12, rc:sender_count};_accmap))))
              empty { ra:address, rb:int, rc:int } @ { Collection }).combine
              (let sender_count =
              (route_to_int {key:5, value:Some ORDERS_ORDERKEY}).fold
                ((\count -> (\b3 -> bind b3 as {i:ip} in count + 1))) 0 in
              ((shuffle_QUERY3_mORDERS3_to_QUERY3_mCUSTOMER2_bind_0t0
                  {ra:Some ORDERS_ORDERKEY, rb:Some ORDERS_ORDERDATE,
                  rc:Some ORDERS_SHIPPRIORITY, rd:Some ORDERS_CUSTKEY,
                  re:empty { ra:{ key:int, value:int }, rb:int, rc:real
                  } @ { Collection }, rf:true}).fold ((\_accmap -> (\b3 ->
                bind b3 as {key:ip, value:tuples} in 
                (_accmap.insert {ra:ip, rb:14, rc:sender_count};_accmap))))
                empty { ra:address, rb:int, rc:int } @ { Collection }).combine
                (let sender_count =
                (route_to_int {key:6, value:Some ORDERS_ORDERKEY}).fold
                  ((\count -> (\b3 -> bind b3 as {i:ip} in count + 1))) 0 in
                (shuffle_QUERY3_mORDERS6_to_QUERY3_mCUSTOMER4_bind_0t0
                   {ra:Some ORDERS_ORDERKEY, rb:Some ORDERS_ORDERDATE,
                   rc:Some ORDERS_SHIPPRIORITY, rd:Some ORDERS_CUSTKEY,
                   re:empty { ra:{ key:int, value:int }, rb:int, rc:real
                   } @ { Collection }, rf:true}).fold ((\_accmap -> (\b3 ->
                  bind b3 as {key:ip, value:tuples} in 
                  (_accmap.insert {ra:ip, rb:15, rc:sender_count};_accmap))))
                  empty { ra:address, rb:int, rc:int } @ { Collection }))))))).groupBy
      ((\b1 -> bind b1 as {ra:ip, rb:stmt_id, rc:count} in {key:ip,
      value:stmt_id})) ((\acc -> (\b3 -> bind b3 as {ra:ip, rb:stmt_id,
      rc:count} in acc + count))) 0).groupBy ((\b1 -> bind b1 as {key:b2,
      value:count} in bind b2 as {key:ip, value:stmt_id} in ip)) ((\acc ->
      (\b3 -> bind b3 as {key:ip_and_stmt_id, value:count} in bind
      ip_and_stmt_id as {key:ip, value:stmt_id} in
      acc.combine ({| key:int, value:int | {key:stmt_id,
        value:count}|} @ { Collection })))) empty { key:int, value:int
      } @ { Collection }).iterate ((\b1 -> bind b1 as {key:addr,
      value:stmt_cnt_list} in 
      ((nd_delete_ORDERS_rcv_put, addr)<- {ra:me, rb:stmt_cnt_list, rc:vid,
       rd:ORDERS_ORDERKEY, re:ORDERS_CUSTKEY, rf:ORDERS_ORDERSTATUS,
       rg:ORDERS_TOTALPRICE, rh:ORDERS_ORDERDATE, ri:ORDERS_ORDERPRIORITY,
       rj:ORDERS_CLERK, rk:ORDERS_SHIPPRIORITY, rl:ORDERS_COMMENT};
       (sw_num_sent = sw_num_sent + 1;
        (case ((sw_ack_log.filter ((\b1 -> bind b1 as {key:key,
        value:value} in key == vid))).peek ()) of
        {Some x -> sw_ack_log.update x {key:vid, value:x.value + 1}}{None ->
                                                                    sw_ack_log.insert
                                                                    {key:vid,
                                                                    value:1}})))));
      ((((route_to_int {key:6, value:Some ORDERS_ORDERKEY}).fold ((\_accmap ->
      (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {ra:15, rb:6, rc:ip};_accmap)))) empty { ra:int, rb:int,
      rc:address } @ { Collection }).combine
      (((route_to_int {key:5, value:Some ORDERS_ORDERKEY}).fold ((\_accmap ->
      (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {ra:14, rb:5, rc:ip};_accmap)))) empty { ra:int, rb:int,
      rc:address } @ { Collection }).combine
      (((route_to_int {key:4, value:Some ORDERS_CUSTKEY}).fold ((\_accmap ->
      (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {ra:12, rb:4, rc:ip};_accmap)))) empty { ra:int, rb:int,
      rc:address } @ { Collection }).combine
      (((route_to_int {key:6, value:Some ORDERS_ORDERKEY}).fold ((\_accmap ->
      (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {ra:11, rb:6, rc:ip};_accmap)))) empty { ra:int, rb:int,
      rc:address } @ { Collection }).combine
      (((route_to_int {key:5, value:Some ORDERS_ORDERKEY}).fold ((\_accmap ->
      (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {ra:11, rb:5, rc:ip};_accmap)))) empty { ra:int, rb:int,
      rc:address } @ { Collection }).combine
      (((route_to_int {key:4, value:Some ORDERS_CUSTKEY}).fold ((\_accmap ->
      (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {ra:11, rb:4, rc:ip};_accmap)))) empty { ra:int, rb:int,
      rc:address } @ { Collection }).combine empty { ra:int, rb:int, rc:address
      } @ { Collection })))))).groupBy ((\b1 -> bind b1 as {ra:stmt_id,
      rb:map_id, rc:ip} in ip)) ((\acc -> (\b3 -> bind b3 as {ra:stmt_id,
      rb:map_id, rc:ip} in (acc.insert {key:stmt_id, value:map_id};acc))))
      empty { key:int, value:int } @ { Collection }).iterate ((\b1 ->
      bind b1 as {key:ip, value:stmt_map_ids} in 
      (nd_delete_ORDERS_rcv_fetch, ip)<- {ra:stmt_map_ids, rb:vid,
      rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
      rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
      ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT}))))}
  {None ->
    error (print "unexpected missing arguments in sw_buf_delete_ORDERS")})


declare nd_delete_ORDERS_do_complete_s11 : { ra:{ key:int, value:int }, rb:int,
  rc:int, rd:string, re:real, rf:int, rg:string, rh:string, ri:int, rj:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
  rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
  rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
  rj:ORDERS_COMMENT} in let __prod_ret__17 =
  ((if ORDERS_ORDERDATE < 19950315 then 1 else 0) * let wrapped_lookup_value =
    bind map_QUERY3_mORDERS1_s11_buf as ind __x in
      (frontier_int_int {key:vid, value:__x.filter ((\b1 -> bind b1 as {ra:ra,
         rb:rb, rc:rc} in rb == ORDERS_CUSTKEY))}).fold ((\acc -> (\b3 ->
        bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
        (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
        value:int } @ { Collection } in
    case (wrapped_lookup_value.peek ()) of
      {Some unwrapped_value -> bind unwrapped_value as
        {key:_, value:projected_field} in projected_field}{None -> 0}) * ((let
    wrapped_lookup_value =
    bind map_QUERY3_mORDERS3_s11_buf as ind __x in
      (frontier_int_float {key:vid, value:__x.filter ((\b1 ->
         bind b1 as {ra:ra, rb:rb, rc:rc} in rb == ORDERS_ORDERKEY))}).fold
        ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
        (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
        value:real } @ { Collection } in
    case (wrapped_lookup_value.peek ()) of
      {Some unwrapped_value -> bind unwrapped_value as
        {key:_, value:projected_field} in projected_field}{None -> 0}) + ((let
    wrapped_lookup_value =
    bind map_QUERY3_mORDERS6_s11_buf as ind __x in
      (frontier_int_float {key:vid, value:__x.filter ((\b1 ->
         bind b1 as {ra:ra, rb:rb, rc:rc} in rb == ORDERS_ORDERKEY))}).fold
        ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
        (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
        value:real } @ { Collection } in
    case (wrapped_lookup_value.peek ()) of
      {Some unwrapped_value -> bind unwrapped_value as
        {key:_, value:projected_field} in projected_field}{None -> 0}) * -1))
  in
  ((nd_add_delta_to_int_date_int_float {ra:QUERY3, rb:false, rc:vid, rd:{|
      ra:int, rb:int, rc:int, rd:real | {ra:ORDERS_ORDERKEY,
      rb:ORDERS_ORDERDATE, rc:ORDERS_SHIPPRIORITY,
      rd:__prod_ret__17}|} @ { Collection }});
   (nd_complete_stmt_cntr_check {key:vid, value:11})))


declare nd_delete_ORDERS_do_complete_s12 : { ra:{ key:int, value:int }, rb:int,
  rc:int, rd:string, re:real, rf:int, rg:string, rh:string, ri:int, rj:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
  rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
  rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
  rj:ORDERS_COMMENT} in let __prod_ret__19 =
  ((let wrapped_lookup_value =
    bind map_QUERY3_mORDERS1_s12_buf as ind __x in
      (frontier_int_int {key:vid, value:__x.filter ((\b1 -> bind b1 as {ra:ra,
         rb:rb, rc:rc} in rb == ORDERS_CUSTKEY))}).fold ((\acc -> (\b3 ->
        bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
        (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
        value:int } @ { Collection } in
    case (wrapped_lookup_value.peek ()) of
      {Some unwrapped_value -> bind unwrapped_value as
        {key:_, value:projected_field} in projected_field}{None -> 0}) *
    if ORDERS_ORDERDATE < 19950315 then 1 else 0) * -1 in
  ((nd_add_delta_to_int_date_int_int {ra:QUERY3_mLINEITEM1, rb:false, rc:vid,
      rd:{| ra:int, rb:int, rc:int, rd:int | {ra:ORDERS_ORDERKEY,
      rb:ORDERS_ORDERDATE, rc:ORDERS_SHIPPRIORITY,
      rd:__prod_ret__19}|} @ { Collection }});
   let sent_msgs =
   nd_QUERY3_mLINEITEM1_send_correctives {ra:me, rb:12, rc:vid, rd:1, re:vid,
     rf:{| ra:int, rb:int, rc:int, rd:int | {ra:ORDERS_ORDERKEY,
     rb:ORDERS_ORDERDATE, rc:ORDERS_SHIPPRIORITY,
     rd:__prod_ret__19}|} @ { Collection }} in
   if sent_msgs == 0 then nd_complete_stmt_cntr_check {key:vid, value:12}
     else
       nd_update_stmt_cntr_corr_map {ra:vid, rb:12, rc:1, rd:sent_msgs,
         re:true, rf:false}))


declare nd_delete_ORDERS_do_complete_s14 : { ra:{ key:int, value:int }, rb:int,
  rc:int, rd:string, re:real, rf:int, rg:string, rh:string, ri:int, rj:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
  rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
  rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
  rj:ORDERS_COMMENT} in let __prod_ret__22 =
  ((if ORDERS_ORDERDATE < 19950315 then 1 else 0) * let wrapped_lookup_value =
    bind map_QUERY3_mORDERS3_s14_buf as ind __x in
      (frontier_int_float {key:vid, value:__x.filter ((\b1 ->
         bind b1 as {ra:ra, rb:rb, rc:rc} in rb == ORDERS_ORDERKEY))}).fold
        ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
        (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
        value:real } @ { Collection } in
    case (wrapped_lookup_value.peek ()) of
      {Some unwrapped_value -> bind unwrapped_value as
        {key:_, value:projected_field} in projected_field}{None -> 0}) * -1 in
  ((nd_add_delta_to_int_date_int_int_float {ra:QUERY3_mCUSTOMER2, rb:false,
      rc:vid, rd:{| ra:int, rb:int, rc:int, rd:int, re:real |
      {ra:ORDERS_ORDERKEY, rb:ORDERS_ORDERDATE, rc:ORDERS_SHIPPRIORITY,
      rd:ORDERS_CUSTKEY, re:__prod_ret__22}|} @ { Collection }});
   let sent_msgs =
   nd_QUERY3_mCUSTOMER2_send_correctives {ra:me, rb:14, rc:vid, rd:1, re:vid,
     rf:{| ra:int, rb:int, rc:int, rd:int, re:real | {ra:ORDERS_ORDERKEY,
     rb:ORDERS_ORDERDATE, rc:ORDERS_SHIPPRIORITY, rd:ORDERS_CUSTKEY,
     re:__prod_ret__22}|} @ { Collection }} in
   if sent_msgs == 0 then nd_complete_stmt_cntr_check {key:vid, value:14}
     else
       nd_update_stmt_cntr_corr_map {ra:vid, rb:14, rc:1, rd:sent_msgs,
         re:true, rf:false}))


declare nd_delete_ORDERS_do_complete_s15 : { ra:{ key:int, value:int }, rb:int,
  rc:int, rd:string, re:real, rf:int, rg:string, rh:string, ri:int, rj:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
  rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
  rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
  rj:ORDERS_COMMENT} in let __prod_ret__24 =
  ((if ORDERS_ORDERDATE < 19950315 then 1 else 0) * let wrapped_lookup_value =
    bind map_QUERY3_mORDERS6_s15_buf as ind __x in
      (frontier_int_float {key:vid, value:__x.filter ((\b1 ->
         bind b1 as {ra:ra, rb:rb, rc:rc} in rb == ORDERS_ORDERKEY))}).fold
        ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
        (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
        value:real } @ { Collection } in
    case (wrapped_lookup_value.peek ()) of
      {Some unwrapped_value -> bind unwrapped_value as
        {key:_, value:projected_field} in projected_field}{None -> 0}) * -1 in
  ((nd_add_delta_to_int_date_int_int_float {ra:QUERY3_mCUSTOMER4, rb:false,
      rc:vid, rd:{| ra:int, rb:int, rc:int, rd:int, re:real |
      {ra:ORDERS_ORDERKEY, rb:ORDERS_ORDERDATE, rc:ORDERS_SHIPPRIORITY,
      rd:ORDERS_CUSTKEY, re:__prod_ret__24}|} @ { Collection }});
   let sent_msgs =
   nd_QUERY3_mCUSTOMER4_send_correctives {ra:me, rb:15, rc:vid, rd:1, re:vid,
     rf:{| ra:int, rb:int, rc:int, rd:int, re:real | {ra:ORDERS_ORDERKEY,
     rb:ORDERS_ORDERDATE, rc:ORDERS_SHIPPRIORITY, rd:ORDERS_CUSTKEY,
     re:__prod_ret__24}|} @ { Collection }} in
   if sent_msgs == 0 then nd_complete_stmt_cntr_check {key:vid, value:15}
     else
       nd_update_stmt_cntr_corr_map {ra:vid, rb:15, rc:1, rd:sent_msgs,
         re:true, rf:false}))


declare nd_delete_ORDERS_do_complete_s13 : { ra:{ key:int, value:int }, rb:int,
  rc:int, rd:string, re:real, rf:int, rg:string, rh:string, ri:int, rj:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
  rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
  rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
  rj:ORDERS_COMMENT} in let __prod_ret__20 =
  (if ORDERS_ORDERDATE < 19950315 then 1 else 0) * -1 in
  ((nd_add_delta_to_int_date_int_int_int {ra:QUERY3_mLINEITEM1_mCUSTOMER2,
      rb:false, rc:vid, rd:{| ra:int, rb:int, rc:int, rd:int, re:int |
      {ra:ORDERS_ORDERKEY, rb:ORDERS_ORDERDATE, rc:ORDERS_SHIPPRIORITY,
      rd:ORDERS_CUSTKEY, re:__prod_ret__20}|} @ { Collection }});
   let sent_msgs =
   nd_QUERY3_mLINEITEM1_mCUSTOMER2_send_correctives {ra:me, rb:13, rc:vid,
     rd:1, re:vid, rf:{| ra:int, rb:int, rc:int, rd:int, re:int |
     {ra:ORDERS_ORDERKEY, rb:ORDERS_ORDERDATE, rc:ORDERS_SHIPPRIORITY,
     rd:ORDERS_CUSTKEY, re:__prod_ret__20}|} @ { Collection }} in
   if sent_msgs == 0 then ()
     else
       nd_update_stmt_cntr_corr_map {ra:vid, rb:13, rc:1, rd:sent_msgs,
         re:true, rf:true}))


declare delete_ORDERS_do_corrective_s11_m_QUERY3_mORDERS1 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:int,
  rg:int, rh:string, ri:real, rj:int, rk:string, rl:string, rm:int, rn:string,
  ro:collection { key:int, value:int } @ { Collection } } -> int = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid,
  rf:ORDERS_ORDERKEY, rg:ORDERS_CUSTKEY, rh:ORDERS_ORDERSTATUS,
  ri:ORDERS_TOTALPRICE, rj:ORDERS_ORDERDATE, rk:ORDERS_ORDERPRIORITY,
  rl:ORDERS_CLERK, rm:ORDERS_SHIPPRIORITY, rn:ORDERS_COMMENT,
  ro:delta_tuples} in let new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 ->
    bind b3 as {key:delta_QUERY3_mORDERSORDERS_CUSTKEY,
    value:delta_QUERY3_mORDERS1} in _accext.combine (let __prod_ret__130 =
    (((if ORDERS_CUSTKEY == delta_QUERY3_mORDERSORDERS_CUSTKEY then 1 
      else 0) * if ORDERS_ORDERDATE < 19950315 then 1 else 0) * ((let
      wrapped_lookup_value =
      bind map_QUERY3_mORDERS3_s11_buf as ind __x in
        (frontier_int_float {key:vid, value:__x.filter ((\b1 ->
           bind b1 as {ra:ra, rb:rb, rc:rc} in rb == ORDERS_ORDERKEY))}).fold
          ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
          (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
          value:real } @ { Collection } in
      case (wrapped_lookup_value.peek ()) of
        {Some unwrapped_value -> bind unwrapped_value as
          {key:_, value:projected_field} in projected_field}{None -> 0}) +
      ((let wrapped_lookup_value =
      bind map_QUERY3_mORDERS6_s11_buf as ind __x in
        (frontier_int_float {key:vid, value:__x.filter ((\b1 ->
           bind b1 as {ra:ra, rb:rb, rc:rc} in rb == ORDERS_ORDERKEY))}).fold
          ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
          (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
          value:real } @ { Collection } in
      case (wrapped_lookup_value.peek ()) of
        {Some unwrapped_value -> bind unwrapped_value as
          {key:_, value:projected_field} in projected_field}{None -> 0}) *
      -1))) * delta_QUERY3_mORDERS1 in
    {| ra:int, rb:int, rc:int, rd:real | {ra:ORDERS_ORDERKEY,
      rb:ORDERS_ORDERDATE, rc:ORDERS_SHIPPRIORITY,
      rd:__prod_ret__130}|} @ { Collection })))) empty { ra:int, rb:int,
    rc:int, rd:real } @ { Collection }).filter ((\b1 -> bind b1 as {ra:map_0,
    rb:map_1, rc:map_2, rd:map_val} in 0 != map_val)) in
  ((nd_add_delta_to_int_date_int_float {ra:QUERY3, rb:true, rc:vid,
      rd:new_tuples});
   0))


declare delete_ORDERS_do_corrective_s11_m_QUERY3_mORDERS3 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:int,
  rg:int, rh:string, ri:real, rj:int, rk:string, rl:string, rm:int, rn:string,
  ro:collection { key:int, value:real } @ { Collection } } -> int = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid,
  rf:ORDERS_ORDERKEY, rg:ORDERS_CUSTKEY, rh:ORDERS_ORDERSTATUS,
  ri:ORDERS_TOTALPRICE, rj:ORDERS_ORDERDATE, rk:ORDERS_ORDERPRIORITY,
  rl:ORDERS_CLERK, rm:ORDERS_SHIPPRIORITY, rn:ORDERS_COMMENT,
  ro:delta_tuples} in let new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 ->
    bind b3 as {key:delta_QUERY3_mORDERSORDERS_ORDERKEY,
    value:delta_QUERY3_mORDERS3} in _accext.combine (let __prod_ret__143 =
    (((if ORDERS_ORDERKEY == delta_QUERY3_mORDERSORDERS_ORDERKEY then 1 
      else 0) * if ORDERS_ORDERDATE < 19950315 then 1 else 0) * let
      wrapped_lookup_value =
      bind map_QUERY3_mORDERS1_s11_buf as ind __x in
        (frontier_int_int {key:vid, value:__x.filter ((\b1 ->
           bind b1 as {ra:ra, rb:rb, rc:rc} in rb == ORDERS_CUSTKEY))}).fold
          ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
          (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
          value:int } @ { Collection } in
      case (wrapped_lookup_value.peek ()) of
        {Some unwrapped_value -> bind unwrapped_value as
          {key:_, value:projected_field} in projected_field}{None -> 0}) *
      delta_QUERY3_mORDERS3 in
    {| ra:int, rb:int, rc:int, rd:real | {ra:ORDERS_ORDERKEY,
      rb:ORDERS_ORDERDATE, rc:ORDERS_SHIPPRIORITY,
      rd:__prod_ret__143}|} @ { Collection })))) empty { ra:int, rb:int,
    rc:int, rd:real } @ { Collection }).filter ((\b1 -> bind b1 as {ra:map_0,
    rb:map_1, rc:map_2, rd:map_val} in 0 != map_val)) in
  ((nd_add_delta_to_int_date_int_float {ra:QUERY3, rb:true, rc:vid,
      rd:new_tuples});
   0))


declare delete_ORDERS_do_corrective_s11_m_QUERY3_mORDERS6 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:int,
  rg:int, rh:string, ri:real, rj:int, rk:string, rl:string, rm:int, rn:string,
  ro:collection { key:int, value:real } @ { Collection } } -> int = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid,
  rf:ORDERS_ORDERKEY, rg:ORDERS_CUSTKEY, rh:ORDERS_ORDERSTATUS,
  ri:ORDERS_TOTALPRICE, rj:ORDERS_ORDERDATE, rk:ORDERS_ORDERPRIORITY,
  rl:ORDERS_CLERK, rm:ORDERS_SHIPPRIORITY, rn:ORDERS_COMMENT,
  ro:delta_tuples} in let new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 ->
    bind b3 as {key:delta_QUERY3_mORDERSORDERS_ORDERKEY,
    value:delta_QUERY3_mORDERS6} in _accext.combine (let __prod_ret__156 =
    (((if ORDERS_ORDERKEY == delta_QUERY3_mORDERSORDERS_ORDERKEY then 1 
      else 0) * if ORDERS_ORDERDATE < 19950315 then 1 else 0) * let
      wrapped_lookup_value =
      bind map_QUERY3_mORDERS1_s11_buf as ind __x in
        (frontier_int_int {key:vid, value:__x.filter ((\b1 ->
           bind b1 as {ra:ra, rb:rb, rc:rc} in rb == ORDERS_CUSTKEY))}).fold
          ((\acc -> (\b3 -> bind b3 as {ra:vid, rb:map_0, rc:map_val} in 
          (acc.insert {key:map_0, value:map_val};acc)))) empty { key:int,
          value:int } @ { Collection } in
      case (wrapped_lookup_value.peek ()) of
        {Some unwrapped_value -> bind unwrapped_value as
          {key:_, value:projected_field} in projected_field}{None -> 0}) *
      -delta_QUERY3_mORDERS6 in
    {| ra:int, rb:int, rc:int, rd:real | {ra:ORDERS_ORDERKEY,
      rb:ORDERS_ORDERDATE, rc:ORDERS_SHIPPRIORITY,
      rd:__prod_ret__156}|} @ { Collection })))) empty { ra:int, rb:int,
    rc:int, rd:real } @ { Collection }).filter ((\b1 -> bind b1 as {ra:map_0,
    rb:map_1, rc:map_2, rd:map_val} in 0 != map_val)) in
  ((nd_add_delta_to_int_date_int_float {ra:QUERY3, rb:true, rc:vid,
      rd:new_tuples});
   0))


declare delete_ORDERS_do_corrective_s12_m_QUERY3_mORDERS1 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:int,
  rg:int, rh:string, ri:real, rj:int, rk:string, rl:string, rm:int, rn:string,
  ro:collection { key:int, value:int } @ { Collection } } -> int = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid,
  rf:ORDERS_ORDERKEY, rg:ORDERS_CUSTKEY, rh:ORDERS_ORDERSTATUS,
  ri:ORDERS_TOTALPRICE, rj:ORDERS_ORDERDATE, rk:ORDERS_ORDERPRIORITY,
  rl:ORDERS_CLERK, rm:ORDERS_SHIPPRIORITY, rn:ORDERS_COMMENT,
  ro:delta_tuples} in let new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 ->
    bind b3 as {key:delta_QUERY3_mORDERSORDERS_CUSTKEY,
    value:delta_QUERY3_mORDERS1} in _accext.combine (let __prod_ret__133 =
    ((if ORDERS_CUSTKEY == delta_QUERY3_mORDERSORDERS_CUSTKEY then 1 
      else 0) * if ORDERS_ORDERDATE < 19950315 then 1 else 0) *
      -delta_QUERY3_mORDERS1 in
    {| ra:int, rb:int, rc:int, rd:int | {ra:ORDERS_ORDERKEY,
      rb:ORDERS_ORDERDATE, rc:ORDERS_SHIPPRIORITY,
      rd:__prod_ret__133}|} @ { Collection })))) empty { ra:int, rb:int,
    rc:int, rd:int } @ { Collection }).filter ((\b1 -> bind b1 as {ra:map_0,
    rb:map_1, rc:map_2, rd:map_val} in 0 != map_val)) in
  ((nd_add_delta_to_int_date_int_int {ra:QUERY3_mLINEITEM1, rb:true, rc:vid,
      rd:new_tuples});
   (nd_QUERY3_mLINEITEM1_send_correctives {ra:orig_addr, rb:orig_stmt_id,
      rc:orig_vid, rd:1 + hop, re:vid, rf:new_tuples})))


declare delete_ORDERS_do_corrective_s14_m_QUERY3_mORDERS3 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:int,
  rg:int, rh:string, ri:real, rj:int, rk:string, rl:string, rm:int, rn:string,
  ro:collection { key:int, value:real } @ { Collection } } -> int = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid,
  rf:ORDERS_ORDERKEY, rg:ORDERS_CUSTKEY, rh:ORDERS_ORDERSTATUS,
  ri:ORDERS_TOTALPRICE, rj:ORDERS_ORDERDATE, rk:ORDERS_ORDERPRIORITY,
  rl:ORDERS_CLERK, rm:ORDERS_SHIPPRIORITY, rn:ORDERS_COMMENT,
  ro:delta_tuples} in let new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 ->
    bind b3 as {key:delta_QUERY3_mORDERSORDERS_ORDERKEY,
    value:delta_QUERY3_mORDERS3} in _accext.combine (let __prod_ret__146 =
    ((if ORDERS_ORDERKEY == delta_QUERY3_mORDERSORDERS_ORDERKEY then 1 
      else 0) * if ORDERS_ORDERDATE < 19950315 then 1 else 0) *
      -delta_QUERY3_mORDERS3 in
    {| ra:int, rb:int, rc:int, rd:int, re:real | {ra:ORDERS_ORDERKEY,
      rb:ORDERS_ORDERDATE, rc:ORDERS_SHIPPRIORITY, rd:ORDERS_CUSTKEY,
      re:__prod_ret__146}|} @ { Collection })))) empty { ra:int, rb:int,
    rc:int, rd:int, re:real } @ { Collection }).filter ((\b1 ->
    bind b1 as {ra:map_0, rb:map_1, rc:map_2, rd:map_3, re:map_val} in 0 !=
    map_val)) in
  ((nd_add_delta_to_int_date_int_int_float {ra:QUERY3_mCUSTOMER2, rb:true,
      rc:vid, rd:new_tuples});
   (nd_QUERY3_mCUSTOMER2_send_correctives {ra:orig_addr, rb:orig_stmt_id,
      rc:orig_vid, rd:1 + hop, re:vid, rf:new_tuples})))


declare delete_ORDERS_do_corrective_s15_m_QUERY3_mORDERS6 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:int,
  rg:int, rh:string, ri:real, rj:int, rk:string, rl:string, rm:int, rn:string,
  ro:collection { key:int, value:real } @ { Collection } } -> int = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid,
  rf:ORDERS_ORDERKEY, rg:ORDERS_CUSTKEY, rh:ORDERS_ORDERSTATUS,
  ri:ORDERS_TOTALPRICE, rj:ORDERS_ORDERDATE, rk:ORDERS_ORDERPRIORITY,
  rl:ORDERS_CLERK, rm:ORDERS_SHIPPRIORITY, rn:ORDERS_COMMENT,
  ro:delta_tuples} in let new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 ->
    bind b3 as {key:delta_QUERY3_mORDERSORDERS_ORDERKEY,
    value:delta_QUERY3_mORDERS6} in _accext.combine (let __prod_ret__159 =
    ((if ORDERS_ORDERKEY == delta_QUERY3_mORDERSORDERS_ORDERKEY then 1 
      else 0) * if ORDERS_ORDERDATE < 19950315 then 1 else 0) *
      -delta_QUERY3_mORDERS6 in
    {| ra:int, rb:int, rc:int, rd:int, re:real | {ra:ORDERS_ORDERKEY,
      rb:ORDERS_ORDERDATE, rc:ORDERS_SHIPPRIORITY, rd:ORDERS_CUSTKEY,
      re:__prod_ret__159}|} @ { Collection })))) empty { ra:int, rb:int,
    rc:int, rd:int, re:real } @ { Collection }).filter ((\b1 ->
    bind b1 as {ra:map_0, rb:map_1, rc:map_2, rd:map_3, re:map_val} in 0 !=
    map_val)) in
  ((nd_add_delta_to_int_date_int_int_float {ra:QUERY3_mCUSTOMER4, rb:true,
      rc:vid, rd:new_tuples});
   (nd_QUERY3_mCUSTOMER4_send_correctives {ra:orig_addr, rb:orig_stmt_id,
      rc:orig_vid, rd:1 + hop, re:vid, rf:new_tuples})))


declare sw_insert_LINEITEM : { ra:int, rb:int, rc:int, rd:int, re:real,
  rf:real, rg:real, rh:real, ri:string, rj:string, rk:int, rl:int, rm:int,
  rn:string, ro:string, rp:string } -> () = (\args ->
  (sw_buf_insert_LINEITEM.insert args;
   sw_trig_buf_idx.insert {i:4};
   sw_need_vid_cntr = sw_need_vid_cntr + 1))


declare sw_insert_LINEITEM_send_fetch : { key:int, value:int } -> () = (\vid ->
  case (sw_buf_insert_LINEITEM.peek ()) of
  {Some args ->
    (sw_buf_insert_LINEITEM.erase args;
     bind args as
     {ra:LINEITEM_ORDERKEY, rb:LINEITEM_PARTKEY, rc:LINEITEM_SUPPKEY, rd:LINEITEM_LINENUMBER, re:LINEITEM_QUANTITY, rf:LINEITEM_EXTENDEDPRICE, rg:LINEITEM_DISCOUNT, rh:LINEITEM_TAX, ri:LINEITEM_RETURNFLAG, rj:LINEITEM_LINESTATUS, rk:LINEITEM_SHIPDATE, rl:LINEITEM_COMMITDATE, rm:LINEITEM_RECEIPTDATE, rn:LINEITEM_SHIPINSTRUCT, ro:LINEITEM_SHIPMODE, rp:LINEITEM_COMMENT}
     in
     ((route_to_int {key:5, value:Some LINEITEM_ORDERKEY}).iterate ((\b1 ->
      bind b1 as {i:ip} in 
      (nd_insert_LINEITEM_do_complete_s17_trig, ip)<- {ra:vid,
      rb:LINEITEM_ORDERKEY, rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY,
      re:LINEITEM_LINENUMBER, rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE,
      rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG,
      rk:LINEITEM_LINESTATUS, rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE,
      rn:LINEITEM_RECEIPTDATE, ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE,
      rq:LINEITEM_COMMENT}));
      (route_to_int {key:6, value:Some LINEITEM_ORDERKEY}).iterate ((\b1 ->
      bind b1 as {i:ip} in 
      (nd_insert_LINEITEM_do_complete_s18_trig, ip)<- {ra:vid,
      rb:LINEITEM_ORDERKEY, rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY,
      re:LINEITEM_LINENUMBER, rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE,
      rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG,
      rk:LINEITEM_LINESTATUS, rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE,
      rn:LINEITEM_RECEIPTDATE, ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE,
      rq:LINEITEM_COMMENT}));
      ((((empty { ra:address, rb:int, rc:int } @ { Collection }).combine (let
      sender_count =
      (route_to_int_date_int {ra:2, rb:Some LINEITEM_ORDERKEY, rc:None immut,
         rd:None immut}).fold ((\count -> (\b3 -> bind b3 as {i:ip} in count +
        1))) 0 in
      ((shuffle_QUERY3_mLINEITEM1_to_QUERY3_bind_0t0_1t1_2t2
          {ra:Some LINEITEM_ORDERKEY, rb:None immut, rc:None immut, rd:empty {
          ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int
          } @ { Collection }, re:true}).fold ((\_accmap -> (\b3 ->
        bind b3 as {key:ip, value:tuples} in 
        (_accmap.insert {ra:ip, rb:16, rc:sender_count};_accmap)))) empty {
        ra:address, rb:int, rc:int } @ { Collection }).combine (let
        sender_count =
        (route_to_int_date_int_int {ra:3, rb:Some LINEITEM_ORDERKEY,
           rc:None immut, rd:None immut, re:None immut}).fold ((\count ->
          (\b3 -> bind b3 as {i:ip} in count + 1))) 0 in
        ((shuffle_QUERY3_mLINEITEM1_mCUSTOMER2_to_QUERY3_mCUSTOMER2_bind_0t0_1t1_2t2_3t3
            {ra:Some LINEITEM_ORDERKEY, rb:None immut, rc:None immut,
            rd:None immut, re:empty { ra:{ key:int, value:int }, rb:int,
            rc:int, rd:int, re:int, rf:int } @ { Collection }, rf:true}).fold
          ((\_accmap -> (\b3 -> bind b3 as {key:ip, value:tuples} in 
          (_accmap.insert {ra:ip, rb:19, rc:sender_count};_accmap)))) empty {
          ra:address, rb:int, rc:int } @ { Collection }).combine (let
          sender_count =
          (route_to_int_date_int_int {ra:3, rb:Some LINEITEM_ORDERKEY,
             rc:None immut, rd:None immut, re:None immut}).fold ((\count ->
            (\b3 -> bind b3 as {i:ip} in count + 1))) 0 in
          (shuffle_QUERY3_mLINEITEM1_mCUSTOMER2_to_QUERY3_mCUSTOMER4_bind_0t0_1t1_2t2_3t3
             {ra:Some LINEITEM_ORDERKEY, rb:None immut, rc:None immut,
             rd:None immut, re:empty { ra:{ key:int, value:int }, rb:int,
             rc:int, rd:int, re:int, rf:int } @ { Collection }, rf:true}).fold
            ((\_accmap -> (\b3 -> bind b3 as {key:ip, value:tuples} in 
            (_accmap.insert {ra:ip, rb:20, rc:sender_count};_accmap)))) empty {
            ra:address, rb:int, rc:int } @ { Collection })))).groupBy ((\b1 ->
      bind b1 as {ra:ip, rb:stmt_id, rc:count} in {key:ip, value:stmt_id}))
      ((\acc -> (\b3 -> bind b3 as {ra:ip, rb:stmt_id, rc:count} in acc +
      count))) 0).groupBy ((\b1 -> bind b1 as {key:b2, value:count} in 
      bind b2 as {key:ip, value:stmt_id} in ip)) ((\acc -> (\b3 ->
      bind b3 as {key:ip_and_stmt_id, value:count} in bind ip_and_stmt_id as
      {key:ip, value:stmt_id} in
      acc.combine ({| key:int, value:int | {key:stmt_id,
        value:count}|} @ { Collection })))) empty { key:int, value:int
      } @ { Collection }).iterate ((\b1 -> bind b1 as {key:addr,
      value:stmt_cnt_list} in 
      ((nd_insert_LINEITEM_rcv_put, addr)<- {ra:me, rb:stmt_cnt_list, rc:vid,
       rd:LINEITEM_ORDERKEY, re:LINEITEM_PARTKEY, rf:LINEITEM_SUPPKEY,
       rg:LINEITEM_LINENUMBER, rh:LINEITEM_QUANTITY, ri:LINEITEM_EXTENDEDPRICE,
       rj:LINEITEM_DISCOUNT, rk:LINEITEM_TAX, rl:LINEITEM_RETURNFLAG,
       rm:LINEITEM_LINESTATUS, rn:LINEITEM_SHIPDATE, ro:LINEITEM_COMMITDATE,
       rp:LINEITEM_RECEIPTDATE, rq:LINEITEM_SHIPINSTRUCT, rr:LINEITEM_SHIPMODE,
       rs:LINEITEM_COMMENT};
       (sw_num_sent = sw_num_sent + 1;
        (case ((sw_ack_log.filter ((\b1 -> bind b1 as {key:key,
        value:value} in key == vid))).peek ()) of
        {Some x -> sw_ack_log.update x {key:vid, value:x.value + 1}}{None ->
                                                                    sw_ack_log.insert
                                                                    {key:vid,
                                                                    value:1}})))));
      ((((route_to_int_date_int_int {ra:3, rb:Some LINEITEM_ORDERKEY,
            rc:None immut, rd:None immut, re:None immut}).fold ((\_accmap ->
      (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {ra:20, rb:3, rc:ip};_accmap)))) empty { ra:int, rb:int,
      rc:address } @ { Collection }).combine
      (((route_to_int_date_int_int {ra:3, rb:Some LINEITEM_ORDERKEY,
           rc:None immut, rd:None immut, re:None immut}).fold ((\_accmap ->
      (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {ra:19, rb:3, rc:ip};_accmap)))) empty { ra:int, rb:int,
      rc:address } @ { Collection }).combine
      (((route_to_int_date_int {ra:2, rb:Some LINEITEM_ORDERKEY, rc:None immut,
           rd:None immut}).fold ((\_accmap -> (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {ra:16, rb:2, rc:ip};_accmap)))) empty { ra:int, rb:int,
      rc:address } @ { Collection }).combine empty { ra:int, rb:int, rc:address
      } @ { Collection }))).groupBy ((\b1 -> bind b1 as {ra:stmt_id, rb:map_id,
      rc:ip} in ip)) ((\acc -> (\b3 -> bind b3 as {ra:stmt_id, rb:map_id,
      rc:ip} in (acc.insert {key:stmt_id, value:map_id};acc)))) empty {
      key:int, value:int } @ { Collection }).iterate ((\b1 ->
      bind b1 as {key:ip, value:stmt_map_ids} in 
      (nd_insert_LINEITEM_rcv_fetch, ip)<- {ra:stmt_map_ids, rb:vid,
      rc:LINEITEM_ORDERKEY, rd:LINEITEM_PARTKEY, re:LINEITEM_SUPPKEY,
      rf:LINEITEM_LINENUMBER, rg:LINEITEM_QUANTITY, rh:LINEITEM_EXTENDEDPRICE,
      ri:LINEITEM_DISCOUNT, rj:LINEITEM_TAX, rk:LINEITEM_RETURNFLAG,
      rl:LINEITEM_LINESTATUS, rm:LINEITEM_SHIPDATE, rn:LINEITEM_COMMITDATE,
      ro:LINEITEM_RECEIPTDATE, rp:LINEITEM_SHIPINSTRUCT, rq:LINEITEM_SHIPMODE,
      rr:LINEITEM_COMMENT}))))}{None ->
                                 error
                                   (print
                                      "unexpected missing arguments in sw_buf_insert_LINEITEM")})


declare nd_insert_LINEITEM_do_complete_s16 : { ra:{ key:int, value:int },
  rb:int, rc:int, rd:int, re:int, rf:real, rg:real, rh:real, ri:real,
  rj:string, rk:string, rl:int, rm:int, rn:int, ro:string, rp:string, rq:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:LINEITEM_ORDERKEY,
  rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
  rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
  ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
  rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
  ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT} in let
  delta_values =
  (((((bind map_QUERY3_mLINEITEM1_s16_buf as ind __x in
    (frontier_int_date_int_int {key:vid, value:__x.filter ((\b1 ->
       bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd, re:re} in rb ==
       LINEITEM_ORDERKEY))}).fold ((\acc -> (\b3 -> bind b3 as {ra:vid,
      rb:map_0, rc:map_1, rd:map_2, re:map_val} in 
      (acc.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_val};acc)))) empty {
      ra:int, rb:int, rc:int, rd:int } @ { Collection }).fold ((\_accmap ->
    (\b3 -> bind b3 as {ra:LINEITEM_ORDERKEY, rb:ORDERS_ORDERDATE,
    rc:ORDERS_SHIPPRIORITY, rd:__map_ret__19} in 
    (_accmap.insert {ra:ORDERS_ORDERDATE, rb:ORDERS_SHIPPRIORITY,
     rc:__map_ret__19};
     _accmap)))) empty { ra:int, rb:int, rc:int } @ { Collection }).fold
    ((\_accmap -> (\b3 -> bind b3 as {ra:ORDERS_ORDERDATE,
    rb:ORDERS_SHIPPRIORITY, rc:__map_ret__19} in 
    (_accmap.insert {ra:ORDERS_ORDERDATE, rb:ORDERS_SHIPPRIORITY,
     rc:__map_ret__19 * if 19950315 < LINEITEM_SHIPDATE then 1 else 0};
     _accmap)))) empty { ra:int, rb:int, rc:int } @ { Collection }).fold
    ((\_accmap -> (\b3 -> bind b3 as {ra:ORDERS_ORDERDATE,
    rb:ORDERS_SHIPPRIORITY, rc:__prod_ret__26} in 
    (_accmap.insert {ra:ORDERS_ORDERDATE, rb:ORDERS_SHIPPRIORITY,
     rc:__prod_ret__26 * (-LINEITEM_DISCOUNT + 1)};
     _accmap)))) empty { ra:int, rb:int, rc:real } @ { Collection }).fold
    ((\_accmap -> (\b3 -> bind b3 as {ra:ORDERS_ORDERDATE,
    rb:ORDERS_SHIPPRIORITY, rc:__prod_ret__27} in 
    (_accmap.insert {ra:ORDERS_ORDERDATE, rb:ORDERS_SHIPPRIORITY,
     rc:__prod_ret__27 * LINEITEM_EXTENDEDPRICE};
     _accmap)))) empty { ra:int, rb:int, rc:real } @ { Collection }).fold
    ((\_accmap -> (\b3 -> bind b3 as {ra:ORDERS_ORDERDATE,
    rb:ORDERS_SHIPPRIORITY, rc:__prod_ret__28} in 
    (_accmap.insert {ra:LINEITEM_ORDERKEY, rb:ORDERS_ORDERDATE,
     rc:ORDERS_SHIPPRIORITY, rd:__prod_ret__28};
     _accmap)))) empty { ra:int, rb:int, rc:int, rd:real } @ { Collection } in
  ((nd_add_delta_to_int_date_int_float {ra:QUERY3, rb:false, rc:vid,
      rd:delta_values});
   (nd_complete_stmt_cntr_check {key:vid, value:16})))


declare nd_insert_LINEITEM_do_complete_s19 : { ra:{ key:int, value:int },
  rb:int, rc:int, rd:int, re:int, rf:real, rg:real, rh:real, ri:real,
  rj:string, rk:string, rl:int, rm:int, rn:int, ro:string, rp:string, rq:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:LINEITEM_ORDERKEY,
  rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
  rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
  ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
  rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
  ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT} in let
  delta_values =
  (((((bind map_QUERY3_mLINEITEM1_mCUSTOMER2_s19_buf as ind __x in
    (frontier_int_date_int_int_int {key:vid, value:__x.filter ((\b1 ->
       bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd, re:re, rf:rf} in rb ==
       LINEITEM_ORDERKEY))}).fold ((\acc -> (\b3 -> bind b3 as {ra:vid,
      rb:map_0, rc:map_1, rd:map_2, re:map_3, rf:map_val} in 
      (acc.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_3, re:map_val};acc))))
      empty { ra:int, rb:int, rc:int, rd:int, re:int } @ { Collection }).fold
    ((\_accmap -> (\b3 -> bind b3 as {ra:LINEITEM_ORDERKEY,
    rb:ORDERS_ORDERDATE, rc:ORDERS_SHIPPRIORITY,
    rd:QUERY3_mCUSTOMERCUSTOMER_CUSTKEY, re:__map_ret__20} in 
    (_accmap.insert {ra:ORDERS_ORDERDATE, rb:ORDERS_SHIPPRIORITY,
     rc:QUERY3_mCUSTOMERCUSTOMER_CUSTKEY, rd:__map_ret__20};
     _accmap)))) empty { ra:int, rb:int, rc:int, rd:int
    } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:ORDERS_ORDERDATE, rb:ORDERS_SHIPPRIORITY,
    rc:QUERY3_mCUSTOMERCUSTOMER_CUSTKEY, rd:__map_ret__20} in 
    (_accmap.insert {ra:ORDERS_ORDERDATE, rb:ORDERS_SHIPPRIORITY,
     rc:QUERY3_mCUSTOMERCUSTOMER_CUSTKEY, rd:__map_ret__20 *
     if 19950315 < LINEITEM_SHIPDATE then 1 else 0};
     _accmap)))) empty { ra:int, rb:int, rc:int, rd:int
    } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:ORDERS_ORDERDATE, rb:ORDERS_SHIPPRIORITY,
    rc:QUERY3_mCUSTOMERCUSTOMER_CUSTKEY, rd:__prod_ret__32} in 
    (_accmap.insert {ra:ORDERS_ORDERDATE, rb:ORDERS_SHIPPRIORITY,
     rc:QUERY3_mCUSTOMERCUSTOMER_CUSTKEY, rd:__prod_ret__32 *
     LINEITEM_DISCOUNT};
     _accmap)))) empty { ra:int, rb:int, rc:int, rd:real
    } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:ORDERS_ORDERDATE, rb:ORDERS_SHIPPRIORITY,
    rc:QUERY3_mCUSTOMERCUSTOMER_CUSTKEY, rd:__prod_ret__33} in 
    (_accmap.insert {ra:ORDERS_ORDERDATE, rb:ORDERS_SHIPPRIORITY,
     rc:QUERY3_mCUSTOMERCUSTOMER_CUSTKEY, rd:__prod_ret__33 *
     LINEITEM_EXTENDEDPRICE};
     _accmap)))) empty { ra:int, rb:int, rc:int, rd:real
    } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:ORDERS_ORDERDATE, rb:ORDERS_SHIPPRIORITY,
    rc:QUERY3_mCUSTOMERCUSTOMER_CUSTKEY, rd:__prod_ret__34} in 
    (_accmap.insert {ra:LINEITEM_ORDERKEY, rb:ORDERS_ORDERDATE,
     rc:ORDERS_SHIPPRIORITY, rd:QUERY3_mCUSTOMERCUSTOMER_CUSTKEY,
     re:__prod_ret__34};
     _accmap)))) empty { ra:int, rb:int, rc:int, rd:int, re:real
    } @ { Collection } in
  ((nd_add_delta_to_int_date_int_int_float {ra:QUERY3_mCUSTOMER2, rb:false,
      rc:vid, rd:delta_values});
   let sent_msgs =
   nd_QUERY3_mCUSTOMER2_send_correctives {ra:me, rb:19, rc:vid, rd:1, re:vid,
     rf:delta_values} in
   if sent_msgs == 0 then nd_complete_stmt_cntr_check {key:vid, value:19}
     else
       nd_update_stmt_cntr_corr_map {ra:vid, rb:19, rc:1, rd:sent_msgs,
         re:true, rf:false}))


declare nd_insert_LINEITEM_do_complete_s20 : { ra:{ key:int, value:int },
  rb:int, rc:int, rd:int, re:int, rf:real, rg:real, rh:real, ri:real,
  rj:string, rk:string, rl:int, rm:int, rn:int, ro:string, rp:string, rq:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:LINEITEM_ORDERKEY,
  rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
  rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
  ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
  rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
  ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT} in let
  delta_values =
  ((((bind map_QUERY3_mLINEITEM1_mCUSTOMER2_s20_buf as ind __x in
    (frontier_int_date_int_int_int {key:vid, value:__x.filter ((\b1 ->
       bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd, re:re, rf:rf} in rb ==
       LINEITEM_ORDERKEY))}).fold ((\acc -> (\b3 -> bind b3 as {ra:vid,
      rb:map_0, rc:map_1, rd:map_2, re:map_3, rf:map_val} in 
      (acc.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_3, re:map_val};acc))))
      empty { ra:int, rb:int, rc:int, rd:int, re:int } @ { Collection }).fold
    ((\_accmap -> (\b3 -> bind b3 as {ra:LINEITEM_ORDERKEY,
    rb:ORDERS_ORDERDATE, rc:ORDERS_SHIPPRIORITY,
    rd:QUERY3_mCUSTOMERCUSTOMER_CUSTKEY, re:__map_ret__21} in 
    (_accmap.insert {ra:ORDERS_ORDERDATE, rb:ORDERS_SHIPPRIORITY,
     rc:QUERY3_mCUSTOMERCUSTOMER_CUSTKEY, rd:__map_ret__21};
     _accmap)))) empty { ra:int, rb:int, rc:int, rd:int
    } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:ORDERS_ORDERDATE, rb:ORDERS_SHIPPRIORITY,
    rc:QUERY3_mCUSTOMERCUSTOMER_CUSTKEY, rd:__map_ret__21} in 
    (_accmap.insert {ra:ORDERS_ORDERDATE, rb:ORDERS_SHIPPRIORITY,
     rc:QUERY3_mCUSTOMERCUSTOMER_CUSTKEY, rd:__map_ret__21 *
     if 19950315 < LINEITEM_SHIPDATE then 1 else 0};
     _accmap)))) empty { ra:int, rb:int, rc:int, rd:int
    } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:ORDERS_ORDERDATE, rb:ORDERS_SHIPPRIORITY,
    rc:QUERY3_mCUSTOMERCUSTOMER_CUSTKEY, rd:__prod_ret__35} in 
    (_accmap.insert {ra:ORDERS_ORDERDATE, rb:ORDERS_SHIPPRIORITY,
     rc:QUERY3_mCUSTOMERCUSTOMER_CUSTKEY, rd:__prod_ret__35 *
     LINEITEM_EXTENDEDPRICE};
     _accmap)))) empty { ra:int, rb:int, rc:int, rd:real
    } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:ORDERS_ORDERDATE, rb:ORDERS_SHIPPRIORITY,
    rc:QUERY3_mCUSTOMERCUSTOMER_CUSTKEY, rd:__prod_ret__36} in 
    (_accmap.insert {ra:LINEITEM_ORDERKEY, rb:ORDERS_ORDERDATE,
     rc:ORDERS_SHIPPRIORITY, rd:QUERY3_mCUSTOMERCUSTOMER_CUSTKEY,
     re:__prod_ret__36};
     _accmap)))) empty { ra:int, rb:int, rc:int, rd:int, re:real
    } @ { Collection } in
  ((nd_add_delta_to_int_date_int_int_float {ra:QUERY3_mCUSTOMER4, rb:false,
      rc:vid, rd:delta_values});
   let sent_msgs =
   nd_QUERY3_mCUSTOMER4_send_correctives {ra:me, rb:20, rc:vid, rd:1, re:vid,
     rf:delta_values} in
   if sent_msgs == 0 then nd_complete_stmt_cntr_check {key:vid, value:20}
     else
       nd_update_stmt_cntr_corr_map {ra:vid, rb:20, rc:1, rd:sent_msgs,
         re:true, rf:false}))


declare nd_insert_LINEITEM_do_complete_s17 : { ra:{ key:int, value:int },
  rb:int, rc:int, rd:int, re:int, rf:real, rg:real, rh:real, ri:real,
  rj:string, rk:string, rl:int, rm:int, rn:int, ro:string, rp:string, rq:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:LINEITEM_ORDERKEY,
  rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
  rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
  ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
  rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
  ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT} in let
  __prod_ret__30 =
  ((if 19950315 < LINEITEM_SHIPDATE then 1 else 0) * LINEITEM_DISCOUNT) *
    LINEITEM_EXTENDEDPRICE in
  ((nd_add_delta_to_int_float {ra:QUERY3_mORDERS3, rb:false, rc:vid, rd:{|
      key:int, value:real | {key:LINEITEM_ORDERKEY,
      value:__prod_ret__30}|} @ { Collection }});
   let sent_msgs =
   nd_QUERY3_mORDERS3_send_correctives {ra:me, rb:17, rc:vid, rd:1, re:vid,
     rf:{| key:int, value:real | {key:LINEITEM_ORDERKEY,
     value:__prod_ret__30}|} @ { Collection }} in
   if sent_msgs == 0 then ()
     else
       nd_update_stmt_cntr_corr_map {ra:vid, rb:17, rc:1, rd:sent_msgs,
         re:true, rf:true}))


declare nd_insert_LINEITEM_do_complete_s18 : { ra:{ key:int, value:int },
  rb:int, rc:int, rd:int, re:int, rf:real, rg:real, rh:real, ri:real,
  rj:string, rk:string, rl:int, rm:int, rn:int, ro:string, rp:string, rq:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:LINEITEM_ORDERKEY,
  rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
  rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
  ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
  rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
  ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT} in let
  __prod_ret__31 =
  (if 19950315 < LINEITEM_SHIPDATE then 1 else 0) * LINEITEM_EXTENDEDPRICE in
  ((nd_add_delta_to_int_float {ra:QUERY3_mORDERS6, rb:false, rc:vid, rd:{|
      key:int, value:real | {key:LINEITEM_ORDERKEY,
      value:__prod_ret__31}|} @ { Collection }});
   let sent_msgs =
   nd_QUERY3_mORDERS6_send_correctives {ra:me, rb:18, rc:vid, rd:1, re:vid,
     rf:{| key:int, value:real | {key:LINEITEM_ORDERKEY,
     value:__prod_ret__31}|} @ { Collection }} in
   if sent_msgs == 0 then ()
     else
       nd_update_stmt_cntr_corr_map {ra:vid, rb:18, rc:1, rd:sent_msgs,
         re:true, rf:true}))


declare insert_LINEITEM_do_corrective_s16_m_QUERY3_mLINEITEM1 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:int,
  rg:int, rh:int, ri:int, rj:real, rk:real, rl:real, rm:real, rn:string,
  ro:string, rp:int, rq:int, rr:int, rs:string, rt:string, ru:string,
  rv:collection { ra:int, rb:int, rc:int, rd:int } @ { Collection } } -> int =
  (\b1 -> bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
  re:vid, rf:LINEITEM_ORDERKEY, rg:LINEITEM_PARTKEY, rh:LINEITEM_SUPPKEY,
  ri:LINEITEM_LINENUMBER, rj:LINEITEM_QUANTITY, rk:LINEITEM_EXTENDEDPRICE,
  rl:LINEITEM_DISCOUNT, rm:LINEITEM_TAX, rn:LINEITEM_RETURNFLAG,
  ro:LINEITEM_LINESTATUS, rp:LINEITEM_SHIPDATE, rq:LINEITEM_COMMITDATE,
  rr:LINEITEM_RECEIPTDATE, rs:LINEITEM_SHIPINSTRUCT, rt:LINEITEM_SHIPMODE,
  ru:LINEITEM_COMMENT, rv:delta_tuples} in let new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 ->
    bind b3 as {ra:delta_QUERY3_mLINEITEMLINEITEM_ORDERKEY,
    rb:delta_ORDERS_ORDERDATE, rc:delta_ORDERS_SHIPPRIORITY,
    rd:delta_QUERY3_mLINEITEM1} in _accext.combine (let __prod_ret__56 =
    ((((if LINEITEM_ORDERKEY == delta_QUERY3_mLINEITEMLINEITEM_ORDERKEY 
      then 1 else 0) * if 19950315 < LINEITEM_SHIPDATE then 1 else 0) *
      (-LINEITEM_DISCOUNT + 1)) * delta_QUERY3_mLINEITEM1) *
      LINEITEM_EXTENDEDPRICE in
    {| ra:int, rb:int, rc:int, rd:real | {ra:LINEITEM_ORDERKEY,
      rb:delta_ORDERS_ORDERDATE, rc:delta_ORDERS_SHIPPRIORITY,
      rd:__prod_ret__56}|} @ { Collection })))) empty { ra:int, rb:int, rc:int,
    rd:real } @ { Collection }).filter ((\b1 -> bind b1 as {ra:map_0, rb:map_1,
    rc:map_2, rd:map_val} in 0 != map_val)) in
  ((nd_add_delta_to_int_date_int_float {ra:QUERY3, rb:true, rc:vid,
      rd:new_tuples});
   0))


declare insert_LINEITEM_do_corrective_s19_m_QUERY3_mLINEITEM1_mCUSTOMER2 : {
  ra:address, rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int,
  value:int }, rf:int, rg:int, rh:int, ri:int, rj:real, rk:real, rl:real,
  rm:real, rn:string, ro:string, rp:int, rq:int, rr:int, rs:string, rt:string,
  ru:string, rv:collection { ra:int, rb:int, rc:int, rd:int, re:int
  } @ { Collection } } -> int = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:LINEITEM_ORDERKEY,
  rg:LINEITEM_PARTKEY, rh:LINEITEM_SUPPKEY, ri:LINEITEM_LINENUMBER,
  rj:LINEITEM_QUANTITY, rk:LINEITEM_EXTENDEDPRICE, rl:LINEITEM_DISCOUNT,
  rm:LINEITEM_TAX, rn:LINEITEM_RETURNFLAG, ro:LINEITEM_LINESTATUS,
  rp:LINEITEM_SHIPDATE, rq:LINEITEM_COMMITDATE, rr:LINEITEM_RECEIPTDATE,
  rs:LINEITEM_SHIPINSTRUCT, rt:LINEITEM_SHIPMODE, ru:LINEITEM_COMMENT,
  rv:delta_tuples} in let new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 ->
    bind b3 as {ra:delta_QUERY3_mLINEITEMLINEITEM_ORDERKEY,
    rb:delta_ORDERS_ORDERDATE, rc:delta_ORDERS_SHIPPRIORITY,
    rd:delta_QUERY3_mLINEITEM1_mCUSTOMERCUSTOMER_CUSTKEY,
    re:delta_QUERY3_mLINEITEM1_mCUSTOMER2} in _accext.combine (let
    __prod_ret__60 =
    ((((if LINEITEM_ORDERKEY == delta_QUERY3_mLINEITEMLINEITEM_ORDERKEY 
      then 1 else 0) * if 19950315 < LINEITEM_SHIPDATE then 1 else 0) *
      delta_QUERY3_mLINEITEM1_mCUSTOMER2) * LINEITEM_DISCOUNT) *
      LINEITEM_EXTENDEDPRICE in
    {| ra:int, rb:int, rc:int, rd:int, re:real | {ra:LINEITEM_ORDERKEY,
      rb:delta_ORDERS_ORDERDATE, rc:delta_ORDERS_SHIPPRIORITY,
      rd:delta_QUERY3_mLINEITEM1_mCUSTOMERCUSTOMER_CUSTKEY,
      re:__prod_ret__60}|} @ { Collection })))) empty { ra:int, rb:int, rc:int,
    rd:int, re:real } @ { Collection }).filter ((\b1 -> bind b1 as {ra:map_0,
    rb:map_1, rc:map_2, rd:map_3, re:map_val} in 0 != map_val)) in
  ((nd_add_delta_to_int_date_int_int_float {ra:QUERY3_mCUSTOMER2, rb:true,
      rc:vid, rd:new_tuples});
   (nd_QUERY3_mCUSTOMER2_send_correctives {ra:orig_addr, rb:orig_stmt_id,
      rc:orig_vid, rd:1 + hop, re:vid, rf:new_tuples})))


declare insert_LINEITEM_do_corrective_s20_m_QUERY3_mLINEITEM1_mCUSTOMER2 : {
  ra:address, rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int,
  value:int }, rf:int, rg:int, rh:int, ri:int, rj:real, rk:real, rl:real,
  rm:real, rn:string, ro:string, rp:int, rq:int, rr:int, rs:string, rt:string,
  ru:string, rv:collection { ra:int, rb:int, rc:int, rd:int, re:int
  } @ { Collection } } -> int = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:LINEITEM_ORDERKEY,
  rg:LINEITEM_PARTKEY, rh:LINEITEM_SUPPKEY, ri:LINEITEM_LINENUMBER,
  rj:LINEITEM_QUANTITY, rk:LINEITEM_EXTENDEDPRICE, rl:LINEITEM_DISCOUNT,
  rm:LINEITEM_TAX, rn:LINEITEM_RETURNFLAG, ro:LINEITEM_LINESTATUS,
  rp:LINEITEM_SHIPDATE, rq:LINEITEM_COMMITDATE, rr:LINEITEM_RECEIPTDATE,
  rs:LINEITEM_SHIPINSTRUCT, rt:LINEITEM_SHIPMODE, ru:LINEITEM_COMMENT,
  rv:delta_tuples} in let new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 ->
    bind b3 as {ra:delta_QUERY3_mLINEITEMLINEITEM_ORDERKEY,
    rb:delta_ORDERS_ORDERDATE, rc:delta_ORDERS_SHIPPRIORITY,
    rd:delta_QUERY3_mLINEITEM1_mCUSTOMERCUSTOMER_CUSTKEY,
    re:delta_QUERY3_mLINEITEM1_mCUSTOMER2} in _accext.combine (let
    __prod_ret__63 =
    (((if LINEITEM_ORDERKEY == delta_QUERY3_mLINEITEMLINEITEM_ORDERKEY 
      then 1 else 0) * if 19950315 < LINEITEM_SHIPDATE then 1 else 0) *
      delta_QUERY3_mLINEITEM1_mCUSTOMER2) * LINEITEM_EXTENDEDPRICE in
    {| ra:int, rb:int, rc:int, rd:int, re:real | {ra:LINEITEM_ORDERKEY,
      rb:delta_ORDERS_ORDERDATE, rc:delta_ORDERS_SHIPPRIORITY,
      rd:delta_QUERY3_mLINEITEM1_mCUSTOMERCUSTOMER_CUSTKEY,
      re:__prod_ret__63}|} @ { Collection })))) empty { ra:int, rb:int, rc:int,
    rd:int, re:real } @ { Collection }).filter ((\b1 -> bind b1 as {ra:map_0,
    rb:map_1, rc:map_2, rd:map_3, re:map_val} in 0 != map_val)) in
  ((nd_add_delta_to_int_date_int_int_float {ra:QUERY3_mCUSTOMER4, rb:true,
      rc:vid, rd:new_tuples});
   (nd_QUERY3_mCUSTOMER4_send_correctives {ra:orig_addr, rb:orig_stmt_id,
      rc:orig_vid, rd:1 + hop, re:vid, rf:new_tuples})))


declare sw_delete_LINEITEM : { ra:int, rb:int, rc:int, rd:int, re:real,
  rf:real, rg:real, rh:real, ri:string, rj:string, rk:int, rl:int, rm:int,
  rn:string, ro:string, rp:string } -> () = (\args ->
  (sw_buf_delete_LINEITEM.insert args;
   sw_trig_buf_idx.insert {i:5};
   sw_need_vid_cntr = sw_need_vid_cntr + 1))


declare sw_delete_LINEITEM_send_fetch : { key:int, value:int } -> () = (\vid ->
  case (sw_buf_delete_LINEITEM.peek ()) of
  {Some args ->
    (sw_buf_delete_LINEITEM.erase args;
     bind args as
     {ra:LINEITEM_ORDERKEY, rb:LINEITEM_PARTKEY, rc:LINEITEM_SUPPKEY, rd:LINEITEM_LINENUMBER, re:LINEITEM_QUANTITY, rf:LINEITEM_EXTENDEDPRICE, rg:LINEITEM_DISCOUNT, rh:LINEITEM_TAX, ri:LINEITEM_RETURNFLAG, rj:LINEITEM_LINESTATUS, rk:LINEITEM_SHIPDATE, rl:LINEITEM_COMMITDATE, rm:LINEITEM_RECEIPTDATE, rn:LINEITEM_SHIPINSTRUCT, ro:LINEITEM_SHIPMODE, rp:LINEITEM_COMMENT}
     in
     ((route_to_int {key:5, value:Some LINEITEM_ORDERKEY}).iterate ((\b1 ->
      bind b1 as {i:ip} in 
      (nd_delete_LINEITEM_do_complete_s22_trig, ip)<- {ra:vid,
      rb:LINEITEM_ORDERKEY, rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY,
      re:LINEITEM_LINENUMBER, rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE,
      rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG,
      rk:LINEITEM_LINESTATUS, rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE,
      rn:LINEITEM_RECEIPTDATE, ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE,
      rq:LINEITEM_COMMENT}));
      (route_to_int {key:6, value:Some LINEITEM_ORDERKEY}).iterate ((\b1 ->
      bind b1 as {i:ip} in 
      (nd_delete_LINEITEM_do_complete_s23_trig, ip)<- {ra:vid,
      rb:LINEITEM_ORDERKEY, rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY,
      re:LINEITEM_LINENUMBER, rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE,
      rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG,
      rk:LINEITEM_LINESTATUS, rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE,
      rn:LINEITEM_RECEIPTDATE, ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE,
      rq:LINEITEM_COMMENT}));
      ((((empty { ra:address, rb:int, rc:int } @ { Collection }).combine (let
      sender_count =
      (route_to_int_date_int {ra:2, rb:Some LINEITEM_ORDERKEY, rc:None immut,
         rd:None immut}).fold ((\count -> (\b3 -> bind b3 as {i:ip} in count +
        1))) 0 in
      ((shuffle_QUERY3_mLINEITEM1_to_QUERY3_bind_0t0_1t1_2t2
          {ra:Some LINEITEM_ORDERKEY, rb:None immut, rc:None immut, rd:empty {
          ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int
          } @ { Collection }, re:true}).fold ((\_accmap -> (\b3 ->
        bind b3 as {key:ip, value:tuples} in 
        (_accmap.insert {ra:ip, rb:21, rc:sender_count};_accmap)))) empty {
        ra:address, rb:int, rc:int } @ { Collection }).combine (let
        sender_count =
        (route_to_int_date_int_int {ra:3, rb:Some LINEITEM_ORDERKEY,
           rc:None immut, rd:None immut, re:None immut}).fold ((\count ->
          (\b3 -> bind b3 as {i:ip} in count + 1))) 0 in
        ((shuffle_QUERY3_mLINEITEM1_mCUSTOMER2_to_QUERY3_mCUSTOMER2_bind_0t0_1t1_2t2_3t3
            {ra:Some LINEITEM_ORDERKEY, rb:None immut, rc:None immut,
            rd:None immut, re:empty { ra:{ key:int, value:int }, rb:int,
            rc:int, rd:int, re:int, rf:int } @ { Collection }, rf:true}).fold
          ((\_accmap -> (\b3 -> bind b3 as {key:ip, value:tuples} in 
          (_accmap.insert {ra:ip, rb:24, rc:sender_count};_accmap)))) empty {
          ra:address, rb:int, rc:int } @ { Collection }).combine (let
          sender_count =
          (route_to_int_date_int_int {ra:3, rb:Some LINEITEM_ORDERKEY,
             rc:None immut, rd:None immut, re:None immut}).fold ((\count ->
            (\b3 -> bind b3 as {i:ip} in count + 1))) 0 in
          (shuffle_QUERY3_mLINEITEM1_mCUSTOMER2_to_QUERY3_mCUSTOMER4_bind_0t0_1t1_2t2_3t3
             {ra:Some LINEITEM_ORDERKEY, rb:None immut, rc:None immut,
             rd:None immut, re:empty { ra:{ key:int, value:int }, rb:int,
             rc:int, rd:int, re:int, rf:int } @ { Collection }, rf:true}).fold
            ((\_accmap -> (\b3 -> bind b3 as {key:ip, value:tuples} in 
            (_accmap.insert {ra:ip, rb:25, rc:sender_count};_accmap)))) empty {
            ra:address, rb:int, rc:int } @ { Collection })))).groupBy ((\b1 ->
      bind b1 as {ra:ip, rb:stmt_id, rc:count} in {key:ip, value:stmt_id}))
      ((\acc -> (\b3 -> bind b3 as {ra:ip, rb:stmt_id, rc:count} in acc +
      count))) 0).groupBy ((\b1 -> bind b1 as {key:b2, value:count} in 
      bind b2 as {key:ip, value:stmt_id} in ip)) ((\acc -> (\b3 ->
      bind b3 as {key:ip_and_stmt_id, value:count} in bind ip_and_stmt_id as
      {key:ip, value:stmt_id} in
      acc.combine ({| key:int, value:int | {key:stmt_id,
        value:count}|} @ { Collection })))) empty { key:int, value:int
      } @ { Collection }).iterate ((\b1 -> bind b1 as {key:addr,
      value:stmt_cnt_list} in 
      ((nd_delete_LINEITEM_rcv_put, addr)<- {ra:me, rb:stmt_cnt_list, rc:vid,
       rd:LINEITEM_ORDERKEY, re:LINEITEM_PARTKEY, rf:LINEITEM_SUPPKEY,
       rg:LINEITEM_LINENUMBER, rh:LINEITEM_QUANTITY, ri:LINEITEM_EXTENDEDPRICE,
       rj:LINEITEM_DISCOUNT, rk:LINEITEM_TAX, rl:LINEITEM_RETURNFLAG,
       rm:LINEITEM_LINESTATUS, rn:LINEITEM_SHIPDATE, ro:LINEITEM_COMMITDATE,
       rp:LINEITEM_RECEIPTDATE, rq:LINEITEM_SHIPINSTRUCT, rr:LINEITEM_SHIPMODE,
       rs:LINEITEM_COMMENT};
       (sw_num_sent = sw_num_sent + 1;
        (case ((sw_ack_log.filter ((\b1 -> bind b1 as {key:key,
        value:value} in key == vid))).peek ()) of
        {Some x -> sw_ack_log.update x {key:vid, value:x.value + 1}}{None ->
                                                                    sw_ack_log.insert
                                                                    {key:vid,
                                                                    value:1}})))));
      ((((route_to_int_date_int_int {ra:3, rb:Some LINEITEM_ORDERKEY,
            rc:None immut, rd:None immut, re:None immut}).fold ((\_accmap ->
      (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {ra:25, rb:3, rc:ip};_accmap)))) empty { ra:int, rb:int,
      rc:address } @ { Collection }).combine
      (((route_to_int_date_int_int {ra:3, rb:Some LINEITEM_ORDERKEY,
           rc:None immut, rd:None immut, re:None immut}).fold ((\_accmap ->
      (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {ra:24, rb:3, rc:ip};_accmap)))) empty { ra:int, rb:int,
      rc:address } @ { Collection }).combine
      (((route_to_int_date_int {ra:2, rb:Some LINEITEM_ORDERKEY, rc:None immut,
           rd:None immut}).fold ((\_accmap -> (\b3 -> bind b3 as {i:ip} in 
      (_accmap.insert {ra:21, rb:2, rc:ip};_accmap)))) empty { ra:int, rb:int,
      rc:address } @ { Collection }).combine empty { ra:int, rb:int, rc:address
      } @ { Collection }))).groupBy ((\b1 -> bind b1 as {ra:stmt_id, rb:map_id,
      rc:ip} in ip)) ((\acc -> (\b3 -> bind b3 as {ra:stmt_id, rb:map_id,
      rc:ip} in (acc.insert {key:stmt_id, value:map_id};acc)))) empty {
      key:int, value:int } @ { Collection }).iterate ((\b1 ->
      bind b1 as {key:ip, value:stmt_map_ids} in 
      (nd_delete_LINEITEM_rcv_fetch, ip)<- {ra:stmt_map_ids, rb:vid,
      rc:LINEITEM_ORDERKEY, rd:LINEITEM_PARTKEY, re:LINEITEM_SUPPKEY,
      rf:LINEITEM_LINENUMBER, rg:LINEITEM_QUANTITY, rh:LINEITEM_EXTENDEDPRICE,
      ri:LINEITEM_DISCOUNT, rj:LINEITEM_TAX, rk:LINEITEM_RETURNFLAG,
      rl:LINEITEM_LINESTATUS, rm:LINEITEM_SHIPDATE, rn:LINEITEM_COMMITDATE,
      ro:LINEITEM_RECEIPTDATE, rp:LINEITEM_SHIPINSTRUCT, rq:LINEITEM_SHIPMODE,
      rr:LINEITEM_COMMENT}))))}{None ->
                                 error
                                   (print
                                      "unexpected missing arguments in sw_buf_delete_LINEITEM")})


declare nd_delete_LINEITEM_do_complete_s21 : { ra:{ key:int, value:int },
  rb:int, rc:int, rd:int, re:int, rf:real, rg:real, rh:real, ri:real,
  rj:string, rk:string, rl:int, rm:int, rn:int, ro:string, rp:string, rq:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:LINEITEM_ORDERKEY,
  rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
  rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
  ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
  rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
  ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT} in let
  delta_values =
  (((((bind map_QUERY3_mLINEITEM1_s21_buf as ind __x in
    (frontier_int_date_int_int {key:vid, value:__x.filter ((\b1 ->
       bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd, re:re} in rb ==
       LINEITEM_ORDERKEY))}).fold ((\acc -> (\b3 -> bind b3 as {ra:vid,
      rb:map_0, rc:map_1, rd:map_2, re:map_val} in 
      (acc.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_val};acc)))) empty {
      ra:int, rb:int, rc:int, rd:int } @ { Collection }).fold ((\_accmap ->
    (\b3 -> bind b3 as {ra:LINEITEM_ORDERKEY, rb:ORDERS_ORDERDATE,
    rc:ORDERS_SHIPPRIORITY, rd:__map_ret__22} in 
    (_accmap.insert {ra:ORDERS_ORDERDATE, rb:ORDERS_SHIPPRIORITY,
     rc:__map_ret__22};
     _accmap)))) empty { ra:int, rb:int, rc:int } @ { Collection }).fold
    ((\_accmap -> (\b3 -> bind b3 as {ra:ORDERS_ORDERDATE,
    rb:ORDERS_SHIPPRIORITY, rc:__map_ret__22} in 
    (_accmap.insert {ra:ORDERS_ORDERDATE, rb:ORDERS_SHIPPRIORITY,
     rc:__map_ret__22 * if 19950315 < LINEITEM_SHIPDATE then 1 else 0};
     _accmap)))) empty { ra:int, rb:int, rc:int } @ { Collection }).fold
    ((\_accmap -> (\b3 -> bind b3 as {ra:ORDERS_ORDERDATE,
    rb:ORDERS_SHIPPRIORITY, rc:__prod_ret__37} in 
    (_accmap.insert {ra:ORDERS_ORDERDATE, rb:ORDERS_SHIPPRIORITY,
     rc:__prod_ret__37 * LINEITEM_EXTENDEDPRICE};
     _accmap)))) empty { ra:int, rb:int, rc:real } @ { Collection }).fold
    ((\_accmap -> (\b3 -> bind b3 as {ra:ORDERS_ORDERDATE,
    rb:ORDERS_SHIPPRIORITY, rc:__prod_ret__38} in 
    (_accmap.insert {ra:ORDERS_ORDERDATE, rb:ORDERS_SHIPPRIORITY,
     rc:__prod_ret__38 * (-1 + LINEITEM_DISCOUNT)};
     _accmap)))) empty { ra:int, rb:int, rc:real } @ { Collection }).fold
    ((\_accmap -> (\b3 -> bind b3 as {ra:ORDERS_ORDERDATE,
    rb:ORDERS_SHIPPRIORITY, rc:__prod_ret__39} in 
    (_accmap.insert {ra:LINEITEM_ORDERKEY, rb:ORDERS_ORDERDATE,
     rc:ORDERS_SHIPPRIORITY, rd:__prod_ret__39};
     _accmap)))) empty { ra:int, rb:int, rc:int, rd:real } @ { Collection } in
  ((nd_add_delta_to_int_date_int_float {ra:QUERY3, rb:false, rc:vid,
      rd:delta_values});
   (nd_complete_stmt_cntr_check {key:vid, value:21})))


declare nd_delete_LINEITEM_do_complete_s24 : { ra:{ key:int, value:int },
  rb:int, rc:int, rd:int, re:int, rf:real, rg:real, rh:real, ri:real,
  rj:string, rk:string, rl:int, rm:int, rn:int, ro:string, rp:string, rq:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:LINEITEM_ORDERKEY,
  rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
  rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
  ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
  rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
  ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT} in let
  delta_values =
  ((((bind map_QUERY3_mLINEITEM1_mCUSTOMER2_s24_buf as ind __x in
    (frontier_int_date_int_int_int {key:vid, value:__x.filter ((\b1 ->
       bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd, re:re, rf:rf} in rb ==
       LINEITEM_ORDERKEY))}).fold ((\acc -> (\b3 -> bind b3 as {ra:vid,
      rb:map_0, rc:map_1, rd:map_2, re:map_3, rf:map_val} in 
      (acc.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_3, re:map_val};acc))))
      empty { ra:int, rb:int, rc:int, rd:int, re:int } @ { Collection }).fold
    ((\_accmap -> (\b3 -> bind b3 as {ra:LINEITEM_ORDERKEY,
    rb:ORDERS_ORDERDATE, rc:ORDERS_SHIPPRIORITY,
    rd:QUERY3_mCUSTOMERCUSTOMER_CUSTKEY, re:__map_ret__23} in 
    (_accmap.insert {ra:ORDERS_ORDERDATE, rb:ORDERS_SHIPPRIORITY,
     rc:QUERY3_mCUSTOMERCUSTOMER_CUSTKEY, rd:__map_ret__23};
     _accmap)))) empty { ra:int, rb:int, rc:int, rd:int
    } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:ORDERS_ORDERDATE, rb:ORDERS_SHIPPRIORITY,
    rc:QUERY3_mCUSTOMERCUSTOMER_CUSTKEY, rd:__map_ret__23} in 
    (_accmap.insert {ra:ORDERS_ORDERDATE, rb:ORDERS_SHIPPRIORITY,
     rc:QUERY3_mCUSTOMERCUSTOMER_CUSTKEY, rd:__map_ret__23 *
     if 19950315 < LINEITEM_SHIPDATE then 1 else 0};
     _accmap)))) empty { ra:int, rb:int, rc:int, rd:int
    } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:ORDERS_ORDERDATE, rb:ORDERS_SHIPPRIORITY,
    rc:QUERY3_mCUSTOMERCUSTOMER_CUSTKEY, rd:__prod_ret__47} in 
    (_accmap.insert {ra:ORDERS_ORDERDATE, rb:ORDERS_SHIPPRIORITY,
     rc:QUERY3_mCUSTOMERCUSTOMER_CUSTKEY, rd:__prod_ret__47 *
     (-LINEITEM_DISCOUNT * LINEITEM_EXTENDEDPRICE)};
     _accmap)))) empty { ra:int, rb:int, rc:int, rd:real
    } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:ORDERS_ORDERDATE, rb:ORDERS_SHIPPRIORITY,
    rc:QUERY3_mCUSTOMERCUSTOMER_CUSTKEY, rd:__prod_ret__48} in 
    (_accmap.insert {ra:LINEITEM_ORDERKEY, rb:ORDERS_ORDERDATE,
     rc:ORDERS_SHIPPRIORITY, rd:QUERY3_mCUSTOMERCUSTOMER_CUSTKEY,
     re:__prod_ret__48};
     _accmap)))) empty { ra:int, rb:int, rc:int, rd:int, re:real
    } @ { Collection } in
  ((nd_add_delta_to_int_date_int_int_float {ra:QUERY3_mCUSTOMER2, rb:false,
      rc:vid, rd:delta_values});
   let sent_msgs =
   nd_QUERY3_mCUSTOMER2_send_correctives {ra:me, rb:24, rc:vid, rd:1, re:vid,
     rf:delta_values} in
   if sent_msgs == 0 then nd_complete_stmt_cntr_check {key:vid, value:24}
     else
       nd_update_stmt_cntr_corr_map {ra:vid, rb:24, rc:1, rd:sent_msgs,
         re:true, rf:false}))


declare nd_delete_LINEITEM_do_complete_s25 : { ra:{ key:int, value:int },
  rb:int, rc:int, rd:int, re:int, rf:real, rg:real, rh:real, ri:real,
  rj:string, rk:string, rl:int, rm:int, rn:int, ro:string, rp:string, rq:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:LINEITEM_ORDERKEY,
  rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
  rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
  ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
  rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
  ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT} in let
  delta_values =
  ((((bind map_QUERY3_mLINEITEM1_mCUSTOMER2_s25_buf as ind __x in
    (frontier_int_date_int_int_int {key:vid, value:__x.filter ((\b1 ->
       bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd, re:re, rf:rf} in rb ==
       LINEITEM_ORDERKEY))}).fold ((\acc -> (\b3 -> bind b3 as {ra:vid,
      rb:map_0, rc:map_1, rd:map_2, re:map_3, rf:map_val} in 
      (acc.insert {ra:map_0, rb:map_1, rc:map_2, rd:map_3, re:map_val};acc))))
      empty { ra:int, rb:int, rc:int, rd:int, re:int } @ { Collection }).fold
    ((\_accmap -> (\b3 -> bind b3 as {ra:LINEITEM_ORDERKEY,
    rb:ORDERS_ORDERDATE, rc:ORDERS_SHIPPRIORITY,
    rd:QUERY3_mCUSTOMERCUSTOMER_CUSTKEY, re:__map_ret__24} in 
    (_accmap.insert {ra:ORDERS_ORDERDATE, rb:ORDERS_SHIPPRIORITY,
     rc:QUERY3_mCUSTOMERCUSTOMER_CUSTKEY, rd:__map_ret__24};
     _accmap)))) empty { ra:int, rb:int, rc:int, rd:int
    } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:ORDERS_ORDERDATE, rb:ORDERS_SHIPPRIORITY,
    rc:QUERY3_mCUSTOMERCUSTOMER_CUSTKEY, rd:__map_ret__24} in 
    (_accmap.insert {ra:ORDERS_ORDERDATE, rb:ORDERS_SHIPPRIORITY,
     rc:QUERY3_mCUSTOMERCUSTOMER_CUSTKEY, rd:__map_ret__24 *
     if 19950315 < LINEITEM_SHIPDATE then 1 else 0};
     _accmap)))) empty { ra:int, rb:int, rc:int, rd:int
    } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:ORDERS_ORDERDATE, rb:ORDERS_SHIPPRIORITY,
    rc:QUERY3_mCUSTOMERCUSTOMER_CUSTKEY, rd:__prod_ret__50} in 
    (_accmap.insert {ra:ORDERS_ORDERDATE, rb:ORDERS_SHIPPRIORITY,
     rc:QUERY3_mCUSTOMERCUSTOMER_CUSTKEY, rd:__prod_ret__50 *
     -LINEITEM_EXTENDEDPRICE};
     _accmap)))) empty { ra:int, rb:int, rc:int, rd:real
    } @ { Collection }).fold ((\_accmap -> (\b3 ->
    bind b3 as {ra:ORDERS_ORDERDATE, rb:ORDERS_SHIPPRIORITY,
    rc:QUERY3_mCUSTOMERCUSTOMER_CUSTKEY, rd:__prod_ret__51} in 
    (_accmap.insert {ra:LINEITEM_ORDERKEY, rb:ORDERS_ORDERDATE,
     rc:ORDERS_SHIPPRIORITY, rd:QUERY3_mCUSTOMERCUSTOMER_CUSTKEY,
     re:__prod_ret__51};
     _accmap)))) empty { ra:int, rb:int, rc:int, rd:int, re:real
    } @ { Collection } in
  ((nd_add_delta_to_int_date_int_int_float {ra:QUERY3_mCUSTOMER4, rb:false,
      rc:vid, rd:delta_values});
   let sent_msgs =
   nd_QUERY3_mCUSTOMER4_send_correctives {ra:me, rb:25, rc:vid, rd:1, re:vid,
     rf:delta_values} in
   if sent_msgs == 0 then nd_complete_stmt_cntr_check {key:vid, value:25}
     else
       nd_update_stmt_cntr_corr_map {ra:vid, rb:25, rc:1, rd:sent_msgs,
         re:true, rf:false}))


declare nd_delete_LINEITEM_do_complete_s22 : { ra:{ key:int, value:int },
  rb:int, rc:int, rd:int, re:int, rf:real, rg:real, rh:real, ri:real,
  rj:string, rk:string, rl:int, rm:int, rn:int, ro:string, rp:string, rq:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:LINEITEM_ORDERKEY,
  rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
  rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
  ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
  rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
  ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT} in let
  __prod_ret__42 =
  (if 19950315 < LINEITEM_SHIPDATE then 1 else 0) * (-LINEITEM_DISCOUNT *
    LINEITEM_EXTENDEDPRICE) in
  ((nd_add_delta_to_int_float {ra:QUERY3_mORDERS3, rb:false, rc:vid, rd:{|
      key:int, value:real | {key:LINEITEM_ORDERKEY,
      value:__prod_ret__42}|} @ { Collection }});
   let sent_msgs =
   nd_QUERY3_mORDERS3_send_correctives {ra:me, rb:22, rc:vid, rd:1, re:vid,
     rf:{| key:int, value:real | {key:LINEITEM_ORDERKEY,
     value:__prod_ret__42}|} @ { Collection }} in
   if sent_msgs == 0 then ()
     else
       nd_update_stmt_cntr_corr_map {ra:vid, rb:22, rc:1, rd:sent_msgs,
         re:true, rf:true}))


declare nd_delete_LINEITEM_do_complete_s23 : { ra:{ key:int, value:int },
  rb:int, rc:int, rd:int, re:int, rf:real, rg:real, rh:real, ri:real,
  rj:string, rk:string, rl:int, rm:int, rn:int, ro:string, rp:string, rq:string
  } -> () = (\b1 -> bind b1 as {ra:vid, rb:LINEITEM_ORDERKEY,
  rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
  rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
  ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
  rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
  ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT} in let
  __prod_ret__44 =
  (if 19950315 < LINEITEM_SHIPDATE then 1 else 0) * -LINEITEM_EXTENDEDPRICE in
  ((nd_add_delta_to_int_float {ra:QUERY3_mORDERS6, rb:false, rc:vid, rd:{|
      key:int, value:real | {key:LINEITEM_ORDERKEY,
      value:__prod_ret__44}|} @ { Collection }});
   let sent_msgs =
   nd_QUERY3_mORDERS6_send_correctives {ra:me, rb:23, rc:vid, rd:1, re:vid,
     rf:{| key:int, value:real | {key:LINEITEM_ORDERKEY,
     value:__prod_ret__44}|} @ { Collection }} in
   if sent_msgs == 0 then ()
     else
       nd_update_stmt_cntr_corr_map {ra:vid, rb:23, rc:1, rd:sent_msgs,
         re:true, rf:true}))


declare delete_LINEITEM_do_corrective_s21_m_QUERY3_mLINEITEM1 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int }, rf:int,
  rg:int, rh:int, ri:int, rj:real, rk:real, rl:real, rm:real, rn:string,
  ro:string, rp:int, rq:int, rr:int, rs:string, rt:string, ru:string,
  rv:collection { ra:int, rb:int, rc:int, rd:int } @ { Collection } } -> int =
  (\b1 -> bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
  re:vid, rf:LINEITEM_ORDERKEY, rg:LINEITEM_PARTKEY, rh:LINEITEM_SUPPKEY,
  ri:LINEITEM_LINENUMBER, rj:LINEITEM_QUANTITY, rk:LINEITEM_EXTENDEDPRICE,
  rl:LINEITEM_DISCOUNT, rm:LINEITEM_TAX, rn:LINEITEM_RETURNFLAG,
  ro:LINEITEM_LINESTATUS, rp:LINEITEM_SHIPDATE, rq:LINEITEM_COMMITDATE,
  rr:LINEITEM_RECEIPTDATE, rs:LINEITEM_SHIPINSTRUCT, rt:LINEITEM_SHIPMODE,
  ru:LINEITEM_COMMENT, rv:delta_tuples} in let new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 ->
    bind b3 as {ra:delta_QUERY3_mLINEITEMLINEITEM_ORDERKEY,
    rb:delta_ORDERS_ORDERDATE, rc:delta_ORDERS_SHIPPRIORITY,
    rd:delta_QUERY3_mLINEITEM1} in _accext.combine (let __prod_ret__74 =
    ((((if LINEITEM_ORDERKEY == delta_QUERY3_mLINEITEMLINEITEM_ORDERKEY 
      then 1 else 0) * if 19950315 < LINEITEM_SHIPDATE then 1 else 0) *
      delta_QUERY3_mLINEITEM1) * LINEITEM_EXTENDEDPRICE) * (-1 +
      LINEITEM_DISCOUNT) in
    {| ra:int, rb:int, rc:int, rd:real | {ra:LINEITEM_ORDERKEY,
      rb:delta_ORDERS_ORDERDATE, rc:delta_ORDERS_SHIPPRIORITY,
      rd:__prod_ret__74}|} @ { Collection })))) empty { ra:int, rb:int, rc:int,
    rd:real } @ { Collection }).filter ((\b1 -> bind b1 as {ra:map_0, rb:map_1,
    rc:map_2, rd:map_val} in 0 != map_val)) in
  ((nd_add_delta_to_int_date_int_float {ra:QUERY3, rb:true, rc:vid,
      rd:new_tuples});
   0))


declare delete_LINEITEM_do_corrective_s24_m_QUERY3_mLINEITEM1_mCUSTOMER2 : {
  ra:address, rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int,
  value:int }, rf:int, rg:int, rh:int, ri:int, rj:real, rk:real, rl:real,
  rm:real, rn:string, ro:string, rp:int, rq:int, rr:int, rs:string, rt:string,
  ru:string, rv:collection { ra:int, rb:int, rc:int, rd:int, re:int
  } @ { Collection } } -> int = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:LINEITEM_ORDERKEY,
  rg:LINEITEM_PARTKEY, rh:LINEITEM_SUPPKEY, ri:LINEITEM_LINENUMBER,
  rj:LINEITEM_QUANTITY, rk:LINEITEM_EXTENDEDPRICE, rl:LINEITEM_DISCOUNT,
  rm:LINEITEM_TAX, rn:LINEITEM_RETURNFLAG, ro:LINEITEM_LINESTATUS,
  rp:LINEITEM_SHIPDATE, rq:LINEITEM_COMMITDATE, rr:LINEITEM_RECEIPTDATE,
  rs:LINEITEM_SHIPINSTRUCT, rt:LINEITEM_SHIPMODE, ru:LINEITEM_COMMENT,
  rv:delta_tuples} in let new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 ->
    bind b3 as {ra:delta_QUERY3_mLINEITEMLINEITEM_ORDERKEY,
    rb:delta_ORDERS_ORDERDATE, rc:delta_ORDERS_SHIPPRIORITY,
    rd:delta_QUERY3_mLINEITEM1_mCUSTOMERCUSTOMER_CUSTKEY,
    re:delta_QUERY3_mLINEITEM1_mCUSTOMER2} in _accext.combine (let
    __prod_ret__79 =
    ((if LINEITEM_ORDERKEY == delta_QUERY3_mLINEITEMLINEITEM_ORDERKEY 
      then 1 else 0) * if 19950315 < LINEITEM_SHIPDATE then 1 else 0) *
      ((-delta_QUERY3_mLINEITEM1_mCUSTOMER2 * LINEITEM_DISCOUNT) *
      LINEITEM_EXTENDEDPRICE) in
    {| ra:int, rb:int, rc:int, rd:int, re:real | {ra:LINEITEM_ORDERKEY,
      rb:delta_ORDERS_ORDERDATE, rc:delta_ORDERS_SHIPPRIORITY,
      rd:delta_QUERY3_mLINEITEM1_mCUSTOMERCUSTOMER_CUSTKEY,
      re:__prod_ret__79}|} @ { Collection })))) empty { ra:int, rb:int, rc:int,
    rd:int, re:real } @ { Collection }).filter ((\b1 -> bind b1 as {ra:map_0,
    rb:map_1, rc:map_2, rd:map_3, re:map_val} in 0 != map_val)) in
  ((nd_add_delta_to_int_date_int_int_float {ra:QUERY3_mCUSTOMER2, rb:true,
      rc:vid, rd:new_tuples});
   (nd_QUERY3_mCUSTOMER2_send_correctives {ra:orig_addr, rb:orig_stmt_id,
      rc:orig_vid, rd:1 + hop, re:vid, rf:new_tuples})))


declare delete_LINEITEM_do_corrective_s25_m_QUERY3_mLINEITEM1_mCUSTOMER2 : {
  ra:address, rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int,
  value:int }, rf:int, rg:int, rh:int, ri:int, rj:real, rk:real, rl:real,
  rm:real, rn:string, ro:string, rp:int, rq:int, rr:int, rs:string, rt:string,
  ru:string, rv:collection { ra:int, rb:int, rc:int, rd:int, re:int
  } @ { Collection } } -> int = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:LINEITEM_ORDERKEY,
  rg:LINEITEM_PARTKEY, rh:LINEITEM_SUPPKEY, ri:LINEITEM_LINENUMBER,
  rj:LINEITEM_QUANTITY, rk:LINEITEM_EXTENDEDPRICE, rl:LINEITEM_DISCOUNT,
  rm:LINEITEM_TAX, rn:LINEITEM_RETURNFLAG, ro:LINEITEM_LINESTATUS,
  rp:LINEITEM_SHIPDATE, rq:LINEITEM_COMMITDATE, rr:LINEITEM_RECEIPTDATE,
  rs:LINEITEM_SHIPINSTRUCT, rt:LINEITEM_SHIPMODE, ru:LINEITEM_COMMENT,
  rv:delta_tuples} in let new_tuples =
  (delta_tuples.fold ((\_accext -> (\b3 ->
    bind b3 as {ra:delta_QUERY3_mLINEITEMLINEITEM_ORDERKEY,
    rb:delta_ORDERS_ORDERDATE, rc:delta_ORDERS_SHIPPRIORITY,
    rd:delta_QUERY3_mLINEITEM1_mCUSTOMERCUSTOMER_CUSTKEY,
    re:delta_QUERY3_mLINEITEM1_mCUSTOMER2} in _accext.combine (let
    __prod_ret__83 =
    ((if LINEITEM_ORDERKEY == delta_QUERY3_mLINEITEMLINEITEM_ORDERKEY 
      then 1 else 0) * if 19950315 < LINEITEM_SHIPDATE then 1 else 0) *
      (-delta_QUERY3_mLINEITEM1_mCUSTOMER2 * LINEITEM_EXTENDEDPRICE) in
    {| ra:int, rb:int, rc:int, rd:int, re:real | {ra:LINEITEM_ORDERKEY,
      rb:delta_ORDERS_ORDERDATE, rc:delta_ORDERS_SHIPPRIORITY,
      rd:delta_QUERY3_mLINEITEM1_mCUSTOMERCUSTOMER_CUSTKEY,
      re:__prod_ret__83}|} @ { Collection })))) empty { ra:int, rb:int, rc:int,
    rd:int, re:real } @ { Collection }).filter ((\b1 -> bind b1 as {ra:map_0,
    rb:map_1, rc:map_2, rd:map_3, re:map_val} in 0 != map_val)) in
  ((nd_add_delta_to_int_date_int_int_float {ra:QUERY3_mCUSTOMER4, rb:true,
      rc:vid, rd:new_tuples});
   (nd_QUERY3_mCUSTOMER4_send_correctives {ra:orig_addr, rb:orig_stmt_id,
      rc:orig_vid, rd:1 + hop, re:vid, rf:new_tuples})))


trigger ms_rcv_sw_init_ack : () = (\_u ->
  (ms_rcv_sw_init_ack_cnt = ms_rcv_sw_init_ack_cnt + 1;
   (if ms_rcv_sw_init_ack_cnt == num_switches
   then
     (ms_start_time = now_int ();
      (sw_rcv_token, sw_next_switch_addr)<- g_start_vid;
      (tm_insert_timer, timer_addr)<- {ra:ms_gc_interval, rb:0, rc:me})
   else ())))
trigger sw_rcv_init : () = (\_u ->
  (sw_init = true;
   (sw_driver_trig, me)<- ();
   (ms_rcv_sw_init_ack, master_addr)<- ()))
trigger ms_rcv_jobs_ack : () = (\_u ->
  (ms_rcv_jobs_ack_cnt = ms_rcv_jobs_ack_cnt + 1;
   (if ms_rcv_jobs_ack_cnt == num_peers
   then
     (switches.iterate ((\b1 -> bind b1 as {i:addr} in 
      (sw_rcv_init, addr)<- ()))) else ())))
trigger rcv_jobs : collection { key:address, value:int } @ { Map } =
  (\jobs_in ->
  (jobs = jobs_in;
   timer_addr = case ((jobs.filter ((\b1 -> bind b1 as {key:addr,
   value:job} in job == job_timer))).peek ()) of
   {Some timer -> timer.key}{None -> error (print "no timer peer found")};
   nodes = (jobs.filter ((\b1 -> bind b1 as {key:addr, value:job} in job ==
   job_node))).fold ((\_accmap -> (\x ->
   (_accmap.insert ({i:x.key});_accmap)))) empty {i:address} @ { Collection };
   num_nodes = nodes.size ();
   switches = (jobs.filter ((\b1 -> bind b1 as {key:addr, value:job} in job ==
   job_switch))).fold ((\_accmap -> (\x ->
   (_accmap.insert ({i:x.key});_accmap)))) empty {i:address} @ { Collection };
   num_switches = switches.size ();
   (if job <= job_switch
   then sw_next_switch_addr = let addr_list =
     (switches.fold ((\acc_conv -> (\b3 -> bind b3 as {i:x} in 
       (acc_conv.insert {i:x};acc_conv)))) empty {i:address} @ { Seq }).sort
       ((\b2 -> (\b3 -> bind b2 as {i:addr1} in bind b3 as {i:addr2} in 
       if addr1 < addr2 then -1 else 1))) in
     case (addr_list.peek ()) of
       {Some first_addr -> (addr_list.fold ((\b2 -> (\b5 ->
         bind b2 as {key:take, value:result} in bind b5 as {i:x} in if take
         then {key:false, value:x}
         else if x == me then {key:true, value:result}
           else {key:take, value:result}))) {key:false,
         value:first_addr.i}).value}{None ->
                                      error (print "no addresses in addr_list")}
   else ());
   nodes.iterate ((\b1 -> bind b1 as {i:addr} in add_node addr));
   (ms_rcv_jobs_ack, master_addr)<- ()))
trigger ms_rcv_job : { key:address, value:int } = (\b1 -> bind b1 as {key:addr,
  value:job} in 
  (jobs.insert {key:addr, value:job};
   ms_rcv_job_cnt = ms_rcv_job_cnt + 1;
   (if ms_rcv_job_cnt == num_peers
   then my_peers.iterate ((\b1 -> bind b1 as {i:addr} in 
     (rcv_jobs, addr)<- jobs)) else ())))
trigger rcv_master_addr : address = (\addr ->
  (master_addr = addr;(ms_rcv_job, addr)<- {key:me, value:job}))
trigger ms_send_addr_self : () = (\_u -> my_peers.iterate ((\b1 ->
  bind b1 as {i:addr} in (rcv_master_addr, addr)<- me)))
trigger shutdown_trig : () = (\_u -> haltEngine ())
trigger ms_shutdown : () = (\_u -> if ms_rcv_node_done_cnt == num_nodes
  then my_peers.iterate ((\b1 -> bind b1 as {i:addr} in 
    (shutdown_trig, addr)<- ())) else ())
trigger ms_rcv_node_done : bool = (\done -> if done
  then
    (ms_rcv_node_done_cnt = ms_rcv_node_done_cnt + 1;
     (if ms_rcv_node_done_cnt == num_nodes
     then (ms_end_time = now_int ();(ms_shutdown, me)<- ()) else ()))
  else ms_rcv_node_done_cnt = ms_rcv_node_done_cnt - 1)
trigger nd_rcv_done : () = (\_u ->
  (nd_rcvd_sys_done = true;
   (if not nd_sent_done and nd_stmt_cntrs.size () == 0
   then ((ms_rcv_node_done, master_addr)<- true;nd_sent_done = true) 
   else ())))
trigger ms_rcv_switch_done : () = (\_u ->
  (ms_rcv_switch_done_cnt = ms_rcv_switch_done_cnt + 1;
   (if ms_rcv_switch_done_cnt == num_switches
   then nodes.iterate ((\b1 -> bind b1 as {i:addr} in 
     (nd_rcv_done, addr)<- ())) else ())))
trigger sw_ack_rcv : { key:address, value:{ key:int, value:int } } = (\b1 ->
  bind b1 as {key:addr, value:vid} in 
  (sw_num_ack = sw_num_ack + 1;
   (case ((sw_ack_log.filter ((\b1 -> bind b1 as {key:key, value:value} in key
   == vid))).peek ()) of
   {Some x -> if x.value == 0 then sw_ack_log.erase x
     else sw_ack_log.update x {key:vid, value:x.value - 1}}{None -> ()});
   (if not sw_sent_done and (sw_trig_buf_idx.size () == 0 and (sw_num_ack ==
      sw_num_sent and sw_seen_sentry == true))
   then ((ms_rcv_switch_done, master_addr)<- ();sw_sent_done = true) 
   else ())))
trigger ms_rcv_gc_vid : { key:address, value:{ key:int, value:int } } =
  (\data ->
  (ms_gc_vid_map.insert data;
   ms_gc_vid_ctr = ms_gc_vid_ctr + 1;
   (if ms_gc_vid_ctr >= ms_num_gc_expected
   then let min_vid =
     ms_gc_vid_map.fold ((\min_vid -> (\b3 -> bind b3 as {key:addr,
       value:vid} in if min_vid < vid then min_vid else vid))) g_min_vid in
     (ms_gc_vid_ctr = 0;
      ms_gc_vid_map = empty { key:address, value:{ key:int, value:int }
      } @ { Map };
      my_peers.iterate ((\b1 -> bind b1 as {i:addr} in 
      (do_gc, addr)<- min_vid));
      (tm_insert_timer, timer_addr)<- {ra:ms_gc_interval, rb:0, rc:me})
   else ())))
trigger rcv_req_gc_vid : () = (\_u -> if job == job_switch or job == job_master
  then (ms_rcv_gc_vid, master_addr)<- {key:me, value:sw_ack_log.fold
    ((\min_vid -> (\b3 -> bind b3 as {key:vid, value:count} in if min_vid < vid
    then min_vid else vid))) sw_highest_vid}
  else if job == job_node
    then (ms_rcv_gc_vid, master_addr)<- {key:me, value:nd_stmt_cntrs.fold
      ((\min_vid -> (\b3 -> bind b3 as {key:vid_stmt_id, value:ctr_corrs} in 
      if min_vid < vid_stmt_id.key then min_vid else vid_stmt_id.key)))
      g_max_vid} else ())
trigger ms_send_gc_req : () = (\_u -> my_peers.iterate ((\b1 ->
  bind b1 as {i:addr} in (rcv_req_gc_vid, addr)<- ())))
trigger do_gc : { key:int, value:int } = (\min_gc_vid ->
  ((do_gc_nd_log_master min_gc_vid);
   (do_gc_nd_log_insert_CUSTOMER min_gc_vid);
   (do_gc_nd_log_delete_CUSTOMER min_gc_vid);
   (do_gc_nd_log_insert_ORDERS min_gc_vid);
   (do_gc_nd_log_delete_ORDERS min_gc_vid);
   (do_gc_nd_log_insert_LINEITEM min_gc_vid);
   (do_gc_nd_log_delete_LINEITEM min_gc_vid);
   (do_gc_map_QUERY3_mCUSTOMER2_s0_buf min_gc_vid);
   (do_gc_map_QUERY3_mCUSTOMER4_s0_buf min_gc_vid);
   (do_gc_map_QUERY3_mLINEITEM1_mCUSTOMER2_s1_buf min_gc_vid);
   (do_gc_map_QUERY3_mCUSTOMER2_s3_buf min_gc_vid);
   (do_gc_map_QUERY3_mCUSTOMER4_s3_buf min_gc_vid);
   (do_gc_map_QUERY3_mLINEITEM1_mCUSTOMER2_s4_buf min_gc_vid);
   (do_gc_map_QUERY3_mORDERS1_s6_buf min_gc_vid);
   (do_gc_map_QUERY3_mORDERS3_s6_buf min_gc_vid);
   (do_gc_map_QUERY3_mORDERS6_s6_buf min_gc_vid);
   (do_gc_map_QUERY3_mORDERS1_s7_buf min_gc_vid);
   (do_gc_map_QUERY3_mORDERS3_s9_buf min_gc_vid);
   (do_gc_map_QUERY3_mORDERS6_s10_buf min_gc_vid);
   (do_gc_map_QUERY3_mORDERS1_s11_buf min_gc_vid);
   (do_gc_map_QUERY3_mORDERS3_s11_buf min_gc_vid);
   (do_gc_map_QUERY3_mORDERS6_s11_buf min_gc_vid);
   (do_gc_map_QUERY3_mORDERS1_s12_buf min_gc_vid);
   (do_gc_map_QUERY3_mORDERS3_s14_buf min_gc_vid);
   (do_gc_map_QUERY3_mORDERS6_s15_buf min_gc_vid);
   (do_gc_map_QUERY3_mLINEITEM1_s16_buf min_gc_vid);
   (do_gc_map_QUERY3_mLINEITEM1_mCUSTOMER2_s19_buf min_gc_vid);
   (do_gc_map_QUERY3_mLINEITEM1_mCUSTOMER2_s20_buf min_gc_vid);
   (do_gc_map_QUERY3_mLINEITEM1_s21_buf min_gc_vid);
   (do_gc_map_QUERY3_mLINEITEM1_mCUSTOMER2_s24_buf min_gc_vid);
   (do_gc_map_QUERY3_mLINEITEM1_mCUSTOMER2_s25_buf min_gc_vid);
   (do_gc_map_QUERY3_mORDERS3_s36_buf min_gc_vid);
   (do_gc_map_QUERY3_mORDERS6_s36_buf min_gc_vid);
   (do_gc_map_QUERY3_mORDERS3_s38_buf min_gc_vid);
   (do_gc_map_QUERY3_mORDERS6_s38_buf min_gc_vid);
   (do_gc_map_QUERY3_mORDERS1_s40_buf min_gc_vid);
   (do_gc_map_QUERY3_mORDERS1_s42_buf min_gc_vid);
   (do_gc_map_QUERY3_mORDERS1_s44_buf min_gc_vid);
   (do_gc_map_QUERY3_mORDERS1_s46_buf min_gc_vid);
   (do_gc_map_QUERY3_mORDERS3_s48_buf min_gc_vid);
   (do_gc_map_QUERY3_mORDERS6_s48_buf min_gc_vid);
   (do_gc_map_QUERY3_mORDERS3_s50_buf min_gc_vid);
   (do_gc_map_QUERY3_mORDERS6_s50_buf min_gc_vid);
   (do_gc_map_QUERY3_mORDERS1_s52_buf min_gc_vid);
   (do_gc_map_QUERY3_mORDERS1_s54_buf min_gc_vid);
   (do_gc_map_QUERY3_mORDERS1_s56_buf min_gc_vid);
   (do_gc_map_QUERY3_mORDERS1_s58_buf min_gc_vid);
   (do_gc_QUERY3 min_gc_vid);
   (do_gc_QUERY3_mLINEITEM1 min_gc_vid);
   (do_gc_QUERY3_mLINEITEM1_mCUSTOMER2 min_gc_vid);
   (do_gc_QUERY3_mORDERS1 min_gc_vid);
   (do_gc_QUERY3_mORDERS3 min_gc_vid);
   (do_gc_QUERY3_mORDERS6 min_gc_vid);
   (do_gc_QUERY3_mCUSTOMER2 min_gc_vid);
   (do_gc_QUERY3_mCUSTOMER4 min_gc_vid)))
trigger sw_rcv_token : { key:int, value:int } = (\vid ->
  if sw_need_vid_cntr > 0
  then let next_vid = {key:vid.key, value:vid.value + sw_need_vid_cntr} in
    ((sw_rcv_token, sw_next_switch_addr)<- next_vid;
     sw_token_vid_list.insert {key:vid, value:sw_need_vid_cntr};
     sw_need_vid_cntr = 0;
     sw_highest_vid = next_vid;
     (if not sw_sent_done and (sw_trig_buf_idx.size () == 0 and (sw_num_ack ==
        sw_num_sent and sw_seen_sentry == true))
     then ((ms_rcv_switch_done, master_addr)<- ();sw_sent_done = true) 
     else ());
     (sw_driver_trig, me)<- ()) else (sw_rcv_token, sw_next_switch_addr)<- vid)
trigger tm_insert_timer : { ra:int, rb:int, rc:address } = (\b1 ->
  bind b1 as {ra:time, rb:trig_id, rc:addr} in 
  (tm_timer_list.insert {ra:time + now_int (), rb:trig_id, rc:addr};
   tm_timer_list = tm_timer_list.sort ((\b2 -> (\b6 -> bind b2 as {ra:time1,
   rb:trig_id1, rc:addr1} in bind b6 as {ra:time2, rb:trig_id2, rc:addr2} in 
   if time1 < time2 then -1 else 1)));
   (tm_check_time, me)<- ()))
trigger tm_check_time : () = (\_u -> case (tm_timer_list.peek ()) of
  {Some timer -> if now_int () >= timer.ra
    then
      (tm_timer_list.erase timer;
       bind timer as {ra:time, rb:trig_id, rc:addr} in
       if trig_id == 0 then (ms_send_gc_req, addr)<- () else ();
       (tm_check_time, me)<- ()) else ((tm_check_time, me)<- ();(sleep 1000))}
  {None -> ()})
trigger sw_demux : { ra:string, rb:int, rc:real, rd:string, re:int, rf:string,
  rg:string, rh:string, ri:string, rj:string, rk:int, rl:real, rm:real, rn:int,
  ro:string, rp:string, rq:string, rr:string, rs:int, rt:string, ru:int,
  rv:string, rw:string, rx:int, ry:string, rz:real, rza:string, rzb:int,
  rzc:real, rzd:string, rze:string, rzf:string, rzg:string, rzh:int, rzi:int,
  rzj:int, rzk:real, rzl:real, rzm:real, rzn:string } = (\args ->
  if args.ra == "ORDERS"
  then if args.rb == 1
    then
      sw_insert_ORDERS {ra:args.ru, rb:args.rk, rc:args.rw, rd:args.rzm,
        re:tpch_date (args.rt), rf:args.rv, rg:args.rg, rh:args.rzh,
        ri:args.rh}
    else
      sw_delete_ORDERS {ra:args.ru, rb:args.rk, rc:args.rw, rd:args.rzm,
        re:tpch_date (args.rt), rf:args.rv, rg:args.rg, rh:args.rzh,
        ri:args.rh}
  else if args.ra == "LINEITEM"
    then if args.rb == 1
      then
        sw_insert_LINEITEM {ra:args.ru, rb:args.rx, rc:args.rzj, rd:args.rn,
          re:args.rz, rf:args.rm, rg:args.rl, rh:args.rzl, ri:args.rzd,
          rj:args.ro, rk:tpch_date (args.rze), rl:tpch_date (args.ri),
          rm:tpch_date (args.rza), rn:args.rzf, ro:args.rzg, rp:args.rh}
      else
        sw_delete_LINEITEM {ra:args.ru, rb:args.rx, rc:args.rzj, rd:args.rn,
          re:args.rz, rf:args.rm, rg:args.rl, rh:args.rzl, ri:args.rzd,
          rj:args.ro, rk:tpch_date (args.rze), rl:tpch_date (args.ri),
          rm:tpch_date (args.rza), rn:args.rzf, ro:args.rzg, rp:args.rh}
    else if args.ra == "CUSTOMER"
      then if args.rb == 1
        then
          sw_insert_CUSTOMER {ra:args.rk, rb:args.rr, rc:args.rd, rd:args.rs,
            re:args.ry, rf:args.rc, rg:args.rq, rh:args.rh}
        else
          sw_delete_CUSTOMER {ra:args.rk, rb:args.rr, rc:args.rd, rd:args.rs,
            re:args.ry, rf:args.rc, rg:args.rq, rh:args.rh}
      else if args.ra == ""
        then
          (sw_trig_buf_idx.insert ({i:-1});
           sw_need_vid_cntr = sw_need_vid_cntr + 1)
        else error (print "unidentified trig id"))
trigger sw_driver_trig : () = (\_u ->
  if sw_init and sw_trig_buf_idx.size () > 0
  then case sw_gen_vid () of
    {Some vid -> case (sw_trig_buf_idx.peek ()) of
      {Some trig_id ->
        (sw_trig_buf_idx.erase {i:trig_id.i};
         (if trig_id.i == -1
         then
           (sw_seen_sentry = true;
            (if not sw_sent_done and (sw_trig_buf_idx.size () == 0 and
               (sw_num_ack == sw_num_sent and sw_seen_sentry == true))
            then ((ms_rcv_switch_done, master_addr)<- ();sw_sent_done = true)
            else ()))
         else
           ((if trig_id.i == 5 then sw_delete_LINEITEM_send_fetch vid
            else if trig_id.i == 4 then sw_insert_LINEITEM_send_fetch vid
              else if trig_id.i == 3 then sw_delete_ORDERS_send_fetch vid
                else if trig_id.i == 2 then sw_insert_ORDERS_send_fetch vid
                  else if trig_id.i == 1 then sw_delete_CUSTOMER_send_fetch vid
                    else if trig_id.i == 0
                      then sw_insert_CUSTOMER_send_fetch vid
                      else error (print "mismatch on trigger id"));
            (sw_driver_trig, me)<- ())))}{None -> ()}}{None -> ()} else ())
trigger nd_rcv_corr_done : { ra:{ key:int, value:int }, rb:int, rc:int, rd:int
  } = (\b1 -> bind b1 as {ra:vid, rb:stmt_id, rc:hop, rd:count} in 
  ((nd_update_stmt_cntr_corr_map {ra:vid, rb:stmt_id, rc:hop, rd:count,
      re:false, rf:false});
   (case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
   key == {key:vid, value:stmt_id}))).peek ()) of
   {Some lkup -> if 0 == ((lkup.value).value).size ()
     then
       (nd_stmt_cntrs.erase lkup;
        (if nd_rcvd_sys_done
        then if not nd_sent_done and nd_stmt_cntrs.size () == 0
          then ((ms_rcv_node_done, master_addr)<- true;nd_sent_done = true)
          else () else ())) else ()}{None ->
                                      error
                                        (print
                                           "nd_rcv_corr_done: expected stmt_cntr value")})))
  
trigger nd_insert_CUSTOMER_rcv_put : { ra:address, rb:collection { key:int,
  value:int } @ { Collection }, rc:{ key:int, value:int }, rd:int, re:string,
  rf:string, rg:int, rh:string, ri:real, rj:string, rk:string } = (\b1 ->
  bind b1 as {ra:sender_ip, rb:stmt_cnt_list, rc:vid, rd:CUSTOMER_CUSTKEY,
  re:CUSTOMER_NAME, rf:CUSTOMER_ADDRESS, rg:CUSTOMER_NATIONKEY,
  rh:CUSTOMER_PHONE, ri:CUSTOMER_ACCTBAL, rj:CUSTOMER_MKTSEGMENT,
  rk:CUSTOMER_COMMENT} in 
  (stmt_cnt_list.iterate ((\b1 -> bind b1 as {key:stmt_id, value:count} in 
   if nd_check_stmt_cntr_index {ra:vid, rb:stmt_id, rc:count}
   then if stmt_id == 2
     then
       nd_insert_CUSTOMER_do_complete_s2 {ra:vid, rb:CUSTOMER_CUSTKEY,
         rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
         rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
         ri:CUSTOMER_COMMENT}
     else if stmt_id == 1
       then
         nd_insert_CUSTOMER_do_complete_s1 {ra:vid, rb:CUSTOMER_CUSTKEY,
           rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
           rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
           ri:CUSTOMER_COMMENT}
       else if stmt_id == 0
         then
           nd_insert_CUSTOMER_do_complete_s0 {ra:vid, rb:CUSTOMER_CUSTKEY,
             rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
             rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
             ri:CUSTOMER_COMMENT} else () else ()));
   (sw_ack_rcv, sender_ip)<- {key:me, value:vid}))
trigger nd_insert_CUSTOMER_rcv_fetch : { ra:collection { key:int, value:int
  } @ { Collection }, rb:{ key:int, value:int }, rc:int, rd:string, re:string,
  rf:int, rg:string, rh:real, ri:string, rj:string } = (\b1 ->
  bind b1 as {ra:stmt_map_ids, rb:vid, rc:CUSTOMER_CUSTKEY, rd:CUSTOMER_NAME,
  re:CUSTOMER_ADDRESS, rf:CUSTOMER_NATIONKEY, rg:CUSTOMER_PHONE,
  rh:CUSTOMER_ACCTBAL, ri:CUSTOMER_MKTSEGMENT, rj:CUSTOMER_COMMENT} in 
  ((nd_log_write_insert_CUSTOMER {ra:vid, rb:CUSTOMER_CUSTKEY,
      rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
      rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
      ri:CUSTOMER_COMMENT});
   stmt_map_ids.iterate ((\b1 -> bind b1 as {key:stmt_id, value:map_id} in 
   if stmt_id == 0
   then if map_id == 7
     then (nd_insert_CUSTOMER_send_push_s0_m_QUERY3_mCUSTOMER2, me)<- {ra:vid,
       rb:CUSTOMER_CUSTKEY, rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS,
       re:CUSTOMER_NATIONKEY, rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL,
       rh:CUSTOMER_MKTSEGMENT, ri:CUSTOMER_COMMENT}
     else if map_id == 8
       then
         (nd_insert_CUSTOMER_send_push_s0_m_QUERY3_mCUSTOMER4, me)<- {ra:vid,
         rb:CUSTOMER_CUSTKEY, rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS,
         re:CUSTOMER_NATIONKEY, rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL,
         rh:CUSTOMER_MKTSEGMENT, ri:CUSTOMER_COMMENT}
       else error (print "nd_rcv_fetch: invalid map id")
   else if stmt_id == 1
     then if map_id == 3
       then
         (nd_insert_CUSTOMER_send_push_s1_m_QUERY3_mLINEITEM1_mCUSTOMER2, me)<- {ra:vid,
         rb:CUSTOMER_CUSTKEY, rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS,
         re:CUSTOMER_NATIONKEY, rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL,
         rh:CUSTOMER_MKTSEGMENT, ri:CUSTOMER_COMMENT}
       else error (print "nd_rcv_fetch: invalid map id")
     else error (print "nd_rcv_fetch: invalid stmt id")))))
trigger nd_insert_CUSTOMER_send_push_s0_m_QUERY3_mCUSTOMER2 : { ra:{ key:int,
  value:int }, rb:int, rc:string, rd:string, re:int, rf:string, rg:real,
  rh:string, ri:string } = (\b1 -> bind b1 as {ra:vid, rb:CUSTOMER_CUSTKEY,
  rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
  rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
  ri:CUSTOMER_COMMENT} in bind QUERY3_mCUSTOMER2 as ind QUERY3_mCUSTOMER2_deref
  in
  ((nd_log_master_write {key:vid, value:0});
   (shuffle_QUERY3_mCUSTOMER2_to_QUERY3_bind_0t0_1t1_2t2 {ra:None immut,
      rb:None immut, rc:None immut,
      rd:frontier_int_date_int_int_float {key:vid,
           value:QUERY3_mCUSTOMER2_deref.filter ((\b1 -> bind b1 as {ra:ra,
           rb:rb, rc:rc, rd:rd, re:re, rf:rf} in re == CUSTOMER_CUSTKEY))},
      re:true}).iterate ((\b1 -> bind b1 as {key:ip, value:tuples} in 
   (nd_insert_CUSTOMER_rcv_push_s0_m_QUERY3_mCUSTOMER2, ip)<- {ra:tuples,
   rb:vid, rc:CUSTOMER_CUSTKEY, rd:CUSTOMER_NAME, re:CUSTOMER_ADDRESS,
   rf:CUSTOMER_NATIONKEY, rg:CUSTOMER_PHONE, rh:CUSTOMER_ACCTBAL,
   ri:CUSTOMER_MKTSEGMENT, rj:CUSTOMER_COMMENT}))))
trigger nd_insert_CUSTOMER_send_push_s0_m_QUERY3_mCUSTOMER4 : { ra:{ key:int,
  value:int }, rb:int, rc:string, rd:string, re:int, rf:string, rg:real,
  rh:string, ri:string } = (\b1 -> bind b1 as {ra:vid, rb:CUSTOMER_CUSTKEY,
  rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
  rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
  ri:CUSTOMER_COMMENT} in bind QUERY3_mCUSTOMER4 as ind QUERY3_mCUSTOMER4_deref
  in
  ((nd_log_master_write {key:vid, value:0});
   (shuffle_QUERY3_mCUSTOMER4_to_QUERY3_bind_0t0_1t1_2t2 {ra:None immut,
      rb:None immut, rc:None immut,
      rd:frontier_int_date_int_int_float {key:vid,
           value:QUERY3_mCUSTOMER4_deref.filter ((\b1 -> bind b1 as {ra:ra,
           rb:rb, rc:rc, rd:rd, re:re, rf:rf} in re == CUSTOMER_CUSTKEY))},
      re:true}).iterate ((\b1 -> bind b1 as {key:ip, value:tuples} in 
   (nd_insert_CUSTOMER_rcv_push_s0_m_QUERY3_mCUSTOMER4, ip)<- {ra:tuples,
   rb:vid, rc:CUSTOMER_CUSTKEY, rd:CUSTOMER_NAME, re:CUSTOMER_ADDRESS,
   rf:CUSTOMER_NATIONKEY, rg:CUSTOMER_PHONE, rh:CUSTOMER_ACCTBAL,
   ri:CUSTOMER_MKTSEGMENT, rj:CUSTOMER_COMMENT}))))
trigger nd_insert_CUSTOMER_send_push_s1_m_QUERY3_mLINEITEM1_mCUSTOMER2 : { ra:{
  key:int, value:int }, rb:int, rc:string, rd:string, re:int, rf:string,
  rg:real, rh:string, ri:string } = (\b1 -> bind b1 as {ra:vid,
  rb:CUSTOMER_CUSTKEY, rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS,
  re:CUSTOMER_NATIONKEY, rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL,
  rh:CUSTOMER_MKTSEGMENT, ri:CUSTOMER_COMMENT} in bind
  QUERY3_mLINEITEM1_mCUSTOMER2 as ind QUERY3_mLINEITEM1_mCUSTOMER2_deref in
  ((nd_log_master_write {key:vid, value:1});
   (shuffle_QUERY3_mLINEITEM1_mCUSTOMER2_to_QUERY3_mLINEITEM1_bind_0t0_1t1_2t2
      {ra:None immut, rb:None immut, rc:None immut,
      rd:frontier_int_date_int_int_int {key:vid,
           value:QUERY3_mLINEITEM1_mCUSTOMER2_deref.filter ((\b1 ->
           bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd, re:re, rf:rf} in re ==
           CUSTOMER_CUSTKEY))}, re:true}).iterate ((\b1 -> bind b1 as {key:ip,
   value:tuples} in 
   (nd_insert_CUSTOMER_rcv_push_s1_m_QUERY3_mLINEITEM1_mCUSTOMER2, ip)<- {ra:tuples,
   rb:vid, rc:CUSTOMER_CUSTKEY, rd:CUSTOMER_NAME, re:CUSTOMER_ADDRESS,
   rf:CUSTOMER_NATIONKEY, rg:CUSTOMER_PHONE, rh:CUSTOMER_ACCTBAL,
   ri:CUSTOMER_MKTSEGMENT, rj:CUSTOMER_COMMENT}))))
trigger nd_insert_CUSTOMER_rcv_push_s0_m_QUERY3_mCUSTOMER2 : { ra:collection {
  ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:real
  } @ { Collection }, rb:{ key:int, value:int }, rc:int, rd:string, re:string,
  rf:int, rg:string, rh:real, ri:string, rj:string } = (\b1 ->
  bind b1 as {ra:tuples, rb:vid, rc:CUSTOMER_CUSTKEY, rd:CUSTOMER_NAME,
  re:CUSTOMER_ADDRESS, rf:CUSTOMER_NATIONKEY, rg:CUSTOMER_PHONE,
  rh:CUSTOMER_ACCTBAL, ri:CUSTOMER_MKTSEGMENT, rj:CUSTOMER_COMMENT} in 
  ((nd_log_write_insert_CUSTOMER {ra:vid, rb:CUSTOMER_CUSTKEY,
      rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
      rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
      ri:CUSTOMER_COMMENT});
   tuples.iterate ((\tuple -> bind map_QUERY3_mCUSTOMER2_s0_buf as ind
   map_QUERY3_mCUSTOMER2_s0_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2, rd:_tup3, re:_tup4, rf:_tup5}
     in
     case ((map_QUERY3_mCUSTOMER2_s0_buf_d.filter ((\b1 -> bind b1 as {ra:ra,
       rb:rb, rc:rc, rd:rd, re:re, rf:rf} in (((ra == _tup0 and re == _tup4)
       and rd == _tup3) and rc == _tup2) and rb == _tup1))).peek ()) of
       {Some vals -> map_QUERY3_mCUSTOMER2_s0_buf_d.update vals tuple}
       {None -> map_QUERY3_mCUSTOMER2_s0_buf_d.insert tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:0, rc:-1}
   then
     nd_insert_CUSTOMER_do_complete_s0 {ra:vid, rb:CUSTOMER_CUSTKEY,
       rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
       rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
       ri:CUSTOMER_COMMENT} else ())))
trigger nd_insert_CUSTOMER_rcv_push_s0_m_QUERY3_mCUSTOMER4 : { ra:collection {
  ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:real
  } @ { Collection }, rb:{ key:int, value:int }, rc:int, rd:string, re:string,
  rf:int, rg:string, rh:real, ri:string, rj:string } = (\b1 ->
  bind b1 as {ra:tuples, rb:vid, rc:CUSTOMER_CUSTKEY, rd:CUSTOMER_NAME,
  re:CUSTOMER_ADDRESS, rf:CUSTOMER_NATIONKEY, rg:CUSTOMER_PHONE,
  rh:CUSTOMER_ACCTBAL, ri:CUSTOMER_MKTSEGMENT, rj:CUSTOMER_COMMENT} in 
  ((nd_log_write_insert_CUSTOMER {ra:vid, rb:CUSTOMER_CUSTKEY,
      rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
      rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
      ri:CUSTOMER_COMMENT});
   tuples.iterate ((\tuple -> bind map_QUERY3_mCUSTOMER4_s0_buf as ind
   map_QUERY3_mCUSTOMER4_s0_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2, rd:_tup3, re:_tup4, rf:_tup5}
     in
     case ((map_QUERY3_mCUSTOMER4_s0_buf_d.filter ((\b1 -> bind b1 as {ra:ra,
       rb:rb, rc:rc, rd:rd, re:re, rf:rf} in (((ra == _tup0 and re == _tup4)
       and rd == _tup3) and rc == _tup2) and rb == _tup1))).peek ()) of
       {Some vals -> map_QUERY3_mCUSTOMER4_s0_buf_d.update vals tuple}
       {None -> map_QUERY3_mCUSTOMER4_s0_buf_d.insert tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:0, rc:-1}
   then
     nd_insert_CUSTOMER_do_complete_s0 {ra:vid, rb:CUSTOMER_CUSTKEY,
       rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
       rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
       ri:CUSTOMER_COMMENT} else ())))
trigger nd_insert_CUSTOMER_rcv_push_s1_m_QUERY3_mLINEITEM1_mCUSTOMER2 : {
  ra:collection { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int,
  rf:int } @ { Collection }, rb:{ key:int, value:int }, rc:int, rd:string,
  re:string, rf:int, rg:string, rh:real, ri:string, rj:string } = (\b1 ->
  bind b1 as {ra:tuples, rb:vid, rc:CUSTOMER_CUSTKEY, rd:CUSTOMER_NAME,
  re:CUSTOMER_ADDRESS, rf:CUSTOMER_NATIONKEY, rg:CUSTOMER_PHONE,
  rh:CUSTOMER_ACCTBAL, ri:CUSTOMER_MKTSEGMENT, rj:CUSTOMER_COMMENT} in 
  ((nd_log_write_insert_CUSTOMER {ra:vid, rb:CUSTOMER_CUSTKEY,
      rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
      rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
      ri:CUSTOMER_COMMENT});
   tuples.iterate ((\tuple -> bind map_QUERY3_mLINEITEM1_mCUSTOMER2_s1_buf as
   ind map_QUERY3_mLINEITEM1_mCUSTOMER2_s1_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2, rd:_tup3, re:_tup4, rf:_tup5}
     in
     case ((map_QUERY3_mLINEITEM1_mCUSTOMER2_s1_buf_d.filter ((\b1 ->
       bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd, re:re, rf:rf} in (((ra == _tup0
       and re == _tup4) and rd == _tup3) and rc == _tup2) and rb ==
       _tup1))).peek ()) of
       {Some vals -> map_QUERY3_mLINEITEM1_mCUSTOMER2_s1_buf_d.update vals
         tuple}{None -> map_QUERY3_mLINEITEM1_mCUSTOMER2_s1_buf_d.insert tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:1, rc:-1}
   then
     nd_insert_CUSTOMER_do_complete_s1 {ra:vid, rb:CUSTOMER_CUSTKEY,
       rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
       rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
       ri:CUSTOMER_COMMENT} else ())))
trigger nd_insert_CUSTOMER_do_complete_s2_trig : { ra:{ key:int, value:int },
  rb:int, rc:string, rd:string, re:int, rf:string, rg:real, rh:string,
  ri:string } = (\b1 -> bind b1 as {ra:vid, rb:CUSTOMER_CUSTKEY,
  rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
  rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
  ri:CUSTOMER_COMMENT} in 
  nd_insert_CUSTOMER_do_complete_s2 {ra:vid, rb:CUSTOMER_CUSTKEY,
    rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
    rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
    ri:CUSTOMER_COMMENT})
trigger insert_CUSTOMER_rcv_corrective_s0_m_QUERY3_mCUSTOMER2 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int },
  rf:collection { key:int, value:int } @ { Seq }, rg:collection { ra:int,
  rb:int, rc:int, rd:int, re:real } @ { Collection } } = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid,
  rf:compute_vids, rg:delta_tuples} in 
  ((nd_add_delta_to_int_date_int_int_float {ra:map_QUERY3_mCUSTOMER2_s0_buf,
      rb:false, rc:vid, rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:0}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_insert_CUSTOMER compute_vid as
         {ra:CUSTOMER_CUSTKEY, rb:CUSTOMER_NAME, rc:CUSTOMER_ADDRESS, rd:CUSTOMER_NATIONKEY, re:CUSTOMER_PHONE, rf:CUSTOMER_ACCTBAL, rg:CUSTOMER_MKTSEGMENT, rh:CUSTOMER_COMMENT}
         in
         acc_count +
           insert_CUSTOMER_do_corrective_s0_m_QUERY3_mCUSTOMER2 {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:compute_vid,
             rf:CUSTOMER_CUSTKEY, rg:CUSTOMER_NAME, rh:CUSTOMER_ADDRESS,
             ri:CUSTOMER_NATIONKEY, rj:CUSTOMER_PHONE, rk:CUSTOMER_ACCTBAL,
             rl:CUSTOMER_MKTSEGMENT, rm:CUSTOMER_COMMENT, rn:delta_tuples}
       else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger insert_CUSTOMER_rcv_corrective_s0_m_QUERY3_mCUSTOMER4 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int },
  rf:collection { key:int, value:int } @ { Seq }, rg:collection { ra:int,
  rb:int, rc:int, rd:int, re:real } @ { Collection } } = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid,
  rf:compute_vids, rg:delta_tuples} in 
  ((nd_add_delta_to_int_date_int_int_float {ra:map_QUERY3_mCUSTOMER4_s0_buf,
      rb:false, rc:vid, rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:0}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_insert_CUSTOMER compute_vid as
         {ra:CUSTOMER_CUSTKEY, rb:CUSTOMER_NAME, rc:CUSTOMER_ADDRESS, rd:CUSTOMER_NATIONKEY, re:CUSTOMER_PHONE, rf:CUSTOMER_ACCTBAL, rg:CUSTOMER_MKTSEGMENT, rh:CUSTOMER_COMMENT}
         in
         acc_count +
           insert_CUSTOMER_do_corrective_s0_m_QUERY3_mCUSTOMER4 {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:compute_vid,
             rf:CUSTOMER_CUSTKEY, rg:CUSTOMER_NAME, rh:CUSTOMER_ADDRESS,
             ri:CUSTOMER_NATIONKEY, rj:CUSTOMER_PHONE, rk:CUSTOMER_ACCTBAL,
             rl:CUSTOMER_MKTSEGMENT, rm:CUSTOMER_COMMENT, rn:delta_tuples}
       else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger insert_CUSTOMER_rcv_corrective_s1_m_QUERY3_mLINEITEM1_mCUSTOMER2 : {
  ra:address, rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int,
  value:int }, rf:collection { key:int, value:int } @ { Seq }, rg:collection {
  ra:int, rb:int, rc:int, rd:int, re:int } @ { Collection } } = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid,
  rf:compute_vids, rg:delta_tuples} in 
  ((nd_add_delta_to_int_date_int_int_int
      {ra:map_QUERY3_mLINEITEM1_mCUSTOMER2_s1_buf, rb:false, rc:vid,
      rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:1}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_insert_CUSTOMER compute_vid as
         {ra:CUSTOMER_CUSTKEY, rb:CUSTOMER_NAME, rc:CUSTOMER_ADDRESS, rd:CUSTOMER_NATIONKEY, re:CUSTOMER_PHONE, rf:CUSTOMER_ACCTBAL, rg:CUSTOMER_MKTSEGMENT, rh:CUSTOMER_COMMENT}
         in
         acc_count +
           insert_CUSTOMER_do_corrective_s1_m_QUERY3_mLINEITEM1_mCUSTOMER2
             {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
             re:compute_vid, rf:CUSTOMER_CUSTKEY, rg:CUSTOMER_NAME,
             rh:CUSTOMER_ADDRESS, ri:CUSTOMER_NATIONKEY, rj:CUSTOMER_PHONE,
             rk:CUSTOMER_ACCTBAL, rl:CUSTOMER_MKTSEGMENT, rm:CUSTOMER_COMMENT,
             rn:delta_tuples} else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger nd_delete_CUSTOMER_rcv_put : { ra:address, rb:collection { key:int,
  value:int } @ { Collection }, rc:{ key:int, value:int }, rd:int, re:string,
  rf:string, rg:int, rh:string, ri:real, rj:string, rk:string } = (\b1 ->
  bind b1 as {ra:sender_ip, rb:stmt_cnt_list, rc:vid, rd:CUSTOMER_CUSTKEY,
  re:CUSTOMER_NAME, rf:CUSTOMER_ADDRESS, rg:CUSTOMER_NATIONKEY,
  rh:CUSTOMER_PHONE, ri:CUSTOMER_ACCTBAL, rj:CUSTOMER_MKTSEGMENT,
  rk:CUSTOMER_COMMENT} in 
  (stmt_cnt_list.iterate ((\b1 -> bind b1 as {key:stmt_id, value:count} in 
   if nd_check_stmt_cntr_index {ra:vid, rb:stmt_id, rc:count}
   then if stmt_id == 5
     then
       nd_delete_CUSTOMER_do_complete_s5 {ra:vid, rb:CUSTOMER_CUSTKEY,
         rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
         rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
         ri:CUSTOMER_COMMENT}
     else if stmt_id == 4
       then
         nd_delete_CUSTOMER_do_complete_s4 {ra:vid, rb:CUSTOMER_CUSTKEY,
           rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
           rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
           ri:CUSTOMER_COMMENT}
       else if stmt_id == 3
         then
           nd_delete_CUSTOMER_do_complete_s3 {ra:vid, rb:CUSTOMER_CUSTKEY,
             rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
             rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
             ri:CUSTOMER_COMMENT} else () else ()));
   (sw_ack_rcv, sender_ip)<- {key:me, value:vid}))
trigger nd_delete_CUSTOMER_rcv_fetch : { ra:collection { key:int, value:int
  } @ { Collection }, rb:{ key:int, value:int }, rc:int, rd:string, re:string,
  rf:int, rg:string, rh:real, ri:string, rj:string } = (\b1 ->
  bind b1 as {ra:stmt_map_ids, rb:vid, rc:CUSTOMER_CUSTKEY, rd:CUSTOMER_NAME,
  re:CUSTOMER_ADDRESS, rf:CUSTOMER_NATIONKEY, rg:CUSTOMER_PHONE,
  rh:CUSTOMER_ACCTBAL, ri:CUSTOMER_MKTSEGMENT, rj:CUSTOMER_COMMENT} in 
  ((nd_log_write_delete_CUSTOMER {ra:vid, rb:CUSTOMER_CUSTKEY,
      rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
      rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
      ri:CUSTOMER_COMMENT});
   stmt_map_ids.iterate ((\b1 -> bind b1 as {key:stmt_id, value:map_id} in 
   if stmt_id == 3
   then if map_id == 7
     then (nd_delete_CUSTOMER_send_push_s3_m_QUERY3_mCUSTOMER2, me)<- {ra:vid,
       rb:CUSTOMER_CUSTKEY, rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS,
       re:CUSTOMER_NATIONKEY, rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL,
       rh:CUSTOMER_MKTSEGMENT, ri:CUSTOMER_COMMENT}
     else if map_id == 8
       then
         (nd_delete_CUSTOMER_send_push_s3_m_QUERY3_mCUSTOMER4, me)<- {ra:vid,
         rb:CUSTOMER_CUSTKEY, rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS,
         re:CUSTOMER_NATIONKEY, rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL,
         rh:CUSTOMER_MKTSEGMENT, ri:CUSTOMER_COMMENT}
       else error (print "nd_rcv_fetch: invalid map id")
   else if stmt_id == 4
     then if map_id == 3
       then
         (nd_delete_CUSTOMER_send_push_s4_m_QUERY3_mLINEITEM1_mCUSTOMER2, me)<- {ra:vid,
         rb:CUSTOMER_CUSTKEY, rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS,
         re:CUSTOMER_NATIONKEY, rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL,
         rh:CUSTOMER_MKTSEGMENT, ri:CUSTOMER_COMMENT}
       else error (print "nd_rcv_fetch: invalid map id")
     else error (print "nd_rcv_fetch: invalid stmt id")))))
trigger nd_delete_CUSTOMER_send_push_s3_m_QUERY3_mCUSTOMER2 : { ra:{ key:int,
  value:int }, rb:int, rc:string, rd:string, re:int, rf:string, rg:real,
  rh:string, ri:string } = (\b1 -> bind b1 as {ra:vid, rb:CUSTOMER_CUSTKEY,
  rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
  rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
  ri:CUSTOMER_COMMENT} in bind QUERY3_mCUSTOMER2 as ind QUERY3_mCUSTOMER2_deref
  in
  ((nd_log_master_write {key:vid, value:3});
   (shuffle_QUERY3_mCUSTOMER2_to_QUERY3_bind_0t0_1t1_2t2 {ra:None immut,
      rb:None immut, rc:None immut,
      rd:frontier_int_date_int_int_float {key:vid,
           value:QUERY3_mCUSTOMER2_deref.filter ((\b1 -> bind b1 as {ra:ra,
           rb:rb, rc:rc, rd:rd, re:re, rf:rf} in re == CUSTOMER_CUSTKEY))},
      re:true}).iterate ((\b1 -> bind b1 as {key:ip, value:tuples} in 
   (nd_delete_CUSTOMER_rcv_push_s3_m_QUERY3_mCUSTOMER2, ip)<- {ra:tuples,
   rb:vid, rc:CUSTOMER_CUSTKEY, rd:CUSTOMER_NAME, re:CUSTOMER_ADDRESS,
   rf:CUSTOMER_NATIONKEY, rg:CUSTOMER_PHONE, rh:CUSTOMER_ACCTBAL,
   ri:CUSTOMER_MKTSEGMENT, rj:CUSTOMER_COMMENT}))))
trigger nd_delete_CUSTOMER_send_push_s3_m_QUERY3_mCUSTOMER4 : { ra:{ key:int,
  value:int }, rb:int, rc:string, rd:string, re:int, rf:string, rg:real,
  rh:string, ri:string } = (\b1 -> bind b1 as {ra:vid, rb:CUSTOMER_CUSTKEY,
  rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
  rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
  ri:CUSTOMER_COMMENT} in bind QUERY3_mCUSTOMER4 as ind QUERY3_mCUSTOMER4_deref
  in
  ((nd_log_master_write {key:vid, value:3});
   (shuffle_QUERY3_mCUSTOMER4_to_QUERY3_bind_0t0_1t1_2t2 {ra:None immut,
      rb:None immut, rc:None immut,
      rd:frontier_int_date_int_int_float {key:vid,
           value:QUERY3_mCUSTOMER4_deref.filter ((\b1 -> bind b1 as {ra:ra,
           rb:rb, rc:rc, rd:rd, re:re, rf:rf} in re == CUSTOMER_CUSTKEY))},
      re:true}).iterate ((\b1 -> bind b1 as {key:ip, value:tuples} in 
   (nd_delete_CUSTOMER_rcv_push_s3_m_QUERY3_mCUSTOMER4, ip)<- {ra:tuples,
   rb:vid, rc:CUSTOMER_CUSTKEY, rd:CUSTOMER_NAME, re:CUSTOMER_ADDRESS,
   rf:CUSTOMER_NATIONKEY, rg:CUSTOMER_PHONE, rh:CUSTOMER_ACCTBAL,
   ri:CUSTOMER_MKTSEGMENT, rj:CUSTOMER_COMMENT}))))
trigger nd_delete_CUSTOMER_send_push_s4_m_QUERY3_mLINEITEM1_mCUSTOMER2 : { ra:{
  key:int, value:int }, rb:int, rc:string, rd:string, re:int, rf:string,
  rg:real, rh:string, ri:string } = (\b1 -> bind b1 as {ra:vid,
  rb:CUSTOMER_CUSTKEY, rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS,
  re:CUSTOMER_NATIONKEY, rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL,
  rh:CUSTOMER_MKTSEGMENT, ri:CUSTOMER_COMMENT} in bind
  QUERY3_mLINEITEM1_mCUSTOMER2 as ind QUERY3_mLINEITEM1_mCUSTOMER2_deref in
  ((nd_log_master_write {key:vid, value:4});
   (shuffle_QUERY3_mLINEITEM1_mCUSTOMER2_to_QUERY3_mLINEITEM1_bind_0t0_1t1_2t2
      {ra:None immut, rb:None immut, rc:None immut,
      rd:frontier_int_date_int_int_int {key:vid,
           value:QUERY3_mLINEITEM1_mCUSTOMER2_deref.filter ((\b1 ->
           bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd, re:re, rf:rf} in re ==
           CUSTOMER_CUSTKEY))}, re:true}).iterate ((\b1 -> bind b1 as {key:ip,
   value:tuples} in 
   (nd_delete_CUSTOMER_rcv_push_s4_m_QUERY3_mLINEITEM1_mCUSTOMER2, ip)<- {ra:tuples,
   rb:vid, rc:CUSTOMER_CUSTKEY, rd:CUSTOMER_NAME, re:CUSTOMER_ADDRESS,
   rf:CUSTOMER_NATIONKEY, rg:CUSTOMER_PHONE, rh:CUSTOMER_ACCTBAL,
   ri:CUSTOMER_MKTSEGMENT, rj:CUSTOMER_COMMENT}))))
trigger nd_delete_CUSTOMER_rcv_push_s3_m_QUERY3_mCUSTOMER2 : { ra:collection {
  ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:real
  } @ { Collection }, rb:{ key:int, value:int }, rc:int, rd:string, re:string,
  rf:int, rg:string, rh:real, ri:string, rj:string } = (\b1 ->
  bind b1 as {ra:tuples, rb:vid, rc:CUSTOMER_CUSTKEY, rd:CUSTOMER_NAME,
  re:CUSTOMER_ADDRESS, rf:CUSTOMER_NATIONKEY, rg:CUSTOMER_PHONE,
  rh:CUSTOMER_ACCTBAL, ri:CUSTOMER_MKTSEGMENT, rj:CUSTOMER_COMMENT} in 
  ((nd_log_write_delete_CUSTOMER {ra:vid, rb:CUSTOMER_CUSTKEY,
      rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
      rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
      ri:CUSTOMER_COMMENT});
   tuples.iterate ((\tuple -> bind map_QUERY3_mCUSTOMER2_s3_buf as ind
   map_QUERY3_mCUSTOMER2_s3_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2, rd:_tup3, re:_tup4, rf:_tup5}
     in
     case ((map_QUERY3_mCUSTOMER2_s3_buf_d.filter ((\b1 -> bind b1 as {ra:ra,
       rb:rb, rc:rc, rd:rd, re:re, rf:rf} in (((ra == _tup0 and re == _tup4)
       and rd == _tup3) and rc == _tup2) and rb == _tup1))).peek ()) of
       {Some vals -> map_QUERY3_mCUSTOMER2_s3_buf_d.update vals tuple}
       {None -> map_QUERY3_mCUSTOMER2_s3_buf_d.insert tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:3, rc:-1}
   then
     nd_delete_CUSTOMER_do_complete_s3 {ra:vid, rb:CUSTOMER_CUSTKEY,
       rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
       rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
       ri:CUSTOMER_COMMENT} else ())))
trigger nd_delete_CUSTOMER_rcv_push_s3_m_QUERY3_mCUSTOMER4 : { ra:collection {
  ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:real
  } @ { Collection }, rb:{ key:int, value:int }, rc:int, rd:string, re:string,
  rf:int, rg:string, rh:real, ri:string, rj:string } = (\b1 ->
  bind b1 as {ra:tuples, rb:vid, rc:CUSTOMER_CUSTKEY, rd:CUSTOMER_NAME,
  re:CUSTOMER_ADDRESS, rf:CUSTOMER_NATIONKEY, rg:CUSTOMER_PHONE,
  rh:CUSTOMER_ACCTBAL, ri:CUSTOMER_MKTSEGMENT, rj:CUSTOMER_COMMENT} in 
  ((nd_log_write_delete_CUSTOMER {ra:vid, rb:CUSTOMER_CUSTKEY,
      rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
      rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
      ri:CUSTOMER_COMMENT});
   tuples.iterate ((\tuple -> bind map_QUERY3_mCUSTOMER4_s3_buf as ind
   map_QUERY3_mCUSTOMER4_s3_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2, rd:_tup3, re:_tup4, rf:_tup5}
     in
     case ((map_QUERY3_mCUSTOMER4_s3_buf_d.filter ((\b1 -> bind b1 as {ra:ra,
       rb:rb, rc:rc, rd:rd, re:re, rf:rf} in (((ra == _tup0 and re == _tup4)
       and rd == _tup3) and rc == _tup2) and rb == _tup1))).peek ()) of
       {Some vals -> map_QUERY3_mCUSTOMER4_s3_buf_d.update vals tuple}
       {None -> map_QUERY3_mCUSTOMER4_s3_buf_d.insert tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:3, rc:-1}
   then
     nd_delete_CUSTOMER_do_complete_s3 {ra:vid, rb:CUSTOMER_CUSTKEY,
       rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
       rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
       ri:CUSTOMER_COMMENT} else ())))
trigger nd_delete_CUSTOMER_rcv_push_s4_m_QUERY3_mLINEITEM1_mCUSTOMER2 : {
  ra:collection { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int,
  rf:int } @ { Collection }, rb:{ key:int, value:int }, rc:int, rd:string,
  re:string, rf:int, rg:string, rh:real, ri:string, rj:string } = (\b1 ->
  bind b1 as {ra:tuples, rb:vid, rc:CUSTOMER_CUSTKEY, rd:CUSTOMER_NAME,
  re:CUSTOMER_ADDRESS, rf:CUSTOMER_NATIONKEY, rg:CUSTOMER_PHONE,
  rh:CUSTOMER_ACCTBAL, ri:CUSTOMER_MKTSEGMENT, rj:CUSTOMER_COMMENT} in 
  ((nd_log_write_delete_CUSTOMER {ra:vid, rb:CUSTOMER_CUSTKEY,
      rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
      rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
      ri:CUSTOMER_COMMENT});
   tuples.iterate ((\tuple -> bind map_QUERY3_mLINEITEM1_mCUSTOMER2_s4_buf as
   ind map_QUERY3_mLINEITEM1_mCUSTOMER2_s4_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2, rd:_tup3, re:_tup4, rf:_tup5}
     in
     case ((map_QUERY3_mLINEITEM1_mCUSTOMER2_s4_buf_d.filter ((\b1 ->
       bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd, re:re, rf:rf} in (((ra == _tup0
       and re == _tup4) and rd == _tup3) and rc == _tup2) and rb ==
       _tup1))).peek ()) of
       {Some vals -> map_QUERY3_mLINEITEM1_mCUSTOMER2_s4_buf_d.update vals
         tuple}{None -> map_QUERY3_mLINEITEM1_mCUSTOMER2_s4_buf_d.insert tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:4, rc:-1}
   then
     nd_delete_CUSTOMER_do_complete_s4 {ra:vid, rb:CUSTOMER_CUSTKEY,
       rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
       rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
       ri:CUSTOMER_COMMENT} else ())))
trigger nd_delete_CUSTOMER_do_complete_s5_trig : { ra:{ key:int, value:int },
  rb:int, rc:string, rd:string, re:int, rf:string, rg:real, rh:string,
  ri:string } = (\b1 -> bind b1 as {ra:vid, rb:CUSTOMER_CUSTKEY,
  rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
  rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
  ri:CUSTOMER_COMMENT} in 
  nd_delete_CUSTOMER_do_complete_s5 {ra:vid, rb:CUSTOMER_CUSTKEY,
    rc:CUSTOMER_NAME, rd:CUSTOMER_ADDRESS, re:CUSTOMER_NATIONKEY,
    rf:CUSTOMER_PHONE, rg:CUSTOMER_ACCTBAL, rh:CUSTOMER_MKTSEGMENT,
    ri:CUSTOMER_COMMENT})
trigger delete_CUSTOMER_rcv_corrective_s3_m_QUERY3_mCUSTOMER2 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int },
  rf:collection { key:int, value:int } @ { Seq }, rg:collection { ra:int,
  rb:int, rc:int, rd:int, re:real } @ { Collection } } = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid,
  rf:compute_vids, rg:delta_tuples} in 
  ((nd_add_delta_to_int_date_int_int_float {ra:map_QUERY3_mCUSTOMER2_s3_buf,
      rb:false, rc:vid, rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:3}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_delete_CUSTOMER compute_vid as
         {ra:CUSTOMER_CUSTKEY, rb:CUSTOMER_NAME, rc:CUSTOMER_ADDRESS, rd:CUSTOMER_NATIONKEY, re:CUSTOMER_PHONE, rf:CUSTOMER_ACCTBAL, rg:CUSTOMER_MKTSEGMENT, rh:CUSTOMER_COMMENT}
         in
         acc_count +
           delete_CUSTOMER_do_corrective_s3_m_QUERY3_mCUSTOMER2 {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:compute_vid,
             rf:CUSTOMER_CUSTKEY, rg:CUSTOMER_NAME, rh:CUSTOMER_ADDRESS,
             ri:CUSTOMER_NATIONKEY, rj:CUSTOMER_PHONE, rk:CUSTOMER_ACCTBAL,
             rl:CUSTOMER_MKTSEGMENT, rm:CUSTOMER_COMMENT, rn:delta_tuples}
       else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger delete_CUSTOMER_rcv_corrective_s3_m_QUERY3_mCUSTOMER4 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int },
  rf:collection { key:int, value:int } @ { Seq }, rg:collection { ra:int,
  rb:int, rc:int, rd:int, re:real } @ { Collection } } = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid,
  rf:compute_vids, rg:delta_tuples} in 
  ((nd_add_delta_to_int_date_int_int_float {ra:map_QUERY3_mCUSTOMER4_s3_buf,
      rb:false, rc:vid, rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:3}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_delete_CUSTOMER compute_vid as
         {ra:CUSTOMER_CUSTKEY, rb:CUSTOMER_NAME, rc:CUSTOMER_ADDRESS, rd:CUSTOMER_NATIONKEY, re:CUSTOMER_PHONE, rf:CUSTOMER_ACCTBAL, rg:CUSTOMER_MKTSEGMENT, rh:CUSTOMER_COMMENT}
         in
         acc_count +
           delete_CUSTOMER_do_corrective_s3_m_QUERY3_mCUSTOMER4 {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:compute_vid,
             rf:CUSTOMER_CUSTKEY, rg:CUSTOMER_NAME, rh:CUSTOMER_ADDRESS,
             ri:CUSTOMER_NATIONKEY, rj:CUSTOMER_PHONE, rk:CUSTOMER_ACCTBAL,
             rl:CUSTOMER_MKTSEGMENT, rm:CUSTOMER_COMMENT, rn:delta_tuples}
       else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger delete_CUSTOMER_rcv_corrective_s4_m_QUERY3_mLINEITEM1_mCUSTOMER2 : {
  ra:address, rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int,
  value:int }, rf:collection { key:int, value:int } @ { Seq }, rg:collection {
  ra:int, rb:int, rc:int, rd:int, re:int } @ { Collection } } = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid,
  rf:compute_vids, rg:delta_tuples} in 
  ((nd_add_delta_to_int_date_int_int_int
      {ra:map_QUERY3_mLINEITEM1_mCUSTOMER2_s4_buf, rb:false, rc:vid,
      rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:4}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_delete_CUSTOMER compute_vid as
         {ra:CUSTOMER_CUSTKEY, rb:CUSTOMER_NAME, rc:CUSTOMER_ADDRESS, rd:CUSTOMER_NATIONKEY, re:CUSTOMER_PHONE, rf:CUSTOMER_ACCTBAL, rg:CUSTOMER_MKTSEGMENT, rh:CUSTOMER_COMMENT}
         in
         acc_count +
           delete_CUSTOMER_do_corrective_s4_m_QUERY3_mLINEITEM1_mCUSTOMER2
             {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
             re:compute_vid, rf:CUSTOMER_CUSTKEY, rg:CUSTOMER_NAME,
             rh:CUSTOMER_ADDRESS, ri:CUSTOMER_NATIONKEY, rj:CUSTOMER_PHONE,
             rk:CUSTOMER_ACCTBAL, rl:CUSTOMER_MKTSEGMENT, rm:CUSTOMER_COMMENT,
             rn:delta_tuples} else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger nd_insert_ORDERS_rcv_put : { ra:address, rb:collection { key:int,
  value:int } @ { Collection }, rc:{ key:int, value:int }, rd:int, re:int,
  rf:string, rg:real, rh:int, ri:string, rj:string, rk:int, rl:string } =
  (\b1 -> bind b1 as {ra:sender_ip, rb:stmt_cnt_list, rc:vid,
  rd:ORDERS_ORDERKEY, re:ORDERS_CUSTKEY, rf:ORDERS_ORDERSTATUS,
  rg:ORDERS_TOTALPRICE, rh:ORDERS_ORDERDATE, ri:ORDERS_ORDERPRIORITY,
  rj:ORDERS_CLERK, rk:ORDERS_SHIPPRIORITY, rl:ORDERS_COMMENT} in 
  (stmt_cnt_list.iterate ((\b1 -> bind b1 as {key:stmt_id, value:count} in 
   if nd_check_stmt_cntr_index {ra:vid, rb:stmt_id, rc:count}
   then if stmt_id == 10
     then
       nd_insert_ORDERS_do_complete_s10 {ra:vid, rb:ORDERS_ORDERKEY,
         rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
         rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
         ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT}
     else if stmt_id == 9
       then
         nd_insert_ORDERS_do_complete_s9 {ra:vid, rb:ORDERS_ORDERKEY,
           rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
           rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
           ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT}
       else if stmt_id == 8
         then
           nd_insert_ORDERS_do_complete_s8 {ra:vid, rb:ORDERS_ORDERKEY,
             rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
             rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
             ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT}
         else if stmt_id == 7
           then
             nd_insert_ORDERS_do_complete_s7 {ra:vid, rb:ORDERS_ORDERKEY,
               rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
               rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
               ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT}
           else if stmt_id == 6
             then
               nd_insert_ORDERS_do_complete_s6 {ra:vid, rb:ORDERS_ORDERKEY,
                 rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
                 re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
                 rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
                 ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} else () else ()));
   (sw_ack_rcv, sender_ip)<- {key:me, value:vid}))
trigger nd_insert_ORDERS_rcv_fetch : { ra:collection { key:int, value:int
  } @ { Collection }, rb:{ key:int, value:int }, rc:int, rd:int, re:string,
  rf:real, rg:int, rh:string, ri:string, rj:int, rk:string } = (\b1 ->
  bind b1 as {ra:stmt_map_ids, rb:vid, rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY,
  re:ORDERS_ORDERSTATUS, rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE,
  rh:ORDERS_ORDERPRIORITY, ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY,
  rk:ORDERS_COMMENT} in 
  ((nd_log_write_insert_ORDERS {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
      rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
      rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
      rj:ORDERS_COMMENT});
   stmt_map_ids.iterate ((\b1 -> bind b1 as {key:stmt_id, value:map_id} in 
   if stmt_id == 6
   then if map_id == 4
     then (nd_insert_ORDERS_send_push_s6_m_QUERY3_mORDERS1, me)<- {ra:vid,
       rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
       re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY,
       rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT}
     else if map_id == 5
       then (nd_insert_ORDERS_send_push_s6_m_QUERY3_mORDERS3, me)<- {ra:vid,
         rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
         re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY,
         rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT}
       else if map_id == 6
         then (nd_insert_ORDERS_send_push_s6_m_QUERY3_mORDERS6, me)<- {ra:vid,
           rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
           re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY,
           rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT}
         else error (print "nd_rcv_fetch: invalid map id")
   else if stmt_id == 7
     then if map_id == 4
       then (nd_insert_ORDERS_send_push_s7_m_QUERY3_mORDERS1, me)<- {ra:vid,
         rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
         re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY,
         rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT}
       else error (print "nd_rcv_fetch: invalid map id")
     else if stmt_id == 9
       then if map_id == 5
         then (nd_insert_ORDERS_send_push_s9_m_QUERY3_mORDERS3, me)<- {ra:vid,
           rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
           re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY,
           rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT}
         else error (print "nd_rcv_fetch: invalid map id")
       else if stmt_id == 10
         then if map_id == 6
           then
             (nd_insert_ORDERS_send_push_s10_m_QUERY3_mORDERS6, me)<- {ra:vid,
             rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
             re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
             rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
             rj:ORDERS_COMMENT}
           else error (print "nd_rcv_fetch: invalid map id")
         else error (print "nd_rcv_fetch: invalid stmt id")))))
trigger nd_insert_ORDERS_send_push_s6_m_QUERY3_mORDERS1 : { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:string, re:real, rf:int, rg:string,
  rh:string, ri:int, rj:string } = (\b1 -> bind b1 as {ra:vid,
  rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
  re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY,
  rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} in bind
  QUERY3_mORDERS1 as ind QUERY3_mORDERS1_deref in
  ((nd_log_master_write {key:vid, value:6});
   (shuffle_QUERY3_mORDERS1_to_QUERY3 {ra:Some ORDERS_ORDERKEY,
      rb:Some ORDERS_ORDERDATE, rc:Some ORDERS_SHIPPRIORITY,
      rd:frontier_int_int {key:vid, value:QUERY3_mORDERS1_deref.filter ((\b1 ->
           bind b1 as {ra:ra, rb:rb, rc:rc} in rb == ORDERS_CUSTKEY))},
      re:true}).iterate ((\b1 -> bind b1 as {key:ip, value:tuples} in 
   (nd_insert_ORDERS_rcv_push_s6_m_QUERY3_mORDERS1, ip)<- {ra:tuples, rb:vid,
   rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
   rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
   ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT}))))
trigger nd_insert_ORDERS_send_push_s6_m_QUERY3_mORDERS3 : { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:string, re:real, rf:int, rg:string,
  rh:string, ri:int, rj:string } = (\b1 -> bind b1 as {ra:vid,
  rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
  re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY,
  rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} in bind
  QUERY3_mORDERS3 as ind QUERY3_mORDERS3_deref in
  ((nd_log_master_write {key:vid, value:6});
   (shuffle_QUERY3_mORDERS3_to_QUERY3_bind_0t0 {ra:Some ORDERS_ORDERKEY,
      rb:Some ORDERS_ORDERDATE, rc:Some ORDERS_SHIPPRIORITY,
      rd:frontier_int_float {key:vid, value:QUERY3_mORDERS3_deref.filter
           ((\b1 -> bind b1 as {ra:ra, rb:rb, rc:rc} in rb ==
           ORDERS_ORDERKEY))}, re:true}).iterate ((\b1 -> bind b1 as {key:ip,
   value:tuples} in 
   (nd_insert_ORDERS_rcv_push_s6_m_QUERY3_mORDERS3, ip)<- {ra:tuples, rb:vid,
   rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
   rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
   ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT}))))
trigger nd_insert_ORDERS_send_push_s6_m_QUERY3_mORDERS6 : { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:string, re:real, rf:int, rg:string,
  rh:string, ri:int, rj:string } = (\b1 -> bind b1 as {ra:vid,
  rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
  re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY,
  rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} in bind
  QUERY3_mORDERS6 as ind QUERY3_mORDERS6_deref in
  ((nd_log_master_write {key:vid, value:6});
   (shuffle_QUERY3_mORDERS6_to_QUERY3_bind_0t0 {ra:Some ORDERS_ORDERKEY,
      rb:Some ORDERS_ORDERDATE, rc:Some ORDERS_SHIPPRIORITY,
      rd:frontier_int_float {key:vid, value:QUERY3_mORDERS6_deref.filter
           ((\b1 -> bind b1 as {ra:ra, rb:rb, rc:rc} in rb ==
           ORDERS_ORDERKEY))}, re:true}).iterate ((\b1 -> bind b1 as {key:ip,
   value:tuples} in 
   (nd_insert_ORDERS_rcv_push_s6_m_QUERY3_mORDERS6, ip)<- {ra:tuples, rb:vid,
   rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
   rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
   ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT}))))
trigger nd_insert_ORDERS_send_push_s7_m_QUERY3_mORDERS1 : { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:string, re:real, rf:int, rg:string,
  rh:string, ri:int, rj:string } = (\b1 -> bind b1 as {ra:vid,
  rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
  re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY,
  rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} in bind
  QUERY3_mORDERS1 as ind QUERY3_mORDERS1_deref in
  ((nd_log_master_write {key:vid, value:7});
   (shuffle_QUERY3_mORDERS1_to_QUERY3_mLINEITEM1 {ra:Some ORDERS_ORDERKEY,
      rb:Some ORDERS_ORDERDATE, rc:Some ORDERS_SHIPPRIORITY,
      rd:frontier_int_int {key:vid, value:QUERY3_mORDERS1_deref.filter ((\b1 ->
           bind b1 as {ra:ra, rb:rb, rc:rc} in rb == ORDERS_CUSTKEY))},
      re:true}).iterate ((\b1 -> bind b1 as {key:ip, value:tuples} in 
   (nd_insert_ORDERS_rcv_push_s7_m_QUERY3_mORDERS1, ip)<- {ra:tuples, rb:vid,
   rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
   rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
   ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT}))))
trigger nd_insert_ORDERS_send_push_s9_m_QUERY3_mORDERS3 : { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:string, re:real, rf:int, rg:string,
  rh:string, ri:int, rj:string } = (\b1 -> bind b1 as {ra:vid,
  rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
  re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY,
  rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} in bind
  QUERY3_mORDERS3 as ind QUERY3_mORDERS3_deref in
  ((nd_log_master_write {key:vid, value:9});
   (shuffle_QUERY3_mORDERS3_to_QUERY3_mCUSTOMER2_bind_0t0
      {ra:Some ORDERS_ORDERKEY, rb:Some ORDERS_ORDERDATE,
      rc:Some ORDERS_SHIPPRIORITY, rd:Some ORDERS_CUSTKEY,
      re:frontier_int_float {key:vid, value:QUERY3_mORDERS3_deref.filter
           ((\b1 -> bind b1 as {ra:ra, rb:rb, rc:rc} in rb ==
           ORDERS_ORDERKEY))}, rf:true}).iterate ((\b1 -> bind b1 as {key:ip,
   value:tuples} in 
   (nd_insert_ORDERS_rcv_push_s9_m_QUERY3_mORDERS3, ip)<- {ra:tuples, rb:vid,
   rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
   rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
   ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT}))))
trigger nd_insert_ORDERS_send_push_s10_m_QUERY3_mORDERS6 : { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:string, re:real, rf:int, rg:string,
  rh:string, ri:int, rj:string } = (\b1 -> bind b1 as {ra:vid,
  rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
  re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY,
  rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} in bind
  QUERY3_mORDERS6 as ind QUERY3_mORDERS6_deref in
  ((nd_log_master_write {key:vid, value:10});
   (shuffle_QUERY3_mORDERS6_to_QUERY3_mCUSTOMER4_bind_0t0
      {ra:Some ORDERS_ORDERKEY, rb:Some ORDERS_ORDERDATE,
      rc:Some ORDERS_SHIPPRIORITY, rd:Some ORDERS_CUSTKEY,
      re:frontier_int_float {key:vid, value:QUERY3_mORDERS6_deref.filter
           ((\b1 -> bind b1 as {ra:ra, rb:rb, rc:rc} in rb ==
           ORDERS_ORDERKEY))}, rf:true}).iterate ((\b1 -> bind b1 as {key:ip,
   value:tuples} in 
   (nd_insert_ORDERS_rcv_push_s10_m_QUERY3_mORDERS6, ip)<- {ra:tuples, rb:vid,
   rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
   rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
   ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT}))))
trigger nd_insert_ORDERS_rcv_push_s6_m_QUERY3_mORDERS1 : { ra:collection { ra:{
  key:int, value:int }, rb:int, rc:int } @ { Collection }, rb:{ key:int,
  value:int }, rc:int, rd:int, re:string, rf:real, rg:int, rh:string,
  ri:string, rj:int, rk:string } = (\b1 -> bind b1 as {ra:tuples, rb:vid,
  rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
  rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
  ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT} in 
  ((nd_log_write_insert_ORDERS {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
      rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
      rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
      rj:ORDERS_COMMENT});
   tuples.iterate ((\tuple -> bind map_QUERY3_mORDERS1_s6_buf as ind
   map_QUERY3_mORDERS1_s6_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2} in
     case ((map_QUERY3_mORDERS1_s6_buf_d.filter ((\b1 -> bind b1 as {ra:ra,
       rb:rb, rc:rc} in ra == _tup0 and rb == _tup1))).peek ()) of
       {Some vals -> map_QUERY3_mORDERS1_s6_buf_d.update vals tuple}{None ->
                                                                    map_QUERY3_mORDERS1_s6_buf_d.insert
                                                                    tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:6, rc:-1}
   then
     nd_insert_ORDERS_do_complete_s6 {ra:vid, rb:ORDERS_ORDERKEY,
       rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
       rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
       ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} else ())))
trigger nd_insert_ORDERS_rcv_push_s6_m_QUERY3_mORDERS3 : { ra:collection { ra:{
  key:int, value:int }, rb:int, rc:real } @ { Collection }, rb:{ key:int,
  value:int }, rc:int, rd:int, re:string, rf:real, rg:int, rh:string,
  ri:string, rj:int, rk:string } = (\b1 -> bind b1 as {ra:tuples, rb:vid,
  rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
  rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
  ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT} in 
  ((nd_log_write_insert_ORDERS {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
      rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
      rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
      rj:ORDERS_COMMENT});
   tuples.iterate ((\tuple -> bind map_QUERY3_mORDERS3_s6_buf as ind
   map_QUERY3_mORDERS3_s6_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2} in
     case ((map_QUERY3_mORDERS3_s6_buf_d.filter ((\b1 -> bind b1 as {ra:ra,
       rb:rb, rc:rc} in ra == _tup0 and rb == _tup1))).peek ()) of
       {Some vals -> map_QUERY3_mORDERS3_s6_buf_d.update vals tuple}{None ->
                                                                    map_QUERY3_mORDERS3_s6_buf_d.insert
                                                                    tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:6, rc:-1}
   then
     nd_insert_ORDERS_do_complete_s6 {ra:vid, rb:ORDERS_ORDERKEY,
       rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
       rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
       ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} else ())))
trigger nd_insert_ORDERS_rcv_push_s6_m_QUERY3_mORDERS6 : { ra:collection { ra:{
  key:int, value:int }, rb:int, rc:real } @ { Collection }, rb:{ key:int,
  value:int }, rc:int, rd:int, re:string, rf:real, rg:int, rh:string,
  ri:string, rj:int, rk:string } = (\b1 -> bind b1 as {ra:tuples, rb:vid,
  rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
  rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
  ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT} in 
  ((nd_log_write_insert_ORDERS {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
      rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
      rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
      rj:ORDERS_COMMENT});
   tuples.iterate ((\tuple -> bind map_QUERY3_mORDERS6_s6_buf as ind
   map_QUERY3_mORDERS6_s6_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2} in
     case ((map_QUERY3_mORDERS6_s6_buf_d.filter ((\b1 -> bind b1 as {ra:ra,
       rb:rb, rc:rc} in ra == _tup0 and rb == _tup1))).peek ()) of
       {Some vals -> map_QUERY3_mORDERS6_s6_buf_d.update vals tuple}{None ->
                                                                    map_QUERY3_mORDERS6_s6_buf_d.insert
                                                                    tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:6, rc:-1}
   then
     nd_insert_ORDERS_do_complete_s6 {ra:vid, rb:ORDERS_ORDERKEY,
       rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
       rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
       ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} else ())))
trigger nd_insert_ORDERS_rcv_push_s7_m_QUERY3_mORDERS1 : { ra:collection { ra:{
  key:int, value:int }, rb:int, rc:int } @ { Collection }, rb:{ key:int,
  value:int }, rc:int, rd:int, re:string, rf:real, rg:int, rh:string,
  ri:string, rj:int, rk:string } = (\b1 -> bind b1 as {ra:tuples, rb:vid,
  rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
  rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
  ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT} in 
  ((nd_log_write_insert_ORDERS {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
      rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
      rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
      rj:ORDERS_COMMENT});
   tuples.iterate ((\tuple -> bind map_QUERY3_mORDERS1_s7_buf as ind
   map_QUERY3_mORDERS1_s7_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2} in
     case ((map_QUERY3_mORDERS1_s7_buf_d.filter ((\b1 -> bind b1 as {ra:ra,
       rb:rb, rc:rc} in ra == _tup0 and rb == _tup1))).peek ()) of
       {Some vals -> map_QUERY3_mORDERS1_s7_buf_d.update vals tuple}{None ->
                                                                    map_QUERY3_mORDERS1_s7_buf_d.insert
                                                                    tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:7, rc:-1}
   then
     nd_insert_ORDERS_do_complete_s7 {ra:vid, rb:ORDERS_ORDERKEY,
       rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
       rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
       ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} else ())))
trigger nd_insert_ORDERS_rcv_push_s9_m_QUERY3_mORDERS3 : { ra:collection { ra:{
  key:int, value:int }, rb:int, rc:real } @ { Collection }, rb:{ key:int,
  value:int }, rc:int, rd:int, re:string, rf:real, rg:int, rh:string,
  ri:string, rj:int, rk:string } = (\b1 -> bind b1 as {ra:tuples, rb:vid,
  rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
  rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
  ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT} in 
  ((nd_log_write_insert_ORDERS {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
      rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
      rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
      rj:ORDERS_COMMENT});
   tuples.iterate ((\tuple -> bind map_QUERY3_mORDERS3_s9_buf as ind
   map_QUERY3_mORDERS3_s9_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2} in
     case ((map_QUERY3_mORDERS3_s9_buf_d.filter ((\b1 -> bind b1 as {ra:ra,
       rb:rb, rc:rc} in ra == _tup0 and rb == _tup1))).peek ()) of
       {Some vals -> map_QUERY3_mORDERS3_s9_buf_d.update vals tuple}{None ->
                                                                    map_QUERY3_mORDERS3_s9_buf_d.insert
                                                                    tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:9, rc:-1}
   then
     nd_insert_ORDERS_do_complete_s9 {ra:vid, rb:ORDERS_ORDERKEY,
       rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
       rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
       ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} else ())))
trigger nd_insert_ORDERS_rcv_push_s10_m_QUERY3_mORDERS6 : { ra:collection {
  ra:{ key:int, value:int }, rb:int, rc:real } @ { Collection }, rb:{ key:int,
  value:int }, rc:int, rd:int, re:string, rf:real, rg:int, rh:string,
  ri:string, rj:int, rk:string } = (\b1 -> bind b1 as {ra:tuples, rb:vid,
  rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
  rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
  ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT} in 
  ((nd_log_write_insert_ORDERS {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
      rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
      rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
      rj:ORDERS_COMMENT});
   tuples.iterate ((\tuple -> bind map_QUERY3_mORDERS6_s10_buf as ind
   map_QUERY3_mORDERS6_s10_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2} in
     case ((map_QUERY3_mORDERS6_s10_buf_d.filter ((\b1 -> bind b1 as {ra:ra,
       rb:rb, rc:rc} in ra == _tup0 and rb == _tup1))).peek ()) of
       {Some vals -> map_QUERY3_mORDERS6_s10_buf_d.update vals tuple}
       {None -> map_QUERY3_mORDERS6_s10_buf_d.insert tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:10, rc:-1}
   then
     nd_insert_ORDERS_do_complete_s10 {ra:vid, rb:ORDERS_ORDERKEY,
       rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
       rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
       ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} else ())))
trigger nd_insert_ORDERS_do_complete_s8_trig : { ra:{ key:int, value:int },
  rb:int, rc:int, rd:string, re:real, rf:int, rg:string, rh:string, ri:int,
  rj:string } = (\b1 -> bind b1 as {ra:vid, rb:ORDERS_ORDERKEY,
  rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
  rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
  ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} in 
  nd_insert_ORDERS_do_complete_s8 {ra:vid, rb:ORDERS_ORDERKEY,
    rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
    rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
    ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT})
trigger insert_ORDERS_rcv_corrective_s6_m_QUERY3_mORDERS1 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int },
  rf:collection { key:int, value:int } @ { Seq }, rg:collection { key:int,
  value:int } @ { Collection } } = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:compute_vids,
  rg:delta_tuples} in 
  ((nd_add_delta_to_int_int {ra:map_QUERY3_mORDERS1_s6_buf, rb:false, rc:vid,
      rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:6}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_insert_ORDERS compute_vid as
         {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
         in
         acc_count +
           insert_ORDERS_do_corrective_s6_m_QUERY3_mORDERS1 {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:compute_vid,
             rf:ORDERS_ORDERKEY, rg:ORDERS_CUSTKEY, rh:ORDERS_ORDERSTATUS,
             ri:ORDERS_TOTALPRICE, rj:ORDERS_ORDERDATE,
             rk:ORDERS_ORDERPRIORITY, rl:ORDERS_CLERK, rm:ORDERS_SHIPPRIORITY,
             rn:ORDERS_COMMENT, ro:delta_tuples} else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger insert_ORDERS_rcv_corrective_s6_m_QUERY3_mORDERS3 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int },
  rf:collection { key:int, value:int } @ { Seq }, rg:collection { key:int,
  value:real } @ { Collection } } = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:compute_vids,
  rg:delta_tuples} in 
  ((nd_add_delta_to_int_float {ra:map_QUERY3_mORDERS3_s6_buf, rb:false, rc:vid,
      rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:6}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_insert_ORDERS compute_vid as
         {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
         in
         acc_count +
           insert_ORDERS_do_corrective_s6_m_QUERY3_mORDERS3 {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:compute_vid,
             rf:ORDERS_ORDERKEY, rg:ORDERS_CUSTKEY, rh:ORDERS_ORDERSTATUS,
             ri:ORDERS_TOTALPRICE, rj:ORDERS_ORDERDATE,
             rk:ORDERS_ORDERPRIORITY, rl:ORDERS_CLERK, rm:ORDERS_SHIPPRIORITY,
             rn:ORDERS_COMMENT, ro:delta_tuples} else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger insert_ORDERS_rcv_corrective_s6_m_QUERY3_mORDERS6 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int },
  rf:collection { key:int, value:int } @ { Seq }, rg:collection { key:int,
  value:real } @ { Collection } } = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:compute_vids,
  rg:delta_tuples} in 
  ((nd_add_delta_to_int_float {ra:map_QUERY3_mORDERS6_s6_buf, rb:false, rc:vid,
      rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:6}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_insert_ORDERS compute_vid as
         {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
         in
         acc_count +
           insert_ORDERS_do_corrective_s6_m_QUERY3_mORDERS6 {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:compute_vid,
             rf:ORDERS_ORDERKEY, rg:ORDERS_CUSTKEY, rh:ORDERS_ORDERSTATUS,
             ri:ORDERS_TOTALPRICE, rj:ORDERS_ORDERDATE,
             rk:ORDERS_ORDERPRIORITY, rl:ORDERS_CLERK, rm:ORDERS_SHIPPRIORITY,
             rn:ORDERS_COMMENT, ro:delta_tuples} else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger insert_ORDERS_rcv_corrective_s7_m_QUERY3_mORDERS1 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int },
  rf:collection { key:int, value:int } @ { Seq }, rg:collection { key:int,
  value:int } @ { Collection } } = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:compute_vids,
  rg:delta_tuples} in 
  ((nd_add_delta_to_int_int {ra:map_QUERY3_mORDERS1_s7_buf, rb:false, rc:vid,
      rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:7}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_insert_ORDERS compute_vid as
         {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
         in
         acc_count +
           insert_ORDERS_do_corrective_s7_m_QUERY3_mORDERS1 {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:compute_vid,
             rf:ORDERS_ORDERKEY, rg:ORDERS_CUSTKEY, rh:ORDERS_ORDERSTATUS,
             ri:ORDERS_TOTALPRICE, rj:ORDERS_ORDERDATE,
             rk:ORDERS_ORDERPRIORITY, rl:ORDERS_CLERK, rm:ORDERS_SHIPPRIORITY,
             rn:ORDERS_COMMENT, ro:delta_tuples} else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger insert_ORDERS_rcv_corrective_s9_m_QUERY3_mORDERS3 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int },
  rf:collection { key:int, value:int } @ { Seq }, rg:collection { key:int,
  value:real } @ { Collection } } = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:compute_vids,
  rg:delta_tuples} in 
  ((nd_add_delta_to_int_float {ra:map_QUERY3_mORDERS3_s9_buf, rb:false, rc:vid,
      rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:9}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_insert_ORDERS compute_vid as
         {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
         in
         acc_count +
           insert_ORDERS_do_corrective_s9_m_QUERY3_mORDERS3 {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:compute_vid,
             rf:ORDERS_ORDERKEY, rg:ORDERS_CUSTKEY, rh:ORDERS_ORDERSTATUS,
             ri:ORDERS_TOTALPRICE, rj:ORDERS_ORDERDATE,
             rk:ORDERS_ORDERPRIORITY, rl:ORDERS_CLERK, rm:ORDERS_SHIPPRIORITY,
             rn:ORDERS_COMMENT, ro:delta_tuples} else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger insert_ORDERS_rcv_corrective_s10_m_QUERY3_mORDERS6 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int },
  rf:collection { key:int, value:int } @ { Seq }, rg:collection { key:int,
  value:real } @ { Collection } } = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:compute_vids,
  rg:delta_tuples} in 
  ((nd_add_delta_to_int_float {ra:map_QUERY3_mORDERS6_s10_buf, rb:false,
      rc:vid, rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:10}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_insert_ORDERS compute_vid as
         {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
         in
         acc_count +
           insert_ORDERS_do_corrective_s10_m_QUERY3_mORDERS6 {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:compute_vid,
             rf:ORDERS_ORDERKEY, rg:ORDERS_CUSTKEY, rh:ORDERS_ORDERSTATUS,
             ri:ORDERS_TOTALPRICE, rj:ORDERS_ORDERDATE,
             rk:ORDERS_ORDERPRIORITY, rl:ORDERS_CLERK, rm:ORDERS_SHIPPRIORITY,
             rn:ORDERS_COMMENT, ro:delta_tuples} else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger nd_delete_ORDERS_rcv_put : { ra:address, rb:collection { key:int,
  value:int } @ { Collection }, rc:{ key:int, value:int }, rd:int, re:int,
  rf:string, rg:real, rh:int, ri:string, rj:string, rk:int, rl:string } =
  (\b1 -> bind b1 as {ra:sender_ip, rb:stmt_cnt_list, rc:vid,
  rd:ORDERS_ORDERKEY, re:ORDERS_CUSTKEY, rf:ORDERS_ORDERSTATUS,
  rg:ORDERS_TOTALPRICE, rh:ORDERS_ORDERDATE, ri:ORDERS_ORDERPRIORITY,
  rj:ORDERS_CLERK, rk:ORDERS_SHIPPRIORITY, rl:ORDERS_COMMENT} in 
  (stmt_cnt_list.iterate ((\b1 -> bind b1 as {key:stmt_id, value:count} in 
   if nd_check_stmt_cntr_index {ra:vid, rb:stmt_id, rc:count}
   then if stmt_id == 15
     then
       nd_delete_ORDERS_do_complete_s15 {ra:vid, rb:ORDERS_ORDERKEY,
         rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
         rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
         ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT}
     else if stmt_id == 14
       then
         nd_delete_ORDERS_do_complete_s14 {ra:vid, rb:ORDERS_ORDERKEY,
           rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
           rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
           ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT}
       else if stmt_id == 13
         then
           nd_delete_ORDERS_do_complete_s13 {ra:vid, rb:ORDERS_ORDERKEY,
             rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
             rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
             ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT}
         else if stmt_id == 12
           then
             nd_delete_ORDERS_do_complete_s12 {ra:vid, rb:ORDERS_ORDERKEY,
               rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
               rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
               ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT}
           else if stmt_id == 11
             then
               nd_delete_ORDERS_do_complete_s11 {ra:vid, rb:ORDERS_ORDERKEY,
                 rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
                 re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
                 rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
                 ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} else () else ()));
   (sw_ack_rcv, sender_ip)<- {key:me, value:vid}))
trigger nd_delete_ORDERS_rcv_fetch : { ra:collection { key:int, value:int
  } @ { Collection }, rb:{ key:int, value:int }, rc:int, rd:int, re:string,
  rf:real, rg:int, rh:string, ri:string, rj:int, rk:string } = (\b1 ->
  bind b1 as {ra:stmt_map_ids, rb:vid, rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY,
  re:ORDERS_ORDERSTATUS, rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE,
  rh:ORDERS_ORDERPRIORITY, ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY,
  rk:ORDERS_COMMENT} in 
  ((nd_log_write_delete_ORDERS {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
      rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
      rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
      rj:ORDERS_COMMENT});
   stmt_map_ids.iterate ((\b1 -> bind b1 as {key:stmt_id, value:map_id} in 
   if stmt_id == 11
   then if map_id == 4
     then (nd_delete_ORDERS_send_push_s11_m_QUERY3_mORDERS1, me)<- {ra:vid,
       rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
       re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY,
       rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT}
     else if map_id == 5
       then (nd_delete_ORDERS_send_push_s11_m_QUERY3_mORDERS3, me)<- {ra:vid,
         rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
         re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY,
         rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT}
       else if map_id == 6
         then (nd_delete_ORDERS_send_push_s11_m_QUERY3_mORDERS6, me)<- {ra:vid,
           rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
           re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY,
           rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT}
         else error (print "nd_rcv_fetch: invalid map id")
   else if stmt_id == 12
     then if map_id == 4
       then (nd_delete_ORDERS_send_push_s12_m_QUERY3_mORDERS1, me)<- {ra:vid,
         rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
         re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY,
         rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT}
       else error (print "nd_rcv_fetch: invalid map id")
     else if stmt_id == 14
       then if map_id == 5
         then (nd_delete_ORDERS_send_push_s14_m_QUERY3_mORDERS3, me)<- {ra:vid,
           rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
           re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY,
           rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT}
         else error (print "nd_rcv_fetch: invalid map id")
       else if stmt_id == 15
         then if map_id == 6
           then
             (nd_delete_ORDERS_send_push_s15_m_QUERY3_mORDERS6, me)<- {ra:vid,
             rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
             re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
             rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
             rj:ORDERS_COMMENT}
           else error (print "nd_rcv_fetch: invalid map id")
         else error (print "nd_rcv_fetch: invalid stmt id")))))
trigger nd_delete_ORDERS_send_push_s11_m_QUERY3_mORDERS1 : { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:string, re:real, rf:int, rg:string,
  rh:string, ri:int, rj:string } = (\b1 -> bind b1 as {ra:vid,
  rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
  re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY,
  rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} in bind
  QUERY3_mORDERS1 as ind QUERY3_mORDERS1_deref in
  ((nd_log_master_write {key:vid, value:11});
   (shuffle_QUERY3_mORDERS1_to_QUERY3 {ra:Some ORDERS_ORDERKEY,
      rb:Some ORDERS_ORDERDATE, rc:Some ORDERS_SHIPPRIORITY,
      rd:frontier_int_int {key:vid, value:QUERY3_mORDERS1_deref.filter ((\b1 ->
           bind b1 as {ra:ra, rb:rb, rc:rc} in rb == ORDERS_CUSTKEY))},
      re:true}).iterate ((\b1 -> bind b1 as {key:ip, value:tuples} in 
   (nd_delete_ORDERS_rcv_push_s11_m_QUERY3_mORDERS1, ip)<- {ra:tuples, rb:vid,
   rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
   rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
   ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT}))))
trigger nd_delete_ORDERS_send_push_s11_m_QUERY3_mORDERS3 : { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:string, re:real, rf:int, rg:string,
  rh:string, ri:int, rj:string } = (\b1 -> bind b1 as {ra:vid,
  rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
  re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY,
  rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} in bind
  QUERY3_mORDERS3 as ind QUERY3_mORDERS3_deref in
  ((nd_log_master_write {key:vid, value:11});
   (shuffle_QUERY3_mORDERS3_to_QUERY3_bind_0t0 {ra:Some ORDERS_ORDERKEY,
      rb:Some ORDERS_ORDERDATE, rc:Some ORDERS_SHIPPRIORITY,
      rd:frontier_int_float {key:vid, value:QUERY3_mORDERS3_deref.filter
           ((\b1 -> bind b1 as {ra:ra, rb:rb, rc:rc} in rb ==
           ORDERS_ORDERKEY))}, re:true}).iterate ((\b1 -> bind b1 as {key:ip,
   value:tuples} in 
   (nd_delete_ORDERS_rcv_push_s11_m_QUERY3_mORDERS3, ip)<- {ra:tuples, rb:vid,
   rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
   rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
   ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT}))))
trigger nd_delete_ORDERS_send_push_s11_m_QUERY3_mORDERS6 : { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:string, re:real, rf:int, rg:string,
  rh:string, ri:int, rj:string } = (\b1 -> bind b1 as {ra:vid,
  rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
  re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY,
  rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} in bind
  QUERY3_mORDERS6 as ind QUERY3_mORDERS6_deref in
  ((nd_log_master_write {key:vid, value:11});
   (shuffle_QUERY3_mORDERS6_to_QUERY3_bind_0t0 {ra:Some ORDERS_ORDERKEY,
      rb:Some ORDERS_ORDERDATE, rc:Some ORDERS_SHIPPRIORITY,
      rd:frontier_int_float {key:vid, value:QUERY3_mORDERS6_deref.filter
           ((\b1 -> bind b1 as {ra:ra, rb:rb, rc:rc} in rb ==
           ORDERS_ORDERKEY))}, re:true}).iterate ((\b1 -> bind b1 as {key:ip,
   value:tuples} in 
   (nd_delete_ORDERS_rcv_push_s11_m_QUERY3_mORDERS6, ip)<- {ra:tuples, rb:vid,
   rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
   rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
   ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT}))))
trigger nd_delete_ORDERS_send_push_s12_m_QUERY3_mORDERS1 : { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:string, re:real, rf:int, rg:string,
  rh:string, ri:int, rj:string } = (\b1 -> bind b1 as {ra:vid,
  rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
  re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY,
  rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} in bind
  QUERY3_mORDERS1 as ind QUERY3_mORDERS1_deref in
  ((nd_log_master_write {key:vid, value:12});
   (shuffle_QUERY3_mORDERS1_to_QUERY3_mLINEITEM1 {ra:Some ORDERS_ORDERKEY,
      rb:Some ORDERS_ORDERDATE, rc:Some ORDERS_SHIPPRIORITY,
      rd:frontier_int_int {key:vid, value:QUERY3_mORDERS1_deref.filter ((\b1 ->
           bind b1 as {ra:ra, rb:rb, rc:rc} in rb == ORDERS_CUSTKEY))},
      re:true}).iterate ((\b1 -> bind b1 as {key:ip, value:tuples} in 
   (nd_delete_ORDERS_rcv_push_s12_m_QUERY3_mORDERS1, ip)<- {ra:tuples, rb:vid,
   rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
   rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
   ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT}))))
trigger nd_delete_ORDERS_send_push_s14_m_QUERY3_mORDERS3 : { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:string, re:real, rf:int, rg:string,
  rh:string, ri:int, rj:string } = (\b1 -> bind b1 as {ra:vid,
  rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
  re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY,
  rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} in bind
  QUERY3_mORDERS3 as ind QUERY3_mORDERS3_deref in
  ((nd_log_master_write {key:vid, value:14});
   (shuffle_QUERY3_mORDERS3_to_QUERY3_mCUSTOMER2_bind_0t0
      {ra:Some ORDERS_ORDERKEY, rb:Some ORDERS_ORDERDATE,
      rc:Some ORDERS_SHIPPRIORITY, rd:Some ORDERS_CUSTKEY,
      re:frontier_int_float {key:vid, value:QUERY3_mORDERS3_deref.filter
           ((\b1 -> bind b1 as {ra:ra, rb:rb, rc:rc} in rb ==
           ORDERS_ORDERKEY))}, rf:true}).iterate ((\b1 -> bind b1 as {key:ip,
   value:tuples} in 
   (nd_delete_ORDERS_rcv_push_s14_m_QUERY3_mORDERS3, ip)<- {ra:tuples, rb:vid,
   rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
   rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
   ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT}))))
trigger nd_delete_ORDERS_send_push_s15_m_QUERY3_mORDERS6 : { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:string, re:real, rf:int, rg:string,
  rh:string, ri:int, rj:string } = (\b1 -> bind b1 as {ra:vid,
  rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS,
  re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY,
  rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} in bind
  QUERY3_mORDERS6 as ind QUERY3_mORDERS6_deref in
  ((nd_log_master_write {key:vid, value:15});
   (shuffle_QUERY3_mORDERS6_to_QUERY3_mCUSTOMER4_bind_0t0
      {ra:Some ORDERS_ORDERKEY, rb:Some ORDERS_ORDERDATE,
      rc:Some ORDERS_SHIPPRIORITY, rd:Some ORDERS_CUSTKEY,
      re:frontier_int_float {key:vid, value:QUERY3_mORDERS6_deref.filter
           ((\b1 -> bind b1 as {ra:ra, rb:rb, rc:rc} in rb ==
           ORDERS_ORDERKEY))}, rf:true}).iterate ((\b1 -> bind b1 as {key:ip,
   value:tuples} in 
   (nd_delete_ORDERS_rcv_push_s15_m_QUERY3_mORDERS6, ip)<- {ra:tuples, rb:vid,
   rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
   rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
   ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT}))))
trigger nd_delete_ORDERS_rcv_push_s11_m_QUERY3_mORDERS1 : { ra:collection {
  ra:{ key:int, value:int }, rb:int, rc:int } @ { Collection }, rb:{ key:int,
  value:int }, rc:int, rd:int, re:string, rf:real, rg:int, rh:string,
  ri:string, rj:int, rk:string } = (\b1 -> bind b1 as {ra:tuples, rb:vid,
  rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
  rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
  ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT} in 
  ((nd_log_write_delete_ORDERS {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
      rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
      rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
      rj:ORDERS_COMMENT});
   tuples.iterate ((\tuple -> bind map_QUERY3_mORDERS1_s11_buf as ind
   map_QUERY3_mORDERS1_s11_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2} in
     case ((map_QUERY3_mORDERS1_s11_buf_d.filter ((\b1 -> bind b1 as {ra:ra,
       rb:rb, rc:rc} in ra == _tup0 and rb == _tup1))).peek ()) of
       {Some vals -> map_QUERY3_mORDERS1_s11_buf_d.update vals tuple}
       {None -> map_QUERY3_mORDERS1_s11_buf_d.insert tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:11, rc:-1}
   then
     nd_delete_ORDERS_do_complete_s11 {ra:vid, rb:ORDERS_ORDERKEY,
       rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
       rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
       ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} else ())))
trigger nd_delete_ORDERS_rcv_push_s11_m_QUERY3_mORDERS3 : { ra:collection {
  ra:{ key:int, value:int }, rb:int, rc:real } @ { Collection }, rb:{ key:int,
  value:int }, rc:int, rd:int, re:string, rf:real, rg:int, rh:string,
  ri:string, rj:int, rk:string } = (\b1 -> bind b1 as {ra:tuples, rb:vid,
  rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
  rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
  ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT} in 
  ((nd_log_write_delete_ORDERS {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
      rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
      rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
      rj:ORDERS_COMMENT});
   tuples.iterate ((\tuple -> bind map_QUERY3_mORDERS3_s11_buf as ind
   map_QUERY3_mORDERS3_s11_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2} in
     case ((map_QUERY3_mORDERS3_s11_buf_d.filter ((\b1 -> bind b1 as {ra:ra,
       rb:rb, rc:rc} in ra == _tup0 and rb == _tup1))).peek ()) of
       {Some vals -> map_QUERY3_mORDERS3_s11_buf_d.update vals tuple}
       {None -> map_QUERY3_mORDERS3_s11_buf_d.insert tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:11, rc:-1}
   then
     nd_delete_ORDERS_do_complete_s11 {ra:vid, rb:ORDERS_ORDERKEY,
       rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
       rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
       ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} else ())))
trigger nd_delete_ORDERS_rcv_push_s11_m_QUERY3_mORDERS6 : { ra:collection {
  ra:{ key:int, value:int }, rb:int, rc:real } @ { Collection }, rb:{ key:int,
  value:int }, rc:int, rd:int, re:string, rf:real, rg:int, rh:string,
  ri:string, rj:int, rk:string } = (\b1 -> bind b1 as {ra:tuples, rb:vid,
  rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
  rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
  ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT} in 
  ((nd_log_write_delete_ORDERS {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
      rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
      rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
      rj:ORDERS_COMMENT});
   tuples.iterate ((\tuple -> bind map_QUERY3_mORDERS6_s11_buf as ind
   map_QUERY3_mORDERS6_s11_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2} in
     case ((map_QUERY3_mORDERS6_s11_buf_d.filter ((\b1 -> bind b1 as {ra:ra,
       rb:rb, rc:rc} in ra == _tup0 and rb == _tup1))).peek ()) of
       {Some vals -> map_QUERY3_mORDERS6_s11_buf_d.update vals tuple}
       {None -> map_QUERY3_mORDERS6_s11_buf_d.insert tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:11, rc:-1}
   then
     nd_delete_ORDERS_do_complete_s11 {ra:vid, rb:ORDERS_ORDERKEY,
       rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
       rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
       ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} else ())))
trigger nd_delete_ORDERS_rcv_push_s12_m_QUERY3_mORDERS1 : { ra:collection {
  ra:{ key:int, value:int }, rb:int, rc:int } @ { Collection }, rb:{ key:int,
  value:int }, rc:int, rd:int, re:string, rf:real, rg:int, rh:string,
  ri:string, rj:int, rk:string } = (\b1 -> bind b1 as {ra:tuples, rb:vid,
  rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
  rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
  ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT} in 
  ((nd_log_write_delete_ORDERS {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
      rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
      rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
      rj:ORDERS_COMMENT});
   tuples.iterate ((\tuple -> bind map_QUERY3_mORDERS1_s12_buf as ind
   map_QUERY3_mORDERS1_s12_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2} in
     case ((map_QUERY3_mORDERS1_s12_buf_d.filter ((\b1 -> bind b1 as {ra:ra,
       rb:rb, rc:rc} in ra == _tup0 and rb == _tup1))).peek ()) of
       {Some vals -> map_QUERY3_mORDERS1_s12_buf_d.update vals tuple}
       {None -> map_QUERY3_mORDERS1_s12_buf_d.insert tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:12, rc:-1}
   then
     nd_delete_ORDERS_do_complete_s12 {ra:vid, rb:ORDERS_ORDERKEY,
       rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
       rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
       ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} else ())))
trigger nd_delete_ORDERS_rcv_push_s14_m_QUERY3_mORDERS3 : { ra:collection {
  ra:{ key:int, value:int }, rb:int, rc:real } @ { Collection }, rb:{ key:int,
  value:int }, rc:int, rd:int, re:string, rf:real, rg:int, rh:string,
  ri:string, rj:int, rk:string } = (\b1 -> bind b1 as {ra:tuples, rb:vid,
  rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
  rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
  ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT} in 
  ((nd_log_write_delete_ORDERS {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
      rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
      rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
      rj:ORDERS_COMMENT});
   tuples.iterate ((\tuple -> bind map_QUERY3_mORDERS3_s14_buf as ind
   map_QUERY3_mORDERS3_s14_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2} in
     case ((map_QUERY3_mORDERS3_s14_buf_d.filter ((\b1 -> bind b1 as {ra:ra,
       rb:rb, rc:rc} in ra == _tup0 and rb == _tup1))).peek ()) of
       {Some vals -> map_QUERY3_mORDERS3_s14_buf_d.update vals tuple}
       {None -> map_QUERY3_mORDERS3_s14_buf_d.insert tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:14, rc:-1}
   then
     nd_delete_ORDERS_do_complete_s14 {ra:vid, rb:ORDERS_ORDERKEY,
       rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
       rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
       ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} else ())))
trigger nd_delete_ORDERS_rcv_push_s15_m_QUERY3_mORDERS6 : { ra:collection {
  ra:{ key:int, value:int }, rb:int, rc:real } @ { Collection }, rb:{ key:int,
  value:int }, rc:int, rd:int, re:string, rf:real, rg:int, rh:string,
  ri:string, rj:int, rk:string } = (\b1 -> bind b1 as {ra:tuples, rb:vid,
  rc:ORDERS_ORDERKEY, rd:ORDERS_CUSTKEY, re:ORDERS_ORDERSTATUS,
  rf:ORDERS_TOTALPRICE, rg:ORDERS_ORDERDATE, rh:ORDERS_ORDERPRIORITY,
  ri:ORDERS_CLERK, rj:ORDERS_SHIPPRIORITY, rk:ORDERS_COMMENT} in 
  ((nd_log_write_delete_ORDERS {ra:vid, rb:ORDERS_ORDERKEY, rc:ORDERS_CUSTKEY,
      rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE, rf:ORDERS_ORDERDATE,
      rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK, ri:ORDERS_SHIPPRIORITY,
      rj:ORDERS_COMMENT});
   tuples.iterate ((\tuple -> bind map_QUERY3_mORDERS6_s15_buf as ind
   map_QUERY3_mORDERS6_s15_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2} in
     case ((map_QUERY3_mORDERS6_s15_buf_d.filter ((\b1 -> bind b1 as {ra:ra,
       rb:rb, rc:rc} in ra == _tup0 and rb == _tup1))).peek ()) of
       {Some vals -> map_QUERY3_mORDERS6_s15_buf_d.update vals tuple}
       {None -> map_QUERY3_mORDERS6_s15_buf_d.insert tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:15, rc:-1}
   then
     nd_delete_ORDERS_do_complete_s15 {ra:vid, rb:ORDERS_ORDERKEY,
       rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
       rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
       ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} else ())))
trigger nd_delete_ORDERS_do_complete_s13_trig : { ra:{ key:int, value:int },
  rb:int, rc:int, rd:string, re:real, rf:int, rg:string, rh:string, ri:int,
  rj:string } = (\b1 -> bind b1 as {ra:vid, rb:ORDERS_ORDERKEY,
  rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
  rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
  ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT} in 
  nd_delete_ORDERS_do_complete_s13 {ra:vid, rb:ORDERS_ORDERKEY,
    rc:ORDERS_CUSTKEY, rd:ORDERS_ORDERSTATUS, re:ORDERS_TOTALPRICE,
    rf:ORDERS_ORDERDATE, rg:ORDERS_ORDERPRIORITY, rh:ORDERS_CLERK,
    ri:ORDERS_SHIPPRIORITY, rj:ORDERS_COMMENT})
trigger delete_ORDERS_rcv_corrective_s11_m_QUERY3_mORDERS1 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int },
  rf:collection { key:int, value:int } @ { Seq }, rg:collection { key:int,
  value:int } @ { Collection } } = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:compute_vids,
  rg:delta_tuples} in 
  ((nd_add_delta_to_int_int {ra:map_QUERY3_mORDERS1_s11_buf, rb:false, rc:vid,
      rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:11}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_delete_ORDERS compute_vid as
         {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
         in
         acc_count +
           delete_ORDERS_do_corrective_s11_m_QUERY3_mORDERS1 {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:compute_vid,
             rf:ORDERS_ORDERKEY, rg:ORDERS_CUSTKEY, rh:ORDERS_ORDERSTATUS,
             ri:ORDERS_TOTALPRICE, rj:ORDERS_ORDERDATE,
             rk:ORDERS_ORDERPRIORITY, rl:ORDERS_CLERK, rm:ORDERS_SHIPPRIORITY,
             rn:ORDERS_COMMENT, ro:delta_tuples} else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger delete_ORDERS_rcv_corrective_s11_m_QUERY3_mORDERS3 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int },
  rf:collection { key:int, value:int } @ { Seq }, rg:collection { key:int,
  value:real } @ { Collection } } = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:compute_vids,
  rg:delta_tuples} in 
  ((nd_add_delta_to_int_float {ra:map_QUERY3_mORDERS3_s11_buf, rb:false,
      rc:vid, rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:11}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_delete_ORDERS compute_vid as
         {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
         in
         acc_count +
           delete_ORDERS_do_corrective_s11_m_QUERY3_mORDERS3 {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:compute_vid,
             rf:ORDERS_ORDERKEY, rg:ORDERS_CUSTKEY, rh:ORDERS_ORDERSTATUS,
             ri:ORDERS_TOTALPRICE, rj:ORDERS_ORDERDATE,
             rk:ORDERS_ORDERPRIORITY, rl:ORDERS_CLERK, rm:ORDERS_SHIPPRIORITY,
             rn:ORDERS_COMMENT, ro:delta_tuples} else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger delete_ORDERS_rcv_corrective_s11_m_QUERY3_mORDERS6 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int },
  rf:collection { key:int, value:int } @ { Seq }, rg:collection { key:int,
  value:real } @ { Collection } } = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:compute_vids,
  rg:delta_tuples} in 
  ((nd_add_delta_to_int_float {ra:map_QUERY3_mORDERS6_s11_buf, rb:false,
      rc:vid, rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:11}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_delete_ORDERS compute_vid as
         {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
         in
         acc_count +
           delete_ORDERS_do_corrective_s11_m_QUERY3_mORDERS6 {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:compute_vid,
             rf:ORDERS_ORDERKEY, rg:ORDERS_CUSTKEY, rh:ORDERS_ORDERSTATUS,
             ri:ORDERS_TOTALPRICE, rj:ORDERS_ORDERDATE,
             rk:ORDERS_ORDERPRIORITY, rl:ORDERS_CLERK, rm:ORDERS_SHIPPRIORITY,
             rn:ORDERS_COMMENT, ro:delta_tuples} else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger delete_ORDERS_rcv_corrective_s12_m_QUERY3_mORDERS1 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int },
  rf:collection { key:int, value:int } @ { Seq }, rg:collection { key:int,
  value:int } @ { Collection } } = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:compute_vids,
  rg:delta_tuples} in 
  ((nd_add_delta_to_int_int {ra:map_QUERY3_mORDERS1_s12_buf, rb:false, rc:vid,
      rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:12}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_delete_ORDERS compute_vid as
         {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
         in
         acc_count +
           delete_ORDERS_do_corrective_s12_m_QUERY3_mORDERS1 {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:compute_vid,
             rf:ORDERS_ORDERKEY, rg:ORDERS_CUSTKEY, rh:ORDERS_ORDERSTATUS,
             ri:ORDERS_TOTALPRICE, rj:ORDERS_ORDERDATE,
             rk:ORDERS_ORDERPRIORITY, rl:ORDERS_CLERK, rm:ORDERS_SHIPPRIORITY,
             rn:ORDERS_COMMENT, ro:delta_tuples} else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger delete_ORDERS_rcv_corrective_s14_m_QUERY3_mORDERS3 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int },
  rf:collection { key:int, value:int } @ { Seq }, rg:collection { key:int,
  value:real } @ { Collection } } = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:compute_vids,
  rg:delta_tuples} in 
  ((nd_add_delta_to_int_float {ra:map_QUERY3_mORDERS3_s14_buf, rb:false,
      rc:vid, rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:14}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_delete_ORDERS compute_vid as
         {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
         in
         acc_count +
           delete_ORDERS_do_corrective_s14_m_QUERY3_mORDERS3 {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:compute_vid,
             rf:ORDERS_ORDERKEY, rg:ORDERS_CUSTKEY, rh:ORDERS_ORDERSTATUS,
             ri:ORDERS_TOTALPRICE, rj:ORDERS_ORDERDATE,
             rk:ORDERS_ORDERPRIORITY, rl:ORDERS_CLERK, rm:ORDERS_SHIPPRIORITY,
             rn:ORDERS_COMMENT, ro:delta_tuples} else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger delete_ORDERS_rcv_corrective_s15_m_QUERY3_mORDERS6 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int },
  rf:collection { key:int, value:int } @ { Seq }, rg:collection { key:int,
  value:real } @ { Collection } } = (\b1 -> bind b1 as {ra:orig_addr,
  rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid, rf:compute_vids,
  rg:delta_tuples} in 
  ((nd_add_delta_to_int_float {ra:map_QUERY3_mORDERS6_s15_buf, rb:false,
      rc:vid, rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:15}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_delete_ORDERS compute_vid as
         {ra:ORDERS_ORDERKEY, rb:ORDERS_CUSTKEY, rc:ORDERS_ORDERSTATUS, rd:ORDERS_TOTALPRICE, re:ORDERS_ORDERDATE, rf:ORDERS_ORDERPRIORITY, rg:ORDERS_CLERK, rh:ORDERS_SHIPPRIORITY, ri:ORDERS_COMMENT}
         in
         acc_count +
           delete_ORDERS_do_corrective_s15_m_QUERY3_mORDERS6 {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:compute_vid,
             rf:ORDERS_ORDERKEY, rg:ORDERS_CUSTKEY, rh:ORDERS_ORDERSTATUS,
             ri:ORDERS_TOTALPRICE, rj:ORDERS_ORDERDATE,
             rk:ORDERS_ORDERPRIORITY, rl:ORDERS_CLERK, rm:ORDERS_SHIPPRIORITY,
             rn:ORDERS_COMMENT, ro:delta_tuples} else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger nd_insert_LINEITEM_rcv_put : { ra:address, rb:collection { key:int,
  value:int } @ { Collection }, rc:{ key:int, value:int }, rd:int, re:int,
  rf:int, rg:int, rh:real, ri:real, rj:real, rk:real, rl:string, rm:string,
  rn:int, ro:int, rp:int, rq:string, rr:string, rs:string } = (\b1 ->
  bind b1 as {ra:sender_ip, rb:stmt_cnt_list, rc:vid, rd:LINEITEM_ORDERKEY,
  re:LINEITEM_PARTKEY, rf:LINEITEM_SUPPKEY, rg:LINEITEM_LINENUMBER,
  rh:LINEITEM_QUANTITY, ri:LINEITEM_EXTENDEDPRICE, rj:LINEITEM_DISCOUNT,
  rk:LINEITEM_TAX, rl:LINEITEM_RETURNFLAG, rm:LINEITEM_LINESTATUS,
  rn:LINEITEM_SHIPDATE, ro:LINEITEM_COMMITDATE, rp:LINEITEM_RECEIPTDATE,
  rq:LINEITEM_SHIPINSTRUCT, rr:LINEITEM_SHIPMODE, rs:LINEITEM_COMMENT} in 
  (stmt_cnt_list.iterate ((\b1 -> bind b1 as {key:stmt_id, value:count} in 
   if nd_check_stmt_cntr_index {ra:vid, rb:stmt_id, rc:count}
   then if stmt_id == 20
     then
       nd_insert_LINEITEM_do_complete_s20 {ra:vid, rb:LINEITEM_ORDERKEY,
         rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
         rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
         ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
         rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
         ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT}
     else if stmt_id == 19
       then
         nd_insert_LINEITEM_do_complete_s19 {ra:vid, rb:LINEITEM_ORDERKEY,
           rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
           rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE,
           rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG,
           rk:LINEITEM_LINESTATUS, rl:LINEITEM_SHIPDATE,
           rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
           ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT}
       else if stmt_id == 18
         then
           nd_insert_LINEITEM_do_complete_s18 {ra:vid, rb:LINEITEM_ORDERKEY,
             rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
             rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE,
             rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG,
             rk:LINEITEM_LINESTATUS, rl:LINEITEM_SHIPDATE,
             rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
             ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE,
             rq:LINEITEM_COMMENT}
         else if stmt_id == 17
           then
             nd_insert_LINEITEM_do_complete_s17 {ra:vid, rb:LINEITEM_ORDERKEY,
               rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY,
               re:LINEITEM_LINENUMBER, rf:LINEITEM_QUANTITY,
               rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
               ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
               rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE,
               rn:LINEITEM_RECEIPTDATE, ro:LINEITEM_SHIPINSTRUCT,
               rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT}
           else if stmt_id == 16
             then
               nd_insert_LINEITEM_do_complete_s16 {ra:vid,
                 rb:LINEITEM_ORDERKEY, rc:LINEITEM_PARTKEY,
                 rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
                 rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE,
                 rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG,
                 rk:LINEITEM_LINESTATUS, rl:LINEITEM_SHIPDATE,
                 rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
                 ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE,
                 rq:LINEITEM_COMMENT} else () else ()));
   (sw_ack_rcv, sender_ip)<- {key:me, value:vid}))
trigger nd_insert_LINEITEM_rcv_fetch : { ra:collection { key:int, value:int
  } @ { Collection }, rb:{ key:int, value:int }, rc:int, rd:int, re:int,
  rf:int, rg:real, rh:real, ri:real, rj:real, rk:string, rl:string, rm:int,
  rn:int, ro:int, rp:string, rq:string, rr:string } = (\b1 ->
  bind b1 as {ra:stmt_map_ids, rb:vid, rc:LINEITEM_ORDERKEY,
  rd:LINEITEM_PARTKEY, re:LINEITEM_SUPPKEY, rf:LINEITEM_LINENUMBER,
  rg:LINEITEM_QUANTITY, rh:LINEITEM_EXTENDEDPRICE, ri:LINEITEM_DISCOUNT,
  rj:LINEITEM_TAX, rk:LINEITEM_RETURNFLAG, rl:LINEITEM_LINESTATUS,
  rm:LINEITEM_SHIPDATE, rn:LINEITEM_COMMITDATE, ro:LINEITEM_RECEIPTDATE,
  rp:LINEITEM_SHIPINSTRUCT, rq:LINEITEM_SHIPMODE, rr:LINEITEM_COMMENT} in 
  ((nd_log_write_insert_LINEITEM {ra:vid, rb:LINEITEM_ORDERKEY,
      rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
      rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
      ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
      rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
      ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT});
   stmt_map_ids.iterate ((\b1 -> bind b1 as {key:stmt_id, value:map_id} in 
   if stmt_id == 16
   then if map_id == 2
     then (nd_insert_LINEITEM_send_push_s16_m_QUERY3_mLINEITEM1, me)<- {ra:vid,
       rb:LINEITEM_ORDERKEY, rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY,
       re:LINEITEM_LINENUMBER, rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE,
       rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG,
       rk:LINEITEM_LINESTATUS, rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE,
       rn:LINEITEM_RECEIPTDATE, ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE,
       rq:LINEITEM_COMMENT} else error (print "nd_rcv_fetch: invalid map id")
   else if stmt_id == 19
     then if map_id == 3
       then
         (nd_insert_LINEITEM_send_push_s19_m_QUERY3_mLINEITEM1_mCUSTOMER2, me)<- {ra:vid,
         rb:LINEITEM_ORDERKEY, rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY,
         re:LINEITEM_LINENUMBER, rf:LINEITEM_QUANTITY,
         rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX,
         rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS, rl:LINEITEM_SHIPDATE,
         rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
         ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT}
       else error (print "nd_rcv_fetch: invalid map id")
     else if stmt_id == 20
       then if map_id == 3
         then
           (nd_insert_LINEITEM_send_push_s20_m_QUERY3_mLINEITEM1_mCUSTOMER2,
             me)<- {ra:vid, rb:LINEITEM_ORDERKEY, rc:LINEITEM_PARTKEY,
           rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER, rf:LINEITEM_QUANTITY,
           rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX,
           rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
           rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE,
           rn:LINEITEM_RECEIPTDATE, ro:LINEITEM_SHIPINSTRUCT,
           rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT}
         else error (print "nd_rcv_fetch: invalid map id")
       else error (print "nd_rcv_fetch: invalid stmt id")))))
trigger nd_insert_LINEITEM_send_push_s16_m_QUERY3_mLINEITEM1 : { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:int, re:int, rf:real, rg:real, rh:real,
  ri:real, rj:string, rk:string, rl:int, rm:int, rn:int, ro:string, rp:string,
  rq:string } = (\b1 -> bind b1 as {ra:vid, rb:LINEITEM_ORDERKEY,
  rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
  rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
  ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
  rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
  ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT} in bind
  QUERY3_mLINEITEM1 as ind QUERY3_mLINEITEM1_deref in
  ((nd_log_master_write {key:vid, value:16});
   (shuffle_QUERY3_mLINEITEM1_to_QUERY3_bind_0t0_1t1_2t2
      {ra:Some LINEITEM_ORDERKEY, rb:None immut, rc:None immut,
      rd:frontier_int_date_int_int {key:vid,
           value:QUERY3_mLINEITEM1_deref.filter ((\b1 -> bind b1 as {ra:ra,
           rb:rb, rc:rc, rd:rd, re:re} in rb == LINEITEM_ORDERKEY))}, re:true}).iterate
   ((\b1 -> bind b1 as {key:ip, value:tuples} in 
   (nd_insert_LINEITEM_rcv_push_s16_m_QUERY3_mLINEITEM1, ip)<- {ra:tuples,
   rb:vid, rc:LINEITEM_ORDERKEY, rd:LINEITEM_PARTKEY, re:LINEITEM_SUPPKEY,
   rf:LINEITEM_LINENUMBER, rg:LINEITEM_QUANTITY, rh:LINEITEM_EXTENDEDPRICE,
   ri:LINEITEM_DISCOUNT, rj:LINEITEM_TAX, rk:LINEITEM_RETURNFLAG,
   rl:LINEITEM_LINESTATUS, rm:LINEITEM_SHIPDATE, rn:LINEITEM_COMMITDATE,
   ro:LINEITEM_RECEIPTDATE, rp:LINEITEM_SHIPINSTRUCT, rq:LINEITEM_SHIPMODE,
   rr:LINEITEM_COMMENT}))))
trigger nd_insert_LINEITEM_send_push_s19_m_QUERY3_mLINEITEM1_mCUSTOMER2 : {
  ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:real, rg:real,
  rh:real, ri:real, rj:string, rk:string, rl:int, rm:int, rn:int, ro:string,
  rp:string, rq:string } = (\b1 -> bind b1 as {ra:vid, rb:LINEITEM_ORDERKEY,
  rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
  rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
  ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
  rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
  ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT} in bind
  QUERY3_mLINEITEM1_mCUSTOMER2 as ind QUERY3_mLINEITEM1_mCUSTOMER2_deref in
  ((nd_log_master_write {key:vid, value:19});
   (shuffle_QUERY3_mLINEITEM1_mCUSTOMER2_to_QUERY3_mCUSTOMER2_bind_0t0_1t1_2t2_3t3
      {ra:Some LINEITEM_ORDERKEY, rb:None immut, rc:None immut, rd:None immut,
      re:frontier_int_date_int_int_int {key:vid,
           value:QUERY3_mLINEITEM1_mCUSTOMER2_deref.filter ((\b1 ->
           bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd, re:re, rf:rf} in rb ==
           LINEITEM_ORDERKEY))}, rf:true}).iterate ((\b1 -> bind b1 as {key:ip,
   value:tuples} in 
   (nd_insert_LINEITEM_rcv_push_s19_m_QUERY3_mLINEITEM1_mCUSTOMER2, ip)<- {ra:tuples,
   rb:vid, rc:LINEITEM_ORDERKEY, rd:LINEITEM_PARTKEY, re:LINEITEM_SUPPKEY,
   rf:LINEITEM_LINENUMBER, rg:LINEITEM_QUANTITY, rh:LINEITEM_EXTENDEDPRICE,
   ri:LINEITEM_DISCOUNT, rj:LINEITEM_TAX, rk:LINEITEM_RETURNFLAG,
   rl:LINEITEM_LINESTATUS, rm:LINEITEM_SHIPDATE, rn:LINEITEM_COMMITDATE,
   ro:LINEITEM_RECEIPTDATE, rp:LINEITEM_SHIPINSTRUCT, rq:LINEITEM_SHIPMODE,
   rr:LINEITEM_COMMENT}))))
trigger nd_insert_LINEITEM_send_push_s20_m_QUERY3_mLINEITEM1_mCUSTOMER2 : {
  ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:real, rg:real,
  rh:real, ri:real, rj:string, rk:string, rl:int, rm:int, rn:int, ro:string,
  rp:string, rq:string } = (\b1 -> bind b1 as {ra:vid, rb:LINEITEM_ORDERKEY,
  rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
  rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
  ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
  rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
  ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT} in bind
  QUERY3_mLINEITEM1_mCUSTOMER2 as ind QUERY3_mLINEITEM1_mCUSTOMER2_deref in
  ((nd_log_master_write {key:vid, value:20});
   (shuffle_QUERY3_mLINEITEM1_mCUSTOMER2_to_QUERY3_mCUSTOMER4_bind_0t0_1t1_2t2_3t3
      {ra:Some LINEITEM_ORDERKEY, rb:None immut, rc:None immut, rd:None immut,
      re:frontier_int_date_int_int_int {key:vid,
           value:QUERY3_mLINEITEM1_mCUSTOMER2_deref.filter ((\b1 ->
           bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd, re:re, rf:rf} in rb ==
           LINEITEM_ORDERKEY))}, rf:true}).iterate ((\b1 -> bind b1 as {key:ip,
   value:tuples} in 
   (nd_insert_LINEITEM_rcv_push_s20_m_QUERY3_mLINEITEM1_mCUSTOMER2, ip)<- {ra:tuples,
   rb:vid, rc:LINEITEM_ORDERKEY, rd:LINEITEM_PARTKEY, re:LINEITEM_SUPPKEY,
   rf:LINEITEM_LINENUMBER, rg:LINEITEM_QUANTITY, rh:LINEITEM_EXTENDEDPRICE,
   ri:LINEITEM_DISCOUNT, rj:LINEITEM_TAX, rk:LINEITEM_RETURNFLAG,
   rl:LINEITEM_LINESTATUS, rm:LINEITEM_SHIPDATE, rn:LINEITEM_COMMITDATE,
   ro:LINEITEM_RECEIPTDATE, rp:LINEITEM_SHIPINSTRUCT, rq:LINEITEM_SHIPMODE,
   rr:LINEITEM_COMMENT}))))
trigger nd_insert_LINEITEM_rcv_push_s16_m_QUERY3_mLINEITEM1 : { ra:collection {
  ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int } @ { Collection },
  rb:{ key:int, value:int }, rc:int, rd:int, re:int, rf:int, rg:real, rh:real,
  ri:real, rj:real, rk:string, rl:string, rm:int, rn:int, ro:int, rp:string,
  rq:string, rr:string } = (\b1 -> bind b1 as {ra:tuples, rb:vid,
  rc:LINEITEM_ORDERKEY, rd:LINEITEM_PARTKEY, re:LINEITEM_SUPPKEY,
  rf:LINEITEM_LINENUMBER, rg:LINEITEM_QUANTITY, rh:LINEITEM_EXTENDEDPRICE,
  ri:LINEITEM_DISCOUNT, rj:LINEITEM_TAX, rk:LINEITEM_RETURNFLAG,
  rl:LINEITEM_LINESTATUS, rm:LINEITEM_SHIPDATE, rn:LINEITEM_COMMITDATE,
  ro:LINEITEM_RECEIPTDATE, rp:LINEITEM_SHIPINSTRUCT, rq:LINEITEM_SHIPMODE,
  rr:LINEITEM_COMMENT} in 
  ((nd_log_write_insert_LINEITEM {ra:vid, rb:LINEITEM_ORDERKEY,
      rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
      rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
      ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
      rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
      ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT});
   tuples.iterate ((\tuple -> bind map_QUERY3_mLINEITEM1_s16_buf as ind
   map_QUERY3_mLINEITEM1_s16_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2, rd:_tup3, re:_tup4} in
     case ((map_QUERY3_mLINEITEM1_s16_buf_d.filter ((\b1 -> bind b1 as {ra:ra,
       rb:rb, rc:rc, rd:rd, re:re} in ((ra == _tup0 and rd == _tup3) and rc ==
       _tup2) and rb == _tup1))).peek ()) of
       {Some vals -> map_QUERY3_mLINEITEM1_s16_buf_d.update vals tuple}
       {None -> map_QUERY3_mLINEITEM1_s16_buf_d.insert tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:16, rc:-1}
   then
     nd_insert_LINEITEM_do_complete_s16 {ra:vid, rb:LINEITEM_ORDERKEY,
       rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
       rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
       ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
       rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
       ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT}
   else ())))
trigger nd_insert_LINEITEM_rcv_push_s19_m_QUERY3_mLINEITEM1_mCUSTOMER2 : {
  ra:collection { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int,
  rf:int } @ { Collection }, rb:{ key:int, value:int }, rc:int, rd:int, re:int,
  rf:int, rg:real, rh:real, ri:real, rj:real, rk:string, rl:string, rm:int,
  rn:int, ro:int, rp:string, rq:string, rr:string } = (\b1 ->
  bind b1 as {ra:tuples, rb:vid, rc:LINEITEM_ORDERKEY, rd:LINEITEM_PARTKEY,
  re:LINEITEM_SUPPKEY, rf:LINEITEM_LINENUMBER, rg:LINEITEM_QUANTITY,
  rh:LINEITEM_EXTENDEDPRICE, ri:LINEITEM_DISCOUNT, rj:LINEITEM_TAX,
  rk:LINEITEM_RETURNFLAG, rl:LINEITEM_LINESTATUS, rm:LINEITEM_SHIPDATE,
  rn:LINEITEM_COMMITDATE, ro:LINEITEM_RECEIPTDATE, rp:LINEITEM_SHIPINSTRUCT,
  rq:LINEITEM_SHIPMODE, rr:LINEITEM_COMMENT} in 
  ((nd_log_write_insert_LINEITEM {ra:vid, rb:LINEITEM_ORDERKEY,
      rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
      rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
      ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
      rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
      ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT});
   tuples.iterate ((\tuple -> bind map_QUERY3_mLINEITEM1_mCUSTOMER2_s19_buf as
   ind map_QUERY3_mLINEITEM1_mCUSTOMER2_s19_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2, rd:_tup3, re:_tup4, rf:_tup5}
     in
     case ((map_QUERY3_mLINEITEM1_mCUSTOMER2_s19_buf_d.filter ((\b1 ->
       bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd, re:re, rf:rf} in (((ra == _tup0
       and re == _tup4) and rd == _tup3) and rc == _tup2) and rb ==
       _tup1))).peek ()) of
       {Some vals -> map_QUERY3_mLINEITEM1_mCUSTOMER2_s19_buf_d.update vals
         tuple}{None -> map_QUERY3_mLINEITEM1_mCUSTOMER2_s19_buf_d.insert
                 tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:19, rc:-1}
   then
     nd_insert_LINEITEM_do_complete_s19 {ra:vid, rb:LINEITEM_ORDERKEY,
       rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
       rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
       ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
       rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
       ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT}
   else ())))
trigger nd_insert_LINEITEM_rcv_push_s20_m_QUERY3_mLINEITEM1_mCUSTOMER2 : {
  ra:collection { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int,
  rf:int } @ { Collection }, rb:{ key:int, value:int }, rc:int, rd:int, re:int,
  rf:int, rg:real, rh:real, ri:real, rj:real, rk:string, rl:string, rm:int,
  rn:int, ro:int, rp:string, rq:string, rr:string } = (\b1 ->
  bind b1 as {ra:tuples, rb:vid, rc:LINEITEM_ORDERKEY, rd:LINEITEM_PARTKEY,
  re:LINEITEM_SUPPKEY, rf:LINEITEM_LINENUMBER, rg:LINEITEM_QUANTITY,
  rh:LINEITEM_EXTENDEDPRICE, ri:LINEITEM_DISCOUNT, rj:LINEITEM_TAX,
  rk:LINEITEM_RETURNFLAG, rl:LINEITEM_LINESTATUS, rm:LINEITEM_SHIPDATE,
  rn:LINEITEM_COMMITDATE, ro:LINEITEM_RECEIPTDATE, rp:LINEITEM_SHIPINSTRUCT,
  rq:LINEITEM_SHIPMODE, rr:LINEITEM_COMMENT} in 
  ((nd_log_write_insert_LINEITEM {ra:vid, rb:LINEITEM_ORDERKEY,
      rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
      rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
      ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
      rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
      ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT});
   tuples.iterate ((\tuple -> bind map_QUERY3_mLINEITEM1_mCUSTOMER2_s20_buf as
   ind map_QUERY3_mLINEITEM1_mCUSTOMER2_s20_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2, rd:_tup3, re:_tup4, rf:_tup5}
     in
     case ((map_QUERY3_mLINEITEM1_mCUSTOMER2_s20_buf_d.filter ((\b1 ->
       bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd, re:re, rf:rf} in (((ra == _tup0
       and re == _tup4) and rd == _tup3) and rc == _tup2) and rb ==
       _tup1))).peek ()) of
       {Some vals -> map_QUERY3_mLINEITEM1_mCUSTOMER2_s20_buf_d.update vals
         tuple}{None -> map_QUERY3_mLINEITEM1_mCUSTOMER2_s20_buf_d.insert
                 tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:20, rc:-1}
   then
     nd_insert_LINEITEM_do_complete_s20 {ra:vid, rb:LINEITEM_ORDERKEY,
       rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
       rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
       ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
       rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
       ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT}
   else ())))
trigger nd_insert_LINEITEM_do_complete_s17_trig : { ra:{ key:int, value:int },
  rb:int, rc:int, rd:int, re:int, rf:real, rg:real, rh:real, ri:real,
  rj:string, rk:string, rl:int, rm:int, rn:int, ro:string, rp:string, rq:string
  } = (\b1 -> bind b1 as {ra:vid, rb:LINEITEM_ORDERKEY, rc:LINEITEM_PARTKEY,
  rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER, rf:LINEITEM_QUANTITY,
  rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX,
  rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS, rl:LINEITEM_SHIPDATE,
  rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE, ro:LINEITEM_SHIPINSTRUCT,
  rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT} in 
  nd_insert_LINEITEM_do_complete_s17 {ra:vid, rb:LINEITEM_ORDERKEY,
    rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
    rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
    ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
    rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
    ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT})
trigger nd_insert_LINEITEM_do_complete_s18_trig : { ra:{ key:int, value:int },
  rb:int, rc:int, rd:int, re:int, rf:real, rg:real, rh:real, ri:real,
  rj:string, rk:string, rl:int, rm:int, rn:int, ro:string, rp:string, rq:string
  } = (\b1 -> bind b1 as {ra:vid, rb:LINEITEM_ORDERKEY, rc:LINEITEM_PARTKEY,
  rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER, rf:LINEITEM_QUANTITY,
  rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX,
  rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS, rl:LINEITEM_SHIPDATE,
  rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE, ro:LINEITEM_SHIPINSTRUCT,
  rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT} in 
  nd_insert_LINEITEM_do_complete_s18 {ra:vid, rb:LINEITEM_ORDERKEY,
    rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
    rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
    ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
    rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
    ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT})
trigger insert_LINEITEM_rcv_corrective_s16_m_QUERY3_mLINEITEM1 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int },
  rf:collection { key:int, value:int } @ { Seq }, rg:collection { ra:int,
  rb:int, rc:int, rd:int } @ { Collection } } = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid,
  rf:compute_vids, rg:delta_tuples} in 
  ((nd_add_delta_to_int_date_int_int {ra:map_QUERY3_mLINEITEM1_s16_buf,
      rb:false, rc:vid, rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:16}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_insert_LINEITEM compute_vid as
         {ra:LINEITEM_ORDERKEY, rb:LINEITEM_PARTKEY, rc:LINEITEM_SUPPKEY, rd:LINEITEM_LINENUMBER, re:LINEITEM_QUANTITY, rf:LINEITEM_EXTENDEDPRICE, rg:LINEITEM_DISCOUNT, rh:LINEITEM_TAX, ri:LINEITEM_RETURNFLAG, rj:LINEITEM_LINESTATUS, rk:LINEITEM_SHIPDATE, rl:LINEITEM_COMMITDATE, rm:LINEITEM_RECEIPTDATE, rn:LINEITEM_SHIPINSTRUCT, ro:LINEITEM_SHIPMODE, rp:LINEITEM_COMMENT}
         in
         acc_count +
           insert_LINEITEM_do_corrective_s16_m_QUERY3_mLINEITEM1 {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:compute_vid,
             rf:LINEITEM_ORDERKEY, rg:LINEITEM_PARTKEY, rh:LINEITEM_SUPPKEY,
             ri:LINEITEM_LINENUMBER, rj:LINEITEM_QUANTITY,
             rk:LINEITEM_EXTENDEDPRICE, rl:LINEITEM_DISCOUNT, rm:LINEITEM_TAX,
             rn:LINEITEM_RETURNFLAG, ro:LINEITEM_LINESTATUS,
             rp:LINEITEM_SHIPDATE, rq:LINEITEM_COMMITDATE,
             rr:LINEITEM_RECEIPTDATE, rs:LINEITEM_SHIPINSTRUCT,
             rt:LINEITEM_SHIPMODE, ru:LINEITEM_COMMENT, rv:delta_tuples}
       else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger insert_LINEITEM_rcv_corrective_s19_m_QUERY3_mLINEITEM1_mCUSTOMER2 : {
  ra:address, rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int,
  value:int }, rf:collection { key:int, value:int } @ { Seq }, rg:collection {
  ra:int, rb:int, rc:int, rd:int, re:int } @ { Collection } } = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid,
  rf:compute_vids, rg:delta_tuples} in 
  ((nd_add_delta_to_int_date_int_int_int
      {ra:map_QUERY3_mLINEITEM1_mCUSTOMER2_s19_buf, rb:false, rc:vid,
      rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:19}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_insert_LINEITEM compute_vid as
         {ra:LINEITEM_ORDERKEY, rb:LINEITEM_PARTKEY, rc:LINEITEM_SUPPKEY, rd:LINEITEM_LINENUMBER, re:LINEITEM_QUANTITY, rf:LINEITEM_EXTENDEDPRICE, rg:LINEITEM_DISCOUNT, rh:LINEITEM_TAX, ri:LINEITEM_RETURNFLAG, rj:LINEITEM_LINESTATUS, rk:LINEITEM_SHIPDATE, rl:LINEITEM_COMMITDATE, rm:LINEITEM_RECEIPTDATE, rn:LINEITEM_SHIPINSTRUCT, ro:LINEITEM_SHIPMODE, rp:LINEITEM_COMMENT}
         in
         acc_count +
           insert_LINEITEM_do_corrective_s19_m_QUERY3_mLINEITEM1_mCUSTOMER2
             {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
             re:compute_vid, rf:LINEITEM_ORDERKEY, rg:LINEITEM_PARTKEY,
             rh:LINEITEM_SUPPKEY, ri:LINEITEM_LINENUMBER, rj:LINEITEM_QUANTITY,
             rk:LINEITEM_EXTENDEDPRICE, rl:LINEITEM_DISCOUNT, rm:LINEITEM_TAX,
             rn:LINEITEM_RETURNFLAG, ro:LINEITEM_LINESTATUS,
             rp:LINEITEM_SHIPDATE, rq:LINEITEM_COMMITDATE,
             rr:LINEITEM_RECEIPTDATE, rs:LINEITEM_SHIPINSTRUCT,
             rt:LINEITEM_SHIPMODE, ru:LINEITEM_COMMENT, rv:delta_tuples}
       else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger insert_LINEITEM_rcv_corrective_s20_m_QUERY3_mLINEITEM1_mCUSTOMER2 : {
  ra:address, rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int,
  value:int }, rf:collection { key:int, value:int } @ { Seq }, rg:collection {
  ra:int, rb:int, rc:int, rd:int, re:int } @ { Collection } } = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid,
  rf:compute_vids, rg:delta_tuples} in 
  ((nd_add_delta_to_int_date_int_int_int
      {ra:map_QUERY3_mLINEITEM1_mCUSTOMER2_s20_buf, rb:false, rc:vid,
      rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:20}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_insert_LINEITEM compute_vid as
         {ra:LINEITEM_ORDERKEY, rb:LINEITEM_PARTKEY, rc:LINEITEM_SUPPKEY, rd:LINEITEM_LINENUMBER, re:LINEITEM_QUANTITY, rf:LINEITEM_EXTENDEDPRICE, rg:LINEITEM_DISCOUNT, rh:LINEITEM_TAX, ri:LINEITEM_RETURNFLAG, rj:LINEITEM_LINESTATUS, rk:LINEITEM_SHIPDATE, rl:LINEITEM_COMMITDATE, rm:LINEITEM_RECEIPTDATE, rn:LINEITEM_SHIPINSTRUCT, ro:LINEITEM_SHIPMODE, rp:LINEITEM_COMMENT}
         in
         acc_count +
           insert_LINEITEM_do_corrective_s20_m_QUERY3_mLINEITEM1_mCUSTOMER2
             {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
             re:compute_vid, rf:LINEITEM_ORDERKEY, rg:LINEITEM_PARTKEY,
             rh:LINEITEM_SUPPKEY, ri:LINEITEM_LINENUMBER, rj:LINEITEM_QUANTITY,
             rk:LINEITEM_EXTENDEDPRICE, rl:LINEITEM_DISCOUNT, rm:LINEITEM_TAX,
             rn:LINEITEM_RETURNFLAG, ro:LINEITEM_LINESTATUS,
             rp:LINEITEM_SHIPDATE, rq:LINEITEM_COMMITDATE,
             rr:LINEITEM_RECEIPTDATE, rs:LINEITEM_SHIPINSTRUCT,
             rt:LINEITEM_SHIPMODE, ru:LINEITEM_COMMENT, rv:delta_tuples}
       else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger nd_delete_LINEITEM_rcv_put : { ra:address, rb:collection { key:int,
  value:int } @ { Collection }, rc:{ key:int, value:int }, rd:int, re:int,
  rf:int, rg:int, rh:real, ri:real, rj:real, rk:real, rl:string, rm:string,
  rn:int, ro:int, rp:int, rq:string, rr:string, rs:string } = (\b1 ->
  bind b1 as {ra:sender_ip, rb:stmt_cnt_list, rc:vid, rd:LINEITEM_ORDERKEY,
  re:LINEITEM_PARTKEY, rf:LINEITEM_SUPPKEY, rg:LINEITEM_LINENUMBER,
  rh:LINEITEM_QUANTITY, ri:LINEITEM_EXTENDEDPRICE, rj:LINEITEM_DISCOUNT,
  rk:LINEITEM_TAX, rl:LINEITEM_RETURNFLAG, rm:LINEITEM_LINESTATUS,
  rn:LINEITEM_SHIPDATE, ro:LINEITEM_COMMITDATE, rp:LINEITEM_RECEIPTDATE,
  rq:LINEITEM_SHIPINSTRUCT, rr:LINEITEM_SHIPMODE, rs:LINEITEM_COMMENT} in 
  (stmt_cnt_list.iterate ((\b1 -> bind b1 as {key:stmt_id, value:count} in 
   if nd_check_stmt_cntr_index {ra:vid, rb:stmt_id, rc:count}
   then if stmt_id == 25
     then
       nd_delete_LINEITEM_do_complete_s25 {ra:vid, rb:LINEITEM_ORDERKEY,
         rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
         rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
         ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
         rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
         ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT}
     else if stmt_id == 24
       then
         nd_delete_LINEITEM_do_complete_s24 {ra:vid, rb:LINEITEM_ORDERKEY,
           rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
           rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE,
           rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG,
           rk:LINEITEM_LINESTATUS, rl:LINEITEM_SHIPDATE,
           rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
           ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT}
       else if stmt_id == 23
         then
           nd_delete_LINEITEM_do_complete_s23 {ra:vid, rb:LINEITEM_ORDERKEY,
             rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
             rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE,
             rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG,
             rk:LINEITEM_LINESTATUS, rl:LINEITEM_SHIPDATE,
             rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
             ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE,
             rq:LINEITEM_COMMENT}
         else if stmt_id == 22
           then
             nd_delete_LINEITEM_do_complete_s22 {ra:vid, rb:LINEITEM_ORDERKEY,
               rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY,
               re:LINEITEM_LINENUMBER, rf:LINEITEM_QUANTITY,
               rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
               ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
               rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE,
               rn:LINEITEM_RECEIPTDATE, ro:LINEITEM_SHIPINSTRUCT,
               rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT}
           else if stmt_id == 21
             then
               nd_delete_LINEITEM_do_complete_s21 {ra:vid,
                 rb:LINEITEM_ORDERKEY, rc:LINEITEM_PARTKEY,
                 rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
                 rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE,
                 rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG,
                 rk:LINEITEM_LINESTATUS, rl:LINEITEM_SHIPDATE,
                 rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
                 ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE,
                 rq:LINEITEM_COMMENT} else () else ()));
   (sw_ack_rcv, sender_ip)<- {key:me, value:vid}))
trigger nd_delete_LINEITEM_rcv_fetch : { ra:collection { key:int, value:int
  } @ { Collection }, rb:{ key:int, value:int }, rc:int, rd:int, re:int,
  rf:int, rg:real, rh:real, ri:real, rj:real, rk:string, rl:string, rm:int,
  rn:int, ro:int, rp:string, rq:string, rr:string } = (\b1 ->
  bind b1 as {ra:stmt_map_ids, rb:vid, rc:LINEITEM_ORDERKEY,
  rd:LINEITEM_PARTKEY, re:LINEITEM_SUPPKEY, rf:LINEITEM_LINENUMBER,
  rg:LINEITEM_QUANTITY, rh:LINEITEM_EXTENDEDPRICE, ri:LINEITEM_DISCOUNT,
  rj:LINEITEM_TAX, rk:LINEITEM_RETURNFLAG, rl:LINEITEM_LINESTATUS,
  rm:LINEITEM_SHIPDATE, rn:LINEITEM_COMMITDATE, ro:LINEITEM_RECEIPTDATE,
  rp:LINEITEM_SHIPINSTRUCT, rq:LINEITEM_SHIPMODE, rr:LINEITEM_COMMENT} in 
  ((nd_log_write_delete_LINEITEM {ra:vid, rb:LINEITEM_ORDERKEY,
      rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
      rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
      ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
      rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
      ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT});
   stmt_map_ids.iterate ((\b1 -> bind b1 as {key:stmt_id, value:map_id} in 
   if stmt_id == 21
   then if map_id == 2
     then (nd_delete_LINEITEM_send_push_s21_m_QUERY3_mLINEITEM1, me)<- {ra:vid,
       rb:LINEITEM_ORDERKEY, rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY,
       re:LINEITEM_LINENUMBER, rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE,
       rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG,
       rk:LINEITEM_LINESTATUS, rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE,
       rn:LINEITEM_RECEIPTDATE, ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE,
       rq:LINEITEM_COMMENT} else error (print "nd_rcv_fetch: invalid map id")
   else if stmt_id == 24
     then if map_id == 3
       then
         (nd_delete_LINEITEM_send_push_s24_m_QUERY3_mLINEITEM1_mCUSTOMER2, me)<- {ra:vid,
         rb:LINEITEM_ORDERKEY, rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY,
         re:LINEITEM_LINENUMBER, rf:LINEITEM_QUANTITY,
         rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX,
         rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS, rl:LINEITEM_SHIPDATE,
         rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
         ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT}
       else error (print "nd_rcv_fetch: invalid map id")
     else if stmt_id == 25
       then if map_id == 3
         then
           (nd_delete_LINEITEM_send_push_s25_m_QUERY3_mLINEITEM1_mCUSTOMER2,
             me)<- {ra:vid, rb:LINEITEM_ORDERKEY, rc:LINEITEM_PARTKEY,
           rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER, rf:LINEITEM_QUANTITY,
           rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX,
           rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
           rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE,
           rn:LINEITEM_RECEIPTDATE, ro:LINEITEM_SHIPINSTRUCT,
           rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT}
         else error (print "nd_rcv_fetch: invalid map id")
       else error (print "nd_rcv_fetch: invalid stmt id")))))
trigger nd_delete_LINEITEM_send_push_s21_m_QUERY3_mLINEITEM1 : { ra:{ key:int,
  value:int }, rb:int, rc:int, rd:int, re:int, rf:real, rg:real, rh:real,
  ri:real, rj:string, rk:string, rl:int, rm:int, rn:int, ro:string, rp:string,
  rq:string } = (\b1 -> bind b1 as {ra:vid, rb:LINEITEM_ORDERKEY,
  rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
  rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
  ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
  rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
  ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT} in bind
  QUERY3_mLINEITEM1 as ind QUERY3_mLINEITEM1_deref in
  ((nd_log_master_write {key:vid, value:21});
   (shuffle_QUERY3_mLINEITEM1_to_QUERY3_bind_0t0_1t1_2t2
      {ra:Some LINEITEM_ORDERKEY, rb:None immut, rc:None immut,
      rd:frontier_int_date_int_int {key:vid,
           value:QUERY3_mLINEITEM1_deref.filter ((\b1 -> bind b1 as {ra:ra,
           rb:rb, rc:rc, rd:rd, re:re} in rb == LINEITEM_ORDERKEY))}, re:true}).iterate
   ((\b1 -> bind b1 as {key:ip, value:tuples} in 
   (nd_delete_LINEITEM_rcv_push_s21_m_QUERY3_mLINEITEM1, ip)<- {ra:tuples,
   rb:vid, rc:LINEITEM_ORDERKEY, rd:LINEITEM_PARTKEY, re:LINEITEM_SUPPKEY,
   rf:LINEITEM_LINENUMBER, rg:LINEITEM_QUANTITY, rh:LINEITEM_EXTENDEDPRICE,
   ri:LINEITEM_DISCOUNT, rj:LINEITEM_TAX, rk:LINEITEM_RETURNFLAG,
   rl:LINEITEM_LINESTATUS, rm:LINEITEM_SHIPDATE, rn:LINEITEM_COMMITDATE,
   ro:LINEITEM_RECEIPTDATE, rp:LINEITEM_SHIPINSTRUCT, rq:LINEITEM_SHIPMODE,
   rr:LINEITEM_COMMENT}))))
trigger nd_delete_LINEITEM_send_push_s24_m_QUERY3_mLINEITEM1_mCUSTOMER2 : {
  ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:real, rg:real,
  rh:real, ri:real, rj:string, rk:string, rl:int, rm:int, rn:int, ro:string,
  rp:string, rq:string } = (\b1 -> bind b1 as {ra:vid, rb:LINEITEM_ORDERKEY,
  rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
  rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
  ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
  rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
  ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT} in bind
  QUERY3_mLINEITEM1_mCUSTOMER2 as ind QUERY3_mLINEITEM1_mCUSTOMER2_deref in
  ((nd_log_master_write {key:vid, value:24});
   (shuffle_QUERY3_mLINEITEM1_mCUSTOMER2_to_QUERY3_mCUSTOMER2_bind_0t0_1t1_2t2_3t3
      {ra:Some LINEITEM_ORDERKEY, rb:None immut, rc:None immut, rd:None immut,
      re:frontier_int_date_int_int_int {key:vid,
           value:QUERY3_mLINEITEM1_mCUSTOMER2_deref.filter ((\b1 ->
           bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd, re:re, rf:rf} in rb ==
           LINEITEM_ORDERKEY))}, rf:true}).iterate ((\b1 -> bind b1 as {key:ip,
   value:tuples} in 
   (nd_delete_LINEITEM_rcv_push_s24_m_QUERY3_mLINEITEM1_mCUSTOMER2, ip)<- {ra:tuples,
   rb:vid, rc:LINEITEM_ORDERKEY, rd:LINEITEM_PARTKEY, re:LINEITEM_SUPPKEY,
   rf:LINEITEM_LINENUMBER, rg:LINEITEM_QUANTITY, rh:LINEITEM_EXTENDEDPRICE,
   ri:LINEITEM_DISCOUNT, rj:LINEITEM_TAX, rk:LINEITEM_RETURNFLAG,
   rl:LINEITEM_LINESTATUS, rm:LINEITEM_SHIPDATE, rn:LINEITEM_COMMITDATE,
   ro:LINEITEM_RECEIPTDATE, rp:LINEITEM_SHIPINSTRUCT, rq:LINEITEM_SHIPMODE,
   rr:LINEITEM_COMMENT}))))
trigger nd_delete_LINEITEM_send_push_s25_m_QUERY3_mLINEITEM1_mCUSTOMER2 : {
  ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int, rf:real, rg:real,
  rh:real, ri:real, rj:string, rk:string, rl:int, rm:int, rn:int, ro:string,
  rp:string, rq:string } = (\b1 -> bind b1 as {ra:vid, rb:LINEITEM_ORDERKEY,
  rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
  rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
  ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
  rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
  ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT} in bind
  QUERY3_mLINEITEM1_mCUSTOMER2 as ind QUERY3_mLINEITEM1_mCUSTOMER2_deref in
  ((nd_log_master_write {key:vid, value:25});
   (shuffle_QUERY3_mLINEITEM1_mCUSTOMER2_to_QUERY3_mCUSTOMER4_bind_0t0_1t1_2t2_3t3
      {ra:Some LINEITEM_ORDERKEY, rb:None immut, rc:None immut, rd:None immut,
      re:frontier_int_date_int_int_int {key:vid,
           value:QUERY3_mLINEITEM1_mCUSTOMER2_deref.filter ((\b1 ->
           bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd, re:re, rf:rf} in rb ==
           LINEITEM_ORDERKEY))}, rf:true}).iterate ((\b1 -> bind b1 as {key:ip,
   value:tuples} in 
   (nd_delete_LINEITEM_rcv_push_s25_m_QUERY3_mLINEITEM1_mCUSTOMER2, ip)<- {ra:tuples,
   rb:vid, rc:LINEITEM_ORDERKEY, rd:LINEITEM_PARTKEY, re:LINEITEM_SUPPKEY,
   rf:LINEITEM_LINENUMBER, rg:LINEITEM_QUANTITY, rh:LINEITEM_EXTENDEDPRICE,
   ri:LINEITEM_DISCOUNT, rj:LINEITEM_TAX, rk:LINEITEM_RETURNFLAG,
   rl:LINEITEM_LINESTATUS, rm:LINEITEM_SHIPDATE, rn:LINEITEM_COMMITDATE,
   ro:LINEITEM_RECEIPTDATE, rp:LINEITEM_SHIPINSTRUCT, rq:LINEITEM_SHIPMODE,
   rr:LINEITEM_COMMENT}))))
trigger nd_delete_LINEITEM_rcv_push_s21_m_QUERY3_mLINEITEM1 : { ra:collection {
  ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int } @ { Collection },
  rb:{ key:int, value:int }, rc:int, rd:int, re:int, rf:int, rg:real, rh:real,
  ri:real, rj:real, rk:string, rl:string, rm:int, rn:int, ro:int, rp:string,
  rq:string, rr:string } = (\b1 -> bind b1 as {ra:tuples, rb:vid,
  rc:LINEITEM_ORDERKEY, rd:LINEITEM_PARTKEY, re:LINEITEM_SUPPKEY,
  rf:LINEITEM_LINENUMBER, rg:LINEITEM_QUANTITY, rh:LINEITEM_EXTENDEDPRICE,
  ri:LINEITEM_DISCOUNT, rj:LINEITEM_TAX, rk:LINEITEM_RETURNFLAG,
  rl:LINEITEM_LINESTATUS, rm:LINEITEM_SHIPDATE, rn:LINEITEM_COMMITDATE,
  ro:LINEITEM_RECEIPTDATE, rp:LINEITEM_SHIPINSTRUCT, rq:LINEITEM_SHIPMODE,
  rr:LINEITEM_COMMENT} in 
  ((nd_log_write_delete_LINEITEM {ra:vid, rb:LINEITEM_ORDERKEY,
      rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
      rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
      ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
      rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
      ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT});
   tuples.iterate ((\tuple -> bind map_QUERY3_mLINEITEM1_s21_buf as ind
   map_QUERY3_mLINEITEM1_s21_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2, rd:_tup3, re:_tup4} in
     case ((map_QUERY3_mLINEITEM1_s21_buf_d.filter ((\b1 -> bind b1 as {ra:ra,
       rb:rb, rc:rc, rd:rd, re:re} in ((ra == _tup0 and rd == _tup3) and rc ==
       _tup2) and rb == _tup1))).peek ()) of
       {Some vals -> map_QUERY3_mLINEITEM1_s21_buf_d.update vals tuple}
       {None -> map_QUERY3_mLINEITEM1_s21_buf_d.insert tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:21, rc:-1}
   then
     nd_delete_LINEITEM_do_complete_s21 {ra:vid, rb:LINEITEM_ORDERKEY,
       rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
       rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
       ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
       rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
       ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT}
   else ())))
trigger nd_delete_LINEITEM_rcv_push_s24_m_QUERY3_mLINEITEM1_mCUSTOMER2 : {
  ra:collection { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int,
  rf:int } @ { Collection }, rb:{ key:int, value:int }, rc:int, rd:int, re:int,
  rf:int, rg:real, rh:real, ri:real, rj:real, rk:string, rl:string, rm:int,
  rn:int, ro:int, rp:string, rq:string, rr:string } = (\b1 ->
  bind b1 as {ra:tuples, rb:vid, rc:LINEITEM_ORDERKEY, rd:LINEITEM_PARTKEY,
  re:LINEITEM_SUPPKEY, rf:LINEITEM_LINENUMBER, rg:LINEITEM_QUANTITY,
  rh:LINEITEM_EXTENDEDPRICE, ri:LINEITEM_DISCOUNT, rj:LINEITEM_TAX,
  rk:LINEITEM_RETURNFLAG, rl:LINEITEM_LINESTATUS, rm:LINEITEM_SHIPDATE,
  rn:LINEITEM_COMMITDATE, ro:LINEITEM_RECEIPTDATE, rp:LINEITEM_SHIPINSTRUCT,
  rq:LINEITEM_SHIPMODE, rr:LINEITEM_COMMENT} in 
  ((nd_log_write_delete_LINEITEM {ra:vid, rb:LINEITEM_ORDERKEY,
      rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
      rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
      ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
      rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
      ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT});
   tuples.iterate ((\tuple -> bind map_QUERY3_mLINEITEM1_mCUSTOMER2_s24_buf as
   ind map_QUERY3_mLINEITEM1_mCUSTOMER2_s24_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2, rd:_tup3, re:_tup4, rf:_tup5}
     in
     case ((map_QUERY3_mLINEITEM1_mCUSTOMER2_s24_buf_d.filter ((\b1 ->
       bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd, re:re, rf:rf} in (((ra == _tup0
       and re == _tup4) and rd == _tup3) and rc == _tup2) and rb ==
       _tup1))).peek ()) of
       {Some vals -> map_QUERY3_mLINEITEM1_mCUSTOMER2_s24_buf_d.update vals
         tuple}{None -> map_QUERY3_mLINEITEM1_mCUSTOMER2_s24_buf_d.insert
                 tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:24, rc:-1}
   then
     nd_delete_LINEITEM_do_complete_s24 {ra:vid, rb:LINEITEM_ORDERKEY,
       rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
       rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
       ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
       rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
       ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT}
   else ())))
trigger nd_delete_LINEITEM_rcv_push_s25_m_QUERY3_mLINEITEM1_mCUSTOMER2 : {
  ra:collection { ra:{ key:int, value:int }, rb:int, rc:int, rd:int, re:int,
  rf:int } @ { Collection }, rb:{ key:int, value:int }, rc:int, rd:int, re:int,
  rf:int, rg:real, rh:real, ri:real, rj:real, rk:string, rl:string, rm:int,
  rn:int, ro:int, rp:string, rq:string, rr:string } = (\b1 ->
  bind b1 as {ra:tuples, rb:vid, rc:LINEITEM_ORDERKEY, rd:LINEITEM_PARTKEY,
  re:LINEITEM_SUPPKEY, rf:LINEITEM_LINENUMBER, rg:LINEITEM_QUANTITY,
  rh:LINEITEM_EXTENDEDPRICE, ri:LINEITEM_DISCOUNT, rj:LINEITEM_TAX,
  rk:LINEITEM_RETURNFLAG, rl:LINEITEM_LINESTATUS, rm:LINEITEM_SHIPDATE,
  rn:LINEITEM_COMMITDATE, ro:LINEITEM_RECEIPTDATE, rp:LINEITEM_SHIPINSTRUCT,
  rq:LINEITEM_SHIPMODE, rr:LINEITEM_COMMENT} in 
  ((nd_log_write_delete_LINEITEM {ra:vid, rb:LINEITEM_ORDERKEY,
      rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
      rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
      ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
      rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
      ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT});
   tuples.iterate ((\tuple -> bind map_QUERY3_mLINEITEM1_mCUSTOMER2_s25_buf as
   ind map_QUERY3_mLINEITEM1_mCUSTOMER2_s25_buf_d in
   bind tuple as {ra:_tup0, rb:_tup1, rc:_tup2, rd:_tup3, re:_tup4, rf:_tup5}
     in
     case ((map_QUERY3_mLINEITEM1_mCUSTOMER2_s25_buf_d.filter ((\b1 ->
       bind b1 as {ra:ra, rb:rb, rc:rc, rd:rd, re:re, rf:rf} in (((ra == _tup0
       and re == _tup4) and rd == _tup3) and rc == _tup2) and rb ==
       _tup1))).peek ()) of
       {Some vals -> map_QUERY3_mLINEITEM1_mCUSTOMER2_s25_buf_d.update vals
         tuple}{None -> map_QUERY3_mLINEITEM1_mCUSTOMER2_s25_buf_d.insert
                 tuple}));
   (if nd_check_stmt_cntr_index {ra:vid, rb:25, rc:-1}
   then
     nd_delete_LINEITEM_do_complete_s25 {ra:vid, rb:LINEITEM_ORDERKEY,
       rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
       rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
       ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
       rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
       ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT}
   else ())))
trigger nd_delete_LINEITEM_do_complete_s22_trig : { ra:{ key:int, value:int },
  rb:int, rc:int, rd:int, re:int, rf:real, rg:real, rh:real, ri:real,
  rj:string, rk:string, rl:int, rm:int, rn:int, ro:string, rp:string, rq:string
  } = (\b1 -> bind b1 as {ra:vid, rb:LINEITEM_ORDERKEY, rc:LINEITEM_PARTKEY,
  rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER, rf:LINEITEM_QUANTITY,
  rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX,
  rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS, rl:LINEITEM_SHIPDATE,
  rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE, ro:LINEITEM_SHIPINSTRUCT,
  rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT} in 
  nd_delete_LINEITEM_do_complete_s22 {ra:vid, rb:LINEITEM_ORDERKEY,
    rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
    rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
    ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
    rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
    ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT})
trigger nd_delete_LINEITEM_do_complete_s23_trig : { ra:{ key:int, value:int },
  rb:int, rc:int, rd:int, re:int, rf:real, rg:real, rh:real, ri:real,
  rj:string, rk:string, rl:int, rm:int, rn:int, ro:string, rp:string, rq:string
  } = (\b1 -> bind b1 as {ra:vid, rb:LINEITEM_ORDERKEY, rc:LINEITEM_PARTKEY,
  rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER, rf:LINEITEM_QUANTITY,
  rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT, ri:LINEITEM_TAX,
  rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS, rl:LINEITEM_SHIPDATE,
  rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE, ro:LINEITEM_SHIPINSTRUCT,
  rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT} in 
  nd_delete_LINEITEM_do_complete_s23 {ra:vid, rb:LINEITEM_ORDERKEY,
    rc:LINEITEM_PARTKEY, rd:LINEITEM_SUPPKEY, re:LINEITEM_LINENUMBER,
    rf:LINEITEM_QUANTITY, rg:LINEITEM_EXTENDEDPRICE, rh:LINEITEM_DISCOUNT,
    ri:LINEITEM_TAX, rj:LINEITEM_RETURNFLAG, rk:LINEITEM_LINESTATUS,
    rl:LINEITEM_SHIPDATE, rm:LINEITEM_COMMITDATE, rn:LINEITEM_RECEIPTDATE,
    ro:LINEITEM_SHIPINSTRUCT, rp:LINEITEM_SHIPMODE, rq:LINEITEM_COMMENT})
trigger delete_LINEITEM_rcv_corrective_s21_m_QUERY3_mLINEITEM1 : { ra:address,
  rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int, value:int },
  rf:collection { key:int, value:int } @ { Seq }, rg:collection { ra:int,
  rb:int, rc:int, rd:int } @ { Collection } } = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid,
  rf:compute_vids, rg:delta_tuples} in 
  ((nd_add_delta_to_int_date_int_int {ra:map_QUERY3_mLINEITEM1_s21_buf,
      rb:false, rc:vid, rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:21}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_delete_LINEITEM compute_vid as
         {ra:LINEITEM_ORDERKEY, rb:LINEITEM_PARTKEY, rc:LINEITEM_SUPPKEY, rd:LINEITEM_LINENUMBER, re:LINEITEM_QUANTITY, rf:LINEITEM_EXTENDEDPRICE, rg:LINEITEM_DISCOUNT, rh:LINEITEM_TAX, ri:LINEITEM_RETURNFLAG, rj:LINEITEM_LINESTATUS, rk:LINEITEM_SHIPDATE, rl:LINEITEM_COMMITDATE, rm:LINEITEM_RECEIPTDATE, rn:LINEITEM_SHIPINSTRUCT, ro:LINEITEM_SHIPMODE, rp:LINEITEM_COMMENT}
         in
         acc_count +
           delete_LINEITEM_do_corrective_s21_m_QUERY3_mLINEITEM1 {ra:orig_addr,
             rb:orig_stmt_id, rc:orig_vid, rd:hop, re:compute_vid,
             rf:LINEITEM_ORDERKEY, rg:LINEITEM_PARTKEY, rh:LINEITEM_SUPPKEY,
             ri:LINEITEM_LINENUMBER, rj:LINEITEM_QUANTITY,
             rk:LINEITEM_EXTENDEDPRICE, rl:LINEITEM_DISCOUNT, rm:LINEITEM_TAX,
             rn:LINEITEM_RETURNFLAG, ro:LINEITEM_LINESTATUS,
             rp:LINEITEM_SHIPDATE, rq:LINEITEM_COMMITDATE,
             rr:LINEITEM_RECEIPTDATE, rs:LINEITEM_SHIPINSTRUCT,
             rt:LINEITEM_SHIPMODE, ru:LINEITEM_COMMENT, rv:delta_tuples}
       else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger delete_LINEITEM_rcv_corrective_s24_m_QUERY3_mLINEITEM1_mCUSTOMER2 : {
  ra:address, rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int,
  value:int }, rf:collection { key:int, value:int } @ { Seq }, rg:collection {
  ra:int, rb:int, rc:int, rd:int, re:int } @ { Collection } } = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid,
  rf:compute_vids, rg:delta_tuples} in 
  ((nd_add_delta_to_int_date_int_int_int
      {ra:map_QUERY3_mLINEITEM1_mCUSTOMER2_s24_buf, rb:false, rc:vid,
      rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:24}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_delete_LINEITEM compute_vid as
         {ra:LINEITEM_ORDERKEY, rb:LINEITEM_PARTKEY, rc:LINEITEM_SUPPKEY, rd:LINEITEM_LINENUMBER, re:LINEITEM_QUANTITY, rf:LINEITEM_EXTENDEDPRICE, rg:LINEITEM_DISCOUNT, rh:LINEITEM_TAX, ri:LINEITEM_RETURNFLAG, rj:LINEITEM_LINESTATUS, rk:LINEITEM_SHIPDATE, rl:LINEITEM_COMMITDATE, rm:LINEITEM_RECEIPTDATE, rn:LINEITEM_SHIPINSTRUCT, ro:LINEITEM_SHIPMODE, rp:LINEITEM_COMMENT}
         in
         acc_count +
           delete_LINEITEM_do_corrective_s24_m_QUERY3_mLINEITEM1_mCUSTOMER2
             {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
             re:compute_vid, rf:LINEITEM_ORDERKEY, rg:LINEITEM_PARTKEY,
             rh:LINEITEM_SUPPKEY, ri:LINEITEM_LINENUMBER, rj:LINEITEM_QUANTITY,
             rk:LINEITEM_EXTENDEDPRICE, rl:LINEITEM_DISCOUNT, rm:LINEITEM_TAX,
             rn:LINEITEM_RETURNFLAG, ro:LINEITEM_LINESTATUS,
             rp:LINEITEM_SHIPDATE, rq:LINEITEM_COMMITDATE,
             rr:LINEITEM_RECEIPTDATE, rs:LINEITEM_SHIPINSTRUCT,
             rt:LINEITEM_SHIPMODE, ru:LINEITEM_COMMENT, rv:delta_tuples}
       else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))
trigger delete_LINEITEM_rcv_corrective_s25_m_QUERY3_mLINEITEM1_mCUSTOMER2 : {
  ra:address, rb:int, rc:{ key:int, value:int }, rd:int, re:{ key:int,
  value:int }, rf:collection { key:int, value:int } @ { Seq }, rg:collection {
  ra:int, rb:int, rc:int, rd:int, re:int } @ { Collection } } = (\b1 ->
  bind b1 as {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop, re:vid,
  rf:compute_vids, rg:delta_tuples} in 
  ((nd_add_delta_to_int_date_int_int_int
      {ra:map_QUERY3_mLINEITEM1_mCUSTOMER2_s25_buf, rb:false, rc:vid,
      rd:delta_tuples});
   let sent_msgs =
   compute_vids.fold ((\acc_count -> (\compute_vid -> let cntr =
     case ((nd_stmt_cntrs.filter ((\b1 -> bind b1 as {key:key, value:value} in 
       key == {key:compute_vid, value:25}))).peek ()) of
       {Some lkup -> (lkup.value).key}{None -> 0} in
     if cntr == 0
       then bind nd_log_get_bound_delete_LINEITEM compute_vid as
         {ra:LINEITEM_ORDERKEY, rb:LINEITEM_PARTKEY, rc:LINEITEM_SUPPKEY, rd:LINEITEM_LINENUMBER, re:LINEITEM_QUANTITY, rf:LINEITEM_EXTENDEDPRICE, rg:LINEITEM_DISCOUNT, rh:LINEITEM_TAX, ri:LINEITEM_RETURNFLAG, rj:LINEITEM_LINESTATUS, rk:LINEITEM_SHIPDATE, rl:LINEITEM_COMMITDATE, rm:LINEITEM_RECEIPTDATE, rn:LINEITEM_SHIPINSTRUCT, ro:LINEITEM_SHIPMODE, rp:LINEITEM_COMMENT}
         in
         acc_count +
           delete_LINEITEM_do_corrective_s25_m_QUERY3_mLINEITEM1_mCUSTOMER2
             {ra:orig_addr, rb:orig_stmt_id, rc:orig_vid, rd:hop,
             re:compute_vid, rf:LINEITEM_ORDERKEY, rg:LINEITEM_PARTKEY,
             rh:LINEITEM_SUPPKEY, ri:LINEITEM_LINENUMBER, rj:LINEITEM_QUANTITY,
             rk:LINEITEM_EXTENDEDPRICE, rl:LINEITEM_DISCOUNT, rm:LINEITEM_TAX,
             rn:LINEITEM_RETURNFLAG, ro:LINEITEM_LINESTATUS,
             rp:LINEITEM_SHIPDATE, rq:LINEITEM_COMMITDATE,
             rr:LINEITEM_RECEIPTDATE, rs:LINEITEM_SHIPINSTRUCT,
             rt:LINEITEM_SHIPMODE, ru:LINEITEM_COMMENT, rv:delta_tuples}
       else acc_count))) 0 in
   (nd_rcv_corr_done, orig_addr)<- {ra:orig_vid, rb:orig_stmt_id, rc:hop,
     rd:sent_msgs}))


source master : () = value(())feed master |> ms_send_addr_self


source switch : { ra:string, rb:int, rc:real, rd:string, re:int, rf:string,
rg:string, rh:string, ri:string, rj:string, rk:int, rl:real, rm:real, rn:int,
ro:string, rp:string, rq:string, rr:string, rs:int, rt:string, ru:int,
rv:string, rw:string, rx:int, ry:string, rz:real, rza:string, rzb:int,
rzc:real, rzd:string, rze:string, rzf:string, rzg:string, rzh:int, rzi:int,
rzj:int, rzk:real, rzl:real, rzm:real, rzn:string
} = file "/k3/K3/temp/tpch3.csv" psvfeed switch |> sw_demux








