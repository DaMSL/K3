#  Dockerfile:  k3-app
#
#  Description:  Image for use with K3 to run applications ONLY
#    Contains minimal amount of libs & dependencies
#
#  Version:   Boost (1.57), Mesos (0.22.1), Protobuf (2.5)
#
#  Requirements:  Copy mesos libs (libmesos-<version>.so, libmesos.la) to local work dir

# Debian: Jesse
FROM debian:sid

ENV BOOST_VER 1.57.0
ENV BOOST_DIR boost_1_57_0

ENV PROTO_VER 2.5.0

ENV MESOS_VER 0.22.1
ENV MESOS_INT_VER 0.22.1.1

ENV CABAL_VER 1.22
ENV GHC_VER 7.10.1
ENV HAPPY_VER 1.19.5
ENV ALEX_VER 3.1.4

ENV OPAMYES 1

# Install basic packages to build the image
RUN apt-get update && apt-get install -y \
                       bzip2 unzip autoconf Libtool \
                       gcc g++ clang-3.5 make cmake git curl wget subversion pkgconf \
                       aptitude vim tmux time && \
    apt-get update && \
    apt-get install -y software-properties-common python-software-properties python-setuptools \
                       opam \
                       ruby2.2 python python-dev python-pip \
                       libyaml-cpp-dev libzmq3-dev libre2-dev numactl && \
    pip install pyyaml && \
    pip install flask && \
    pip install pytz && \
    pip install enum34 && \
    pip install Flask-SocketIO && \
    update-alternatives \
      --install /usr/bin/ruby ruby /usr/bin/ruby2.2 50 \
      --slave /usr/bin/irb irb /usr/bin/irb2.2 \
      --slave /usr/bin/rake rake /usr/bin/rake2.2 \
      --slave /usr/bin/gem gem /usr/bin/gem2.2 \
      --slave /usr/bin/rdoc rdoc /usr/bin/rdoc2.2 \
      --slave /usr/bin/testrb testrb /usr/bin/testrb2.2 \
      --slave /usr/bin/erb erb /usr/bin/erb2.2 \
      --slave /usr/bin/ri ri /usr/bin/ri2.2 && \
    opam init -a && \
    opam switch 4.02.1 && \
    eval `opam config env` && \
    opam install ocamlfind && \
    /bin/echo -e "\neval \`opam config env\`\n" >> /root/.bashrc


# Install Boost
RUN wget http://sourceforge.net/projects/boost/files/boost/$BOOST_VER/$BOOST_DIR.tar.bz2/download && \
  tar --bzip2 -xvf ./download && \
  rm download && \
  cd $BOOST_DIR &&  \
  ./bootstrap.sh --with-libraries=serialization,system,thread,log,program_options,filesystem --prefix=/usr/local libdir=/usr/local/lib && \
  ./b2 stage threading=multi link=shared &&  \
  ./b2 install threading=multi link=shared && \
  cd .. && \
  rm -Rf $BOOST_DIR

# Install CSV++
RUN git clone https://git01.codeplex.com/forks/wjjt/csvpp && \
  cd csvpp && \
  cmake . && \
  make && \
  mv libcsvpp.so /usr/lib/ && \
  cd .. && \
  rm -Rf csvpp

# Install libdynamic
RUN git clone https://github.com/DaMSL/libdynamic && \
  cd libdynamic &&  \
  ./autogen.sh && \
  ./configure --prefix=/usr && \
  make && \
  make install && \
  cd .. && \
  rm -Rf libdynamic

# Copy in Mesos libs & include files
ADD assets/libmesos-$MESOS_VER.so /usr/lib/
ADD assets/libmesos.la /usr/lib/
ADD assets/include/mesos /usr/include/mesos/

# Install Protobuf
RUN wget https://github.com/google/protobuf/releases/download/v$PROTO_VER/protobuf-$PROTO_VER.tar.bz2 && \
  tar -xvf protobuf-$PROTO_VER.tar.bz2 && \
  rm protobuf-$PROTO_VER.tar.bz2 && \
  cd protobuf-$PROTO_VER && \
  ./autogen.sh && \
  ./configure --prefix=/usr && \
  make && \
  make check && \
  make install && \
  protoc --proto_path=/usr/include/mesos --cpp_out=/usr/include/mesos/ /usr/include/mesos/mesos.proto && \
  cd .. && \
  rm -Rf /protobuf-$PROTO_VER

# Install Mesos Eggs
RUN ln -s /usr/lib/libmesos-$MESOS_VER.so /usr/lib/libmesos.so && \
    wget http://downloads.mesosphere.io/master/ubuntu/14.04/mesos-$MESOS_VER-py2.7-linux-x86_64.egg && \
    wget https://pypi.python.org/packages/2.7/m/mesos.interface/mesos.interface-$MESOS_INT_VER-py2.7.egg && \
    easy_install mesos.interface-$MESOS_INT_VER-py2.7.egg && \
    easy_install --no-deps mesos-$MESOS_VER-py2.7-linux-x86_64.egg && \
    rm mesos.interface-$MESOS_INT_VER-py2.7.egg && \
    rm mesos-$MESOS_VER-py2.7-linux-x86_64.egg


# Install GHC and cabal
WORKDIR /
ENV LANG C.UTF-8
ENV PATH /opt/ghc/$GHC_VER/bin:/opt/cabal/$CABAL_VER/bin:/opt/alex/$ALEX_VER/bin:/opt/happy/$HAPPY_VER/bin:/root/.cabal/bin/:$PATH

RUN echo 'deb http://ppa.launchpad.net/hvr/ghc/ubuntu trusty main' > /etc/apt/sources.list.d/ghc.list && \
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys F6F88286 && \
    apt-get update && \
    apt-get install -y --no-install-recommends zlib1g-dev cabal-install-$CABAL_VER ghc-$GHC_VER happy-$HAPPY_VER alex-$ALEX_VER && \
    rm -rf /var/lib/apt/lists/*  && \
    cabal update && \
    cabal install cabal-install -j

# Install decent vim configuration
RUN mkdir /root/.vim && \
    git clone https://github.com/tpope/vim-pathogen.git /root/.vim; \
    git clone https://github.com/tpope/vim-sensible.git /root/.vim/bundle; \
    git clone https://github.com/tmhedberg/matchit.git /root/.vim/bundle; \
    git clone https://github.com/kien/ctrlp.git /root/.vim/bundle; \
    git clone https://github.com/tpope/vim-surround.git /root/.vim/bundle; \
    git clone https://github.com/tpope/vim-unimpaired.git /root/.vim/bundle; \
    git clone https://github.com/tpope/vim-repeat.git /root/.vim/bundle; \
    git clone https://github.com/tpope/vim-fugitive.git /root/.vim/bundle; \
    git clone https://github.com/tpope/vim-vinegar.git /root/.vim/bundle; \
    git clone https://github.com/tpope/vim-eunuch.git /root/.vim/bundle; \
    git clone https://github.com/scrooloose/nerdtree.git /root/.vim/bundle; \
    git clone https://github.com/scrooloose/syntastic.git /root/.vim/bundle; \
    git clone https://github.com/godlygeek/tabular.git /root/.vim/bundle; \
    git clone https://github.com/bling/airline.git /root/.vim/bundle; \
    git clone https://github.com/bronson/vim-visual-star-search.git /root/.vim/bundle; \
    git clone https://github.com/justinmk/vim-sneak.git /root/.vim/bundle; \
    echo 'execute pathogen#infect() | syntax on | filetype plugin indent on' > /root/.vimrc

# Clone Repo
RUN mkdir -p /k3/K3 && \
    git clone https://github.com/DaMSL/K3.git /k3/K3

# Build K3
WORKDIR /k3/K3

ENV K3_BRANCH development

RUN git checkout development && \
    cabal sandbox init && \
    cabal install -j --only-dependencies --disable-documentation && \
    cabal configure && \
    apt-get update && \
    apt-get install -y libtinfo-dev && \
    cabal build -j

# Clone K3, K3-Mosaic from Git
RUN mkdir -p /k3/K3-Mosaic && \
    git clone https://github.com/DaMSL/K3-Mosaic.git /k3/K3-Mosaic

# Clean up
RUN apt-get autoremove -y && \
    apt-get autoclean -y


