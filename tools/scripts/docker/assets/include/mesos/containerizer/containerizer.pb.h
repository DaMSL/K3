// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mesos/containerizer/containerizer.proto

#ifndef PROTOBUF_mesos_2fcontainerizer_2fcontainerizer_2eproto__INCLUDED
#define PROTOBUF_mesos_2fcontainerizer_2fcontainerizer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "mesos/mesos.pb.h"
// @@protoc_insertion_point(includes)

namespace mesos {
namespace containerizer {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mesos_2fcontainerizer_2fcontainerizer_2eproto();
void protobuf_AssignDesc_mesos_2fcontainerizer_2fcontainerizer_2eproto();
void protobuf_ShutdownFile_mesos_2fcontainerizer_2fcontainerizer_2eproto();

class Launch;
class Update;
class Wait;
class Destroy;
class Usage;
class Termination;
class Containers;

// ===================================================================

class Launch : public ::google::protobuf::Message {
 public:
  Launch();
  virtual ~Launch();

  Launch(const Launch& from);

  inline Launch& operator=(const Launch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Launch& default_instance();

  void Swap(Launch* other);

  // implements Message ----------------------------------------------

  Launch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Launch& from);
  void MergeFrom(const Launch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.ContainerID container_id = 1;
  inline bool has_container_id() const;
  inline void clear_container_id();
  static const int kContainerIdFieldNumber = 1;
  inline const ::mesos::ContainerID& container_id() const;
  inline ::mesos::ContainerID* mutable_container_id();
  inline ::mesos::ContainerID* release_container_id();
  inline void set_allocated_container_id(::mesos::ContainerID* container_id);

  // optional .mesos.TaskInfo task_info = 2;
  inline bool has_task_info() const;
  inline void clear_task_info();
  static const int kTaskInfoFieldNumber = 2;
  inline const ::mesos::TaskInfo& task_info() const;
  inline ::mesos::TaskInfo* mutable_task_info();
  inline ::mesos::TaskInfo* release_task_info();
  inline void set_allocated_task_info(::mesos::TaskInfo* task_info);

  // optional .mesos.ExecutorInfo executor_info = 3;
  inline bool has_executor_info() const;
  inline void clear_executor_info();
  static const int kExecutorInfoFieldNumber = 3;
  inline const ::mesos::ExecutorInfo& executor_info() const;
  inline ::mesos::ExecutorInfo* mutable_executor_info();
  inline ::mesos::ExecutorInfo* release_executor_info();
  inline void set_allocated_executor_info(::mesos::ExecutorInfo* executor_info);

  // optional string directory = 4;
  inline bool has_directory() const;
  inline void clear_directory();
  static const int kDirectoryFieldNumber = 4;
  inline const ::std::string& directory() const;
  inline void set_directory(const ::std::string& value);
  inline void set_directory(const char* value);
  inline void set_directory(const char* value, size_t size);
  inline ::std::string* mutable_directory();
  inline ::std::string* release_directory();
  inline void set_allocated_directory(::std::string* directory);

  // optional string user = 5;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 5;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // optional .mesos.SlaveID slave_id = 6;
  inline bool has_slave_id() const;
  inline void clear_slave_id();
  static const int kSlaveIdFieldNumber = 6;
  inline const ::mesos::SlaveID& slave_id() const;
  inline ::mesos::SlaveID* mutable_slave_id();
  inline ::mesos::SlaveID* release_slave_id();
  inline void set_allocated_slave_id(::mesos::SlaveID* slave_id);

  // optional string slave_pid = 7;
  inline bool has_slave_pid() const;
  inline void clear_slave_pid();
  static const int kSlavePidFieldNumber = 7;
  inline const ::std::string& slave_pid() const;
  inline void set_slave_pid(const ::std::string& value);
  inline void set_slave_pid(const char* value);
  inline void set_slave_pid(const char* value, size_t size);
  inline ::std::string* mutable_slave_pid();
  inline ::std::string* release_slave_pid();
  inline void set_allocated_slave_pid(::std::string* slave_pid);

  // optional bool checkpoint = 8;
  inline bool has_checkpoint() const;
  inline void clear_checkpoint();
  static const int kCheckpointFieldNumber = 8;
  inline bool checkpoint() const;
  inline void set_checkpoint(bool value);

  // @@protoc_insertion_point(class_scope:mesos.containerizer.Launch)
 private:
  inline void set_has_container_id();
  inline void clear_has_container_id();
  inline void set_has_task_info();
  inline void clear_has_task_info();
  inline void set_has_executor_info();
  inline void clear_has_executor_info();
  inline void set_has_directory();
  inline void clear_has_directory();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_slave_id();
  inline void clear_has_slave_id();
  inline void set_has_slave_pid();
  inline void clear_has_slave_pid();
  inline void set_has_checkpoint();
  inline void clear_has_checkpoint();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::mesos::ContainerID* container_id_;
  ::mesos::TaskInfo* task_info_;
  ::mesos::ExecutorInfo* executor_info_;
  ::std::string* directory_;
  ::std::string* user_;
  ::mesos::SlaveID* slave_id_;
  ::std::string* slave_pid_;
  bool checkpoint_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_mesos_2fcontainerizer_2fcontainerizer_2eproto();
  friend void protobuf_AssignDesc_mesos_2fcontainerizer_2fcontainerizer_2eproto();
  friend void protobuf_ShutdownFile_mesos_2fcontainerizer_2fcontainerizer_2eproto();

  void InitAsDefaultInstance();
  static Launch* default_instance_;
};
// -------------------------------------------------------------------

class Update : public ::google::protobuf::Message {
 public:
  Update();
  virtual ~Update();

  Update(const Update& from);

  inline Update& operator=(const Update& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Update& default_instance();

  void Swap(Update* other);

  // implements Message ----------------------------------------------

  Update* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Update& from);
  void MergeFrom(const Update& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.ContainerID container_id = 1;
  inline bool has_container_id() const;
  inline void clear_container_id();
  static const int kContainerIdFieldNumber = 1;
  inline const ::mesos::ContainerID& container_id() const;
  inline ::mesos::ContainerID* mutable_container_id();
  inline ::mesos::ContainerID* release_container_id();
  inline void set_allocated_container_id(::mesos::ContainerID* container_id);

  // repeated .mesos.Resource resources = 2;
  inline int resources_size() const;
  inline void clear_resources();
  static const int kResourcesFieldNumber = 2;
  inline const ::mesos::Resource& resources(int index) const;
  inline ::mesos::Resource* mutable_resources(int index);
  inline ::mesos::Resource* add_resources();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::Resource >&
      resources() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::Resource >*
      mutable_resources();

  // @@protoc_insertion_point(class_scope:mesos.containerizer.Update)
 private:
  inline void set_has_container_id();
  inline void clear_has_container_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::mesos::ContainerID* container_id_;
  ::google::protobuf::RepeatedPtrField< ::mesos::Resource > resources_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_mesos_2fcontainerizer_2fcontainerizer_2eproto();
  friend void protobuf_AssignDesc_mesos_2fcontainerizer_2fcontainerizer_2eproto();
  friend void protobuf_ShutdownFile_mesos_2fcontainerizer_2fcontainerizer_2eproto();

  void InitAsDefaultInstance();
  static Update* default_instance_;
};
// -------------------------------------------------------------------

class Wait : public ::google::protobuf::Message {
 public:
  Wait();
  virtual ~Wait();

  Wait(const Wait& from);

  inline Wait& operator=(const Wait& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Wait& default_instance();

  void Swap(Wait* other);

  // implements Message ----------------------------------------------

  Wait* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Wait& from);
  void MergeFrom(const Wait& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.ContainerID container_id = 1;
  inline bool has_container_id() const;
  inline void clear_container_id();
  static const int kContainerIdFieldNumber = 1;
  inline const ::mesos::ContainerID& container_id() const;
  inline ::mesos::ContainerID* mutable_container_id();
  inline ::mesos::ContainerID* release_container_id();
  inline void set_allocated_container_id(::mesos::ContainerID* container_id);

  // @@protoc_insertion_point(class_scope:mesos.containerizer.Wait)
 private:
  inline void set_has_container_id();
  inline void clear_has_container_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::mesos::ContainerID* container_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mesos_2fcontainerizer_2fcontainerizer_2eproto();
  friend void protobuf_AssignDesc_mesos_2fcontainerizer_2fcontainerizer_2eproto();
  friend void protobuf_ShutdownFile_mesos_2fcontainerizer_2fcontainerizer_2eproto();

  void InitAsDefaultInstance();
  static Wait* default_instance_;
};
// -------------------------------------------------------------------

class Destroy : public ::google::protobuf::Message {
 public:
  Destroy();
  virtual ~Destroy();

  Destroy(const Destroy& from);

  inline Destroy& operator=(const Destroy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Destroy& default_instance();

  void Swap(Destroy* other);

  // implements Message ----------------------------------------------

  Destroy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Destroy& from);
  void MergeFrom(const Destroy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.ContainerID container_id = 1;
  inline bool has_container_id() const;
  inline void clear_container_id();
  static const int kContainerIdFieldNumber = 1;
  inline const ::mesos::ContainerID& container_id() const;
  inline ::mesos::ContainerID* mutable_container_id();
  inline ::mesos::ContainerID* release_container_id();
  inline void set_allocated_container_id(::mesos::ContainerID* container_id);

  // @@protoc_insertion_point(class_scope:mesos.containerizer.Destroy)
 private:
  inline void set_has_container_id();
  inline void clear_has_container_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::mesos::ContainerID* container_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mesos_2fcontainerizer_2fcontainerizer_2eproto();
  friend void protobuf_AssignDesc_mesos_2fcontainerizer_2fcontainerizer_2eproto();
  friend void protobuf_ShutdownFile_mesos_2fcontainerizer_2fcontainerizer_2eproto();

  void InitAsDefaultInstance();
  static Destroy* default_instance_;
};
// -------------------------------------------------------------------

class Usage : public ::google::protobuf::Message {
 public:
  Usage();
  virtual ~Usage();

  Usage(const Usage& from);

  inline Usage& operator=(const Usage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Usage& default_instance();

  void Swap(Usage* other);

  // implements Message ----------------------------------------------

  Usage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Usage& from);
  void MergeFrom(const Usage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.ContainerID container_id = 1;
  inline bool has_container_id() const;
  inline void clear_container_id();
  static const int kContainerIdFieldNumber = 1;
  inline const ::mesos::ContainerID& container_id() const;
  inline ::mesos::ContainerID* mutable_container_id();
  inline ::mesos::ContainerID* release_container_id();
  inline void set_allocated_container_id(::mesos::ContainerID* container_id);

  // @@protoc_insertion_point(class_scope:mesos.containerizer.Usage)
 private:
  inline void set_has_container_id();
  inline void clear_has_container_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::mesos::ContainerID* container_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mesos_2fcontainerizer_2fcontainerizer_2eproto();
  friend void protobuf_AssignDesc_mesos_2fcontainerizer_2fcontainerizer_2eproto();
  friend void protobuf_ShutdownFile_mesos_2fcontainerizer_2fcontainerizer_2eproto();

  void InitAsDefaultInstance();
  static Usage* default_instance_;
};
// -------------------------------------------------------------------

class Termination : public ::google::protobuf::Message {
 public:
  Termination();
  virtual ~Termination();

  Termination(const Termination& from);

  inline Termination& operator=(const Termination& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Termination& default_instance();

  void Swap(Termination* other);

  // implements Message ----------------------------------------------

  Termination* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Termination& from);
  void MergeFrom(const Termination& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool killed = 1;
  inline bool has_killed() const;
  inline void clear_killed();
  static const int kKilledFieldNumber = 1;
  inline bool killed() const;
  inline void set_killed(bool value);

  // required string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional int32 status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mesos.containerizer.Termination)
 private:
  inline void set_has_killed();
  inline void clear_has_killed();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;
  bool killed_;
  ::google::protobuf::int32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_mesos_2fcontainerizer_2fcontainerizer_2eproto();
  friend void protobuf_AssignDesc_mesos_2fcontainerizer_2fcontainerizer_2eproto();
  friend void protobuf_ShutdownFile_mesos_2fcontainerizer_2fcontainerizer_2eproto();

  void InitAsDefaultInstance();
  static Termination* default_instance_;
};
// -------------------------------------------------------------------

class Containers : public ::google::protobuf::Message {
 public:
  Containers();
  virtual ~Containers();

  Containers(const Containers& from);

  inline Containers& operator=(const Containers& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Containers& default_instance();

  void Swap(Containers* other);

  // implements Message ----------------------------------------------

  Containers* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Containers& from);
  void MergeFrom(const Containers& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mesos.ContainerID containers = 1;
  inline int containers_size() const;
  inline void clear_containers();
  static const int kContainersFieldNumber = 1;
  inline const ::mesos::ContainerID& containers(int index) const;
  inline ::mesos::ContainerID* mutable_containers(int index);
  inline ::mesos::ContainerID* add_containers();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::ContainerID >&
      containers() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::ContainerID >*
      mutable_containers();

  // @@protoc_insertion_point(class_scope:mesos.containerizer.Containers)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::mesos::ContainerID > containers_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mesos_2fcontainerizer_2fcontainerizer_2eproto();
  friend void protobuf_AssignDesc_mesos_2fcontainerizer_2fcontainerizer_2eproto();
  friend void protobuf_ShutdownFile_mesos_2fcontainerizer_2fcontainerizer_2eproto();

  void InitAsDefaultInstance();
  static Containers* default_instance_;
};
// ===================================================================


// ===================================================================

// Launch

// required .mesos.ContainerID container_id = 1;
inline bool Launch::has_container_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Launch::set_has_container_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Launch::clear_has_container_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Launch::clear_container_id() {
  if (container_id_ != NULL) container_id_->::mesos::ContainerID::Clear();
  clear_has_container_id();
}
inline const ::mesos::ContainerID& Launch::container_id() const {
  return container_id_ != NULL ? *container_id_ : *default_instance_->container_id_;
}
inline ::mesos::ContainerID* Launch::mutable_container_id() {
  set_has_container_id();
  if (container_id_ == NULL) container_id_ = new ::mesos::ContainerID;
  return container_id_;
}
inline ::mesos::ContainerID* Launch::release_container_id() {
  clear_has_container_id();
  ::mesos::ContainerID* temp = container_id_;
  container_id_ = NULL;
  return temp;
}
inline void Launch::set_allocated_container_id(::mesos::ContainerID* container_id) {
  delete container_id_;
  container_id_ = container_id;
  if (container_id) {
    set_has_container_id();
  } else {
    clear_has_container_id();
  }
}

// optional .mesos.TaskInfo task_info = 2;
inline bool Launch::has_task_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Launch::set_has_task_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Launch::clear_has_task_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Launch::clear_task_info() {
  if (task_info_ != NULL) task_info_->::mesos::TaskInfo::Clear();
  clear_has_task_info();
}
inline const ::mesos::TaskInfo& Launch::task_info() const {
  return task_info_ != NULL ? *task_info_ : *default_instance_->task_info_;
}
inline ::mesos::TaskInfo* Launch::mutable_task_info() {
  set_has_task_info();
  if (task_info_ == NULL) task_info_ = new ::mesos::TaskInfo;
  return task_info_;
}
inline ::mesos::TaskInfo* Launch::release_task_info() {
  clear_has_task_info();
  ::mesos::TaskInfo* temp = task_info_;
  task_info_ = NULL;
  return temp;
}
inline void Launch::set_allocated_task_info(::mesos::TaskInfo* task_info) {
  delete task_info_;
  task_info_ = task_info;
  if (task_info) {
    set_has_task_info();
  } else {
    clear_has_task_info();
  }
}

// optional .mesos.ExecutorInfo executor_info = 3;
inline bool Launch::has_executor_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Launch::set_has_executor_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Launch::clear_has_executor_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Launch::clear_executor_info() {
  if (executor_info_ != NULL) executor_info_->::mesos::ExecutorInfo::Clear();
  clear_has_executor_info();
}
inline const ::mesos::ExecutorInfo& Launch::executor_info() const {
  return executor_info_ != NULL ? *executor_info_ : *default_instance_->executor_info_;
}
inline ::mesos::ExecutorInfo* Launch::mutable_executor_info() {
  set_has_executor_info();
  if (executor_info_ == NULL) executor_info_ = new ::mesos::ExecutorInfo;
  return executor_info_;
}
inline ::mesos::ExecutorInfo* Launch::release_executor_info() {
  clear_has_executor_info();
  ::mesos::ExecutorInfo* temp = executor_info_;
  executor_info_ = NULL;
  return temp;
}
inline void Launch::set_allocated_executor_info(::mesos::ExecutorInfo* executor_info) {
  delete executor_info_;
  executor_info_ = executor_info;
  if (executor_info) {
    set_has_executor_info();
  } else {
    clear_has_executor_info();
  }
}

// optional string directory = 4;
inline bool Launch::has_directory() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Launch::set_has_directory() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Launch::clear_has_directory() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Launch::clear_directory() {
  if (directory_ != &::google::protobuf::internal::kEmptyString) {
    directory_->clear();
  }
  clear_has_directory();
}
inline const ::std::string& Launch::directory() const {
  return *directory_;
}
inline void Launch::set_directory(const ::std::string& value) {
  set_has_directory();
  if (directory_ == &::google::protobuf::internal::kEmptyString) {
    directory_ = new ::std::string;
  }
  directory_->assign(value);
}
inline void Launch::set_directory(const char* value) {
  set_has_directory();
  if (directory_ == &::google::protobuf::internal::kEmptyString) {
    directory_ = new ::std::string;
  }
  directory_->assign(value);
}
inline void Launch::set_directory(const char* value, size_t size) {
  set_has_directory();
  if (directory_ == &::google::protobuf::internal::kEmptyString) {
    directory_ = new ::std::string;
  }
  directory_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Launch::mutable_directory() {
  set_has_directory();
  if (directory_ == &::google::protobuf::internal::kEmptyString) {
    directory_ = new ::std::string;
  }
  return directory_;
}
inline ::std::string* Launch::release_directory() {
  clear_has_directory();
  if (directory_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = directory_;
    directory_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Launch::set_allocated_directory(::std::string* directory) {
  if (directory_ != &::google::protobuf::internal::kEmptyString) {
    delete directory_;
  }
  if (directory) {
    set_has_directory();
    directory_ = directory;
  } else {
    clear_has_directory();
    directory_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string user = 5;
inline bool Launch::has_user() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Launch::set_has_user() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Launch::clear_has_user() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Launch::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& Launch::user() const {
  return *user_;
}
inline void Launch::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void Launch::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void Launch::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Launch::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* Launch::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Launch::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .mesos.SlaveID slave_id = 6;
inline bool Launch::has_slave_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Launch::set_has_slave_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Launch::clear_has_slave_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Launch::clear_slave_id() {
  if (slave_id_ != NULL) slave_id_->::mesos::SlaveID::Clear();
  clear_has_slave_id();
}
inline const ::mesos::SlaveID& Launch::slave_id() const {
  return slave_id_ != NULL ? *slave_id_ : *default_instance_->slave_id_;
}
inline ::mesos::SlaveID* Launch::mutable_slave_id() {
  set_has_slave_id();
  if (slave_id_ == NULL) slave_id_ = new ::mesos::SlaveID;
  return slave_id_;
}
inline ::mesos::SlaveID* Launch::release_slave_id() {
  clear_has_slave_id();
  ::mesos::SlaveID* temp = slave_id_;
  slave_id_ = NULL;
  return temp;
}
inline void Launch::set_allocated_slave_id(::mesos::SlaveID* slave_id) {
  delete slave_id_;
  slave_id_ = slave_id;
  if (slave_id) {
    set_has_slave_id();
  } else {
    clear_has_slave_id();
  }
}

// optional string slave_pid = 7;
inline bool Launch::has_slave_pid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Launch::set_has_slave_pid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Launch::clear_has_slave_pid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Launch::clear_slave_pid() {
  if (slave_pid_ != &::google::protobuf::internal::kEmptyString) {
    slave_pid_->clear();
  }
  clear_has_slave_pid();
}
inline const ::std::string& Launch::slave_pid() const {
  return *slave_pid_;
}
inline void Launch::set_slave_pid(const ::std::string& value) {
  set_has_slave_pid();
  if (slave_pid_ == &::google::protobuf::internal::kEmptyString) {
    slave_pid_ = new ::std::string;
  }
  slave_pid_->assign(value);
}
inline void Launch::set_slave_pid(const char* value) {
  set_has_slave_pid();
  if (slave_pid_ == &::google::protobuf::internal::kEmptyString) {
    slave_pid_ = new ::std::string;
  }
  slave_pid_->assign(value);
}
inline void Launch::set_slave_pid(const char* value, size_t size) {
  set_has_slave_pid();
  if (slave_pid_ == &::google::protobuf::internal::kEmptyString) {
    slave_pid_ = new ::std::string;
  }
  slave_pid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Launch::mutable_slave_pid() {
  set_has_slave_pid();
  if (slave_pid_ == &::google::protobuf::internal::kEmptyString) {
    slave_pid_ = new ::std::string;
  }
  return slave_pid_;
}
inline ::std::string* Launch::release_slave_pid() {
  clear_has_slave_pid();
  if (slave_pid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = slave_pid_;
    slave_pid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Launch::set_allocated_slave_pid(::std::string* slave_pid) {
  if (slave_pid_ != &::google::protobuf::internal::kEmptyString) {
    delete slave_pid_;
  }
  if (slave_pid) {
    set_has_slave_pid();
    slave_pid_ = slave_pid;
  } else {
    clear_has_slave_pid();
    slave_pid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool checkpoint = 8;
inline bool Launch::has_checkpoint() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Launch::set_has_checkpoint() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Launch::clear_has_checkpoint() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Launch::clear_checkpoint() {
  checkpoint_ = false;
  clear_has_checkpoint();
}
inline bool Launch::checkpoint() const {
  return checkpoint_;
}
inline void Launch::set_checkpoint(bool value) {
  set_has_checkpoint();
  checkpoint_ = value;
}

// -------------------------------------------------------------------

// Update

// required .mesos.ContainerID container_id = 1;
inline bool Update::has_container_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Update::set_has_container_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Update::clear_has_container_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Update::clear_container_id() {
  if (container_id_ != NULL) container_id_->::mesos::ContainerID::Clear();
  clear_has_container_id();
}
inline const ::mesos::ContainerID& Update::container_id() const {
  return container_id_ != NULL ? *container_id_ : *default_instance_->container_id_;
}
inline ::mesos::ContainerID* Update::mutable_container_id() {
  set_has_container_id();
  if (container_id_ == NULL) container_id_ = new ::mesos::ContainerID;
  return container_id_;
}
inline ::mesos::ContainerID* Update::release_container_id() {
  clear_has_container_id();
  ::mesos::ContainerID* temp = container_id_;
  container_id_ = NULL;
  return temp;
}
inline void Update::set_allocated_container_id(::mesos::ContainerID* container_id) {
  delete container_id_;
  container_id_ = container_id;
  if (container_id) {
    set_has_container_id();
  } else {
    clear_has_container_id();
  }
}

// repeated .mesos.Resource resources = 2;
inline int Update::resources_size() const {
  return resources_.size();
}
inline void Update::clear_resources() {
  resources_.Clear();
}
inline const ::mesos::Resource& Update::resources(int index) const {
  return resources_.Get(index);
}
inline ::mesos::Resource* Update::mutable_resources(int index) {
  return resources_.Mutable(index);
}
inline ::mesos::Resource* Update::add_resources() {
  return resources_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::Resource >&
Update::resources() const {
  return resources_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::Resource >*
Update::mutable_resources() {
  return &resources_;
}

// -------------------------------------------------------------------

// Wait

// required .mesos.ContainerID container_id = 1;
inline bool Wait::has_container_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Wait::set_has_container_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Wait::clear_has_container_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Wait::clear_container_id() {
  if (container_id_ != NULL) container_id_->::mesos::ContainerID::Clear();
  clear_has_container_id();
}
inline const ::mesos::ContainerID& Wait::container_id() const {
  return container_id_ != NULL ? *container_id_ : *default_instance_->container_id_;
}
inline ::mesos::ContainerID* Wait::mutable_container_id() {
  set_has_container_id();
  if (container_id_ == NULL) container_id_ = new ::mesos::ContainerID;
  return container_id_;
}
inline ::mesos::ContainerID* Wait::release_container_id() {
  clear_has_container_id();
  ::mesos::ContainerID* temp = container_id_;
  container_id_ = NULL;
  return temp;
}
inline void Wait::set_allocated_container_id(::mesos::ContainerID* container_id) {
  delete container_id_;
  container_id_ = container_id;
  if (container_id) {
    set_has_container_id();
  } else {
    clear_has_container_id();
  }
}

// -------------------------------------------------------------------

// Destroy

// required .mesos.ContainerID container_id = 1;
inline bool Destroy::has_container_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Destroy::set_has_container_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Destroy::clear_has_container_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Destroy::clear_container_id() {
  if (container_id_ != NULL) container_id_->::mesos::ContainerID::Clear();
  clear_has_container_id();
}
inline const ::mesos::ContainerID& Destroy::container_id() const {
  return container_id_ != NULL ? *container_id_ : *default_instance_->container_id_;
}
inline ::mesos::ContainerID* Destroy::mutable_container_id() {
  set_has_container_id();
  if (container_id_ == NULL) container_id_ = new ::mesos::ContainerID;
  return container_id_;
}
inline ::mesos::ContainerID* Destroy::release_container_id() {
  clear_has_container_id();
  ::mesos::ContainerID* temp = container_id_;
  container_id_ = NULL;
  return temp;
}
inline void Destroy::set_allocated_container_id(::mesos::ContainerID* container_id) {
  delete container_id_;
  container_id_ = container_id;
  if (container_id) {
    set_has_container_id();
  } else {
    clear_has_container_id();
  }
}

// -------------------------------------------------------------------

// Usage

// required .mesos.ContainerID container_id = 1;
inline bool Usage::has_container_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Usage::set_has_container_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Usage::clear_has_container_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Usage::clear_container_id() {
  if (container_id_ != NULL) container_id_->::mesos::ContainerID::Clear();
  clear_has_container_id();
}
inline const ::mesos::ContainerID& Usage::container_id() const {
  return container_id_ != NULL ? *container_id_ : *default_instance_->container_id_;
}
inline ::mesos::ContainerID* Usage::mutable_container_id() {
  set_has_container_id();
  if (container_id_ == NULL) container_id_ = new ::mesos::ContainerID;
  return container_id_;
}
inline ::mesos::ContainerID* Usage::release_container_id() {
  clear_has_container_id();
  ::mesos::ContainerID* temp = container_id_;
  container_id_ = NULL;
  return temp;
}
inline void Usage::set_allocated_container_id(::mesos::ContainerID* container_id) {
  delete container_id_;
  container_id_ = container_id;
  if (container_id) {
    set_has_container_id();
  } else {
    clear_has_container_id();
  }
}

// -------------------------------------------------------------------

// Termination

// required bool killed = 1;
inline bool Termination::has_killed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Termination::set_has_killed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Termination::clear_has_killed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Termination::clear_killed() {
  killed_ = false;
  clear_has_killed();
}
inline bool Termination::killed() const {
  return killed_;
}
inline void Termination::set_killed(bool value) {
  set_has_killed();
  killed_ = value;
}

// required string message = 2;
inline bool Termination::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Termination::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Termination::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Termination::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& Termination::message() const {
  return *message_;
}
inline void Termination::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Termination::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Termination::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Termination::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* Termination::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Termination::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 status = 3;
inline bool Termination::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Termination::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Termination::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Termination::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 Termination::status() const {
  return status_;
}
inline void Termination::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// Containers

// repeated .mesos.ContainerID containers = 1;
inline int Containers::containers_size() const {
  return containers_.size();
}
inline void Containers::clear_containers() {
  containers_.Clear();
}
inline const ::mesos::ContainerID& Containers::containers(int index) const {
  return containers_.Get(index);
}
inline ::mesos::ContainerID* Containers::mutable_containers(int index) {
  return containers_.Mutable(index);
}
inline ::mesos::ContainerID* Containers::add_containers() {
  return containers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::ContainerID >&
Containers::containers() const {
  return containers_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::ContainerID >*
Containers::mutable_containers() {
  return &containers_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace containerizer
}  // namespace mesos

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mesos_2fcontainerizer_2fcontainerizer_2eproto__INCLUDED
