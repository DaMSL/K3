// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mesos/fetcher/fetcher.proto

#ifndef PROTOBUF_mesos_2ffetcher_2ffetcher_2eproto__INCLUDED
#define PROTOBUF_mesos_2ffetcher_2ffetcher_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "mesos/mesos.pb.h"
// @@protoc_insertion_point(includes)

namespace mesos {
namespace fetcher {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mesos_2ffetcher_2ffetcher_2eproto();
void protobuf_AssignDesc_mesos_2ffetcher_2ffetcher_2eproto();
void protobuf_ShutdownFile_mesos_2ffetcher_2ffetcher_2eproto();

class FetcherInfo;

// ===================================================================

class FetcherInfo : public ::google::protobuf::Message {
 public:
  FetcherInfo();
  virtual ~FetcherInfo();

  FetcherInfo(const FetcherInfo& from);

  inline FetcherInfo& operator=(const FetcherInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FetcherInfo& default_instance();

  void Swap(FetcherInfo* other);

  // implements Message ----------------------------------------------

  FetcherInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FetcherInfo& from);
  void MergeFrom(const FetcherInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.CommandInfo command_info = 1;
  inline bool has_command_info() const;
  inline void clear_command_info();
  static const int kCommandInfoFieldNumber = 1;
  inline const ::mesos::CommandInfo& command_info() const;
  inline ::mesos::CommandInfo* mutable_command_info();
  inline ::mesos::CommandInfo* release_command_info();
  inline void set_allocated_command_info(::mesos::CommandInfo* command_info);

  // required string work_directory = 2;
  inline bool has_work_directory() const;
  inline void clear_work_directory();
  static const int kWorkDirectoryFieldNumber = 2;
  inline const ::std::string& work_directory() const;
  inline void set_work_directory(const ::std::string& value);
  inline void set_work_directory(const char* value);
  inline void set_work_directory(const char* value, size_t size);
  inline ::std::string* mutable_work_directory();
  inline ::std::string* release_work_directory();
  inline void set_allocated_work_directory(::std::string* work_directory);

  // optional string user = 3;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 3;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // optional string frameworks_home = 4;
  inline bool has_frameworks_home() const;
  inline void clear_frameworks_home();
  static const int kFrameworksHomeFieldNumber = 4;
  inline const ::std::string& frameworks_home() const;
  inline void set_frameworks_home(const ::std::string& value);
  inline void set_frameworks_home(const char* value);
  inline void set_frameworks_home(const char* value, size_t size);
  inline ::std::string* mutable_frameworks_home();
  inline ::std::string* release_frameworks_home();
  inline void set_allocated_frameworks_home(::std::string* frameworks_home);

  // @@protoc_insertion_point(class_scope:mesos.fetcher.FetcherInfo)
 private:
  inline void set_has_command_info();
  inline void clear_has_command_info();
  inline void set_has_work_directory();
  inline void clear_has_work_directory();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_frameworks_home();
  inline void clear_has_frameworks_home();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::mesos::CommandInfo* command_info_;
  ::std::string* work_directory_;
  ::std::string* user_;
  ::std::string* frameworks_home_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_mesos_2ffetcher_2ffetcher_2eproto();
  friend void protobuf_AssignDesc_mesos_2ffetcher_2ffetcher_2eproto();
  friend void protobuf_ShutdownFile_mesos_2ffetcher_2ffetcher_2eproto();

  void InitAsDefaultInstance();
  static FetcherInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// FetcherInfo

// required .mesos.CommandInfo command_info = 1;
inline bool FetcherInfo::has_command_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FetcherInfo::set_has_command_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FetcherInfo::clear_has_command_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FetcherInfo::clear_command_info() {
  if (command_info_ != NULL) command_info_->::mesos::CommandInfo::Clear();
  clear_has_command_info();
}
inline const ::mesos::CommandInfo& FetcherInfo::command_info() const {
  return command_info_ != NULL ? *command_info_ : *default_instance_->command_info_;
}
inline ::mesos::CommandInfo* FetcherInfo::mutable_command_info() {
  set_has_command_info();
  if (command_info_ == NULL) command_info_ = new ::mesos::CommandInfo;
  return command_info_;
}
inline ::mesos::CommandInfo* FetcherInfo::release_command_info() {
  clear_has_command_info();
  ::mesos::CommandInfo* temp = command_info_;
  command_info_ = NULL;
  return temp;
}
inline void FetcherInfo::set_allocated_command_info(::mesos::CommandInfo* command_info) {
  delete command_info_;
  command_info_ = command_info;
  if (command_info) {
    set_has_command_info();
  } else {
    clear_has_command_info();
  }
}

// required string work_directory = 2;
inline bool FetcherInfo::has_work_directory() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FetcherInfo::set_has_work_directory() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FetcherInfo::clear_has_work_directory() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FetcherInfo::clear_work_directory() {
  if (work_directory_ != &::google::protobuf::internal::kEmptyString) {
    work_directory_->clear();
  }
  clear_has_work_directory();
}
inline const ::std::string& FetcherInfo::work_directory() const {
  return *work_directory_;
}
inline void FetcherInfo::set_work_directory(const ::std::string& value) {
  set_has_work_directory();
  if (work_directory_ == &::google::protobuf::internal::kEmptyString) {
    work_directory_ = new ::std::string;
  }
  work_directory_->assign(value);
}
inline void FetcherInfo::set_work_directory(const char* value) {
  set_has_work_directory();
  if (work_directory_ == &::google::protobuf::internal::kEmptyString) {
    work_directory_ = new ::std::string;
  }
  work_directory_->assign(value);
}
inline void FetcherInfo::set_work_directory(const char* value, size_t size) {
  set_has_work_directory();
  if (work_directory_ == &::google::protobuf::internal::kEmptyString) {
    work_directory_ = new ::std::string;
  }
  work_directory_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FetcherInfo::mutable_work_directory() {
  set_has_work_directory();
  if (work_directory_ == &::google::protobuf::internal::kEmptyString) {
    work_directory_ = new ::std::string;
  }
  return work_directory_;
}
inline ::std::string* FetcherInfo::release_work_directory() {
  clear_has_work_directory();
  if (work_directory_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = work_directory_;
    work_directory_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FetcherInfo::set_allocated_work_directory(::std::string* work_directory) {
  if (work_directory_ != &::google::protobuf::internal::kEmptyString) {
    delete work_directory_;
  }
  if (work_directory) {
    set_has_work_directory();
    work_directory_ = work_directory;
  } else {
    clear_has_work_directory();
    work_directory_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string user = 3;
inline bool FetcherInfo::has_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FetcherInfo::set_has_user() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FetcherInfo::clear_has_user() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FetcherInfo::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& FetcherInfo::user() const {
  return *user_;
}
inline void FetcherInfo::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void FetcherInfo::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void FetcherInfo::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FetcherInfo::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* FetcherInfo::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FetcherInfo::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string frameworks_home = 4;
inline bool FetcherInfo::has_frameworks_home() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FetcherInfo::set_has_frameworks_home() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FetcherInfo::clear_has_frameworks_home() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FetcherInfo::clear_frameworks_home() {
  if (frameworks_home_ != &::google::protobuf::internal::kEmptyString) {
    frameworks_home_->clear();
  }
  clear_has_frameworks_home();
}
inline const ::std::string& FetcherInfo::frameworks_home() const {
  return *frameworks_home_;
}
inline void FetcherInfo::set_frameworks_home(const ::std::string& value) {
  set_has_frameworks_home();
  if (frameworks_home_ == &::google::protobuf::internal::kEmptyString) {
    frameworks_home_ = new ::std::string;
  }
  frameworks_home_->assign(value);
}
inline void FetcherInfo::set_frameworks_home(const char* value) {
  set_has_frameworks_home();
  if (frameworks_home_ == &::google::protobuf::internal::kEmptyString) {
    frameworks_home_ = new ::std::string;
  }
  frameworks_home_->assign(value);
}
inline void FetcherInfo::set_frameworks_home(const char* value, size_t size) {
  set_has_frameworks_home();
  if (frameworks_home_ == &::google::protobuf::internal::kEmptyString) {
    frameworks_home_ = new ::std::string;
  }
  frameworks_home_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FetcherInfo::mutable_frameworks_home() {
  set_has_frameworks_home();
  if (frameworks_home_ == &::google::protobuf::internal::kEmptyString) {
    frameworks_home_ = new ::std::string;
  }
  return frameworks_home_;
}
inline ::std::string* FetcherInfo::release_frameworks_home() {
  clear_has_frameworks_home();
  if (frameworks_home_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = frameworks_home_;
    frameworks_home_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FetcherInfo::set_allocated_frameworks_home(::std::string* frameworks_home) {
  if (frameworks_home_ != &::google::protobuf::internal::kEmptyString) {
    delete frameworks_home_;
  }
  if (frameworks_home) {
    set_has_frameworks_home();
    frameworks_home_ = frameworks_home;
  } else {
    clear_has_frameworks_home();
    frameworks_home_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fetcher
}  // namespace mesos

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mesos_2ffetcher_2ffetcher_2eproto__INCLUDED
