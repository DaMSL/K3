drop table if exists peers;
create table peers(address text, name text);
insert into peers values ('["127.0.0.1", 40000]', 'ms');
insert into peers values ('["127.0.0.1", 40001]', 'tm');
insert into peers values ('["127.0.0.1", 50001]', 'sw1');
insert into peers values ('["127.0.0.1", 50002]', 'sw2');
insert into peers values ('["127.0.0.1", 50003]', 'sw3');
insert into peers values ('["127.0.0.1", 50004]', 'sw4');
insert into peers values ('["127.0.0.1", 60001]', 'nd1');
insert into peers values ('["127.0.0.1", 60002]', 'nd2');
insert into peers values ('["127.0.0.1", 60003]', 'nd3');
insert into peers values ('["127.0.0.1", 60004]', 'nd4');
insert into peers values ('["127.0.0.1", 60005]', 'nd5');
insert into peers values ('["127.0.0.1", 60006]', 'nd6');
insert into peers values ('["127.0.0.1", 60007]', 'nd7');
insert into peers values ('["127.0.0.1", 60008]', 'nd8');

create table if not exists keys(key text);

-- select all messages
drop function if exists msgs_ordered();
create function msgs_ordered()
returns table(id integer, source text, dest text, trigger text, contents json) as $$
begin
  return query
  select mess_id as id, p1.name as src, p2.name as dst, m.trigger, m.contents
  from messages as m, peers as p1, peers as p2
  where m.source_peer = p1.address and m.dest_peer = p2.address
  order by m.time, m.mess_id;
end;
$$ language plpgsql;

-- show state
drop function if exists show_state();
create function show_state()
returns table(id integer, dest text, key text, value json) as $$
begin
  return query
  select g.mess_id as id, p.name as dest, g.key as key, g.value as value
  from globals as g, peers as p, keys as k
  where g.key = k.key and g.dest_peer = p.address
  order by mess_id;
end;
$$ language plpgsql;

-- show changed state
drop function if exists show_changes_raw();
create function show_changes_raw()
returns table(id integer, dest text, key text, value json) as $$
begin
  return query
  select g2.mess_id as id, g2.dest_peer, g2.key as key, g2.value as value
  from globals as g1, globals as g2
  where g2.mess_id = g1.mess_id + 1 and
        g1.dest_peer = g2.dest_peer and
        g1.key = g2.key and
	g1.value::text <> g2.value::text
  order by id;
end;
$$ language plpgsql;
  
-- show changed state
drop function if exists show_changes();
create function show_changes()
returns table(id integer, dest text, key text, value json) as $$
begin
  return query
  select c.id, p.name as dest, c.key, c.value
  from show_changes_raw() as c, peers as p
  where c.dest_peer = p.address
  order by id;
end;
$$ language plpgsql;

-- show changed state with messages
drop function if exists msgs_d();
create function msgs_d()
returns table(id integer, src text, dst text, trigger text, args text, key text, value json) as $$
begin
  create temp table tmp on commit drop as
  select m.time, m.mess_id as id, m.trigger, m.source_peer, m.dest_peer, m.contents as args, c.key, c.value
  from messages as m left outer join show_changes_raw() as c
  on c.id = m.mess_id and
     c.dest = m.dest_peer;

  return query
  select tmp.id, p1.name, p2.name, tmp.trigger, substring(tmp.args::text, 1, 30), tmp.key, tmp.value
  from peers as p1, peers as p2, tmp
  where p1.address = tmp.source_peer and p2.address = tmp.dest_peer
  order by tmp.time, tmp.id;
end;
$$ language plpgsql;

-- Get final frontier of json values
create or replace function json_last(input json)
returns json as $$
  import json

  val = json.loads(input)
  # check that we match our desired input
  if not (type(val) is list and len(val) > 0 and type(val[0]) is list and
     len(val[0]) >= 2 and type(val[0][0]) is list and len(val[0][0]) == 2 and
     type(val[0][0][0]) is int and type(val[0][0][1]) is int):
    return input
  res = {}
  for x in val:
    if type(x) is list and len(x) >= 2:
      # split into vid, key, value
      vid = []
      key = []
      val = []
      l = len(x)
      for (i, k) in enumerate(x):
        if i == 0:
          vid = k
        elif i >= l - 1:
          val = k
        else:
          key += [k]
      # convert list to tuple (immutable)
      key = tuple(key)
      if key in res:
        # set result to max vid value
        (oldvid, oldv) = res[key]
        # compare vids
        if vid[0] > oldvid[0] or vid[0] == oldvid[0] and vid[1] > oldvid[1]:
          res[key] = (vid, val)
      else:
        res[key] = (vid, val)
  # convert res to list
  res2 = []
  for k in res:
    v = list(k) + [res[k][1]]
    res2.append(v)
  return json.dumps(res2)
$$ language plpythonu;

-- final state
drop function if exists final_state();
create or replace function final_state()
returns table(id integer, peer text, key text, value json) as $$
begin
  return query
  select g.mess_id, p.name, g.key, json_last(g.value)
  from
    (select max(mess_id) as last_id, g.dest_peer as peer
    from globals as g
    group by g.dest_peer)
    as max_ids, globals as g, peers as p
  where g.mess_id = max_ids.last_id and g.dest_peer = max_ids.peer and g.dest_peer = p.address
  order by g.mess_id;
end;
$$ language plpgsql;

