annotation IntSet given type a, b, c, d
{
  provides lifted size : () -> int
    with effects \_ -> R[self]

  @:CArgs 2
  provides lifted peek : (() -> a) -> (content -> a) -> a
    with effects \f -> \g -> [R[self]; f content; g content]


  ///////////////////////////////////////////////////////
  // Modifiers.

  provides lifted insert : content -> ()
    with effects \elem -> [R[self]; R[elem]; W[self]]

  @:CArgs 2
  provides lifted update : content -> (content -> ())
    with effects \oldElem -> \newElem -> [R[self]; R[oldElem]; R[newElem]; W[self]]

  provides lifted erase : content -> ()
    with effects \elem -> [R[self]; R[elem]; W[self]]


  ///////////////////////////////////////////////////
  // Set methods.

  provides lifted member : content -> bool
    with effects \elem -> [R[self]; R[elem]]

  provides lifted is_subset_of : self -> bool
    with effects \other -> [R[self]; R[other]]

  provides lifted intersect : self -> self
    with effects \other -> [R[self]; R[other]]

  provides lifted difference : self -> self
    with effects \other -> [R[self]; R[other]]


  ///////////////////////////////////////////////////
  // Bulk transformations.

  @:Transformer
  provides lifted combine : self -> self
    with effects \other -> [R[self]; R[other]]

  @:Transformer
  provides lifted split : () -> (self, self)
    with effects \_ -> R[self]

  @:Transformer
  provides lifted iterate : (content -> ()) -> ()
    with effects \iterF -> [R[self]; ([R[content]; iterF content])*]

  @:Transformer
  provides lifted map : (content -> {elem : int}) -> collection {elem : int} @IntSet
    with effects \mapF -> [R[self]; ([R[content]; mapF content])*]

  @:Transformer
  provides lifted map_generic : (content -> a) -> collection {elem : a} @Set
    with effects \mapF -> [R[self]; ([R[content]; mapF content])*]

  @:Transformer
  provides lifted filter : (content -> bool) -> self
    with effects \filterF -> [R[self]; ([R[content]; filterF content])*]

  @:{Transformer, CArgs 2}
  provides lifted fold : (a -> (content -> a)) -> a -> a
    with effects \foldF -> \z -> [R[self]; R[z]; ([R[content]; ((foldF z) content)])*]

  @:{Transformer, CArgs 3}
  provides lifted group_by_generic : (content -> a) -> (b -> content -> b) -> b
                                      -> collection { key : a, value : b } @Set
    with effects
      \gbF -> \gaccF -> \z ->
        [R[self]; R[z]; ([R[content]; gbF content; ((gaccF z) content)])*]

  @:Transformer
  provides lifted ext : (content -> collection {elem : int} @IntSet)
                         -> collection {elem : int} @IntSet
    with effects \extF -> [R[self]; ([R[content]; extF content])*]

  @:Transformer
  provides lifted ext_generic : (content -> collection {elem : a} @Set)
                                 -> collection {elem : a} @Set
    with effects \extF -> [R[self]; ([R[content]; extF content])*]
}
