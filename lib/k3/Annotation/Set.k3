annotation Set given type a, b, c, d
{
  provides lifted size : () -> int
    with effects \_ -> R[self]

  @:CArgs 2
  provides lifted peek : (() -> a) -> (content -> a) -> a
    with effects \f -> \g -> [R[self]; f content; g content]


  ///////////////////////////////////////////////////////
  // Modifiers.

  provides lifted insert : content -> ()
    with effects \elem -> [R[self]; R[elem]; W[self]]

  @:CArgs 2
  provides lifted update : content -> (content -> ())
    with effects \oldElem -> \newElem -> [R[self]; R[oldElem]; R[newElem]; W[self]]

  provides lifted erase : content -> ()
    with effects \elem -> [R[self]; R[elem]; W[self]]


  ///////////////////////////////////////////////////
  // Set methods.

  provides lifted member : content -> bool
    with effects \elem -> [R[self]; R[elem]]

  provides lifted is_subset_of : self -> bool
    with effects \other -> [R[self]; R[other]]

  provides lifted union : self -> self
    with effects \other -> [R[self]; R[other]]

  provides lifted intersect : self -> self
    with effects \other -> [R[self]; R[other]]

  provides lifted difference : self -> self
    with effects \other -> [R[self]; R[other]]


  ///////////////////////////////////////////////////
  // Bulk transformations.

  @:Transformer
  provides lifted combine : self -> self
    with effects \other -> [R[self]; R[other]]

  @:Transformer
  provides lifted split : () -> (self, self)
    with effects \_ -> R[self]

  @:Transformer
  provides lifted iterate : (content -> ()) -> ()
    with effects \iterF -> [R[self]; ([R[content]; iterF content])*]

  @:Transformer
  provides lifted map : (content -> a) -> collection {elem : a} @Set
    with effects \mapF -> [R[self]; ([R[content]; mapF content])*]

  @:Transformer
  provides lifted filter : (content -> bool) -> self
    with effects \filterF -> [R[self]; ([R[content]; filterF content])*]

  @:{Transformer, CArgs 2}
  provides lifted fold : (a -> (content -> a)) -> a -> a
    with effects \foldF -> \z -> [R[self]; R[z]; ([R[content]; ((foldF z) content)])*]

  @:{Transformer, CArgs 3}
  provides lifted group_by : (content -> a) -> (b -> content -> b) -> b
                              -> collection { key : a, value : b } @Set
    with effects
      \gbF -> \gaccF -> \z ->
        [R[self]; R[z]; ([R[content]; gbF content; ((gaccF z) content)])*]

  @:{Transformer, CArgs 4}
  provides lifted group_by_contiguous : (content -> int) -> (a -> content -> a) -> a -> int
                                         -> collection { key : int, value : a } @Set
    with effects
      \gbF -> \gaccF -> \z -> \s ->
        [R[self]; R[z]; R[s]; ([R[content]; gbF content; gaccF content])*]

  @:{Transformer, CArgs 3}
  provides lifted join : collection {elem: a} @Set
                         -> (content -> {elem: a} -> bool) -> (content -> {elem: a} -> c)
                         -> collection {elem: c} @Set
    with effects \other -> \matchF -> \outputF ->
                   [R[self]; ([R[other]; R[content]; matchF content none; outputF content none])*]

  @:{Transformer, CArgs 4}
  provides lifted equijoin : collection {elem: a} @Set
                             -> (content -> b) -> ({elem:a} -> b) -> (content -> {elem: a} -> c)
                             -> collection {elem: c} @Set
    with effects \other -> \matchLF -> \matchRF -> \outputF ->
                   [R[self]; ([R[other]; R[content]; matchLF content; matchRF none; outputF content none])*]

  @:{Transformer, CArgs 3}
  provides lifted join_kv : collection {key: a, value: b} @Set
                            -> (content -> {key: a, value: b} -> bool) -> (content -> {key: a, value: b} -> c)
                            -> collection {elem: c} @Set
    with effects \other -> \matchF -> \outputF ->
                   [R[self]; ([R[other]; R[content]; matchF content none; outputF content none])*]

  @:{Transformer, CArgs 4}
  provides lifted equijoin_kv : collection {key: a, value: b} @Set
                                -> (content -> c) -> ({key: a, value: b} -> c) -> (content -> {key: a, value: b} -> d)
                                -> collection {elem: d} @Set
    with effects \other -> \matchLF -> \matchRF -> \outputF ->
                   [R[self]; ([R[other]; R[content]; matchLF content; matchRF none; outputF content none])*]

  @:Transformer
  provides lifted ext : (content -> collection {elem : a} @Set)
                         -> collection {elem : a} @Set
    with effects \extF -> [R[self]; ([R[content]; extF content])*]
}
