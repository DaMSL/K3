include "Annotation/Vector.k3"

// IntVectors must have a content type of {elem: int}
annotation IntVector given type a, b
{
  provides lifted size : () -> int
    with effects \_ -> R[self]

  @:CArgs 2
  provides lifted peek : (() -> a) -> (content -> a) -> a
    with effects \f -> \g -> [R[self]; f content; g content]

  provides lifted at : int -> content
    with effects \i -> [R[i]; R[self]]

  @:CArgs 3
  provides lifted safe_at : int -> (() -> a) -> (content -> a) -> a
    with effects \i -> \f -> \g -> [R[i]; R[self]; f content; g content]

  @:CArgs 2
  provides lifted set : int -> content -> ()
    with effects \i -> \elem -> [R[self]; R[i]; R[elem]; W[self]]

  provides lifted insert : content -> ()
    with effects \elem -> [R[self]; R[elem]; W[self]]

  provides lifted erase : content -> ()
    with effects \elem -> [R[self]; R[elem]; W[self]]

  @:CArgs 2
  provides lifted update : content -> (content -> ())
    with effects \oldElem -> \newElem -> [R[self]; R[oldElem]; R[newElem]; W[self]]

  @:CArgs 2
  provides lifted swap : int -> content -> content
    with effects \i -> \c -> [R[i]; R[c]; W[self]]

  ///////////////////////////////////////////////////
  // Vector-specific transformations.

  provides lifted add : self -> self
    with effects \other -> [R[self]; R[other]]

  provides lifted sub : self -> self
    with effects \other -> [R[self]; R[other]]

  provides lifted add_with : self -> ()
    with effects \other -> [R[self]; R[other]; W[self]]

  provides lifted sub_with : self -> ()
    with effects \other -> [R[self]; R[other]; W[self]]

  provides lifted dot : self -> real
    with effects \other -> [R[self]; R[other]]

  provides lifted distance : self -> real
    with effects \other -> [R[self]; R[other]]

  provides lifted scale : int -> self
    with effects \x -> [R[self]; R[x]]

  provides lifted scale_with : int -> ()
    with effects \x -> [R[self]; R[x]; W[self]]

  provides lifted toString : () -> string
    with effects \_ -> R[self]

  ///////////////////////////////////////////////////
  // Bulk transformations.

  @:Transformer
  provides lifted combine : self -> self
    with effects \other -> [R[self]; R[other]]

  @:Transformer
  provides lifted split : () -> (self, self)
    with effects \_ -> R[self]

  @:Transformer
  provides lifted iterate : (content -> ()) -> ()
    with effects \iterF -> [R[self]; ([R[content]; iterF content])*]

  @:Transformer
  provides lifted map: (content -> int) -> self
    with effects \mapF -> [R[self]; ([R[content]; mapF content])*]

  @:Transformer
  provides lifted filter : (content -> bool) -> self
    with effects \filterF -> [R[self]; ([R[content]; filterF content])*]

  @:{Transformer, CArgs 2}
  provides lifted fold : (a -> (content -> a)) -> a -> a
    with effects \foldF -> \z -> [R[self]; R[z]; ([R[content]; ((foldF z) content)])*]

  @:{Transformer, CArgs 3}
  provides lifted groupBy : (content -> a) -> (b -> content -> b) -> b
                             -> collection { key : a, value : b } @Vector
    with effects
      \gbF -> \gaccF -> \z ->
        [R[self]; R[z]; ([R[content]; gbF content; ((gaccF z) content)])*]

  @:{Transformer, CArgs 4}
  provides lifted groupByContiguous : (content -> a) -> (b -> content -> b) -> b -> int
                                      -> collection { key : a, value : b } @Vector
    with effects
      \gbF -> \gaccF -> \z -> \s ->
        [R[self]; R[z]; R[s]; ([R[content]; gbF content; gaccF content])*]

  @:Transformer
  provides lifted ext : (content -> collection {elem : a} @Vector)
                         -> collection {elem : a} @Vector
    with effects \extF -> [R[self]; ([R[content]; extF content])*]

  @:{Transformer, CArgs 3}
  provides lifted sample : (a -> content -> a) -> a -> int -> a
    with effects \sampleF -> \z -> \ns -> [R[self]; R[z]; R[ns]; ([R[content]; (sampleF z) content])*]

}
