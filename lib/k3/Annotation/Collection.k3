annotation Collection given type a, b, c, d
{
  provides lifted peek : () -> option content
    with effects \_ -> R[self]

  @:CArgs 2
  provides lifted peek_with : (() -> a) -> (content -> a) -> a
    with effects \f -> \g -> [R[self]; f content; g content]

  provides lifted at: int -> option content
    with effects \i -> [R[i]; R[self]]

  @:CArgs 2
  provides lifted at_with: int -> (content -> a) -> a
    with effects \i -> \f -> [R[i]; R[self]; f content]

  provides lifted insert : content -> ()
    with effects \elem -> [R[self]; R[elem]; W[self]]

  provides lifted erase : content -> ()
    with effects \elem -> [R[self]; R[elem]; W[self]]

  @:CArgs 2
  provides lifted update : content -> (content -> ())
    with effects \oldElem -> \newElem -> [R[self]; R[oldElem]; R[newElem]; W[self]]

  provides lifted size : () -> int
    with effects \_ -> R[self]

  @:Transformer
  provides lifted combine : self -> self
    with effects \other -> [R[self]; R[other]]

  @:Transformer
  provides lifted split : () -> (self, self)
    with effects \_ -> R[self]

  @:Transformer
  provides lifted iterate : (content -> ()) -> ()
    with effects \iterF -> [R[self]; ([R[content]; iterF content])*]

  @:Transformer
  provides lifted map : (content -> a) -> collection {elem : a} @Collection
    with effects \mapF -> [R[self]; ([R[content]; mapF content])*]

  @:Transformer
  provides lifted filter : (content -> bool) -> self
    with effects \filterF -> [R[self]; ([R[content]; filterF content])*]

  @:{Transformer, CArgs 2}
  provides lifted fold : (a -> (content -> a)) -> a -> a
    with effects \foldF -> \z -> [R[self]; R[z]; ([R[content]; ((foldF z) content)])*]

  @:{Transformer, CArgs 3}
  provides lifted groupBy : (content -> a) -> (b -> content -> b) -> b
                             -> collection { key : a, value : b } @Collection
    with effects
      \gbF -> \gaccF -> \z ->
        [R[self]; R[z]; ([R[content]; gbF content; ((gaccF z) content)])*]

  @:{Transformer, CArgs 4}
  provides lifted groupByContiguous : (content -> a) -> (b -> content -> b) -> b -> int
                                      -> collection { key : a, value : b } @Collection
    with effects
      \gbF -> \gaccF -> \z -> \s ->
        [R[self]; R[z]; ([R[content]; gbF content; gaccF content])*]

  @:{Transformer, CArgs 3}
  provides lifted join : collection {elem: a} @Collection
                        -> (content -> {elem: a} -> bool) -> (content -> {elem: a} -> b)
                        -> collection {elem: b} @Collection
    with effects \other -> \matchF -> \outputF ->
                   [R[self]; ([R[other]; R[content]; matchF content none; outputF content none])*]

  @:{Transformer, CArgs 4}
  provides lifted equijoin : collection {elem: a} @Collection
                           -> (content -> b) -> ({elem:a} -> b) -> (content -> {elem: a} -> c)
                           -> collection {elem: c} @Collection
    with effects \other -> \matchLF -> \matchRF -> \outputF ->
                   [R[self]; ([R[other]; R[content]; matchLF content; matchRF none; outputF content none])*]

  @:{Transformer, CArgs 3}
  provides lifted joinKV : collection {key: a, value: b} @Collection
                          -> (content -> {key: a, value: b} -> bool) -> (content -> {key: a, value: b} -> c)
                          -> collection {elem: c} @Collection
    with effects \other -> \matchF -> \outputF ->
                   [R[self]; ([R[other]; R[content]; matchF content none; outputF content none])*]

  @:{Transformer, CArgs 4}
  provides lifted equijoinKV : collection {key: a, value: b} @Collection
                             -> (content -> c) -> ({key: a, value: b} -> c) -> (content -> {key: a, value: b} -> d)
                             -> collection {elem: d} @Collection
    with effects \other -> \matchLF -> \matchRF -> \outputF ->
                   [R[self]; ([R[other]; R[content]; matchLF content; matchRF none; outputF content none])*]

  @:Transformer
  provides lifted ext : (content -> collection {elem : a} @Collection)
                         -> collection {elem : a} @ {Collection}
    with effects \extF -> [R[self]; ([R[content]; extF content])*]

  @:{Transformer, CArgs 3}
  provides lifted sample : (a -> content -> a) -> a -> int -> a
    with effects \sampleF -> \z -> \ns -> [R[self]; R[z]; R[ns]; ([R[content]; (sampleF z) content])*]

}
