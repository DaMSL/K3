include "Annotation/Map.k3"

/////////////////////////////////////////////////////////////////////////
// An associative container annotation.
//
// Maps are expected to contain only records with fields key and value
// This variant requires parameters defining the key-value decomposition
// of the content type, and exploits these parameters where suitable in its API.

annotation MapCE[key: type, value: type] given type a,b,c,d
{
  provides lifted size : () -> int
    with effects \_ -> R[self]

  //////////////////////////////////////////////////////////
  // Map retrieval, with explicit keys.

  @:CArgs 2
  provides lifted peek : (() -> c) -> ($[key] -> $[value] -> c) -> c
    with effects \f -> \g -> [R[self]; f content; g content]

  provides lifted member: $[key] -> bool
    with effects \key -> [R[self]; R[key]]

  @:CArgs 3
  provides lifted lookup : $[key] -> (() -> c) -> ($[value] -> c) -> c
    with effects \key -> \noneF -> \someF -> [R[self]; R[key]; noneF content; someF content]


  ///////////////////////////////////////////////////////
  // Map modification.

  provides lifted insert : content -> ()
    with effects \elem -> [R[self]; R[elem]; W[self]]

  @:CArgs 2
  provides lifted update : $[key] -> $[value] -> ()
    with effects \key -> \value -> [R[self]; R[key]; R[value]; W[self]]

  provides lifted erase : $[key] -> ()
    with effects \key -> [R[self]; R[key]; W[self]]

  @:CArgs 2
  provides lifted insert_with :
    $[key] -> $[value]
     -> ($[value] -> $[value] -> $[value]) -> ()
    with effects \elem -> \f -> [R[self]; R[elem]; ((f content) content); W[self]]

  @:CArgs 3
  provides lifted upsert_with :
    $[key] -> (() -> $[value]) -> ($[value] -> $[value]) -> ()
    with effects \key -> \f -> \g -> [R[self]; R[key]; f content; g content; W[self]]


  //////////////////////////////////////////////////////////////
  // Bulk transformations.

  @:Transformer
  provides lifted combine : self -> self
    with effects \other -> [R[self]; R[other]]

  @:Transformer
  provides lifted split : () -> (self, self)
    with effects \_ -> R[self]

  @:Transformer
  provides lifted iterate : ($[key] -> $[value] -> ()) -> ()
    with effects \iterF -> [R[self]; ([R[content]; iterF content])*]

  @:Transformer
  provides lifted map_generic :
    ($[key] -> $[value] -> {key: c, value: d})
      -> collection {key: c, value: d} @Map
    with effects \mapF -> [R[self]; ([R[content]; mapF content])*]

  @:Transformer
  provides lifted filter : ($[key] -> $[value] -> bool) -> self
    with effects \filterF -> [R[self]; ([R[content]; filterF content])*]

  @:{Transformer, CArgs 2}
  provides lifted fold : (c -> ($[key] -> $[value] -> c)) -> c -> c
    with effects \foldF -> \z -> [R[self]; R[z]; ([R[content]; ((foldF z) content)])*]

  @:{Transformer, CArgs 3}
  provides lifted group_by_generic :
    ($[key] -> $[value] -> c)
      -> (d -> $[key] -> $[value] -> d) -> d
      -> collection { key : c, value : d } @Map
    with effects
      \gbF -> \gaccF -> \z ->
        [R[self]; R[z]; ([R[content]; gbF content; ((gaccF z) content)])*]

  @:Transformer
  provides lifted ext_generic :
    ($[key] -> $[value] -> collection {key : c, value: d} @Map)
     -> collection {key : c, value: d} @Map
    with effects \extF -> [R[self]; ([R[content]; extF content])*]


  // These signatures enable fully chained functionality, but do not allow
  // assignment back into concretely declared MapCE data types.
  // This is because our annotation deduplication for MapCE depends on the
  // content type, resulting in two different nominal annotation types.
  //
  // Note: for MapCE, unlike MapE, the key/value arguments must be polymorphic
  // parameters c and d, rather than mkRecord key/value since the generated types
  // will include the polymorphic parameters a and b on recursion.
  // This would constrain the input types to be the same as the output types.
  //
  @:Transformer
  provides lifted map :
    (c -> d -> {key : a, value : b})
     -> collection {key : a, value : b} @MapCE(key=[: a], value=[: b])
    with effects \mapF -> [R[self]; ([R[content]; mapF content])*]

  @:{Transformer, CArgs 3}
  provides lifted group_by :
    (c -> d -> a) -> (b -> c -> d -> b) -> b
     -> collection {key : a, value : b} @MapCE(key=[: a], value=[: b])
    with effects
      \gbF -> \gaccF -> \z ->
        [R[self]; R[z]; ([R[content]; gbF content; ((gaccF z) content)])*]

  @:Transformer
  provides lifted ext :
    (c -> d -> collection {key : a, value : b} @MapCE(key=[: a], value=[: b]))
     -> collection {key : a, value : b} @MapCE(key=[: a], value=[: b])
    with effects \extF -> [R[self]; ([R[content]; extF content])*]

}

