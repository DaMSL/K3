include "Annotation/Map.k3"

/////////////////////////////////////////////////////////////////////////
// An associative container annotation.
//
// Maps are expected to contain only records with fields key and value
// This variant requires parameters defining the key-value decomposition
// of the content type, and exploits these parameters where suitable in its API.

annotation MapE[key: [labeltype], value: [labeltype]] given type a,b,c,d
{
  provides lifted size : () -> int
    with effects \_ -> R[self]

  //////////////////////////////////////////////////////////
  // Map retrieval, with explicit keys.

  @:CArgs 2
  provides lifted peek : (() -> a) -> (content -> a) -> a
    with effects \f -> \g -> [R[self]; f content; g content]

  provides lifted member: $[|mkRecord 'key|] -> bool
    with effects \key -> [R[self]; R[key]]

  @:CArgs 3
  provides lifted lookup : $[|mkRecord 'key|] -> (() -> c) -> (content -> c) -> c
    with effects \key -> \noneF -> \someF -> [R[self]; R[key]; noneF content; someF content]


  ///////////////////////////////////////////////////////
  // Map modification.

  provides lifted insert : content -> ()
    with effects \elem -> [R[self]; R[elem]; W[self]]

  @:CArgs 2
  provides lifted update : $[|mkRecord 'key|] -> $[|mkRecord 'value|] -> ()
    with effects \key -> \value -> [R[self]; R[key]; R[value]; W[self]]

  provides lifted erase : $[|mkRecord 'key|] -> ()
    with effects \key -> [R[self]; R[key]; W[self]]

  @:CArgs 3
  provides lifted erase_with : $[|mkRecord 'key|] -> (() -> a) -> (content -> a) -> a
    with effects \key -> \noneF -> \someF -> [R[self]; R[key]; W[self]; noneF none; someF content]

  @:CArgs 2
  provides lifted insert_with : content -> (content -> content -> content) -> ()
    with effects \elem -> \f -> [R[self]; R[elem]; ((f content) content); W[self]]

  @:CArgs 3
  provides lifted upsert_with : $[|mkRecord 'key|] -> (() -> content) -> (content -> content) -> ()
    with effects \key -> \f -> \g -> [R[self]; R[key]; f content; g content; W[self]]


  //////////////////////////////////////////////////////////////
  // Bulk transformations.

  @:Transformer
  provides lifted combine : self -> self
    with effects \other -> [R[self]; R[other]]

  @:Transformer
  provides lifted split : () -> (self, self)
    with effects \_ -> R[self]

  @:Transformer
  provides lifted iterate : (content -> ()) -> ()
    with effects \iterF -> [R[self]; ([R[content]; iterF content])*]

  @:Transformer
  provides lifted map_generic : (content -> {key: a, value: b}) -> collection {key: a, value: b} @Map
    with effects \mapF -> [R[self]; ([R[content]; mapF content])*]

  @:Transformer
  provides lifted filter : (content -> bool) -> self
    with effects \filterF -> [R[self]; ([R[content]; filterF content])*]

  @:{Transformer, CArgs 2}
  provides lifted fold : (a -> (content -> a)) -> a -> a
    with effects \foldF -> \z -> [R[self]; R[z]; ([R[content]; ((foldF z) content)])*]

  @:{Transformer, CArgs 3}
  provides lifted group_by_generic : (content -> a) -> (b -> content -> b) -> b
                                      -> collection { key : a, value : b } @Map
    with effects
      \gbF -> \gaccF -> \z ->
        [R[self]; R[z]; ([R[content]; gbF content; ((gaccF z) content)])*]

  @:Transformer
  provides lifted ext_generic : (content -> collection {key : a, value: b} @Map)
                                 -> collection {key : a, value: b} @Map
    with effects \extF -> [R[self]; ([R[content]; extF content])*]


  // These signatures enable fully chained functionality, but do not allow
  // assignment back into concretely declared MapE data types.
  // This is because our annotation deduplication for MapE depends on the
  // content type, resulting in two different nominal annotation types.
  @:Transformer
  provides lifted map : (content -> {key: a, value: b})
                         -> collection {key: a, value: b}
                              @MapE(key=[:> key=>a], value=[:> value=>b])
    with effects \mapF -> [R[self]; ([R[content]; mapF content])*]

  @:{Transformer, CArgs 3}
  provides lifted group_by : (content -> a) -> (b -> content -> b) -> b
                              -> collection { key : a, value : b }
                                   @MapE(key=[:> key=>a], value=[:> value=>b])
    with effects
      \gbF -> \gaccF -> \z ->
        [R[self]; R[z]; ([R[content]; gbF content; ((gaccF z) content)])*]

  @:Transformer
  provides lifted ext : (content -> collection {key : a, value: b}
                                      @MapE(key=[:> key=>a], value=[:> value=>b]))
                         -> collection {key : a, value: b}
                              @MapE(key=[:> key=>a], value=[:> value=>b])
    with effects \extF -> [R[self]; ([R[content]; extF content])*]


  // Mosaic-specific functionality.

  // A fused equi-join and fold, taking a RHS collection, a key extractor
  // that must produce the same type as the map's key, and an accumulator
  // and initial value.
  @:{Transformer, CArgs 4}
  provides lifted equijoinkf_kv : collection {key: a, value: b} @Collection
                                -> ({key: a, value: b} -> c)
                                -> (d -> content -> {key: a, value: b} -> d) -> d -> d
    with effects \other -> \otherKeyF -> \foldF -> \z ->
                   [R[self]; R[z]; ([R[other]; R[content]; otherKeyF none; ((foldF z) content) none])*]

}

