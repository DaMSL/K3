include "Annotation/Collection.k3"
include "Annotation/Map.k3"
include "Core/Barrier.k3"
include "Core/Builtins.k3"
include "Core/Messaging.k3"

control DistributedGroupBy [ lbl             : label
                           , peer_next       : expr
                           , next            : expr
                           , merge           : expr
                           , coordinator     : expr
                           , nodes           : expr ]
{
  ignore ( (?e.groupBy ?groupF ?aggF ?accE) : collection ?t )
     => $[nodes].iterate (\p -> ($[lbl]_scan, p.addr) <- ())
     +> {
          declare $[lbl]_result : collection $::[t] @Map

          trigger $[lbl]_scan : () = \_ -> (
            (ignore ( $.[e].groupBy $.[groupF] $.[aggF] $.[accE]
            ) @SendPartitionByKey( dest_trg    = [$ $[lbl]_merge]
                                 , barrier_trg = [$ $[lbl]_peer_barrier]
                                 , nodes       = nodes ))
          )

          // Note: SendByPartitionKey always uses a @Collection for the wire type.
          trigger $[lbl]_merge : collection $::[t] @Collection = \partials -> (
            partials.iterate (
              \v -> $[lbl]_result.insert_with v
                      (\a -> \b -> {key:a.key, value: $[merge] a.value b.value}))
          )

          trigger $[lbl]_peer_barrier : () = \_ -> (
            ( $[peer_next] $[lbl]_result ;
              ( $[lbl]_global_barrier, $[coordinator] ) <- ()
            ) @OnCounter(id=[# $[lbl]_peer_done], eq=[$ $[nodes].size()])
          )

          trigger $[lbl]_global_barrier : () = \_ -> (
            ( $[next]
            ) @OnCounter(id=[# $[lbl]_done], eq=[$ $[nodes].size()])
          )
        }
}


control DistributedHashJoin [ lbl             : label
                            , lhs_query       : expr
                            , rhs_query       : expr
                            , lhs_build_merge : expr
                            , rhs_probe_merge : expr
                            , peer_next       : expr
                            , next            : expr
                            , coordinator     : expr
                            , nodes           : expr
                            , lhs_build_ty    : type
                            , rhs_probe_ty    : type
                            ]
{
  () => $[nodes].iterate (\p -> ($[lbl]_lhs_scan, p.addr) <- ())
     +> {
        trigger $[lbl]_lhs_scan : () = \_ -> (
          (ignore
            ( $[lhs_query]
            ) @SendPartitionByKey( dest_trg    = [$ $[lbl]_build_lhs]
                                 , barrier_trg = [$ $[lbl]_lhs_peer_barrier]
                                 , nodes       = nodes))
        )

        trigger $[lbl]_build_lhs : $[lhs_build_ty] = \vals -> (
          vals.iterate $[lhs_build_merge]
        )

        trigger $[lbl]_lhs_peer_barrier : () = \_ -> (
          print "Hash join LHS finished build." ;
          ( $[nodes].iterate (\p -> ($[lbl]_rhs_scan, p.addr) <- ())
          ) @OnCounter(id=[# $[lbl]_peer_build_done], eq=[$ $[nodes].size() ])
        )

        trigger $[lbl]_rhs_scan : () = \_ -> (
          (( ignore
              ( $[rhs_query]
              ) @SendPartitionByKey( dest_trg    = [$ $[lbl]_probe_rhs]
                                   , barrier_trg = [$ $[lbl]_rhs_peer_barrier]
                                   , nodes       = nodes))
          ) @OnCounter(id=[# $[lbl]_lhs_done], eq=[$ $[nodes].size() ])
        )

        trigger $[lbl]_probe_rhs : $[rhs_probe_ty] = \vals -> (
          // Probe lineitem map.
          vals.iterate $[rhs_probe_merge]
        )

        trigger $[lbl]_rhs_peer_barrier : () = \_ -> (
          ( print "Hash join RHS finished probe." ;
            $[peer_next] ;
            ($[lbl]_global_barrier, $[coordinator]) <- ()
          ) @OnCounter(id=[# $[lbl]_rhs_done], eq=[$ $[nodes].size() ])
        )

        trigger $[lbl]_global_barrier : () = \_ -> (
          ( print "Hash join done." ;
            $[next]
          ) @OnCounter(id=[# $[lbl]_join_done], eq=[$ $[nodes].size() ])
        )
     }
}