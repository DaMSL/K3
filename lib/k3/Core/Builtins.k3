include "Annotation/Collection.k3"
include "Annotation/Seq.k3"

// TODO: implement in haskell backend:
// 1. target string 2. split text
//declare splitString : string -> string -> collection { elem: string } @ {Seq}

// TODO: move to String.k3
@:CArgs 2
declare concat : string -> string -> string

// TODO: move to String.k3
@:CArgs 3
declare slice_string : string -> int -> int -> string

// TODO: move to Time.k3
declare now_int : () -> int

///////////////////////
//
// Engine I/O builtins

// openBuiltin: channel id -> builtin channel id -> format -> ()
// builtin channel id is one of: stdin, stdout, stderr
@:CArgs 3
declare openBuiltin : string -> string -> string -> ()

// openFile: channel id -> path -> format -> mode -> ()
@:CArgs 4
declare openFile : string -> string -> string -> string -> ()

// openSocket: channel id -> address -> format -> mode -> ()
@:CArgs 4
declare openSocket : string -> address -> string -> string -> ()

// close: channel id -> ()
declare close : string -> ()

//////////////////////////////////
//
// Builtins on primitives/values

// Uniform random integer generation in [0,n)
declare random : int -> int

// Uniform random real generation in [0,1)
declare randomFraction : () -> real

// Polymorphic hash function
declare hash : forall a . a -> int

////////////////////////
//
// Collection builtins

// Collection enumeration [0,1,..n-1]
@:ErrorFn
declare range : int -> collection {i : int} @ { Seq }

///////////////////////
//
// Value conversion
declare truncate : real -> int
declare real_of_int : int -> real
declare itos : int -> string
declare rtos : real -> string

// Maximum Int value
declare get_max_int : () -> int

// Print to the screen
declare print : string -> ()

// Show a value
declare show : forall a. a -> string

// Error (exceptional state)
@:ErrorFn
declare error : forall a. () -> a


///////////////////////
//
// Engine Termination

// Terminate engine after current message
declare haltEngine : () -> ()

// Terminate engine once queues are empty
declare drainEngine : () -> ()

// Sleep the engine (microseconds)
declare sleep : int -> ()
